// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_057_000)
{
    // 1F3AF 0041;	
    // (🎯) DIRECT HIT	[1376 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3AF, 0x0041 };
    uint32_t const ces[9] = { 0x1376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_001)
{
    // 1F3AF 0062;	
    // (🎯) DIRECT HIT	[1376 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3AF, 0x0062 };
    uint32_t const ces[9] = { 0x1376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_002)
{
    // 1F3B0 0021;	
    // (🎰) SLOT MACHINE	[1377 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B0, 0x0021 };
    uint32_t const ces[9] = { 0x1377, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_003)
{
    // 1F3B0 003F;	
    // (🎰) SLOT MACHINE	[1377 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B0, 0x003F };
    uint32_t const ces[9] = { 0x1377, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_004)
{
    // 1F3B0 0061;	
    // (🎰) SLOT MACHINE	[1377 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B0, 0x0061 };
    uint32_t const ces[9] = { 0x1377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_005)
{
    // 1F3B0 0041;	
    // (🎰) SLOT MACHINE	[1377 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B0, 0x0041 };
    uint32_t const ces[9] = { 0x1377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_006)
{
    // 1F3B0 0062;	
    // (🎰) SLOT MACHINE	[1377 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B0, 0x0062 };
    uint32_t const ces[9] = { 0x1377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_007)
{
    // 1F3B1 0021;	
    // (🎱) BILLIARDS	[1378 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B1, 0x0021 };
    uint32_t const ces[9] = { 0x1378, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_008)
{
    // 1F3B1 003F;	
    // (🎱) BILLIARDS	[1378 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B1, 0x003F };
    uint32_t const ces[9] = { 0x1378, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_009)
{
    // 1F3B1 0061;	
    // (🎱) BILLIARDS	[1378 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B1, 0x0061 };
    uint32_t const ces[9] = { 0x1378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_010)
{
    // 1F3B1 0041;	
    // (🎱) BILLIARDS	[1378 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B1, 0x0041 };
    uint32_t const ces[9] = { 0x1378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_011)
{
    // 1F3B1 0062;	
    // (🎱) BILLIARDS	[1378 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B1, 0x0062 };
    uint32_t const ces[9] = { 0x1378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_012)
{
    // 1F3B2 0021;	
    // (🎲) GAME DIE	[1379 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B2, 0x0021 };
    uint32_t const ces[9] = { 0x1379, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_013)
{
    // 1F3B2 003F;	
    // (🎲) GAME DIE	[1379 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B2, 0x003F };
    uint32_t const ces[9] = { 0x1379, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_014)
{
    // 1F3B2 0061;	
    // (🎲) GAME DIE	[1379 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B2, 0x0061 };
    uint32_t const ces[9] = { 0x1379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_015)
{
    // 1F3B2 0041;	
    // (🎲) GAME DIE	[1379 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B2, 0x0041 };
    uint32_t const ces[9] = { 0x1379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_016)
{
    // 1F3B2 0062;	
    // (🎲) GAME DIE	[1379 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B2, 0x0062 };
    uint32_t const ces[9] = { 0x1379, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_017)
{
    // 1F3B3 0021;	
    // (🎳) BOWLING	[137A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B3, 0x0021 };
    uint32_t const ces[9] = { 0x137A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_018)
{
    // 1F3B3 003F;	
    // (🎳) BOWLING	[137A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B3, 0x003F };
    uint32_t const ces[9] = { 0x137A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_019)
{
    // 1F3B3 0061;	
    // (🎳) BOWLING	[137A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B3, 0x0061 };
    uint32_t const ces[9] = { 0x137A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_020)
{
    // 1F3B3 0041;	
    // (🎳) BOWLING	[137A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B3, 0x0041 };
    uint32_t const ces[9] = { 0x137A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_021)
{
    // 1F3B3 0062;	
    // (🎳) BOWLING	[137A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B3, 0x0062 };
    uint32_t const ces[9] = { 0x137A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_022)
{
    // 1F3B4 0021;	
    // (🎴) FLOWER PLAYING CARDS	[137B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B4, 0x0021 };
    uint32_t const ces[9] = { 0x137B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_023)
{
    // 1F3B4 003F;	
    // (🎴) FLOWER PLAYING CARDS	[137B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B4, 0x003F };
    uint32_t const ces[9] = { 0x137B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_024)
{
    // 1F3B4 0061;	
    // (🎴) FLOWER PLAYING CARDS	[137B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B4, 0x0061 };
    uint32_t const ces[9] = { 0x137B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_025)
{
    // 1F3B4 0041;	
    // (🎴) FLOWER PLAYING CARDS	[137B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B4, 0x0041 };
    uint32_t const ces[9] = { 0x137B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_026)
{
    // 1F3B4 0062;	
    // (🎴) FLOWER PLAYING CARDS	[137B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B4, 0x0062 };
    uint32_t const ces[9] = { 0x137B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_027)
{
    // 1F3B5 0021;	
    // (🎵) MUSICAL NOTE	[137C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B5, 0x0021 };
    uint32_t const ces[9] = { 0x137C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_028)
{
    // 1F3B5 003F;	
    // (🎵) MUSICAL NOTE	[137C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B5, 0x003F };
    uint32_t const ces[9] = { 0x137C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_029)
{
    // 1F3B5 0061;	
    // (🎵) MUSICAL NOTE	[137C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B5, 0x0061 };
    uint32_t const ces[9] = { 0x137C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_030)
{
    // 1F3B5 0041;	
    // (🎵) MUSICAL NOTE	[137C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B5, 0x0041 };
    uint32_t const ces[9] = { 0x137C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_031)
{
    // 1F3B5 0062;	
    // (🎵) MUSICAL NOTE	[137C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B5, 0x0062 };
    uint32_t const ces[9] = { 0x137C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_032)
{
    // 1F3B6 0021;	
    // (🎶) MULTIPLE MUSICAL NOTES	[137D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B6, 0x0021 };
    uint32_t const ces[9] = { 0x137D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_033)
{
    // 1F3B6 003F;	
    // (🎶) MULTIPLE MUSICAL NOTES	[137D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B6, 0x003F };
    uint32_t const ces[9] = { 0x137D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_034)
{
    // 1F3B6 0061;	
    // (🎶) MULTIPLE MUSICAL NOTES	[137D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B6, 0x0061 };
    uint32_t const ces[9] = { 0x137D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_035)
{
    // 1F3B6 0041;	
    // (🎶) MULTIPLE MUSICAL NOTES	[137D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B6, 0x0041 };
    uint32_t const ces[9] = { 0x137D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_036)
{
    // 1F3B6 0062;	
    // (🎶) MULTIPLE MUSICAL NOTES	[137D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B6, 0x0062 };
    uint32_t const ces[9] = { 0x137D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_037)
{
    // 1F3B7 0021;	
    // (🎷) SAXOPHONE	[137E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B7, 0x0021 };
    uint32_t const ces[9] = { 0x137E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_038)
{
    // 1F3B7 003F;	
    // (🎷) SAXOPHONE	[137E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B7, 0x003F };
    uint32_t const ces[9] = { 0x137E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_039)
{
    // 1F3B7 0061;	
    // (🎷) SAXOPHONE	[137E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B7, 0x0061 };
    uint32_t const ces[9] = { 0x137E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_040)
{
    // 1F3B7 0041;	
    // (🎷) SAXOPHONE	[137E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B7, 0x0041 };
    uint32_t const ces[9] = { 0x137E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_041)
{
    // 1F3B7 0062;	
    // (🎷) SAXOPHONE	[137E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B7, 0x0062 };
    uint32_t const ces[9] = { 0x137E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_042)
{
    // 1F3B8 0021;	
    // (🎸) GUITAR	[137F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B8, 0x0021 };
    uint32_t const ces[9] = { 0x137F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_043)
{
    // 1F3B8 003F;	
    // (🎸) GUITAR	[137F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B8, 0x003F };
    uint32_t const ces[9] = { 0x137F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_044)
{
    // 1F3B8 0061;	
    // (🎸) GUITAR	[137F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B8, 0x0061 };
    uint32_t const ces[9] = { 0x137F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_045)
{
    // 1F3B8 0041;	
    // (🎸) GUITAR	[137F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B8, 0x0041 };
    uint32_t const ces[9] = { 0x137F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_046)
{
    // 1F3B8 0062;	
    // (🎸) GUITAR	[137F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B8, 0x0062 };
    uint32_t const ces[9] = { 0x137F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_047)
{
    // 1F3B9 0021;	
    // (🎹) MUSICAL KEYBOARD	[1380 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B9, 0x0021 };
    uint32_t const ces[9] = { 0x1380, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_048)
{
    // 1F3B9 003F;	
    // (🎹) MUSICAL KEYBOARD	[1380 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B9, 0x003F };
    uint32_t const ces[9] = { 0x1380, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_049)
{
    // 1F3B9 0061;	
    // (🎹) MUSICAL KEYBOARD	[1380 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B9, 0x0061 };
    uint32_t const ces[9] = { 0x1380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_050)
{
    // 1F3B9 0041;	
    // (🎹) MUSICAL KEYBOARD	[1380 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3B9, 0x0041 };
    uint32_t const ces[9] = { 0x1380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_051)
{
    // 1F3B9 0062;	
    // (🎹) MUSICAL KEYBOARD	[1380 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3B9, 0x0062 };
    uint32_t const ces[9] = { 0x1380, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_052)
{
    // 1F3BA 0021;	
    // (🎺) TRUMPET	[1381 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BA, 0x0021 };
    uint32_t const ces[9] = { 0x1381, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_053)
{
    // 1F3BA 003F;	
    // (🎺) TRUMPET	[1381 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BA, 0x003F };
    uint32_t const ces[9] = { 0x1381, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_054)
{
    // 1F3BA 0061;	
    // (🎺) TRUMPET	[1381 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BA, 0x0061 };
    uint32_t const ces[9] = { 0x1381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_055)
{
    // 1F3BA 0041;	
    // (🎺) TRUMPET	[1381 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3BA, 0x0041 };
    uint32_t const ces[9] = { 0x1381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_056)
{
    // 1F3BA 0062;	
    // (🎺) TRUMPET	[1381 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BA, 0x0062 };
    uint32_t const ces[9] = { 0x1381, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_057)
{
    // 1F3BB 0021;	
    // (🎻) VIOLIN	[1382 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BB, 0x0021 };
    uint32_t const ces[9] = { 0x1382, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_058)
{
    // 1F3BB 003F;	
    // (🎻) VIOLIN	[1382 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BB, 0x003F };
    uint32_t const ces[9] = { 0x1382, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_059)
{
    // 1F3BB 0061;	
    // (🎻) VIOLIN	[1382 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BB, 0x0061 };
    uint32_t const ces[9] = { 0x1382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_060)
{
    // 1F3BB 0041;	
    // (🎻) VIOLIN	[1382 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3BB, 0x0041 };
    uint32_t const ces[9] = { 0x1382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_061)
{
    // 1F3BB 0062;	
    // (🎻) VIOLIN	[1382 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BB, 0x0062 };
    uint32_t const ces[9] = { 0x1382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_062)
{
    // 1F3BC 0021;	
    // (🎼) MUSICAL SCORE	[1383 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BC, 0x0021 };
    uint32_t const ces[9] = { 0x1383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_063)
{
    // 1F3BC 003F;	
    // (🎼) MUSICAL SCORE	[1383 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BC, 0x003F };
    uint32_t const ces[9] = { 0x1383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_064)
{
    // 1F3BC 0061;	
    // (🎼) MUSICAL SCORE	[1383 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BC, 0x0061 };
    uint32_t const ces[9] = { 0x1383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_065)
{
    // 1F3BC 0041;	
    // (🎼) MUSICAL SCORE	[1383 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3BC, 0x0041 };
    uint32_t const ces[9] = { 0x1383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_066)
{
    // 1F3BC 0062;	
    // (🎼) MUSICAL SCORE	[1383 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BC, 0x0062 };
    uint32_t const ces[9] = { 0x1383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_067)
{
    // 1F3BD 0021;	
    // (🎽) RUNNING SHIRT WITH SASH	[1384 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BD, 0x0021 };
    uint32_t const ces[9] = { 0x1384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_068)
{
    // 1F3BD 003F;	
    // (🎽) RUNNING SHIRT WITH SASH	[1384 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BD, 0x003F };
    uint32_t const ces[9] = { 0x1384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_069)
{
    // 1F3BD 0061;	
    // (🎽) RUNNING SHIRT WITH SASH	[1384 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BD, 0x0061 };
    uint32_t const ces[9] = { 0x1384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_070)
{
    // 1F3BD 0041;	
    // (🎽) RUNNING SHIRT WITH SASH	[1384 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3BD, 0x0041 };
    uint32_t const ces[9] = { 0x1384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_071)
{
    // 1F3BD 0062;	
    // (🎽) RUNNING SHIRT WITH SASH	[1384 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BD, 0x0062 };
    uint32_t const ces[9] = { 0x1384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_072)
{
    // 1F3BE 0021;	
    // (🎾) TENNIS RACQUET AND BALL	[1385 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BE, 0x0021 };
    uint32_t const ces[9] = { 0x1385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_073)
{
    // 1F3BE 003F;	
    // (🎾) TENNIS RACQUET AND BALL	[1385 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BE, 0x003F };
    uint32_t const ces[9] = { 0x1385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_074)
{
    // 1F3BE 0061;	
    // (🎾) TENNIS RACQUET AND BALL	[1385 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BE, 0x0061 };
    uint32_t const ces[9] = { 0x1385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_075)
{
    // 1F3BE 0041;	
    // (🎾) TENNIS RACQUET AND BALL	[1385 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3BE, 0x0041 };
    uint32_t const ces[9] = { 0x1385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_076)
{
    // 1F3BE 0062;	
    // (🎾) TENNIS RACQUET AND BALL	[1385 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BE, 0x0062 };
    uint32_t const ces[9] = { 0x1385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_077)
{
    // 1F3BF 0021;	
    // (🎿) SKI AND SKI BOOT	[1386 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BF, 0x0021 };
    uint32_t const ces[9] = { 0x1386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_078)
{
    // 1F3BF 003F;	
    // (🎿) SKI AND SKI BOOT	[1386 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BF, 0x003F };
    uint32_t const ces[9] = { 0x1386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_079)
{
    // 1F3BF 0061;	
    // (🎿) SKI AND SKI BOOT	[1386 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BF, 0x0061 };
    uint32_t const ces[9] = { 0x1386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_080)
{
    // 1F3BF 0041;	
    // (🎿) SKI AND SKI BOOT	[1386 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3BF, 0x0041 };
    uint32_t const ces[9] = { 0x1386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_081)
{
    // 1F3BF 0062;	
    // (🎿) SKI AND SKI BOOT	[1386 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3BF, 0x0062 };
    uint32_t const ces[9] = { 0x1386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_082)
{
    // 1F3C0 0021;	
    // (🏀) BASKETBALL AND HOOP	[1387 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C0, 0x0021 };
    uint32_t const ces[9] = { 0x1387, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_083)
{
    // 1F3C0 003F;	
    // (🏀) BASKETBALL AND HOOP	[1387 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C0, 0x003F };
    uint32_t const ces[9] = { 0x1387, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_084)
{
    // 1F3C0 0061;	
    // (🏀) BASKETBALL AND HOOP	[1387 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C0, 0x0061 };
    uint32_t const ces[9] = { 0x1387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_085)
{
    // 1F3C0 0041;	
    // (🏀) BASKETBALL AND HOOP	[1387 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C0, 0x0041 };
    uint32_t const ces[9] = { 0x1387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_086)
{
    // 1F3C0 0062;	
    // (🏀) BASKETBALL AND HOOP	[1387 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C0, 0x0062 };
    uint32_t const ces[9] = { 0x1387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_087)
{
    // 1F3C1 0021;	
    // (🏁) CHEQUERED FLAG	[1388 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C1, 0x0021 };
    uint32_t const ces[9] = { 0x1388, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_088)
{
    // 1F3C1 003F;	
    // (🏁) CHEQUERED FLAG	[1388 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C1, 0x003F };
    uint32_t const ces[9] = { 0x1388, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_089)
{
    // 1F3C1 0061;	
    // (🏁) CHEQUERED FLAG	[1388 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C1, 0x0061 };
    uint32_t const ces[9] = { 0x1388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_090)
{
    // 1F3C1 0041;	
    // (🏁) CHEQUERED FLAG	[1388 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C1, 0x0041 };
    uint32_t const ces[9] = { 0x1388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_091)
{
    // 1F3C1 0062;	
    // (🏁) CHEQUERED FLAG	[1388 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C1, 0x0062 };
    uint32_t const ces[9] = { 0x1388, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_092)
{
    // 1F3C2 0021;	
    // (🏂) SNOWBOARDER	[1389 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C2, 0x0021 };
    uint32_t const ces[9] = { 0x1389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_093)
{
    // 1F3C2 003F;	
    // (🏂) SNOWBOARDER	[1389 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C2, 0x003F };
    uint32_t const ces[9] = { 0x1389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_094)
{
    // 1F3C2 0061;	
    // (🏂) SNOWBOARDER	[1389 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C2, 0x0061 };
    uint32_t const ces[9] = { 0x1389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_095)
{
    // 1F3C2 0041;	
    // (🏂) SNOWBOARDER	[1389 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C2, 0x0041 };
    uint32_t const ces[9] = { 0x1389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_096)
{
    // 1F3C2 0062;	
    // (🏂) SNOWBOARDER	[1389 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C2, 0x0062 };
    uint32_t const ces[9] = { 0x1389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_097)
{
    // 1F3C3 0021;	
    // (🏃) RUNNER	[138A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C3, 0x0021 };
    uint32_t const ces[9] = { 0x138A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_098)
{
    // 1F3C3 003F;	
    // (🏃) RUNNER	[138A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C3, 0x003F };
    uint32_t const ces[9] = { 0x138A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_099)
{
    // 1F3C3 0061;	
    // (🏃) RUNNER	[138A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C3, 0x0061 };
    uint32_t const ces[9] = { 0x138A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_100)
{
    // 1F3C3 0041;	
    // (🏃) RUNNER	[138A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C3, 0x0041 };
    uint32_t const ces[9] = { 0x138A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_101)
{
    // 1F3C3 0062;	
    // (🏃) RUNNER	[138A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C3, 0x0062 };
    uint32_t const ces[9] = { 0x138A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_102)
{
    // 1F3C4 0021;	
    // (🏄) SURFER	[138B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C4, 0x0021 };
    uint32_t const ces[9] = { 0x138B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_103)
{
    // 1F3C4 003F;	
    // (🏄) SURFER	[138B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C4, 0x003F };
    uint32_t const ces[9] = { 0x138B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_104)
{
    // 1F3C4 0061;	
    // (🏄) SURFER	[138B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C4, 0x0061 };
    uint32_t const ces[9] = { 0x138B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_105)
{
    // 1F3C4 0041;	
    // (🏄) SURFER	[138B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C4, 0x0041 };
    uint32_t const ces[9] = { 0x138B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_106)
{
    // 1F3C4 0062;	
    // (🏄) SURFER	[138B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C4, 0x0062 };
    uint32_t const ces[9] = { 0x138B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_107)
{
    // 1F3C5 0021;	
    // (🏅) SPORTS MEDAL	[138C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C5, 0x0021 };
    uint32_t const ces[9] = { 0x138C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_108)
{
    // 1F3C5 003F;	
    // (🏅) SPORTS MEDAL	[138C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C5, 0x003F };
    uint32_t const ces[9] = { 0x138C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_109)
{
    // 1F3C5 0061;	
    // (🏅) SPORTS MEDAL	[138C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C5, 0x0061 };
    uint32_t const ces[9] = { 0x138C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_110)
{
    // 1F3C5 0041;	
    // (🏅) SPORTS MEDAL	[138C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C5, 0x0041 };
    uint32_t const ces[9] = { 0x138C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_111)
{
    // 1F3C5 0062;	
    // (🏅) SPORTS MEDAL	[138C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C5, 0x0062 };
    uint32_t const ces[9] = { 0x138C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_112)
{
    // 1F3C6 0021;	
    // (🏆) TROPHY	[138D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C6, 0x0021 };
    uint32_t const ces[9] = { 0x138D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_113)
{
    // 1F3C6 003F;	
    // (🏆) TROPHY	[138D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C6, 0x003F };
    uint32_t const ces[9] = { 0x138D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_114)
{
    // 1F3C6 0061;	
    // (🏆) TROPHY	[138D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C6, 0x0061 };
    uint32_t const ces[9] = { 0x138D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_115)
{
    // 1F3C6 0041;	
    // (🏆) TROPHY	[138D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C6, 0x0041 };
    uint32_t const ces[9] = { 0x138D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_116)
{
    // 1F3C6 0062;	
    // (🏆) TROPHY	[138D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C6, 0x0062 };
    uint32_t const ces[9] = { 0x138D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_117)
{
    // 1F3C7 0021;	
    // (🏇) HORSE RACING	[138E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C7, 0x0021 };
    uint32_t const ces[9] = { 0x138E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_118)
{
    // 1F3C7 003F;	
    // (🏇) HORSE RACING	[138E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C7, 0x003F };
    uint32_t const ces[9] = { 0x138E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_119)
{
    // 1F3C7 0061;	
    // (🏇) HORSE RACING	[138E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C7, 0x0061 };
    uint32_t const ces[9] = { 0x138E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_120)
{
    // 1F3C7 0041;	
    // (🏇) HORSE RACING	[138E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C7, 0x0041 };
    uint32_t const ces[9] = { 0x138E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_121)
{
    // 1F3C7 0062;	
    // (🏇) HORSE RACING	[138E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C7, 0x0062 };
    uint32_t const ces[9] = { 0x138E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_122)
{
    // 1F3C8 0021;	
    // (🏈) AMERICAN FOOTBALL	[138F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C8, 0x0021 };
    uint32_t const ces[9] = { 0x138F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_123)
{
    // 1F3C8 003F;	
    // (🏈) AMERICAN FOOTBALL	[138F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C8, 0x003F };
    uint32_t const ces[9] = { 0x138F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_124)
{
    // 1F3C8 0061;	
    // (🏈) AMERICAN FOOTBALL	[138F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C8, 0x0061 };
    uint32_t const ces[9] = { 0x138F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_125)
{
    // 1F3C8 0041;	
    // (🏈) AMERICAN FOOTBALL	[138F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C8, 0x0041 };
    uint32_t const ces[9] = { 0x138F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_126)
{
    // 1F3C8 0062;	
    // (🏈) AMERICAN FOOTBALL	[138F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C8, 0x0062 };
    uint32_t const ces[9] = { 0x138F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_127)
{
    // 1F3C9 0021;	
    // (🏉) RUGBY FOOTBALL	[1390 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C9, 0x0021 };
    uint32_t const ces[9] = { 0x1390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_128)
{
    // 1F3C9 003F;	
    // (🏉) RUGBY FOOTBALL	[1390 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C9, 0x003F };
    uint32_t const ces[9] = { 0x1390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_129)
{
    // 1F3C9 0061;	
    // (🏉) RUGBY FOOTBALL	[1390 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C9, 0x0061 };
    uint32_t const ces[9] = { 0x1390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_130)
{
    // 1F3C9 0041;	
    // (🏉) RUGBY FOOTBALL	[1390 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3C9, 0x0041 };
    uint32_t const ces[9] = { 0x1390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_131)
{
    // 1F3C9 0062;	
    // (🏉) RUGBY FOOTBALL	[1390 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3C9, 0x0062 };
    uint32_t const ces[9] = { 0x1390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_132)
{
    // 1F3CA 0021;	
    // (🏊) SWIMMER	[1391 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CA, 0x0021 };
    uint32_t const ces[9] = { 0x1391, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_133)
{
    // 1F3CA 003F;	
    // (🏊) SWIMMER	[1391 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CA, 0x003F };
    uint32_t const ces[9] = { 0x1391, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_134)
{
    // 1F3CA 0061;	
    // (🏊) SWIMMER	[1391 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CA, 0x0061 };
    uint32_t const ces[9] = { 0x1391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_135)
{
    // 1F3CA 0041;	
    // (🏊) SWIMMER	[1391 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3CA, 0x0041 };
    uint32_t const ces[9] = { 0x1391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_136)
{
    // 1F3CA 0062;	
    // (🏊) SWIMMER	[1391 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CA, 0x0062 };
    uint32_t const ces[9] = { 0x1391, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_137)
{
    // 1F3CB 0021;	
    // (🏋) WEIGHT LIFTER	[1392 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CB, 0x0021 };
    uint32_t const ces[9] = { 0x1392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_138)
{
    // 1F3CB 003F;	
    // (🏋) WEIGHT LIFTER	[1392 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CB, 0x003F };
    uint32_t const ces[9] = { 0x1392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_139)
{
    // 1F3CB 0061;	
    // (🏋) WEIGHT LIFTER	[1392 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CB, 0x0061 };
    uint32_t const ces[9] = { 0x1392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_140)
{
    // 1F3CB 0041;	
    // (🏋) WEIGHT LIFTER	[1392 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3CB, 0x0041 };
    uint32_t const ces[9] = { 0x1392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_141)
{
    // 1F3CB 0062;	
    // (🏋) WEIGHT LIFTER	[1392 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CB, 0x0062 };
    uint32_t const ces[9] = { 0x1392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_142)
{
    // 1F3CC 0021;	
    // (🏌) GOLFER	[1393 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CC, 0x0021 };
    uint32_t const ces[9] = { 0x1393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_143)
{
    // 1F3CC 003F;	
    // (🏌) GOLFER	[1393 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CC, 0x003F };
    uint32_t const ces[9] = { 0x1393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_144)
{
    // 1F3CC 0061;	
    // (🏌) GOLFER	[1393 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CC, 0x0061 };
    uint32_t const ces[9] = { 0x1393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_145)
{
    // 1F3CC 0041;	
    // (🏌) GOLFER	[1393 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3CC, 0x0041 };
    uint32_t const ces[9] = { 0x1393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_146)
{
    // 1F3CC 0062;	
    // (🏌) GOLFER	[1393 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CC, 0x0062 };
    uint32_t const ces[9] = { 0x1393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_147)
{
    // 1F3CD 0021;	
    // (🏍) RACING MOTORCYCLE	[1394 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CD, 0x0021 };
    uint32_t const ces[9] = { 0x1394, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_148)
{
    // 1F3CD 003F;	
    // (🏍) RACING MOTORCYCLE	[1394 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CD, 0x003F };
    uint32_t const ces[9] = { 0x1394, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_149)
{
    // 1F3CD 0061;	
    // (🏍) RACING MOTORCYCLE	[1394 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CD, 0x0061 };
    uint32_t const ces[9] = { 0x1394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_150)
{
    // 1F3CD 0041;	
    // (🏍) RACING MOTORCYCLE	[1394 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3CD, 0x0041 };
    uint32_t const ces[9] = { 0x1394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_151)
{
    // 1F3CD 0062;	
    // (🏍) RACING MOTORCYCLE	[1394 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CD, 0x0062 };
    uint32_t const ces[9] = { 0x1394, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_152)
{
    // 1F3CE 0021;	
    // (🏎) RACING CAR	[1395 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CE, 0x0021 };
    uint32_t const ces[9] = { 0x1395, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_153)
{
    // 1F3CE 003F;	
    // (🏎) RACING CAR	[1395 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CE, 0x003F };
    uint32_t const ces[9] = { 0x1395, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_154)
{
    // 1F3CE 0061;	
    // (🏎) RACING CAR	[1395 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CE, 0x0061 };
    uint32_t const ces[9] = { 0x1395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_155)
{
    // 1F3CE 0041;	
    // (🏎) RACING CAR	[1395 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3CE, 0x0041 };
    uint32_t const ces[9] = { 0x1395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_156)
{
    // 1F3CE 0062;	
    // (🏎) RACING CAR	[1395 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CE, 0x0062 };
    uint32_t const ces[9] = { 0x1395, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_157)
{
    // 1F3CF 0021;	
    // (🏏) CRICKET BAT AND BALL	[1396 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CF, 0x0021 };
    uint32_t const ces[9] = { 0x1396, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_158)
{
    // 1F3CF 003F;	
    // (🏏) CRICKET BAT AND BALL	[1396 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CF, 0x003F };
    uint32_t const ces[9] = { 0x1396, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_159)
{
    // 1F3CF 0061;	
    // (🏏) CRICKET BAT AND BALL	[1396 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CF, 0x0061 };
    uint32_t const ces[9] = { 0x1396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_160)
{
    // 1F3CF 0041;	
    // (🏏) CRICKET BAT AND BALL	[1396 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3CF, 0x0041 };
    uint32_t const ces[9] = { 0x1396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_161)
{
    // 1F3CF 0062;	
    // (🏏) CRICKET BAT AND BALL	[1396 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3CF, 0x0062 };
    uint32_t const ces[9] = { 0x1396, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_162)
{
    // 1F3D0 0021;	
    // (🏐) VOLLEYBALL	[1397 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D0, 0x0021 };
    uint32_t const ces[9] = { 0x1397, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_163)
{
    // 1F3D0 003F;	
    // (🏐) VOLLEYBALL	[1397 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D0, 0x003F };
    uint32_t const ces[9] = { 0x1397, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_164)
{
    // 1F3D0 0061;	
    // (🏐) VOLLEYBALL	[1397 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D0, 0x0061 };
    uint32_t const ces[9] = { 0x1397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_165)
{
    // 1F3D0 0041;	
    // (🏐) VOLLEYBALL	[1397 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D0, 0x0041 };
    uint32_t const ces[9] = { 0x1397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_166)
{
    // 1F3D0 0062;	
    // (🏐) VOLLEYBALL	[1397 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D0, 0x0062 };
    uint32_t const ces[9] = { 0x1397, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_167)
{
    // 1F3D1 0021;	
    // (🏑) FIELD HOCKEY STICK AND BALL	[1398 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D1, 0x0021 };
    uint32_t const ces[9] = { 0x1398, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_168)
{
    // 1F3D1 003F;	
    // (🏑) FIELD HOCKEY STICK AND BALL	[1398 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D1, 0x003F };
    uint32_t const ces[9] = { 0x1398, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_169)
{
    // 1F3D1 0061;	
    // (🏑) FIELD HOCKEY STICK AND BALL	[1398 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D1, 0x0061 };
    uint32_t const ces[9] = { 0x1398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_170)
{
    // 1F3D1 0041;	
    // (🏑) FIELD HOCKEY STICK AND BALL	[1398 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D1, 0x0041 };
    uint32_t const ces[9] = { 0x1398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_171)
{
    // 1F3D1 0062;	
    // (🏑) FIELD HOCKEY STICK AND BALL	[1398 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D1, 0x0062 };
    uint32_t const ces[9] = { 0x1398, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_172)
{
    // 1F3D2 0021;	
    // (🏒) ICE HOCKEY STICK AND PUCK	[1399 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D2, 0x0021 };
    uint32_t const ces[9] = { 0x1399, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_173)
{
    // 1F3D2 003F;	
    // (🏒) ICE HOCKEY STICK AND PUCK	[1399 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D2, 0x003F };
    uint32_t const ces[9] = { 0x1399, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_174)
{
    // 1F3D2 0061;	
    // (🏒) ICE HOCKEY STICK AND PUCK	[1399 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D2, 0x0061 };
    uint32_t const ces[9] = { 0x1399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_175)
{
    // 1F3D2 0041;	
    // (🏒) ICE HOCKEY STICK AND PUCK	[1399 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D2, 0x0041 };
    uint32_t const ces[9] = { 0x1399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_176)
{
    // 1F3D2 0062;	
    // (🏒) ICE HOCKEY STICK AND PUCK	[1399 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D2, 0x0062 };
    uint32_t const ces[9] = { 0x1399, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_177)
{
    // 1F3D3 0021;	
    // (🏓) TABLE TENNIS PADDLE AND BALL	[139A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D3, 0x0021 };
    uint32_t const ces[9] = { 0x139A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_178)
{
    // 1F3D3 003F;	
    // (🏓) TABLE TENNIS PADDLE AND BALL	[139A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D3, 0x003F };
    uint32_t const ces[9] = { 0x139A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_179)
{
    // 1F3D3 0061;	
    // (🏓) TABLE TENNIS PADDLE AND BALL	[139A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D3, 0x0061 };
    uint32_t const ces[9] = { 0x139A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_180)
{
    // 1F3D3 0041;	
    // (🏓) TABLE TENNIS PADDLE AND BALL	[139A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D3, 0x0041 };
    uint32_t const ces[9] = { 0x139A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_181)
{
    // 1F3D3 0062;	
    // (🏓) TABLE TENNIS PADDLE AND BALL	[139A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D3, 0x0062 };
    uint32_t const ces[9] = { 0x139A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_182)
{
    // 1F3D4 0021;	
    // (🏔) SNOW CAPPED MOUNTAIN	[139B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D4, 0x0021 };
    uint32_t const ces[9] = { 0x139B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_183)
{
    // 1F3D4 003F;	
    // (🏔) SNOW CAPPED MOUNTAIN	[139B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D4, 0x003F };
    uint32_t const ces[9] = { 0x139B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_184)
{
    // 1F3D4 0061;	
    // (🏔) SNOW CAPPED MOUNTAIN	[139B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D4, 0x0061 };
    uint32_t const ces[9] = { 0x139B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_185)
{
    // 1F3D4 0041;	
    // (🏔) SNOW CAPPED MOUNTAIN	[139B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D4, 0x0041 };
    uint32_t const ces[9] = { 0x139B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_186)
{
    // 1F3D4 0062;	
    // (🏔) SNOW CAPPED MOUNTAIN	[139B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D4, 0x0062 };
    uint32_t const ces[9] = { 0x139B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_187)
{
    // 1F3D5 0021;	
    // (🏕) CAMPING	[139C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D5, 0x0021 };
    uint32_t const ces[9] = { 0x139C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_188)
{
    // 1F3D5 003F;	
    // (🏕) CAMPING	[139C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D5, 0x003F };
    uint32_t const ces[9] = { 0x139C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_189)
{
    // 1F3D5 0061;	
    // (🏕) CAMPING	[139C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D5, 0x0061 };
    uint32_t const ces[9] = { 0x139C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_190)
{
    // 1F3D5 0041;	
    // (🏕) CAMPING	[139C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D5, 0x0041 };
    uint32_t const ces[9] = { 0x139C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_191)
{
    // 1F3D5 0062;	
    // (🏕) CAMPING	[139C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D5, 0x0062 };
    uint32_t const ces[9] = { 0x139C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_192)
{
    // 1F3D6 0021;	
    // (🏖) BEACH WITH UMBRELLA	[139D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D6, 0x0021 };
    uint32_t const ces[9] = { 0x139D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_193)
{
    // 1F3D6 003F;	
    // (🏖) BEACH WITH UMBRELLA	[139D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D6, 0x003F };
    uint32_t const ces[9] = { 0x139D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_194)
{
    // 1F3D6 0061;	
    // (🏖) BEACH WITH UMBRELLA	[139D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D6, 0x0061 };
    uint32_t const ces[9] = { 0x139D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_195)
{
    // 1F3D6 0041;	
    // (🏖) BEACH WITH UMBRELLA	[139D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D6, 0x0041 };
    uint32_t const ces[9] = { 0x139D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_196)
{
    // 1F3D6 0062;	
    // (🏖) BEACH WITH UMBRELLA	[139D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D6, 0x0062 };
    uint32_t const ces[9] = { 0x139D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_197)
{
    // 1F3D7 0021;	
    // (🏗) BUILDING CONSTRUCTION	[139E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D7, 0x0021 };
    uint32_t const ces[9] = { 0x139E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_198)
{
    // 1F3D7 003F;	
    // (🏗) BUILDING CONSTRUCTION	[139E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D7, 0x003F };
    uint32_t const ces[9] = { 0x139E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_199)
{
    // 1F3D7 0061;	
    // (🏗) BUILDING CONSTRUCTION	[139E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D7, 0x0061 };
    uint32_t const ces[9] = { 0x139E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_200)
{
    // 1F3D7 0041;	
    // (🏗) BUILDING CONSTRUCTION	[139E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D7, 0x0041 };
    uint32_t const ces[9] = { 0x139E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_201)
{
    // 1F3D7 0062;	
    // (🏗) BUILDING CONSTRUCTION	[139E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D7, 0x0062 };
    uint32_t const ces[9] = { 0x139E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_202)
{
    // 1F3D8 0021;	
    // (🏘) HOUSE BUILDINGS	[139F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D8, 0x0021 };
    uint32_t const ces[9] = { 0x139F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_203)
{
    // 1F3D8 003F;	
    // (🏘) HOUSE BUILDINGS	[139F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D8, 0x003F };
    uint32_t const ces[9] = { 0x139F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_204)
{
    // 1F3D8 0061;	
    // (🏘) HOUSE BUILDINGS	[139F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D8, 0x0061 };
    uint32_t const ces[9] = { 0x139F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_205)
{
    // 1F3D8 0041;	
    // (🏘) HOUSE BUILDINGS	[139F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D8, 0x0041 };
    uint32_t const ces[9] = { 0x139F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_206)
{
    // 1F3D8 0062;	
    // (🏘) HOUSE BUILDINGS	[139F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D8, 0x0062 };
    uint32_t const ces[9] = { 0x139F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_207)
{
    // 1F3D9 0021;	
    // (🏙) CITYSCAPE	[13A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D9, 0x0021 };
    uint32_t const ces[9] = { 0x13A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_208)
{
    // 1F3D9 003F;	
    // (🏙) CITYSCAPE	[13A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D9, 0x003F };
    uint32_t const ces[9] = { 0x13A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_209)
{
    // 1F3D9 0061;	
    // (🏙) CITYSCAPE	[13A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D9, 0x0061 };
    uint32_t const ces[9] = { 0x13A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_210)
{
    // 1F3D9 0041;	
    // (🏙) CITYSCAPE	[13A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3D9, 0x0041 };
    uint32_t const ces[9] = { 0x13A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_211)
{
    // 1F3D9 0062;	
    // (🏙) CITYSCAPE	[13A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3D9, 0x0062 };
    uint32_t const ces[9] = { 0x13A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_212)
{
    // 1F3DA 0021;	
    // (🏚) DERELICT HOUSE BUILDING	[13A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DA, 0x0021 };
    uint32_t const ces[9] = { 0x13A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_213)
{
    // 1F3DA 003F;	
    // (🏚) DERELICT HOUSE BUILDING	[13A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DA, 0x003F };
    uint32_t const ces[9] = { 0x13A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_214)
{
    // 1F3DA 0061;	
    // (🏚) DERELICT HOUSE BUILDING	[13A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DA, 0x0061 };
    uint32_t const ces[9] = { 0x13A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_215)
{
    // 1F3DA 0041;	
    // (🏚) DERELICT HOUSE BUILDING	[13A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3DA, 0x0041 };
    uint32_t const ces[9] = { 0x13A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_216)
{
    // 1F3DA 0062;	
    // (🏚) DERELICT HOUSE BUILDING	[13A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DA, 0x0062 };
    uint32_t const ces[9] = { 0x13A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_217)
{
    // 1F3DB 0021;	
    // (🏛) CLASSICAL BUILDING	[13A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DB, 0x0021 };
    uint32_t const ces[9] = { 0x13A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_218)
{
    // 1F3DB 003F;	
    // (🏛) CLASSICAL BUILDING	[13A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DB, 0x003F };
    uint32_t const ces[9] = { 0x13A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_219)
{
    // 1F3DB 0061;	
    // (🏛) CLASSICAL BUILDING	[13A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DB, 0x0061 };
    uint32_t const ces[9] = { 0x13A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_220)
{
    // 1F3DB 0041;	
    // (🏛) CLASSICAL BUILDING	[13A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3DB, 0x0041 };
    uint32_t const ces[9] = { 0x13A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_221)
{
    // 1F3DB 0062;	
    // (🏛) CLASSICAL BUILDING	[13A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DB, 0x0062 };
    uint32_t const ces[9] = { 0x13A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_222)
{
    // 1F3DC 0021;	
    // (🏜) DESERT	[13A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DC, 0x0021 };
    uint32_t const ces[9] = { 0x13A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_223)
{
    // 1F3DC 003F;	
    // (🏜) DESERT	[13A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DC, 0x003F };
    uint32_t const ces[9] = { 0x13A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_224)
{
    // 1F3DC 0061;	
    // (🏜) DESERT	[13A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DC, 0x0061 };
    uint32_t const ces[9] = { 0x13A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_225)
{
    // 1F3DC 0041;	
    // (🏜) DESERT	[13A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3DC, 0x0041 };
    uint32_t const ces[9] = { 0x13A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_226)
{
    // 1F3DC 0062;	
    // (🏜) DESERT	[13A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DC, 0x0062 };
    uint32_t const ces[9] = { 0x13A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_227)
{
    // 1F3DD 0021;	
    // (🏝) DESERT ISLAND	[13A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DD, 0x0021 };
    uint32_t const ces[9] = { 0x13A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_228)
{
    // 1F3DD 003F;	
    // (🏝) DESERT ISLAND	[13A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DD, 0x003F };
    uint32_t const ces[9] = { 0x13A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_229)
{
    // 1F3DD 0061;	
    // (🏝) DESERT ISLAND	[13A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DD, 0x0061 };
    uint32_t const ces[9] = { 0x13A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_230)
{
    // 1F3DD 0041;	
    // (🏝) DESERT ISLAND	[13A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3DD, 0x0041 };
    uint32_t const ces[9] = { 0x13A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_231)
{
    // 1F3DD 0062;	
    // (🏝) DESERT ISLAND	[13A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DD, 0x0062 };
    uint32_t const ces[9] = { 0x13A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_232)
{
    // 1F3DE 0021;	
    // (🏞) NATIONAL PARK	[13A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DE, 0x0021 };
    uint32_t const ces[9] = { 0x13A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_233)
{
    // 1F3DE 003F;	
    // (🏞) NATIONAL PARK	[13A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DE, 0x003F };
    uint32_t const ces[9] = { 0x13A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_234)
{
    // 1F3DE 0061;	
    // (🏞) NATIONAL PARK	[13A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DE, 0x0061 };
    uint32_t const ces[9] = { 0x13A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_235)
{
    // 1F3DE 0041;	
    // (🏞) NATIONAL PARK	[13A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3DE, 0x0041 };
    uint32_t const ces[9] = { 0x13A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_236)
{
    // 1F3DE 0062;	
    // (🏞) NATIONAL PARK	[13A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DE, 0x0062 };
    uint32_t const ces[9] = { 0x13A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_237)
{
    // 1F3DF 0021;	
    // (🏟) STADIUM	[13A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DF, 0x0021 };
    uint32_t const ces[9] = { 0x13A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_238)
{
    // 1F3DF 003F;	
    // (🏟) STADIUM	[13A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DF, 0x003F };
    uint32_t const ces[9] = { 0x13A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_239)
{
    // 1F3DF 0061;	
    // (🏟) STADIUM	[13A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DF, 0x0061 };
    uint32_t const ces[9] = { 0x13A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_240)
{
    // 1F3DF 0041;	
    // (🏟) STADIUM	[13A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3DF, 0x0041 };
    uint32_t const ces[9] = { 0x13A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_241)
{
    // 1F3DF 0062;	
    // (🏟) STADIUM	[13A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3DF, 0x0062 };
    uint32_t const ces[9] = { 0x13A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_242)
{
    // 1F3E0 0021;	
    // (🏠) HOUSE BUILDING	[13A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E0, 0x0021 };
    uint32_t const ces[9] = { 0x13A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_243)
{
    // 1F3E0 003F;	
    // (🏠) HOUSE BUILDING	[13A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E0, 0x003F };
    uint32_t const ces[9] = { 0x13A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_244)
{
    // 1F3E0 0061;	
    // (🏠) HOUSE BUILDING	[13A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E0, 0x0061 };
    uint32_t const ces[9] = { 0x13A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_245)
{
    // 1F3E0 0041;	
    // (🏠) HOUSE BUILDING	[13A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E0, 0x0041 };
    uint32_t const ces[9] = { 0x13A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_246)
{
    // 1F3E0 0062;	
    // (🏠) HOUSE BUILDING	[13A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E0, 0x0062 };
    uint32_t const ces[9] = { 0x13A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_247)
{
    // 1F3E1 0021;	
    // (🏡) HOUSE WITH GARDEN	[13A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E1, 0x0021 };
    uint32_t const ces[9] = { 0x13A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_248)
{
    // 1F3E1 003F;	
    // (🏡) HOUSE WITH GARDEN	[13A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E1, 0x003F };
    uint32_t const ces[9] = { 0x13A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_249)
{
    // 1F3E1 0061;	
    // (🏡) HOUSE WITH GARDEN	[13A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E1, 0x0061 };
    uint32_t const ces[9] = { 0x13A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_250)
{
    // 1F3E1 0041;	
    // (🏡) HOUSE WITH GARDEN	[13A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E1, 0x0041 };
    uint32_t const ces[9] = { 0x13A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_251)
{
    // 1F3E1 0062;	
    // (🏡) HOUSE WITH GARDEN	[13A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E1, 0x0062 };
    uint32_t const ces[9] = { 0x13A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_252)
{
    // 1F3E2 0021;	
    // (🏢) OFFICE BUILDING	[13A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E2, 0x0021 };
    uint32_t const ces[9] = { 0x13A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_253)
{
    // 1F3E2 003F;	
    // (🏢) OFFICE BUILDING	[13A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E2, 0x003F };
    uint32_t const ces[9] = { 0x13A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_254)
{
    // 1F3E2 0061;	
    // (🏢) OFFICE BUILDING	[13A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E2, 0x0061 };
    uint32_t const ces[9] = { 0x13A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_255)
{
    // 1F3E2 0041;	
    // (🏢) OFFICE BUILDING	[13A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E2, 0x0041 };
    uint32_t const ces[9] = { 0x13A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_256)
{
    // 1F3E2 0062;	
    // (🏢) OFFICE BUILDING	[13A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E2, 0x0062 };
    uint32_t const ces[9] = { 0x13A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_257)
{
    // 1F3E3 0021;	
    // (🏣) JAPANESE POST OFFICE	[13AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E3, 0x0021 };
    uint32_t const ces[9] = { 0x13AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_258)
{
    // 1F3E3 003F;	
    // (🏣) JAPANESE POST OFFICE	[13AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E3, 0x003F };
    uint32_t const ces[9] = { 0x13AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_259)
{
    // 1F3E3 0061;	
    // (🏣) JAPANESE POST OFFICE	[13AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E3, 0x0061 };
    uint32_t const ces[9] = { 0x13AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_260)
{
    // 1F3E3 0041;	
    // (🏣) JAPANESE POST OFFICE	[13AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E3, 0x0041 };
    uint32_t const ces[9] = { 0x13AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_261)
{
    // 1F3E3 0062;	
    // (🏣) JAPANESE POST OFFICE	[13AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E3, 0x0062 };
    uint32_t const ces[9] = { 0x13AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_262)
{
    // 1F3E4 0021;	
    // (🏤) EUROPEAN POST OFFICE	[13AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E4, 0x0021 };
    uint32_t const ces[9] = { 0x13AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_263)
{
    // 1F3E4 003F;	
    // (🏤) EUROPEAN POST OFFICE	[13AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E4, 0x003F };
    uint32_t const ces[9] = { 0x13AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_264)
{
    // 1F3E4 0061;	
    // (🏤) EUROPEAN POST OFFICE	[13AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E4, 0x0061 };
    uint32_t const ces[9] = { 0x13AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_265)
{
    // 1F3E4 0041;	
    // (🏤) EUROPEAN POST OFFICE	[13AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E4, 0x0041 };
    uint32_t const ces[9] = { 0x13AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_266)
{
    // 1F3E4 0062;	
    // (🏤) EUROPEAN POST OFFICE	[13AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E4, 0x0062 };
    uint32_t const ces[9] = { 0x13AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_267)
{
    // 1F3E5 0021;	
    // (🏥) HOSPITAL	[13AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E5, 0x0021 };
    uint32_t const ces[9] = { 0x13AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_268)
{
    // 1F3E5 003F;	
    // (🏥) HOSPITAL	[13AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E5, 0x003F };
    uint32_t const ces[9] = { 0x13AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_269)
{
    // 1F3E5 0061;	
    // (🏥) HOSPITAL	[13AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E5, 0x0061 };
    uint32_t const ces[9] = { 0x13AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_270)
{
    // 1F3E5 0041;	
    // (🏥) HOSPITAL	[13AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E5, 0x0041 };
    uint32_t const ces[9] = { 0x13AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_271)
{
    // 1F3E5 0062;	
    // (🏥) HOSPITAL	[13AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E5, 0x0062 };
    uint32_t const ces[9] = { 0x13AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_272)
{
    // 1F3E6 0021;	
    // (🏦) BANK	[13AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E6, 0x0021 };
    uint32_t const ces[9] = { 0x13AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_273)
{
    // 1F3E6 003F;	
    // (🏦) BANK	[13AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E6, 0x003F };
    uint32_t const ces[9] = { 0x13AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_274)
{
    // 1F3E6 0061;	
    // (🏦) BANK	[13AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E6, 0x0061 };
    uint32_t const ces[9] = { 0x13AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_275)
{
    // 1F3E6 0041;	
    // (🏦) BANK	[13AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E6, 0x0041 };
    uint32_t const ces[9] = { 0x13AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_276)
{
    // 1F3E6 0062;	
    // (🏦) BANK	[13AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E6, 0x0062 };
    uint32_t const ces[9] = { 0x13AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_277)
{
    // 1F3E7 0021;	
    // (🏧) AUTOMATED TELLER MACHINE	[13AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E7, 0x0021 };
    uint32_t const ces[9] = { 0x13AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_278)
{
    // 1F3E7 003F;	
    // (🏧) AUTOMATED TELLER MACHINE	[13AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E7, 0x003F };
    uint32_t const ces[9] = { 0x13AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_279)
{
    // 1F3E7 0061;	
    // (🏧) AUTOMATED TELLER MACHINE	[13AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E7, 0x0061 };
    uint32_t const ces[9] = { 0x13AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_280)
{
    // 1F3E7 0041;	
    // (🏧) AUTOMATED TELLER MACHINE	[13AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E7, 0x0041 };
    uint32_t const ces[9] = { 0x13AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_281)
{
    // 1F3E7 0062;	
    // (🏧) AUTOMATED TELLER MACHINE	[13AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E7, 0x0062 };
    uint32_t const ces[9] = { 0x13AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_282)
{
    // 1F3E8 0021;	
    // (🏨) HOTEL	[13AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E8, 0x0021 };
    uint32_t const ces[9] = { 0x13AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_283)
{
    // 1F3E8 003F;	
    // (🏨) HOTEL	[13AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E8, 0x003F };
    uint32_t const ces[9] = { 0x13AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_284)
{
    // 1F3E8 0061;	
    // (🏨) HOTEL	[13AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E8, 0x0061 };
    uint32_t const ces[9] = { 0x13AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_285)
{
    // 1F3E8 0041;	
    // (🏨) HOTEL	[13AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E8, 0x0041 };
    uint32_t const ces[9] = { 0x13AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_286)
{
    // 1F3E8 0062;	
    // (🏨) HOTEL	[13AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E8, 0x0062 };
    uint32_t const ces[9] = { 0x13AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_287)
{
    // 1F3E9 0021;	
    // (🏩) LOVE HOTEL	[13B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E9, 0x0021 };
    uint32_t const ces[9] = { 0x13B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_288)
{
    // 1F3E9 003F;	
    // (🏩) LOVE HOTEL	[13B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E9, 0x003F };
    uint32_t const ces[9] = { 0x13B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_289)
{
    // 1F3E9 0061;	
    // (🏩) LOVE HOTEL	[13B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E9, 0x0061 };
    uint32_t const ces[9] = { 0x13B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_290)
{
    // 1F3E9 0041;	
    // (🏩) LOVE HOTEL	[13B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3E9, 0x0041 };
    uint32_t const ces[9] = { 0x13B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_291)
{
    // 1F3E9 0062;	
    // (🏩) LOVE HOTEL	[13B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3E9, 0x0062 };
    uint32_t const ces[9] = { 0x13B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_292)
{
    // 1F3EA 0021;	
    // (🏪) CONVENIENCE STORE	[13B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EA, 0x0021 };
    uint32_t const ces[9] = { 0x13B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_293)
{
    // 1F3EA 003F;	
    // (🏪) CONVENIENCE STORE	[13B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EA, 0x003F };
    uint32_t const ces[9] = { 0x13B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_294)
{
    // 1F3EA 0061;	
    // (🏪) CONVENIENCE STORE	[13B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EA, 0x0061 };
    uint32_t const ces[9] = { 0x13B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_295)
{
    // 1F3EA 0041;	
    // (🏪) CONVENIENCE STORE	[13B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3EA, 0x0041 };
    uint32_t const ces[9] = { 0x13B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_296)
{
    // 1F3EA 0062;	
    // (🏪) CONVENIENCE STORE	[13B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EA, 0x0062 };
    uint32_t const ces[9] = { 0x13B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_297)
{
    // 1F3EB 0021;	
    // (🏫) SCHOOL	[13B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EB, 0x0021 };
    uint32_t const ces[9] = { 0x13B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_298)
{
    // 1F3EB 003F;	
    // (🏫) SCHOOL	[13B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EB, 0x003F };
    uint32_t const ces[9] = { 0x13B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_299)
{
    // 1F3EB 0061;	
    // (🏫) SCHOOL	[13B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EB, 0x0061 };
    uint32_t const ces[9] = { 0x13B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_300)
{
    // 1F3EB 0041;	
    // (🏫) SCHOOL	[13B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3EB, 0x0041 };
    uint32_t const ces[9] = { 0x13B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_301)
{
    // 1F3EB 0062;	
    // (🏫) SCHOOL	[13B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EB, 0x0062 };
    uint32_t const ces[9] = { 0x13B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_302)
{
    // 1F3EC 0021;	
    // (🏬) DEPARTMENT STORE	[13B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EC, 0x0021 };
    uint32_t const ces[9] = { 0x13B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_303)
{
    // 1F3EC 003F;	
    // (🏬) DEPARTMENT STORE	[13B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EC, 0x003F };
    uint32_t const ces[9] = { 0x13B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_304)
{
    // 1F3EC 0061;	
    // (🏬) DEPARTMENT STORE	[13B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EC, 0x0061 };
    uint32_t const ces[9] = { 0x13B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_305)
{
    // 1F3EC 0041;	
    // (🏬) DEPARTMENT STORE	[13B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3EC, 0x0041 };
    uint32_t const ces[9] = { 0x13B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_306)
{
    // 1F3EC 0062;	
    // (🏬) DEPARTMENT STORE	[13B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EC, 0x0062 };
    uint32_t const ces[9] = { 0x13B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_307)
{
    // 1F3ED 0021;	
    // (🏭) FACTORY	[13B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3ED, 0x0021 };
    uint32_t const ces[9] = { 0x13B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_308)
{
    // 1F3ED 003F;	
    // (🏭) FACTORY	[13B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3ED, 0x003F };
    uint32_t const ces[9] = { 0x13B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_309)
{
    // 1F3ED 0061;	
    // (🏭) FACTORY	[13B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3ED, 0x0061 };
    uint32_t const ces[9] = { 0x13B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_310)
{
    // 1F3ED 0041;	
    // (🏭) FACTORY	[13B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3ED, 0x0041 };
    uint32_t const ces[9] = { 0x13B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_311)
{
    // 1F3ED 0062;	
    // (🏭) FACTORY	[13B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3ED, 0x0062 };
    uint32_t const ces[9] = { 0x13B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_312)
{
    // 1F3EE 0021;	
    // (🏮) IZAKAYA LANTERN	[13B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EE, 0x0021 };
    uint32_t const ces[9] = { 0x13B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_313)
{
    // 1F3EE 003F;	
    // (🏮) IZAKAYA LANTERN	[13B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EE, 0x003F };
    uint32_t const ces[9] = { 0x13B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_314)
{
    // 1F3EE 0061;	
    // (🏮) IZAKAYA LANTERN	[13B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EE, 0x0061 };
    uint32_t const ces[9] = { 0x13B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_315)
{
    // 1F3EE 0041;	
    // (🏮) IZAKAYA LANTERN	[13B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3EE, 0x0041 };
    uint32_t const ces[9] = { 0x13B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_316)
{
    // 1F3EE 0062;	
    // (🏮) IZAKAYA LANTERN	[13B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EE, 0x0062 };
    uint32_t const ces[9] = { 0x13B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_317)
{
    // 1F3EF 0021;	
    // (🏯) JAPANESE CASTLE	[13B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EF, 0x0021 };
    uint32_t const ces[9] = { 0x13B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_318)
{
    // 1F3EF 003F;	
    // (🏯) JAPANESE CASTLE	[13B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EF, 0x003F };
    uint32_t const ces[9] = { 0x13B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_319)
{
    // 1F3EF 0061;	
    // (🏯) JAPANESE CASTLE	[13B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EF, 0x0061 };
    uint32_t const ces[9] = { 0x13B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_320)
{
    // 1F3EF 0041;	
    // (🏯) JAPANESE CASTLE	[13B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3EF, 0x0041 };
    uint32_t const ces[9] = { 0x13B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_321)
{
    // 1F3EF 0062;	
    // (🏯) JAPANESE CASTLE	[13B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3EF, 0x0062 };
    uint32_t const ces[9] = { 0x13B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_322)
{
    // 1F3F0 0021;	
    // (🏰) EUROPEAN CASTLE	[13B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F0, 0x0021 };
    uint32_t const ces[9] = { 0x13B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_323)
{
    // 1F3F0 003F;	
    // (🏰) EUROPEAN CASTLE	[13B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F0, 0x003F };
    uint32_t const ces[9] = { 0x13B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_324)
{
    // 1F3F0 0061;	
    // (🏰) EUROPEAN CASTLE	[13B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F0, 0x0061 };
    uint32_t const ces[9] = { 0x13B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_325)
{
    // 1F3F0 0041;	
    // (🏰) EUROPEAN CASTLE	[13B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F0, 0x0041 };
    uint32_t const ces[9] = { 0x13B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_326)
{
    // 1F3F0 0062;	
    // (🏰) EUROPEAN CASTLE	[13B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F0, 0x0062 };
    uint32_t const ces[9] = { 0x13B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_327)
{
    // 1F3F1 0021;	
    // (🏱) WHITE PENNANT	[13B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F1, 0x0021 };
    uint32_t const ces[9] = { 0x13B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_328)
{
    // 1F3F1 003F;	
    // (🏱) WHITE PENNANT	[13B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F1, 0x003F };
    uint32_t const ces[9] = { 0x13B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_329)
{
    // 1F3F1 0061;	
    // (🏱) WHITE PENNANT	[13B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F1, 0x0061 };
    uint32_t const ces[9] = { 0x13B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_330)
{
    // 1F3F1 0041;	
    // (🏱) WHITE PENNANT	[13B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F1, 0x0041 };
    uint32_t const ces[9] = { 0x13B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_331)
{
    // 1F3F1 0062;	
    // (🏱) WHITE PENNANT	[13B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F1, 0x0062 };
    uint32_t const ces[9] = { 0x13B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_332)
{
    // 1F3F2 0021;	
    // (🏲) BLACK PENNANT	[13B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F2, 0x0021 };
    uint32_t const ces[9] = { 0x13B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_333)
{
    // 1F3F2 003F;	
    // (🏲) BLACK PENNANT	[13B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F2, 0x003F };
    uint32_t const ces[9] = { 0x13B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_334)
{
    // 1F3F2 0061;	
    // (🏲) BLACK PENNANT	[13B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F2, 0x0061 };
    uint32_t const ces[9] = { 0x13B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_335)
{
    // 1F3F2 0041;	
    // (🏲) BLACK PENNANT	[13B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F2, 0x0041 };
    uint32_t const ces[9] = { 0x13B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_336)
{
    // 1F3F2 0062;	
    // (🏲) BLACK PENNANT	[13B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F2, 0x0062 };
    uint32_t const ces[9] = { 0x13B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_337)
{
    // 1F3F3 0021;	
    // (🏳) WAVING WHITE FLAG	[13BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F3, 0x0021 };
    uint32_t const ces[9] = { 0x13BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_338)
{
    // 1F3F3 003F;	
    // (🏳) WAVING WHITE FLAG	[13BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F3, 0x003F };
    uint32_t const ces[9] = { 0x13BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_339)
{
    // 1F3F3 0061;	
    // (🏳) WAVING WHITE FLAG	[13BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F3, 0x0061 };
    uint32_t const ces[9] = { 0x13BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_340)
{
    // 1F3F3 0041;	
    // (🏳) WAVING WHITE FLAG	[13BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F3, 0x0041 };
    uint32_t const ces[9] = { 0x13BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_341)
{
    // 1F3F3 0062;	
    // (🏳) WAVING WHITE FLAG	[13BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F3, 0x0062 };
    uint32_t const ces[9] = { 0x13BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_342)
{
    // 1F3F4 0021;	
    // (🏴) WAVING BLACK FLAG	[13BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F4, 0x0021 };
    uint32_t const ces[9] = { 0x13BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_343)
{
    // 1F3F4 003F;	
    // (🏴) WAVING BLACK FLAG	[13BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F4, 0x003F };
    uint32_t const ces[9] = { 0x13BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_344)
{
    // 1F3F4 0061;	
    // (🏴) WAVING BLACK FLAG	[13BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F4, 0x0061 };
    uint32_t const ces[9] = { 0x13BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_345)
{
    // 1F3F4 0041;	
    // (🏴) WAVING BLACK FLAG	[13BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F4, 0x0041 };
    uint32_t const ces[9] = { 0x13BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_346)
{
    // 1F3F4 0062;	
    // (🏴) WAVING BLACK FLAG	[13BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F4, 0x0062 };
    uint32_t const ces[9] = { 0x13BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_347)
{
    // 1F3F5 0021;	
    // (🏵) ROSETTE	[13BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F5, 0x0021 };
    uint32_t const ces[9] = { 0x13BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_348)
{
    // 1F3F5 003F;	
    // (🏵) ROSETTE	[13BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F5, 0x003F };
    uint32_t const ces[9] = { 0x13BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_349)
{
    // 1F3F5 0061;	
    // (🏵) ROSETTE	[13BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F5, 0x0061 };
    uint32_t const ces[9] = { 0x13BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_350)
{
    // 1F3F5 0041;	
    // (🏵) ROSETTE	[13BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F5, 0x0041 };
    uint32_t const ces[9] = { 0x13BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_351)
{
    // 1F3F5 0062;	
    // (🏵) ROSETTE	[13BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F5, 0x0062 };
    uint32_t const ces[9] = { 0x13BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_352)
{
    // 1F3F6 0021;	
    // (🏶) BLACK ROSETTE	[13BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F6, 0x0021 };
    uint32_t const ces[9] = { 0x13BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_353)
{
    // 1F3F6 003F;	
    // (🏶) BLACK ROSETTE	[13BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F6, 0x003F };
    uint32_t const ces[9] = { 0x13BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_354)
{
    // 1F3F6 0061;	
    // (🏶) BLACK ROSETTE	[13BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F6, 0x0061 };
    uint32_t const ces[9] = { 0x13BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_355)
{
    // 1F3F6 0041;	
    // (🏶) BLACK ROSETTE	[13BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F6, 0x0041 };
    uint32_t const ces[9] = { 0x13BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_356)
{
    // 1F3F6 0062;	
    // (🏶) BLACK ROSETTE	[13BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F6, 0x0062 };
    uint32_t const ces[9] = { 0x13BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_357)
{
    // 1F3F7 0021;	
    // (🏷) LABEL	[13BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F7, 0x0021 };
    uint32_t const ces[9] = { 0x13BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_358)
{
    // 1F3F7 003F;	
    // (🏷) LABEL	[13BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F7, 0x003F };
    uint32_t const ces[9] = { 0x13BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_359)
{
    // 1F3F7 0061;	
    // (🏷) LABEL	[13BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F7, 0x0061 };
    uint32_t const ces[9] = { 0x13BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_360)
{
    // 1F3F7 0041;	
    // (🏷) LABEL	[13BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F7, 0x0041 };
    uint32_t const ces[9] = { 0x13BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_361)
{
    // 1F3F7 0062;	
    // (🏷) LABEL	[13BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F7, 0x0062 };
    uint32_t const ces[9] = { 0x13BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_362)
{
    // 1F3F8 0021;	
    // (🏸) BADMINTON RACQUET AND SHUTTLECOCK	[13BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F8, 0x0021 };
    uint32_t const ces[9] = { 0x13BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_363)
{
    // 1F3F8 003F;	
    // (🏸) BADMINTON RACQUET AND SHUTTLECOCK	[13BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F8, 0x003F };
    uint32_t const ces[9] = { 0x13BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_364)
{
    // 1F3F8 0061;	
    // (🏸) BADMINTON RACQUET AND SHUTTLECOCK	[13BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F8, 0x0061 };
    uint32_t const ces[9] = { 0x13BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_365)
{
    // 1F3F8 0041;	
    // (🏸) BADMINTON RACQUET AND SHUTTLECOCK	[13BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F8, 0x0041 };
    uint32_t const ces[9] = { 0x13BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_366)
{
    // 1F3F8 0062;	
    // (🏸) BADMINTON RACQUET AND SHUTTLECOCK	[13BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F8, 0x0062 };
    uint32_t const ces[9] = { 0x13BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_367)
{
    // 1F3F9 0021;	
    // (🏹) BOW AND ARROW	[13C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F9, 0x0021 };
    uint32_t const ces[9] = { 0x13C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_368)
{
    // 1F3F9 003F;	
    // (🏹) BOW AND ARROW	[13C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F9, 0x003F };
    uint32_t const ces[9] = { 0x13C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_369)
{
    // 1F3F9 0061;	
    // (🏹) BOW AND ARROW	[13C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F9, 0x0061 };
    uint32_t const ces[9] = { 0x13C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_370)
{
    // 1F3F9 0041;	
    // (🏹) BOW AND ARROW	[13C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3F9, 0x0041 };
    uint32_t const ces[9] = { 0x13C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_371)
{
    // 1F3F9 0062;	
    // (🏹) BOW AND ARROW	[13C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3F9, 0x0062 };
    uint32_t const ces[9] = { 0x13C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_372)
{
    // 1F3FA 0021;	
    // (🏺) AMPHORA	[13C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FA, 0x0021 };
    uint32_t const ces[9] = { 0x13C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_373)
{
    // 1F3FA 003F;	
    // (🏺) AMPHORA	[13C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FA, 0x003F };
    uint32_t const ces[9] = { 0x13C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_374)
{
    // 1F3FA 0061;	
    // (🏺) AMPHORA	[13C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FA, 0x0061 };
    uint32_t const ces[9] = { 0x13C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_375)
{
    // 1F3FA 0041;	
    // (🏺) AMPHORA	[13C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3FA, 0x0041 };
    uint32_t const ces[9] = { 0x13C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_376)
{
    // 1F3FA 0062;	
    // (🏺) AMPHORA	[13C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FA, 0x0062 };
    uint32_t const ces[9] = { 0x13C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_377)
{
    // 1F3FB 0021;	
    // (🏻) EMOJI MODIFIER FITZPATRICK TYPE-1-2	[13C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FB, 0x0021 };
    uint32_t const ces[9] = { 0x13C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_378)
{
    // 1F3FB 003F;	
    // (🏻) EMOJI MODIFIER FITZPATRICK TYPE-1-2	[13C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FB, 0x003F };
    uint32_t const ces[9] = { 0x13C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_379)
{
    // 1F3FB 0061;	
    // (🏻) EMOJI MODIFIER FITZPATRICK TYPE-1-2	[13C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FB, 0x0061 };
    uint32_t const ces[9] = { 0x13C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_380)
{
    // 1F3FB 0041;	
    // (🏻) EMOJI MODIFIER FITZPATRICK TYPE-1-2	[13C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3FB, 0x0041 };
    uint32_t const ces[9] = { 0x13C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_381)
{
    // 1F3FB 0062;	
    // (🏻) EMOJI MODIFIER FITZPATRICK TYPE-1-2	[13C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FB, 0x0062 };
    uint32_t const ces[9] = { 0x13C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_382)
{
    // 1F3FC 0021;	
    // (🏼) EMOJI MODIFIER FITZPATRICK TYPE-3	[13C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FC, 0x0021 };
    uint32_t const ces[9] = { 0x13C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_383)
{
    // 1F3FC 003F;	
    // (🏼) EMOJI MODIFIER FITZPATRICK TYPE-3	[13C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FC, 0x003F };
    uint32_t const ces[9] = { 0x13C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_384)
{
    // 1F3FC 0061;	
    // (🏼) EMOJI MODIFIER FITZPATRICK TYPE-3	[13C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FC, 0x0061 };
    uint32_t const ces[9] = { 0x13C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_385)
{
    // 1F3FC 0041;	
    // (🏼) EMOJI MODIFIER FITZPATRICK TYPE-3	[13C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3FC, 0x0041 };
    uint32_t const ces[9] = { 0x13C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_386)
{
    // 1F3FC 0062;	
    // (🏼) EMOJI MODIFIER FITZPATRICK TYPE-3	[13C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FC, 0x0062 };
    uint32_t const ces[9] = { 0x13C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_387)
{
    // 1F3FD 0021;	
    // (🏽) EMOJI MODIFIER FITZPATRICK TYPE-4	[13C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FD, 0x0021 };
    uint32_t const ces[9] = { 0x13C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_388)
{
    // 1F3FD 003F;	
    // (🏽) EMOJI MODIFIER FITZPATRICK TYPE-4	[13C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FD, 0x003F };
    uint32_t const ces[9] = { 0x13C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_389)
{
    // 1F3FD 0061;	
    // (🏽) EMOJI MODIFIER FITZPATRICK TYPE-4	[13C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FD, 0x0061 };
    uint32_t const ces[9] = { 0x13C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_390)
{
    // 1F3FD 0041;	
    // (🏽) EMOJI MODIFIER FITZPATRICK TYPE-4	[13C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3FD, 0x0041 };
    uint32_t const ces[9] = { 0x13C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_391)
{
    // 1F3FD 0062;	
    // (🏽) EMOJI MODIFIER FITZPATRICK TYPE-4	[13C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FD, 0x0062 };
    uint32_t const ces[9] = { 0x13C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_392)
{
    // 1F3FE 0021;	
    // (🏾) EMOJI MODIFIER FITZPATRICK TYPE-5	[13C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FE, 0x0021 };
    uint32_t const ces[9] = { 0x13C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_393)
{
    // 1F3FE 003F;	
    // (🏾) EMOJI MODIFIER FITZPATRICK TYPE-5	[13C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FE, 0x003F };
    uint32_t const ces[9] = { 0x13C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_394)
{
    // 1F3FE 0061;	
    // (🏾) EMOJI MODIFIER FITZPATRICK TYPE-5	[13C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FE, 0x0061 };
    uint32_t const ces[9] = { 0x13C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_395)
{
    // 1F3FE 0041;	
    // (🏾) EMOJI MODIFIER FITZPATRICK TYPE-5	[13C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3FE, 0x0041 };
    uint32_t const ces[9] = { 0x13C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_396)
{
    // 1F3FE 0062;	
    // (🏾) EMOJI MODIFIER FITZPATRICK TYPE-5	[13C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FE, 0x0062 };
    uint32_t const ces[9] = { 0x13C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_397)
{
    // 1F3FF 0021;	
    // (🏿) EMOJI MODIFIER FITZPATRICK TYPE-6	[13C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FF, 0x0021 };
    uint32_t const ces[9] = { 0x13C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_398)
{
    // 1F3FF 003F;	
    // (🏿) EMOJI MODIFIER FITZPATRICK TYPE-6	[13C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FF, 0x003F };
    uint32_t const ces[9] = { 0x13C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_399)
{
    // 1F3FF 0061;	
    // (🏿) EMOJI MODIFIER FITZPATRICK TYPE-6	[13C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FF, 0x0061 };
    uint32_t const ces[9] = { 0x13C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_400)
{
    // 1F3FF 0041;	
    // (🏿) EMOJI MODIFIER FITZPATRICK TYPE-6	[13C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F3FF, 0x0041 };
    uint32_t const ces[9] = { 0x13C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_401)
{
    // 1F3FF 0062;	
    // (🏿) EMOJI MODIFIER FITZPATRICK TYPE-6	[13C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F3FF, 0x0062 };
    uint32_t const ces[9] = { 0x13C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_402)
{
    // 1F400 0021;	
    // (🐀) RAT	[13C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F400, 0x0021 };
    uint32_t const ces[9] = { 0x13C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_403)
{
    // 1F400 003F;	
    // (🐀) RAT	[13C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F400, 0x003F };
    uint32_t const ces[9] = { 0x13C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_404)
{
    // 1F400 0061;	
    // (🐀) RAT	[13C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F400, 0x0061 };
    uint32_t const ces[9] = { 0x13C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_405)
{
    // 1F400 0041;	
    // (🐀) RAT	[13C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F400, 0x0041 };
    uint32_t const ces[9] = { 0x13C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_406)
{
    // 1F400 0062;	
    // (🐀) RAT	[13C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F400, 0x0062 };
    uint32_t const ces[9] = { 0x13C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_407)
{
    // 1F401 0021;	
    // (🐁) MOUSE	[13C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F401, 0x0021 };
    uint32_t const ces[9] = { 0x13C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_408)
{
    // 1F401 003F;	
    // (🐁) MOUSE	[13C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F401, 0x003F };
    uint32_t const ces[9] = { 0x13C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_409)
{
    // 1F401 0061;	
    // (🐁) MOUSE	[13C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F401, 0x0061 };
    uint32_t const ces[9] = { 0x13C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_410)
{
    // 1F401 0041;	
    // (🐁) MOUSE	[13C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F401, 0x0041 };
    uint32_t const ces[9] = { 0x13C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_411)
{
    // 1F401 0062;	
    // (🐁) MOUSE	[13C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F401, 0x0062 };
    uint32_t const ces[9] = { 0x13C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_412)
{
    // 1F402 0021;	
    // (🐂) OX	[13C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F402, 0x0021 };
    uint32_t const ces[9] = { 0x13C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_413)
{
    // 1F402 003F;	
    // (🐂) OX	[13C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F402, 0x003F };
    uint32_t const ces[9] = { 0x13C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_414)
{
    // 1F402 0061;	
    // (🐂) OX	[13C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F402, 0x0061 };
    uint32_t const ces[9] = { 0x13C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_415)
{
    // 1F402 0041;	
    // (🐂) OX	[13C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F402, 0x0041 };
    uint32_t const ces[9] = { 0x13C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_416)
{
    // 1F402 0062;	
    // (🐂) OX	[13C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F402, 0x0062 };
    uint32_t const ces[9] = { 0x13C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_417)
{
    // 1F403 0021;	
    // (🐃) WATER BUFFALO	[13CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F403, 0x0021 };
    uint32_t const ces[9] = { 0x13CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_418)
{
    // 1F403 003F;	
    // (🐃) WATER BUFFALO	[13CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F403, 0x003F };
    uint32_t const ces[9] = { 0x13CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_419)
{
    // 1F403 0061;	
    // (🐃) WATER BUFFALO	[13CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F403, 0x0061 };
    uint32_t const ces[9] = { 0x13CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_420)
{
    // 1F403 0041;	
    // (🐃) WATER BUFFALO	[13CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F403, 0x0041 };
    uint32_t const ces[9] = { 0x13CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_421)
{
    // 1F403 0062;	
    // (🐃) WATER BUFFALO	[13CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F403, 0x0062 };
    uint32_t const ces[9] = { 0x13CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_422)
{
    // 1F404 0021;	
    // (🐄) COW	[13CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F404, 0x0021 };
    uint32_t const ces[9] = { 0x13CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_423)
{
    // 1F404 003F;	
    // (🐄) COW	[13CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F404, 0x003F };
    uint32_t const ces[9] = { 0x13CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_424)
{
    // 1F404 0061;	
    // (🐄) COW	[13CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F404, 0x0061 };
    uint32_t const ces[9] = { 0x13CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_425)
{
    // 1F404 0041;	
    // (🐄) COW	[13CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F404, 0x0041 };
    uint32_t const ces[9] = { 0x13CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_426)
{
    // 1F404 0062;	
    // (🐄) COW	[13CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F404, 0x0062 };
    uint32_t const ces[9] = { 0x13CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_427)
{
    // 1F405 0021;	
    // (🐅) TIGER	[13CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F405, 0x0021 };
    uint32_t const ces[9] = { 0x13CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_428)
{
    // 1F405 003F;	
    // (🐅) TIGER	[13CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F405, 0x003F };
    uint32_t const ces[9] = { 0x13CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_429)
{
    // 1F405 0061;	
    // (🐅) TIGER	[13CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F405, 0x0061 };
    uint32_t const ces[9] = { 0x13CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_430)
{
    // 1F405 0041;	
    // (🐅) TIGER	[13CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F405, 0x0041 };
    uint32_t const ces[9] = { 0x13CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_431)
{
    // 1F405 0062;	
    // (🐅) TIGER	[13CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F405, 0x0062 };
    uint32_t const ces[9] = { 0x13CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_432)
{
    // 1F406 0021;	
    // (🐆) LEOPARD	[13CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F406, 0x0021 };
    uint32_t const ces[9] = { 0x13CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_433)
{
    // 1F406 003F;	
    // (🐆) LEOPARD	[13CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F406, 0x003F };
    uint32_t const ces[9] = { 0x13CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_434)
{
    // 1F406 0061;	
    // (🐆) LEOPARD	[13CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F406, 0x0061 };
    uint32_t const ces[9] = { 0x13CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_435)
{
    // 1F406 0041;	
    // (🐆) LEOPARD	[13CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F406, 0x0041 };
    uint32_t const ces[9] = { 0x13CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_436)
{
    // 1F406 0062;	
    // (🐆) LEOPARD	[13CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F406, 0x0062 };
    uint32_t const ces[9] = { 0x13CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_437)
{
    // 1F407 0021;	
    // (🐇) RABBIT	[13CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F407, 0x0021 };
    uint32_t const ces[9] = { 0x13CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_438)
{
    // 1F407 003F;	
    // (🐇) RABBIT	[13CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F407, 0x003F };
    uint32_t const ces[9] = { 0x13CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_439)
{
    // 1F407 0061;	
    // (🐇) RABBIT	[13CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F407, 0x0061 };
    uint32_t const ces[9] = { 0x13CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_440)
{
    // 1F407 0041;	
    // (🐇) RABBIT	[13CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F407, 0x0041 };
    uint32_t const ces[9] = { 0x13CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_441)
{
    // 1F407 0062;	
    // (🐇) RABBIT	[13CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F407, 0x0062 };
    uint32_t const ces[9] = { 0x13CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_442)
{
    // 1F408 0021;	
    // (🐈) CAT	[13CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F408, 0x0021 };
    uint32_t const ces[9] = { 0x13CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_443)
{
    // 1F408 003F;	
    // (🐈) CAT	[13CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F408, 0x003F };
    uint32_t const ces[9] = { 0x13CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_444)
{
    // 1F408 0061;	
    // (🐈) CAT	[13CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F408, 0x0061 };
    uint32_t const ces[9] = { 0x13CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_445)
{
    // 1F408 0041;	
    // (🐈) CAT	[13CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F408, 0x0041 };
    uint32_t const ces[9] = { 0x13CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_446)
{
    // 1F408 0062;	
    // (🐈) CAT	[13CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F408, 0x0062 };
    uint32_t const ces[9] = { 0x13CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_447)
{
    // 1F409 0021;	
    // (🐉) DRAGON	[13D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F409, 0x0021 };
    uint32_t const ces[9] = { 0x13D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_448)
{
    // 1F409 003F;	
    // (🐉) DRAGON	[13D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F409, 0x003F };
    uint32_t const ces[9] = { 0x13D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_449)
{
    // 1F409 0061;	
    // (🐉) DRAGON	[13D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F409, 0x0061 };
    uint32_t const ces[9] = { 0x13D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_450)
{
    // 1F409 0041;	
    // (🐉) DRAGON	[13D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F409, 0x0041 };
    uint32_t const ces[9] = { 0x13D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_451)
{
    // 1F409 0062;	
    // (🐉) DRAGON	[13D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F409, 0x0062 };
    uint32_t const ces[9] = { 0x13D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_452)
{
    // 1F40A 0021;	
    // (🐊) CROCODILE	[13D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40A, 0x0021 };
    uint32_t const ces[9] = { 0x13D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_453)
{
    // 1F40A 003F;	
    // (🐊) CROCODILE	[13D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40A, 0x003F };
    uint32_t const ces[9] = { 0x13D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_454)
{
    // 1F40A 0061;	
    // (🐊) CROCODILE	[13D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40A, 0x0061 };
    uint32_t const ces[9] = { 0x13D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_455)
{
    // 1F40A 0041;	
    // (🐊) CROCODILE	[13D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F40A, 0x0041 };
    uint32_t const ces[9] = { 0x13D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_456)
{
    // 1F40A 0062;	
    // (🐊) CROCODILE	[13D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40A, 0x0062 };
    uint32_t const ces[9] = { 0x13D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_457)
{
    // 1F40B 0021;	
    // (🐋) WHALE	[13D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40B, 0x0021 };
    uint32_t const ces[9] = { 0x13D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_458)
{
    // 1F40B 003F;	
    // (🐋) WHALE	[13D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40B, 0x003F };
    uint32_t const ces[9] = { 0x13D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_459)
{
    // 1F40B 0061;	
    // (🐋) WHALE	[13D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40B, 0x0061 };
    uint32_t const ces[9] = { 0x13D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_460)
{
    // 1F40B 0041;	
    // (🐋) WHALE	[13D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F40B, 0x0041 };
    uint32_t const ces[9] = { 0x13D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_461)
{
    // 1F40B 0062;	
    // (🐋) WHALE	[13D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40B, 0x0062 };
    uint32_t const ces[9] = { 0x13D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_462)
{
    // 1F40C 0021;	
    // (🐌) SNAIL	[13D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40C, 0x0021 };
    uint32_t const ces[9] = { 0x13D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_463)
{
    // 1F40C 003F;	
    // (🐌) SNAIL	[13D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40C, 0x003F };
    uint32_t const ces[9] = { 0x13D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_464)
{
    // 1F40C 0061;	
    // (🐌) SNAIL	[13D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40C, 0x0061 };
    uint32_t const ces[9] = { 0x13D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_465)
{
    // 1F40C 0041;	
    // (🐌) SNAIL	[13D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F40C, 0x0041 };
    uint32_t const ces[9] = { 0x13D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_466)
{
    // 1F40C 0062;	
    // (🐌) SNAIL	[13D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40C, 0x0062 };
    uint32_t const ces[9] = { 0x13D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_467)
{
    // 1F40D 0021;	
    // (🐍) SNAKE	[13D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40D, 0x0021 };
    uint32_t const ces[9] = { 0x13D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_468)
{
    // 1F40D 003F;	
    // (🐍) SNAKE	[13D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40D, 0x003F };
    uint32_t const ces[9] = { 0x13D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_469)
{
    // 1F40D 0061;	
    // (🐍) SNAKE	[13D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40D, 0x0061 };
    uint32_t const ces[9] = { 0x13D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_470)
{
    // 1F40D 0041;	
    // (🐍) SNAKE	[13D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F40D, 0x0041 };
    uint32_t const ces[9] = { 0x13D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_471)
{
    // 1F40D 0062;	
    // (🐍) SNAKE	[13D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40D, 0x0062 };
    uint32_t const ces[9] = { 0x13D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_472)
{
    // 1F40E 0021;	
    // (🐎) HORSE	[13D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40E, 0x0021 };
    uint32_t const ces[9] = { 0x13D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_473)
{
    // 1F40E 003F;	
    // (🐎) HORSE	[13D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40E, 0x003F };
    uint32_t const ces[9] = { 0x13D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_474)
{
    // 1F40E 0061;	
    // (🐎) HORSE	[13D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40E, 0x0061 };
    uint32_t const ces[9] = { 0x13D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_475)
{
    // 1F40E 0041;	
    // (🐎) HORSE	[13D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F40E, 0x0041 };
    uint32_t const ces[9] = { 0x13D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_476)
{
    // 1F40E 0062;	
    // (🐎) HORSE	[13D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40E, 0x0062 };
    uint32_t const ces[9] = { 0x13D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_477)
{
    // 1F40F 0021;	
    // (🐏) RAM	[13D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40F, 0x0021 };
    uint32_t const ces[9] = { 0x13D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_478)
{
    // 1F40F 003F;	
    // (🐏) RAM	[13D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40F, 0x003F };
    uint32_t const ces[9] = { 0x13D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_479)
{
    // 1F40F 0061;	
    // (🐏) RAM	[13D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40F, 0x0061 };
    uint32_t const ces[9] = { 0x13D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_480)
{
    // 1F40F 0041;	
    // (🐏) RAM	[13D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F40F, 0x0041 };
    uint32_t const ces[9] = { 0x13D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_481)
{
    // 1F40F 0062;	
    // (🐏) RAM	[13D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F40F, 0x0062 };
    uint32_t const ces[9] = { 0x13D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_482)
{
    // 1F410 0021;	
    // (🐐) GOAT	[13D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F410, 0x0021 };
    uint32_t const ces[9] = { 0x13D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_483)
{
    // 1F410 003F;	
    // (🐐) GOAT	[13D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F410, 0x003F };
    uint32_t const ces[9] = { 0x13D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_484)
{
    // 1F410 0061;	
    // (🐐) GOAT	[13D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F410, 0x0061 };
    uint32_t const ces[9] = { 0x13D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_485)
{
    // 1F410 0041;	
    // (🐐) GOAT	[13D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F410, 0x0041 };
    uint32_t const ces[9] = { 0x13D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_486)
{
    // 1F410 0062;	
    // (🐐) GOAT	[13D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F410, 0x0062 };
    uint32_t const ces[9] = { 0x13D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_487)
{
    // 1F411 0021;	
    // (🐑) SHEEP	[13D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F411, 0x0021 };
    uint32_t const ces[9] = { 0x13D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_488)
{
    // 1F411 003F;	
    // (🐑) SHEEP	[13D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F411, 0x003F };
    uint32_t const ces[9] = { 0x13D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_489)
{
    // 1F411 0061;	
    // (🐑) SHEEP	[13D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F411, 0x0061 };
    uint32_t const ces[9] = { 0x13D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_490)
{
    // 1F411 0041;	
    // (🐑) SHEEP	[13D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F411, 0x0041 };
    uint32_t const ces[9] = { 0x13D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_491)
{
    // 1F411 0062;	
    // (🐑) SHEEP	[13D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F411, 0x0062 };
    uint32_t const ces[9] = { 0x13D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_492)
{
    // 1F412 0021;	
    // (🐒) MONKEY	[13D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F412, 0x0021 };
    uint32_t const ces[9] = { 0x13D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_493)
{
    // 1F412 003F;	
    // (🐒) MONKEY	[13D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F412, 0x003F };
    uint32_t const ces[9] = { 0x13D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_494)
{
    // 1F412 0061;	
    // (🐒) MONKEY	[13D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F412, 0x0061 };
    uint32_t const ces[9] = { 0x13D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_495)
{
    // 1F412 0041;	
    // (🐒) MONKEY	[13D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F412, 0x0041 };
    uint32_t const ces[9] = { 0x13D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_496)
{
    // 1F412 0062;	
    // (🐒) MONKEY	[13D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F412, 0x0062 };
    uint32_t const ces[9] = { 0x13D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_497)
{
    // 1F413 0021;	
    // (🐓) ROOSTER	[13DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F413, 0x0021 };
    uint32_t const ces[9] = { 0x13DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_498)
{
    // 1F413 003F;	
    // (🐓) ROOSTER	[13DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F413, 0x003F };
    uint32_t const ces[9] = { 0x13DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_057_499)
{
    // 1F413 0061;	
    // (🐓) ROOSTER	[13DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F413, 0x0061 };
    uint32_t const ces[9] = { 0x13DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

