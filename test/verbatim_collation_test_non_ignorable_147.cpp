// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_147_000)
{
    // 0801 0041;	
    // (‎‎ࠁ‎‎) SAMARITAN LETTER BIT	[234A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0801, 0x0041 };
    uint32_t const ces[9] = { 0x234A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_001)
{
    // 0801 0062;	
    // (‎‎ࠁ‎‎) SAMARITAN LETTER BIT	[234A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0801, 0x0062 };
    uint32_t const ces[9] = { 0x234A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_002)
{
    // 0802 0021;	
    // (‎‎ࠂ‎‎) SAMARITAN LETTER GAMAN	[234B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0802, 0x0021 };
    uint32_t const ces[9] = { 0x234B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_003)
{
    // 0802 003F;	
    // (‎‎ࠂ‎‎) SAMARITAN LETTER GAMAN	[234B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0802, 0x003F };
    uint32_t const ces[9] = { 0x234B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_004)
{
    // 0802 0061;	
    // (‎‎ࠂ‎‎) SAMARITAN LETTER GAMAN	[234B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0802, 0x0061 };
    uint32_t const ces[9] = { 0x234B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_005)
{
    // 0802 0041;	
    // (‎‎ࠂ‎‎) SAMARITAN LETTER GAMAN	[234B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0802, 0x0041 };
    uint32_t const ces[9] = { 0x234B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_006)
{
    // 0802 0062;	
    // (‎‎ࠂ‎‎) SAMARITAN LETTER GAMAN	[234B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0802, 0x0062 };
    uint32_t const ces[9] = { 0x234B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_007)
{
    // 0803 0021;	
    // (‎‎ࠃ‎‎) SAMARITAN LETTER DALAT	[234C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0803, 0x0021 };
    uint32_t const ces[9] = { 0x234C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_008)
{
    // 0803 003F;	
    // (‎‎ࠃ‎‎) SAMARITAN LETTER DALAT	[234C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0803, 0x003F };
    uint32_t const ces[9] = { 0x234C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_009)
{
    // 0803 0061;	
    // (‎‎ࠃ‎‎) SAMARITAN LETTER DALAT	[234C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0803, 0x0061 };
    uint32_t const ces[9] = { 0x234C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_010)
{
    // 0803 0041;	
    // (‎‎ࠃ‎‎) SAMARITAN LETTER DALAT	[234C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0803, 0x0041 };
    uint32_t const ces[9] = { 0x234C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_011)
{
    // 0803 0062;	
    // (‎‎ࠃ‎‎) SAMARITAN LETTER DALAT	[234C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0803, 0x0062 };
    uint32_t const ces[9] = { 0x234C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_012)
{
    // 0804 0021;	
    // (‎‎ࠄ‎‎) SAMARITAN LETTER IY	[234D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0804, 0x0021 };
    uint32_t const ces[9] = { 0x234D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_013)
{
    // 0804 003F;	
    // (‎‎ࠄ‎‎) SAMARITAN LETTER IY	[234D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0804, 0x003F };
    uint32_t const ces[9] = { 0x234D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_014)
{
    // 0804 0061;	
    // (‎‎ࠄ‎‎) SAMARITAN LETTER IY	[234D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0804, 0x0061 };
    uint32_t const ces[9] = { 0x234D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_015)
{
    // 0804 0041;	
    // (‎‎ࠄ‎‎) SAMARITAN LETTER IY	[234D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0804, 0x0041 };
    uint32_t const ces[9] = { 0x234D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_016)
{
    // 0804 0062;	
    // (‎‎ࠄ‎‎) SAMARITAN LETTER IY	[234D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0804, 0x0062 };
    uint32_t const ces[9] = { 0x234D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_017)
{
    // 0805 0021;	
    // (‎‎ࠅ‎‎) SAMARITAN LETTER BAA	[234E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0805, 0x0021 };
    uint32_t const ces[9] = { 0x234E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_018)
{
    // 0805 003F;	
    // (‎‎ࠅ‎‎) SAMARITAN LETTER BAA	[234E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0805, 0x003F };
    uint32_t const ces[9] = { 0x234E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_019)
{
    // 0805 0061;	
    // (‎‎ࠅ‎‎) SAMARITAN LETTER BAA	[234E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0805, 0x0061 };
    uint32_t const ces[9] = { 0x234E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_020)
{
    // 0805 0041;	
    // (‎‎ࠅ‎‎) SAMARITAN LETTER BAA	[234E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0805, 0x0041 };
    uint32_t const ces[9] = { 0x234E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_021)
{
    // 0805 0062;	
    // (‎‎ࠅ‎‎) SAMARITAN LETTER BAA	[234E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0805, 0x0062 };
    uint32_t const ces[9] = { 0x234E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_022)
{
    // 0806 0021;	
    // (‎‎ࠆ‎‎) SAMARITAN LETTER ZEN	[234F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0806, 0x0021 };
    uint32_t const ces[9] = { 0x234F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_023)
{
    // 0806 003F;	
    // (‎‎ࠆ‎‎) SAMARITAN LETTER ZEN	[234F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0806, 0x003F };
    uint32_t const ces[9] = { 0x234F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_024)
{
    // 0806 0061;	
    // (‎‎ࠆ‎‎) SAMARITAN LETTER ZEN	[234F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0806, 0x0061 };
    uint32_t const ces[9] = { 0x234F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_025)
{
    // 0806 0041;	
    // (‎‎ࠆ‎‎) SAMARITAN LETTER ZEN	[234F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0806, 0x0041 };
    uint32_t const ces[9] = { 0x234F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_026)
{
    // 0806 0062;	
    // (‎‎ࠆ‎‎) SAMARITAN LETTER ZEN	[234F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0806, 0x0062 };
    uint32_t const ces[9] = { 0x234F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_027)
{
    // 0807 0021;	
    // (‎‎ࠇ‎‎) SAMARITAN LETTER IT	[2350 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0807, 0x0021 };
    uint32_t const ces[9] = { 0x2350, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_028)
{
    // 0807 003F;	
    // (‎‎ࠇ‎‎) SAMARITAN LETTER IT	[2350 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0807, 0x003F };
    uint32_t const ces[9] = { 0x2350, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_029)
{
    // 0807 0061;	
    // (‎‎ࠇ‎‎) SAMARITAN LETTER IT	[2350 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0807, 0x0061 };
    uint32_t const ces[9] = { 0x2350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_030)
{
    // 0807 0041;	
    // (‎‎ࠇ‎‎) SAMARITAN LETTER IT	[2350 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0807, 0x0041 };
    uint32_t const ces[9] = { 0x2350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_031)
{
    // 0807 0062;	
    // (‎‎ࠇ‎‎) SAMARITAN LETTER IT	[2350 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0807, 0x0062 };
    uint32_t const ces[9] = { 0x2350, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_032)
{
    // 0808 0021;	
    // (‎‎ࠈ‎‎) SAMARITAN LETTER TIT	[2351 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0808, 0x0021 };
    uint32_t const ces[9] = { 0x2351, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_033)
{
    // 0808 003F;	
    // (‎‎ࠈ‎‎) SAMARITAN LETTER TIT	[2351 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0808, 0x003F };
    uint32_t const ces[9] = { 0x2351, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_034)
{
    // 0808 0061;	
    // (‎‎ࠈ‎‎) SAMARITAN LETTER TIT	[2351 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0808, 0x0061 };
    uint32_t const ces[9] = { 0x2351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_035)
{
    // 0808 0041;	
    // (‎‎ࠈ‎‎) SAMARITAN LETTER TIT	[2351 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0808, 0x0041 };
    uint32_t const ces[9] = { 0x2351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_036)
{
    // 0808 0062;	
    // (‎‎ࠈ‎‎) SAMARITAN LETTER TIT	[2351 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0808, 0x0062 };
    uint32_t const ces[9] = { 0x2351, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_037)
{
    // 0809 0021;	
    // (‎‎ࠉ‎‎) SAMARITAN LETTER YUT	[2352 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0809, 0x0021 };
    uint32_t const ces[9] = { 0x2352, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_038)
{
    // 0809 003F;	
    // (‎‎ࠉ‎‎) SAMARITAN LETTER YUT	[2352 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0809, 0x003F };
    uint32_t const ces[9] = { 0x2352, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_039)
{
    // 0809 0061;	
    // (‎‎ࠉ‎‎) SAMARITAN LETTER YUT	[2352 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0809, 0x0061 };
    uint32_t const ces[9] = { 0x2352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_040)
{
    // 0809 0041;	
    // (‎‎ࠉ‎‎) SAMARITAN LETTER YUT	[2352 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0809, 0x0041 };
    uint32_t const ces[9] = { 0x2352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_041)
{
    // 0809 0062;	
    // (‎‎ࠉ‎‎) SAMARITAN LETTER YUT	[2352 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0809, 0x0062 };
    uint32_t const ces[9] = { 0x2352, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_042)
{
    // 080A 0021;	
    // (‎‎ࠊ‎‎) SAMARITAN LETTER KAAF	[2353 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080A, 0x0021 };
    uint32_t const ces[9] = { 0x2353, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_043)
{
    // 080A 003F;	
    // (‎‎ࠊ‎‎) SAMARITAN LETTER KAAF	[2353 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080A, 0x003F };
    uint32_t const ces[9] = { 0x2353, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_044)
{
    // 080A 0061;	
    // (‎‎ࠊ‎‎) SAMARITAN LETTER KAAF	[2353 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080A, 0x0061 };
    uint32_t const ces[9] = { 0x2353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_045)
{
    // 080A 0041;	
    // (‎‎ࠊ‎‎) SAMARITAN LETTER KAAF	[2353 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x080A, 0x0041 };
    uint32_t const ces[9] = { 0x2353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_046)
{
    // 080A 0062;	
    // (‎‎ࠊ‎‎) SAMARITAN LETTER KAAF	[2353 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080A, 0x0062 };
    uint32_t const ces[9] = { 0x2353, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_047)
{
    // 080B 0021;	
    // (‎‎ࠋ‎‎) SAMARITAN LETTER LABAT	[2354 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080B, 0x0021 };
    uint32_t const ces[9] = { 0x2354, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_048)
{
    // 080B 003F;	
    // (‎‎ࠋ‎‎) SAMARITAN LETTER LABAT	[2354 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080B, 0x003F };
    uint32_t const ces[9] = { 0x2354, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_049)
{
    // 080B 0061;	
    // (‎‎ࠋ‎‎) SAMARITAN LETTER LABAT	[2354 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080B, 0x0061 };
    uint32_t const ces[9] = { 0x2354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_050)
{
    // 080B 0041;	
    // (‎‎ࠋ‎‎) SAMARITAN LETTER LABAT	[2354 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x080B, 0x0041 };
    uint32_t const ces[9] = { 0x2354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_051)
{
    // 080B 0062;	
    // (‎‎ࠋ‎‎) SAMARITAN LETTER LABAT	[2354 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080B, 0x0062 };
    uint32_t const ces[9] = { 0x2354, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_052)
{
    // 080C 0021;	
    // (‎‎ࠌ‎‎) SAMARITAN LETTER MIM	[2355 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080C, 0x0021 };
    uint32_t const ces[9] = { 0x2355, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_053)
{
    // 080C 003F;	
    // (‎‎ࠌ‎‎) SAMARITAN LETTER MIM	[2355 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080C, 0x003F };
    uint32_t const ces[9] = { 0x2355, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_054)
{
    // 080C 0061;	
    // (‎‎ࠌ‎‎) SAMARITAN LETTER MIM	[2355 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080C, 0x0061 };
    uint32_t const ces[9] = { 0x2355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_055)
{
    // 080C 0041;	
    // (‎‎ࠌ‎‎) SAMARITAN LETTER MIM	[2355 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x080C, 0x0041 };
    uint32_t const ces[9] = { 0x2355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_056)
{
    // 080C 0062;	
    // (‎‎ࠌ‎‎) SAMARITAN LETTER MIM	[2355 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080C, 0x0062 };
    uint32_t const ces[9] = { 0x2355, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_057)
{
    // 080D 0021;	
    // (‎‎ࠍ‎‎) SAMARITAN LETTER NUN	[2356 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080D, 0x0021 };
    uint32_t const ces[9] = { 0x2356, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_058)
{
    // 080D 003F;	
    // (‎‎ࠍ‎‎) SAMARITAN LETTER NUN	[2356 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080D, 0x003F };
    uint32_t const ces[9] = { 0x2356, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_059)
{
    // 080D 0061;	
    // (‎‎ࠍ‎‎) SAMARITAN LETTER NUN	[2356 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080D, 0x0061 };
    uint32_t const ces[9] = { 0x2356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_060)
{
    // 080D 0041;	
    // (‎‎ࠍ‎‎) SAMARITAN LETTER NUN	[2356 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x080D, 0x0041 };
    uint32_t const ces[9] = { 0x2356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_061)
{
    // 080D 0062;	
    // (‎‎ࠍ‎‎) SAMARITAN LETTER NUN	[2356 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080D, 0x0062 };
    uint32_t const ces[9] = { 0x2356, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_062)
{
    // 080E 0021;	
    // (‎‎ࠎ‎‎) SAMARITAN LETTER SINGAAT	[2357 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080E, 0x0021 };
    uint32_t const ces[9] = { 0x2357, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_063)
{
    // 080E 003F;	
    // (‎‎ࠎ‎‎) SAMARITAN LETTER SINGAAT	[2357 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080E, 0x003F };
    uint32_t const ces[9] = { 0x2357, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_064)
{
    // 080E 0061;	
    // (‎‎ࠎ‎‎) SAMARITAN LETTER SINGAAT	[2357 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080E, 0x0061 };
    uint32_t const ces[9] = { 0x2357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_065)
{
    // 080E 0041;	
    // (‎‎ࠎ‎‎) SAMARITAN LETTER SINGAAT	[2357 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x080E, 0x0041 };
    uint32_t const ces[9] = { 0x2357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_066)
{
    // 080E 0062;	
    // (‎‎ࠎ‎‎) SAMARITAN LETTER SINGAAT	[2357 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080E, 0x0062 };
    uint32_t const ces[9] = { 0x2357, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_067)
{
    // 080F 0021;	
    // (‎‎ࠏ‎‎) SAMARITAN LETTER IN	[2358 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080F, 0x0021 };
    uint32_t const ces[9] = { 0x2358, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_068)
{
    // 080F 003F;	
    // (‎‎ࠏ‎‎) SAMARITAN LETTER IN	[2358 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080F, 0x003F };
    uint32_t const ces[9] = { 0x2358, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_069)
{
    // 080F 0061;	
    // (‎‎ࠏ‎‎) SAMARITAN LETTER IN	[2358 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080F, 0x0061 };
    uint32_t const ces[9] = { 0x2358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_070)
{
    // 080F 0041;	
    // (‎‎ࠏ‎‎) SAMARITAN LETTER IN	[2358 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x080F, 0x0041 };
    uint32_t const ces[9] = { 0x2358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_071)
{
    // 080F 0062;	
    // (‎‎ࠏ‎‎) SAMARITAN LETTER IN	[2358 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x080F, 0x0062 };
    uint32_t const ces[9] = { 0x2358, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_072)
{
    // 0810 0021;	
    // (‎‎ࠐ‎‎) SAMARITAN LETTER FI	[2359 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0810, 0x0021 };
    uint32_t const ces[9] = { 0x2359, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_073)
{
    // 0810 003F;	
    // (‎‎ࠐ‎‎) SAMARITAN LETTER FI	[2359 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0810, 0x003F };
    uint32_t const ces[9] = { 0x2359, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_074)
{
    // 0810 0061;	
    // (‎‎ࠐ‎‎) SAMARITAN LETTER FI	[2359 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0810, 0x0061 };
    uint32_t const ces[9] = { 0x2359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_075)
{
    // 0810 0041;	
    // (‎‎ࠐ‎‎) SAMARITAN LETTER FI	[2359 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0810, 0x0041 };
    uint32_t const ces[9] = { 0x2359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_076)
{
    // 0810 0062;	
    // (‎‎ࠐ‎‎) SAMARITAN LETTER FI	[2359 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0810, 0x0062 };
    uint32_t const ces[9] = { 0x2359, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_077)
{
    // 0811 0021;	
    // (‎‎ࠑ‎‎) SAMARITAN LETTER TSAADIY	[235A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0811, 0x0021 };
    uint32_t const ces[9] = { 0x235A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_078)
{
    // 0811 003F;	
    // (‎‎ࠑ‎‎) SAMARITAN LETTER TSAADIY	[235A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0811, 0x003F };
    uint32_t const ces[9] = { 0x235A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_079)
{
    // 0811 0061;	
    // (‎‎ࠑ‎‎) SAMARITAN LETTER TSAADIY	[235A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0811, 0x0061 };
    uint32_t const ces[9] = { 0x235A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_080)
{
    // 0811 0041;	
    // (‎‎ࠑ‎‎) SAMARITAN LETTER TSAADIY	[235A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0811, 0x0041 };
    uint32_t const ces[9] = { 0x235A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_081)
{
    // 0811 0062;	
    // (‎‎ࠑ‎‎) SAMARITAN LETTER TSAADIY	[235A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0811, 0x0062 };
    uint32_t const ces[9] = { 0x235A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_082)
{
    // 0812 0021;	
    // (‎‎ࠒ‎‎) SAMARITAN LETTER QUF	[235B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0812, 0x0021 };
    uint32_t const ces[9] = { 0x235B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_083)
{
    // 0812 003F;	
    // (‎‎ࠒ‎‎) SAMARITAN LETTER QUF	[235B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0812, 0x003F };
    uint32_t const ces[9] = { 0x235B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_084)
{
    // 0812 0061;	
    // (‎‎ࠒ‎‎) SAMARITAN LETTER QUF	[235B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0812, 0x0061 };
    uint32_t const ces[9] = { 0x235B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_085)
{
    // 0812 0041;	
    // (‎‎ࠒ‎‎) SAMARITAN LETTER QUF	[235B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0812, 0x0041 };
    uint32_t const ces[9] = { 0x235B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_086)
{
    // 0812 0062;	
    // (‎‎ࠒ‎‎) SAMARITAN LETTER QUF	[235B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0812, 0x0062 };
    uint32_t const ces[9] = { 0x235B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_087)
{
    // 0813 0021;	
    // (‎‎ࠓ‎‎) SAMARITAN LETTER RISH	[235C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0813, 0x0021 };
    uint32_t const ces[9] = { 0x235C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_088)
{
    // 0813 003F;	
    // (‎‎ࠓ‎‎) SAMARITAN LETTER RISH	[235C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0813, 0x003F };
    uint32_t const ces[9] = { 0x235C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_089)
{
    // 0813 0061;	
    // (‎‎ࠓ‎‎) SAMARITAN LETTER RISH	[235C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0813, 0x0061 };
    uint32_t const ces[9] = { 0x235C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_090)
{
    // 0813 0041;	
    // (‎‎ࠓ‎‎) SAMARITAN LETTER RISH	[235C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0813, 0x0041 };
    uint32_t const ces[9] = { 0x235C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_091)
{
    // 0813 0062;	
    // (‎‎ࠓ‎‎) SAMARITAN LETTER RISH	[235C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0813, 0x0062 };
    uint32_t const ces[9] = { 0x235C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_092)
{
    // 0814 0021;	
    // (‎‎ࠔ‎‎) SAMARITAN LETTER SHAN	[235D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0814, 0x0021 };
    uint32_t const ces[9] = { 0x235D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_093)
{
    // 0814 003F;	
    // (‎‎ࠔ‎‎) SAMARITAN LETTER SHAN	[235D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0814, 0x003F };
    uint32_t const ces[9] = { 0x235D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_094)
{
    // 0814 0061;	
    // (‎‎ࠔ‎‎) SAMARITAN LETTER SHAN	[235D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0814, 0x0061 };
    uint32_t const ces[9] = { 0x235D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_095)
{
    // 0814 0041;	
    // (‎‎ࠔ‎‎) SAMARITAN LETTER SHAN	[235D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0814, 0x0041 };
    uint32_t const ces[9] = { 0x235D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_096)
{
    // 0814 0062;	
    // (‎‎ࠔ‎‎) SAMARITAN LETTER SHAN	[235D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0814, 0x0062 };
    uint32_t const ces[9] = { 0x235D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_097)
{
    // 0815 0021;	
    // (‎‎ࠕ‎‎) SAMARITAN LETTER TAAF	[235E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0815, 0x0021 };
    uint32_t const ces[9] = { 0x235E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_098)
{
    // 0815 003F;	
    // (‎‎ࠕ‎‎) SAMARITAN LETTER TAAF	[235E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0815, 0x003F };
    uint32_t const ces[9] = { 0x235E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_099)
{
    // 0815 0061;	
    // (‎‎ࠕ‎‎) SAMARITAN LETTER TAAF	[235E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0815, 0x0061 };
    uint32_t const ces[9] = { 0x235E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_100)
{
    // 0815 0041;	
    // (‎‎ࠕ‎‎) SAMARITAN LETTER TAAF	[235E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0815, 0x0041 };
    uint32_t const ces[9] = { 0x235E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_101)
{
    // 0815 0062;	
    // (‎‎ࠕ‎‎) SAMARITAN LETTER TAAF	[235E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0815, 0x0062 };
    uint32_t const ces[9] = { 0x235E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_102)
{
    // 0334 0816;	
    // (ࠖ) SAMARITAN MARK IN	[235F | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0816 };
    uint32_t const ces[8] = { 0x235F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_103)
{
    // 0816 0334;	
    // (ࠖ) SAMARITAN MARK IN	[235F | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0816, 0x0334 };
    uint32_t const ces[8] = { 0x235F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_104)
{
    // 0816 0021;	
    // (ࠖ) SAMARITAN MARK IN	[235F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0816, 0x0021 };
    uint32_t const ces[9] = { 0x235F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_105)
{
    // 0816 003F;	
    // (ࠖ) SAMARITAN MARK IN	[235F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0816, 0x003F };
    uint32_t const ces[9] = { 0x235F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_106)
{
    // 0816 0061;	
    // (ࠖ) SAMARITAN MARK IN	[235F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0816, 0x0061 };
    uint32_t const ces[9] = { 0x235F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_107)
{
    // 0816 0041;	
    // (ࠖ) SAMARITAN MARK IN	[235F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0816, 0x0041 };
    uint32_t const ces[9] = { 0x235F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_108)
{
    // 0816 0062;	
    // (ࠖ) SAMARITAN MARK IN	[235F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0816, 0x0062 };
    uint32_t const ces[9] = { 0x235F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_109)
{
    // 0334 0817;	
    // (ࠗ) SAMARITAN MARK IN-ALAF	[2360 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0817 };
    uint32_t const ces[8] = { 0x2360, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_110)
{
    // 0817 0334;	
    // (ࠗ) SAMARITAN MARK IN-ALAF	[2360 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0817, 0x0334 };
    uint32_t const ces[8] = { 0x2360, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_111)
{
    // 0817 0021;	
    // (ࠗ) SAMARITAN MARK IN-ALAF	[2360 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0817, 0x0021 };
    uint32_t const ces[9] = { 0x2360, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_112)
{
    // 0817 003F;	
    // (ࠗ) SAMARITAN MARK IN-ALAF	[2360 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0817, 0x003F };
    uint32_t const ces[9] = { 0x2360, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_113)
{
    // 0817 0061;	
    // (ࠗ) SAMARITAN MARK IN-ALAF	[2360 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0817, 0x0061 };
    uint32_t const ces[9] = { 0x2360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_114)
{
    // 0817 0041;	
    // (ࠗ) SAMARITAN MARK IN-ALAF	[2360 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0817, 0x0041 };
    uint32_t const ces[9] = { 0x2360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_115)
{
    // 0817 0062;	
    // (ࠗ) SAMARITAN MARK IN-ALAF	[2360 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0817, 0x0062 };
    uint32_t const ces[9] = { 0x2360, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_116)
{
    // 081A 0021;	
    // (‎‎ࠚ‎‎) SAMARITAN MODIFIER LETTER EPENTHETIC YUT	[2361 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081A, 0x0021 };
    uint32_t const ces[9] = { 0x2361, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_117)
{
    // 081A 003F;	
    // (‎‎ࠚ‎‎) SAMARITAN MODIFIER LETTER EPENTHETIC YUT	[2361 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081A, 0x003F };
    uint32_t const ces[9] = { 0x2361, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_118)
{
    // 081A 0061;	
    // (‎‎ࠚ‎‎) SAMARITAN MODIFIER LETTER EPENTHETIC YUT	[2361 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081A, 0x0061 };
    uint32_t const ces[9] = { 0x2361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_119)
{
    // 081A 0041;	
    // (‎‎ࠚ‎‎) SAMARITAN MODIFIER LETTER EPENTHETIC YUT	[2361 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x081A, 0x0041 };
    uint32_t const ces[9] = { 0x2361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_120)
{
    // 081A 0062;	
    // (‎‎ࠚ‎‎) SAMARITAN MODIFIER LETTER EPENTHETIC YUT	[2361 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081A, 0x0062 };
    uint32_t const ces[9] = { 0x2361, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_121)
{
    // 0334 081B;	
    // (ࠛ) SAMARITAN MARK EPENTHETIC YUT	[2362 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x081B };
    uint32_t const ces[8] = { 0x2362, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_122)
{
    // 081B 0334;	
    // (ࠛ) SAMARITAN MARK EPENTHETIC YUT	[2362 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081B, 0x0334 };
    uint32_t const ces[8] = { 0x2362, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_123)
{
    // 081B 0021;	
    // (ࠛ) SAMARITAN MARK EPENTHETIC YUT	[2362 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081B, 0x0021 };
    uint32_t const ces[9] = { 0x2362, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_124)
{
    // 081B 003F;	
    // (ࠛ) SAMARITAN MARK EPENTHETIC YUT	[2362 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081B, 0x003F };
    uint32_t const ces[9] = { 0x2362, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_125)
{
    // 081B 0061;	
    // (ࠛ) SAMARITAN MARK EPENTHETIC YUT	[2362 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081B, 0x0061 };
    uint32_t const ces[9] = { 0x2362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_126)
{
    // 081B 0041;	
    // (ࠛ) SAMARITAN MARK EPENTHETIC YUT	[2362 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x081B, 0x0041 };
    uint32_t const ces[9] = { 0x2362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_127)
{
    // 081B 0062;	
    // (ࠛ) SAMARITAN MARK EPENTHETIC YUT	[2362 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081B, 0x0062 };
    uint32_t const ces[9] = { 0x2362, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_128)
{
    // 0621 0021;	
    // (‎‎ء‎‎) ARABIC LETTER HAMZA	[2363 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0621, 0x0021 };
    uint32_t const ces[9] = { 0x2363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_129)
{
    // 0674 0021;	
    // (‎‎ٴ‎‎) ARABIC LETTER HIGH HAMZA	[2363 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0674, 0x0021 };
    uint32_t const ces[9] = { 0x2363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_130)
{
    // FE80 0021;	
    // (‎‎ﺀ‎‎) ARABIC LETTER HAMZA ISOLATED FORM	[2363 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE80, 0x0021 };
    uint32_t const ces[9] = { 0x2363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_131)
{
    // 06FD 0021;	
    // (‎‎۽‎‎) ARABIC SIGN SINDHI AMPERSAND	[2363 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x06FD, 0x0021 };
    uint32_t const ces[11] = { 0x2363, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_132)
{
    // 0621 003F;	
    // (‎‎ء‎‎) ARABIC LETTER HAMZA	[2363 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0621, 0x003F };
    uint32_t const ces[9] = { 0x2363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_133)
{
    // 0674 003F;	
    // (‎‎ٴ‎‎) ARABIC LETTER HIGH HAMZA	[2363 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0674, 0x003F };
    uint32_t const ces[9] = { 0x2363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_134)
{
    // FE80 003F;	
    // (‎‎ﺀ‎‎) ARABIC LETTER HAMZA ISOLATED FORM	[2363 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE80, 0x003F };
    uint32_t const ces[9] = { 0x2363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_135)
{
    // 06FD 003F;	
    // (‎‎۽‎‎) ARABIC SIGN SINDHI AMPERSAND	[2363 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x06FD, 0x003F };
    uint32_t const ces[11] = { 0x2363, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_136)
{
    // 0621 0061;	
    // (‎‎ء‎‎) ARABIC LETTER HAMZA	[2363 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0621, 0x0061 };
    uint32_t const ces[9] = { 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_137)
{
    // 0621 0041;	
    // (‎‎ء‎‎) ARABIC LETTER HAMZA	[2363 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0621, 0x0041 };
    uint32_t const ces[9] = { 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_138)
{
    // 0674 0061;	
    // (‎‎ٴ‎‎) ARABIC LETTER HIGH HAMZA	[2363 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0674, 0x0061 };
    uint32_t const ces[9] = { 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_139)
{
    // 0674 0041;	
    // (‎‎ٴ‎‎) ARABIC LETTER HIGH HAMZA	[2363 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0674, 0x0041 };
    uint32_t const ces[9] = { 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_140)
{
    // FE80 0061;	
    // (‎‎ﺀ‎‎) ARABIC LETTER HAMZA ISOLATED FORM	[2363 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE80, 0x0061 };
    uint32_t const ces[9] = { 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_141)
{
    // FE80 0041;	
    // (‎‎ﺀ‎‎) ARABIC LETTER HAMZA ISOLATED FORM	[2363 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE80, 0x0041 };
    uint32_t const ces[9] = { 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_142)
{
    // 06FD 0061;	
    // (‎‎۽‎‎) ARABIC SIGN SINDHI AMPERSAND	[2363 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x06FD, 0x0061 };
    uint32_t const ces[11] = { 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_143)
{
    // 06FD 0041;	
    // (‎‎۽‎‎) ARABIC SIGN SINDHI AMPERSAND	[2363 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x06FD, 0x0041 };
    uint32_t const ces[11] = { 0x2363, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_144)
{
    // 0621 0062;	
    // (‎‎ء‎‎) ARABIC LETTER HAMZA	[2363 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0621, 0x0062 };
    uint32_t const ces[9] = { 0x2363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_145)
{
    // 0674 0062;	
    // (‎‎ٴ‎‎) ARABIC LETTER HIGH HAMZA	[2363 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0674, 0x0062 };
    uint32_t const ces[9] = { 0x2363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_146)
{
    // FE80 0062;	
    // (‎‎ﺀ‎‎) ARABIC LETTER HAMZA ISOLATED FORM	[2363 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE80, 0x0062 };
    uint32_t const ces[9] = { 0x2363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_147)
{
    // 06FD 0062;	
    // (‎‎۽‎‎) ARABIC SIGN SINDHI AMPERSAND	[2363 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x06FD, 0x0062 };
    uint32_t const ces[11] = { 0x2363, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_148)
{
    // 0622 0334;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE	[2364 | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0622, 0x0334 };
    uint32_t const ces[8] = { 0x2364, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_149)
{
    // 0627 0334 0653;	
    // (‎‎ا̴‎‎) ARABIC LETTER ALEF, COMBINING TILDE OVERLAY	[2364 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0334, 0x0653 };
    uint32_t const ces[8] = { 0x2364, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_150)
{
    // 0627 0653 0334;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF, ARABIC MADDAH ABOVE	[2364 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0653, 0x0334 };
    uint32_t const ces[8] = { 0x2364, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_151)
{
    // 0622 0021;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE	[2364 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0622, 0x0021 };
    uint32_t const ces[9] = { 0x2364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_152)
{
    // 0627 0653 0021;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF, ARABIC MADDAH ABOVE	[2364 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0653, 0x0021 };
    uint32_t const ces[9] = { 0x2364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_153)
{
    // FE82 0021;	
    // (‎‎ﺂ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE FINAL FORM	[2364 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE82, 0x0021 };
    uint32_t const ces[9] = { 0x2364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_154)
{
    // FE81 0021;	
    // (‎‎ﺁ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE ISOLATED FORM	[2364 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE81, 0x0021 };
    uint32_t const ces[9] = { 0x2364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_155)
{
    // 0622 003F;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE	[2364 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0622, 0x003F };
    uint32_t const ces[9] = { 0x2364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_156)
{
    // 0627 0653 003F;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF, ARABIC MADDAH ABOVE	[2364 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0653, 0x003F };
    uint32_t const ces[9] = { 0x2364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_157)
{
    // FE82 003F;	
    // (‎‎ﺂ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE FINAL FORM	[2364 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE82, 0x003F };
    uint32_t const ces[9] = { 0x2364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_158)
{
    // FE81 003F;	
    // (‎‎ﺁ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE ISOLATED FORM	[2364 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE81, 0x003F };
    uint32_t const ces[9] = { 0x2364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_159)
{
    // 0627 0591 0653 0061;	
    // (‎‎آ֑‎‎) ARABIC LETTER ALEF, HEBREW ACCENT ETNAHTA, ARABIC MADDAH ABOVE	[2364 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0627, 0x0591, 0x0653, 0x0061 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_160)
{
    // 0622 0061;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE	[2364 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0622, 0x0061 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_161)
{
    // 0627 0653 0061;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF, ARABIC MADDAH ABOVE	[2364 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0653, 0x0061 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_162)
{
    // 0627 1D165 0653 0061;	
    // (‎‎آ𝅥‎‎) ARABIC LETTER ALEF, MUSICAL SYMBOL COMBINING STEM, ARABIC MADDAH ABOVE	[2364 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0627, 0x1D165, 0x0653, 0x0061 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_163)
{
    // 0622 0041;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE	[2364 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0622, 0x0041 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_164)
{
    // 0627 0653 0041;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF, ARABIC MADDAH ABOVE	[2364 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0627, 0x0653, 0x0041 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_165)
{
    // FE82 0061;	
    // (‎‎ﺂ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE FINAL FORM	[2364 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE82, 0x0061 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_166)
{
    // FE82 0041;	
    // (‎‎ﺂ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE FINAL FORM	[2364 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFE82, 0x0041 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_167)
{
    // FE81 0061;	
    // (‎‎ﺁ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE ISOLATED FORM	[2364 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE81, 0x0061 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_168)
{
    // FE81 0041;	
    // (‎‎ﺁ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE ISOLATED FORM	[2364 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE81, 0x0041 };
    uint32_t const ces[9] = { 0x2364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_169)
{
    // 0622 0062;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE	[2364 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0622, 0x0062 };
    uint32_t const ces[9] = { 0x2364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_170)
{
    // 0627 0653 0062;	
    // (‎‎آ‎‎) ARABIC LETTER ALEF, ARABIC MADDAH ABOVE	[2364 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0653, 0x0062 };
    uint32_t const ces[9] = { 0x2364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_171)
{
    // FE82 0062;	
    // (‎‎ﺂ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE FINAL FORM	[2364 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE82, 0x0062 };
    uint32_t const ces[9] = { 0x2364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_172)
{
    // FE81 0062;	
    // (‎‎ﺁ‎‎) ARABIC LETTER ALEF WITH MADDA ABOVE ISOLATED FORM	[2364 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE81, 0x0062 };
    uint32_t const ces[9] = { 0x2364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_173)
{
    // 0623 0334;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE	[2365 | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0623, 0x0334 };
    uint32_t const ces[8] = { 0x2365, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_174)
{
    // 0627 0334 0654;	
    // (‎‎ا̴‎‎) ARABIC LETTER ALEF, COMBINING TILDE OVERLAY	[2365 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0334, 0x0654 };
    uint32_t const ces[8] = { 0x2365, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_175)
{
    // 0627 0654 0334;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA ABOVE	[2365 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0654, 0x0334 };
    uint32_t const ces[8] = { 0x2365, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_176)
{
    // 0623 0021;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE	[2365 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0623, 0x0021 };
    uint32_t const ces[9] = { 0x2365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_177)
{
    // 0627 0654 0021;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA ABOVE	[2365 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0654, 0x0021 };
    uint32_t const ces[9] = { 0x2365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_178)
{
    // FE84 0021;	
    // (‎‎ﺄ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE FINAL FORM	[2365 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE84, 0x0021 };
    uint32_t const ces[9] = { 0x2365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_179)
{
    // FE83 0021;	
    // (‎‎ﺃ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE ISOLATED FORM	[2365 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE83, 0x0021 };
    uint32_t const ces[9] = { 0x2365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_180)
{
    // 0623 003F;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE	[2365 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0623, 0x003F };
    uint32_t const ces[9] = { 0x2365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_181)
{
    // 0627 0654 003F;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA ABOVE	[2365 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0654, 0x003F };
    uint32_t const ces[9] = { 0x2365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_182)
{
    // FE84 003F;	
    // (‎‎ﺄ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE FINAL FORM	[2365 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE84, 0x003F };
    uint32_t const ces[9] = { 0x2365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_183)
{
    // FE83 003F;	
    // (‎‎ﺃ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE ISOLATED FORM	[2365 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE83, 0x003F };
    uint32_t const ces[9] = { 0x2365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_184)
{
    // 0627 0591 0654 0061;	
    // (‎‎أ֑‎‎) ARABIC LETTER ALEF, HEBREW ACCENT ETNAHTA, ARABIC HAMZA ABOVE	[2365 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0627, 0x0591, 0x0654, 0x0061 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_185)
{
    // 0623 0061;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE	[2365 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0623, 0x0061 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_186)
{
    // 0627 0654 0061;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA ABOVE	[2365 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0654, 0x0061 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_187)
{
    // 0627 1D165 0654 0061;	
    // (‎‎أ𝅥‎‎) ARABIC LETTER ALEF, MUSICAL SYMBOL COMBINING STEM, ARABIC HAMZA ABOVE	[2365 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0627, 0x1D165, 0x0654, 0x0061 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_188)
{
    // 0623 0041;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE	[2365 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0623, 0x0041 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_189)
{
    // 0627 0654 0041;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA ABOVE	[2365 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0627, 0x0654, 0x0041 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_190)
{
    // FE84 0061;	
    // (‎‎ﺄ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE FINAL FORM	[2365 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE84, 0x0061 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_191)
{
    // FE84 0041;	
    // (‎‎ﺄ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE FINAL FORM	[2365 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFE84, 0x0041 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_192)
{
    // FE83 0061;	
    // (‎‎ﺃ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE ISOLATED FORM	[2365 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE83, 0x0061 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_193)
{
    // FE83 0041;	
    // (‎‎ﺃ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE ISOLATED FORM	[2365 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE83, 0x0041 };
    uint32_t const ces[9] = { 0x2365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_194)
{
    // 0623 0062;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE	[2365 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0623, 0x0062 };
    uint32_t const ces[9] = { 0x2365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_195)
{
    // 0627 0654 0062;	
    // (‎‎أ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA ABOVE	[2365 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0654, 0x0062 };
    uint32_t const ces[9] = { 0x2365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_196)
{
    // FE84 0062;	
    // (‎‎ﺄ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE FINAL FORM	[2365 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE84, 0x0062 };
    uint32_t const ces[9] = { 0x2365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_197)
{
    // FE83 0062;	
    // (‎‎ﺃ‎‎) ARABIC LETTER ALEF WITH HAMZA ABOVE ISOLATED FORM	[2365 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE83, 0x0062 };
    uint32_t const ces[9] = { 0x2365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_198)
{
    // 0672 0021;	
    // (‎‎ٲ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE	[2366 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0672, 0x0021 };
    uint32_t const ces[9] = { 0x2366, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_199)
{
    // 0672 003F;	
    // (‎‎ٲ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE	[2366 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0672, 0x003F };
    uint32_t const ces[9] = { 0x2366, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_200)
{
    // 0672 0061;	
    // (‎‎ٲ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE	[2366 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0672, 0x0061 };
    uint32_t const ces[9] = { 0x2366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_201)
{
    // 0672 0041;	
    // (‎‎ٲ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE	[2366 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0672, 0x0041 };
    uint32_t const ces[9] = { 0x2366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_202)
{
    // 0672 0062;	
    // (‎‎ٲ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE	[2366 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0672, 0x0062 };
    uint32_t const ces[9] = { 0x2366, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_203)
{
    // 0671 0021;	
    // (‎‎ٱ‎‎) ARABIC LETTER ALEF WASLA	[2367 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0671, 0x0021 };
    uint32_t const ces[9] = { 0x2367, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_204)
{
    // FB51 0021;	
    // (‎‎ﭑ‎‎) ARABIC LETTER ALEF WASLA FINAL FORM	[2367 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB51, 0x0021 };
    uint32_t const ces[9] = { 0x2367, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_205)
{
    // FB50 0021;	
    // (‎‎ﭐ‎‎) ARABIC LETTER ALEF WASLA ISOLATED FORM	[2367 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB50, 0x0021 };
    uint32_t const ces[9] = { 0x2367, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_206)
{
    // 0671 003F;	
    // (‎‎ٱ‎‎) ARABIC LETTER ALEF WASLA	[2367 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0671, 0x003F };
    uint32_t const ces[9] = { 0x2367, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_207)
{
    // FB51 003F;	
    // (‎‎ﭑ‎‎) ARABIC LETTER ALEF WASLA FINAL FORM	[2367 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB51, 0x003F };
    uint32_t const ces[9] = { 0x2367, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_208)
{
    // FB50 003F;	
    // (‎‎ﭐ‎‎) ARABIC LETTER ALEF WASLA ISOLATED FORM	[2367 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB50, 0x003F };
    uint32_t const ces[9] = { 0x2367, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_209)
{
    // 0671 0061;	
    // (‎‎ٱ‎‎) ARABIC LETTER ALEF WASLA	[2367 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0671, 0x0061 };
    uint32_t const ces[9] = { 0x2367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_210)
{
    // 0671 0041;	
    // (‎‎ٱ‎‎) ARABIC LETTER ALEF WASLA	[2367 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0671, 0x0041 };
    uint32_t const ces[9] = { 0x2367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_211)
{
    // FB51 0061;	
    // (‎‎ﭑ‎‎) ARABIC LETTER ALEF WASLA FINAL FORM	[2367 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB51, 0x0061 };
    uint32_t const ces[9] = { 0x2367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_212)
{
    // FB51 0041;	
    // (‎‎ﭑ‎‎) ARABIC LETTER ALEF WASLA FINAL FORM	[2367 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB51, 0x0041 };
    uint32_t const ces[9] = { 0x2367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_213)
{
    // FB50 0061;	
    // (‎‎ﭐ‎‎) ARABIC LETTER ALEF WASLA ISOLATED FORM	[2367 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB50, 0x0061 };
    uint32_t const ces[9] = { 0x2367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_214)
{
    // FB50 0041;	
    // (‎‎ﭐ‎‎) ARABIC LETTER ALEF WASLA ISOLATED FORM	[2367 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB50, 0x0041 };
    uint32_t const ces[9] = { 0x2367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_215)
{
    // 0671 0062;	
    // (‎‎ٱ‎‎) ARABIC LETTER ALEF WASLA	[2367 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0671, 0x0062 };
    uint32_t const ces[9] = { 0x2367, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_216)
{
    // FB51 0062;	
    // (‎‎ﭑ‎‎) ARABIC LETTER ALEF WASLA FINAL FORM	[2367 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB51, 0x0062 };
    uint32_t const ces[9] = { 0x2367, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_217)
{
    // FB50 0062;	
    // (‎‎ﭐ‎‎) ARABIC LETTER ALEF WASLA ISOLATED FORM	[2367 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB50, 0x0062 };
    uint32_t const ces[9] = { 0x2367, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_218)
{
    // 0624 0334;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE	[2368 | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0624, 0x0334 };
    uint32_t const ces[8] = { 0x2368, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_219)
{
    // 0648 0334 0654;	
    // (‎‎و̴‎‎) ARABIC LETTER WAW, COMBINING TILDE OVERLAY	[2368 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0648, 0x0334, 0x0654 };
    uint32_t const ces[8] = { 0x2368, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_220)
{
    // 0648 0654 0334;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW, ARABIC HAMZA ABOVE	[2368 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0648, 0x0654, 0x0334 };
    uint32_t const ces[8] = { 0x2368, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_221)
{
    // 0624 0021;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE	[2368 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0624, 0x0021 };
    uint32_t const ces[9] = { 0x2368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_222)
{
    // 0648 0654 0021;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW, ARABIC HAMZA ABOVE	[2368 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0648, 0x0654, 0x0021 };
    uint32_t const ces[9] = { 0x2368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_223)
{
    // FE86 0021;	
    // (‎‎ﺆ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE FINAL FORM	[2368 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE86, 0x0021 };
    uint32_t const ces[9] = { 0x2368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_224)
{
    // FE85 0021;	
    // (‎‎ﺅ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE ISOLATED FORM	[2368 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE85, 0x0021 };
    uint32_t const ces[9] = { 0x2368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_225)
{
    // 0624 003F;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE	[2368 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0624, 0x003F };
    uint32_t const ces[9] = { 0x2368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_226)
{
    // 0648 0654 003F;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW, ARABIC HAMZA ABOVE	[2368 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0648, 0x0654, 0x003F };
    uint32_t const ces[9] = { 0x2368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_227)
{
    // FE86 003F;	
    // (‎‎ﺆ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE FINAL FORM	[2368 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE86, 0x003F };
    uint32_t const ces[9] = { 0x2368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_228)
{
    // FE85 003F;	
    // (‎‎ﺅ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE ISOLATED FORM	[2368 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE85, 0x003F };
    uint32_t const ces[9] = { 0x2368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_229)
{
    // 0648 0591 0654 0061;	
    // (‎‎ؤ֑‎‎) ARABIC LETTER WAW, HEBREW ACCENT ETNAHTA, ARABIC HAMZA ABOVE	[2368 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0648, 0x0591, 0x0654, 0x0061 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_230)
{
    // 0624 0061;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE	[2368 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0624, 0x0061 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_231)
{
    // 0648 0654 0061;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW, ARABIC HAMZA ABOVE	[2368 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0648, 0x0654, 0x0061 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_232)
{
    // 0648 1D165 0654 0061;	
    // (‎‎ؤ𝅥‎‎) ARABIC LETTER WAW, MUSICAL SYMBOL COMBINING STEM, ARABIC HAMZA ABOVE	[2368 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0648, 0x1D165, 0x0654, 0x0061 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_233)
{
    // 0624 0041;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE	[2368 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0624, 0x0041 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_234)
{
    // 0648 0654 0041;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW, ARABIC HAMZA ABOVE	[2368 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0648, 0x0654, 0x0041 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_235)
{
    // FE86 0061;	
    // (‎‎ﺆ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE FINAL FORM	[2368 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE86, 0x0061 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_236)
{
    // FE86 0041;	
    // (‎‎ﺆ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE FINAL FORM	[2368 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFE86, 0x0041 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_237)
{
    // FE85 0061;	
    // (‎‎ﺅ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE ISOLATED FORM	[2368 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE85, 0x0061 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_238)
{
    // FE85 0041;	
    // (‎‎ﺅ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE ISOLATED FORM	[2368 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE85, 0x0041 };
    uint32_t const ces[9] = { 0x2368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_239)
{
    // 0624 0062;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE	[2368 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0624, 0x0062 };
    uint32_t const ces[9] = { 0x2368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_240)
{
    // 0648 0654 0062;	
    // (‎‎ؤ‎‎) ARABIC LETTER WAW, ARABIC HAMZA ABOVE	[2368 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0648, 0x0654, 0x0062 };
    uint32_t const ces[9] = { 0x2368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_241)
{
    // FE86 0062;	
    // (‎‎ﺆ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE FINAL FORM	[2368 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE86, 0x0062 };
    uint32_t const ces[9] = { 0x2368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_242)
{
    // FE85 0062;	
    // (‎‎ﺅ‎‎) ARABIC LETTER WAW WITH HAMZA ABOVE ISOLATED FORM	[2368 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE85, 0x0062 };
    uint32_t const ces[9] = { 0x2368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_243)
{
    // 0625 0334;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW	[2369 | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0625, 0x0334 };
    uint32_t const ces[8] = { 0x2369, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_244)
{
    // 0627 0334 0655;	
    // (‎‎ا̴‎‎) ARABIC LETTER ALEF, COMBINING TILDE OVERLAY	[2369 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0334, 0x0655 };
    uint32_t const ces[8] = { 0x2369, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_245)
{
    // 0627 0655 0334;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA BELOW	[2369 | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0655, 0x0334 };
    uint32_t const ces[8] = { 0x2369, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_246)
{
    // 0625 0021;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW	[2369 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0625, 0x0021 };
    uint32_t const ces[9] = { 0x2369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_247)
{
    // 0627 0655 0021;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA BELOW	[2369 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0655, 0x0021 };
    uint32_t const ces[9] = { 0x2369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_248)
{
    // FE88 0021;	
    // (‎‎ﺈ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW FINAL FORM	[2369 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE88, 0x0021 };
    uint32_t const ces[9] = { 0x2369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_249)
{
    // FE87 0021;	
    // (‎‎ﺇ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW ISOLATED FORM	[2369 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE87, 0x0021 };
    uint32_t const ces[9] = { 0x2369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_250)
{
    // 0625 003F;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW	[2369 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0625, 0x003F };
    uint32_t const ces[9] = { 0x2369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_251)
{
    // 0627 0655 003F;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA BELOW	[2369 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0655, 0x003F };
    uint32_t const ces[9] = { 0x2369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_252)
{
    // FE88 003F;	
    // (‎‎ﺈ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW FINAL FORM	[2369 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE88, 0x003F };
    uint32_t const ces[9] = { 0x2369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_253)
{
    // FE87 003F;	
    // (‎‎ﺇ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW ISOLATED FORM	[2369 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE87, 0x003F };
    uint32_t const ces[9] = { 0x2369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_254)
{
    // 0625 0061;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW	[2369 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0625, 0x0061 };
    uint32_t const ces[9] = { 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_255)
{
    // 0627 0655 0061;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA BELOW	[2369 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0655, 0x0061 };
    uint32_t const ces[9] = { 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_256)
{
    // 0627 1D165 0655 0061;	
    // (‎‎إ𝅥‎‎) ARABIC LETTER ALEF, MUSICAL SYMBOL COMBINING STEM, ARABIC HAMZA BELOW	[2369 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x0627, 0x1D165, 0x0655, 0x0061 };
    uint32_t const ces[9] = { 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_257)
{
    // 0625 0041;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW	[2369 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0625, 0x0041 };
    uint32_t const ces[9] = { 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_258)
{
    // 0627 0655 0041;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA BELOW	[2369 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0627, 0x0655, 0x0041 };
    uint32_t const ces[9] = { 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_259)
{
    // FE88 0061;	
    // (‎‎ﺈ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW FINAL FORM	[2369 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE88, 0x0061 };
    uint32_t const ces[9] = { 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_260)
{
    // FE88 0041;	
    // (‎‎ﺈ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW FINAL FORM	[2369 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFE88, 0x0041 };
    uint32_t const ces[9] = { 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_261)
{
    // FE87 0061;	
    // (‎‎ﺇ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW ISOLATED FORM	[2369 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE87, 0x0061 };
    uint32_t const ces[9] = { 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_262)
{
    // FE87 0041;	
    // (‎‎ﺇ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW ISOLATED FORM	[2369 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE87, 0x0041 };
    uint32_t const ces[9] = { 0x2369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_263)
{
    // 0625 0062;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW	[2369 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0625, 0x0062 };
    uint32_t const ces[9] = { 0x2369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_264)
{
    // 0627 0655 0062;	
    // (‎‎إ‎‎) ARABIC LETTER ALEF, ARABIC HAMZA BELOW	[2369 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0627, 0x0655, 0x0062 };
    uint32_t const ces[9] = { 0x2369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_265)
{
    // FE88 0062;	
    // (‎‎ﺈ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW FINAL FORM	[2369 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE88, 0x0062 };
    uint32_t const ces[9] = { 0x2369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_266)
{
    // FE87 0062;	
    // (‎‎ﺇ‎‎) ARABIC LETTER ALEF WITH HAMZA BELOW ISOLATED FORM	[2369 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE87, 0x0062 };
    uint32_t const ces[9] = { 0x2369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_267)
{
    // 0673 0021;	
    // (‎‎ٳ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA BELOW	[236A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0673, 0x0021 };
    uint32_t const ces[9] = { 0x236A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_268)
{
    // 0673 003F;	
    // (‎‎ٳ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA BELOW	[236A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0673, 0x003F };
    uint32_t const ces[9] = { 0x236A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_269)
{
    // 0673 0061;	
    // (‎‎ٳ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA BELOW	[236A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0673, 0x0061 };
    uint32_t const ces[9] = { 0x236A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_270)
{
    // 0673 0041;	
    // (‎‎ٳ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA BELOW	[236A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0673, 0x0041 };
    uint32_t const ces[9] = { 0x236A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_271)
{
    // 0673 0062;	
    // (‎‎ٳ‎‎) ARABIC LETTER ALEF WITH WAVY HAMZA BELOW	[236A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0673, 0x0062 };
    uint32_t const ces[9] = { 0x236A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_272)
{
    // 0773 0021;	
    // (‎‎ݳ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[236B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0773, 0x0021 };
    uint32_t const ces[9] = { 0x236B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_273)
{
    // 0773 003F;	
    // (‎‎ݳ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[236B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0773, 0x003F };
    uint32_t const ces[9] = { 0x236B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_274)
{
    // 0773 0061;	
    // (‎‎ݳ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[236B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0773, 0x0061 };
    uint32_t const ces[9] = { 0x236B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_275)
{
    // 0773 0041;	
    // (‎‎ݳ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[236B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0773, 0x0041 };
    uint32_t const ces[9] = { 0x236B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_276)
{
    // 0773 0062;	
    // (‎‎ݳ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[236B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0773, 0x0062 };
    uint32_t const ces[9] = { 0x236B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_277)
{
    // 0774 0021;	
    // (‎‎ݴ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[236C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0774, 0x0021 };
    uint32_t const ces[9] = { 0x236C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_278)
{
    // 0774 003F;	
    // (‎‎ݴ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[236C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0774, 0x003F };
    uint32_t const ces[9] = { 0x236C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_279)
{
    // 0774 0061;	
    // (‎‎ݴ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[236C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0774, 0x0061 };
    uint32_t const ces[9] = { 0x236C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_280)
{
    // 0774 0041;	
    // (‎‎ݴ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[236C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0774, 0x0041 };
    uint32_t const ces[9] = { 0x236C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_281)
{
    // 0774 0062;	
    // (‎‎ݴ‎‎) ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[236C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0774, 0x0062 };
    uint32_t const ces[9] = { 0x236C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_282)
{
    // 0626 0334;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE	[236D | 0020 004A | 0002 0002 |]

    uint32_t cps[2] = { 0x0626, 0x0334 };
    uint32_t const ces[8] = { 0x236D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_283)
{
    // 064A 0334 0654;	
    // (‎‎ي̴‎‎) ARABIC LETTER YEH, COMBINING TILDE OVERLAY	[236D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x064A, 0x0334, 0x0654 };
    uint32_t const ces[8] = { 0x236D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_284)
{
    // 064A 0654 0334;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH, ARABIC HAMZA ABOVE	[236D | 0020 004A | 0002 0002 |]

    uint32_t cps[3] = { 0x064A, 0x0654, 0x0334 };
    uint32_t const ces[8] = { 0x236D, 0x0000, 0x0020, 0x004A, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_285)
{
    // 0626 0021;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE	[236D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0626, 0x0021 };
    uint32_t const ces[9] = { 0x236D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_286)
{
    // 064A 0654 0021;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH, ARABIC HAMZA ABOVE	[236D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x064A, 0x0654, 0x0021 };
    uint32_t const ces[9] = { 0x236D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_287)
{
    // FE8B 0021;	
    // (‎‎ﺋ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE INITIAL FORM	[236D 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE8B, 0x0021 };
    uint32_t const ces[9] = { 0x236D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_288)
{
    // FE8C 0021;	
    // (‎‎ﺌ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE MEDIAL FORM	[236D 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE8C, 0x0021 };
    uint32_t const ces[9] = { 0x236D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_289)
{
    // FE8A 0021;	
    // (‎‎ﺊ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE FINAL FORM	[236D 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE8A, 0x0021 };
    uint32_t const ces[9] = { 0x236D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_290)
{
    // FE89 0021;	
    // (‎‎ﺉ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE ISOLATED FORM	[236D 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE89, 0x0021 };
    uint32_t const ces[9] = { 0x236D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_291)
{
    // 0626 003F;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE	[236D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0626, 0x003F };
    uint32_t const ces[9] = { 0x236D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_292)
{
    // 064A 0654 003F;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH, ARABIC HAMZA ABOVE	[236D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x064A, 0x0654, 0x003F };
    uint32_t const ces[9] = { 0x236D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_293)
{
    // FE8B 003F;	
    // (‎‎ﺋ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE INITIAL FORM	[236D 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE8B, 0x003F };
    uint32_t const ces[9] = { 0x236D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_294)
{
    // FE8C 003F;	
    // (‎‎ﺌ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE MEDIAL FORM	[236D 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE8C, 0x003F };
    uint32_t const ces[9] = { 0x236D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_295)
{
    // FE8A 003F;	
    // (‎‎ﺊ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE FINAL FORM	[236D 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE8A, 0x003F };
    uint32_t const ces[9] = { 0x236D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_296)
{
    // FE89 003F;	
    // (‎‎ﺉ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE ISOLATED FORM	[236D 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE89, 0x003F };
    uint32_t const ces[9] = { 0x236D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_297)
{
    // 064A 0591 0654 0061;	
    // (‎‎ئ֑‎‎) ARABIC LETTER YEH, HEBREW ACCENT ETNAHTA, ARABIC HAMZA ABOVE	[236D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x064A, 0x0591, 0x0654, 0x0061 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_298)
{
    // 0626 0061;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE	[236D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0626, 0x0061 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_299)
{
    // 064A 0654 0061;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH, ARABIC HAMZA ABOVE	[236D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x064A, 0x0654, 0x0061 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_300)
{
    // 064A 1D165 0654 0061;	
    // (‎‎ئ𝅥‎‎) ARABIC LETTER YEH, MUSICAL SYMBOL COMBINING STEM, ARABIC HAMZA ABOVE	[236D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[4] = { 0x064A, 0x1D165, 0x0654, 0x0061 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_301)
{
    // 0626 0041;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE	[236D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0626, 0x0041 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_302)
{
    // 064A 0654 0041;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH, ARABIC HAMZA ABOVE	[236D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x064A, 0x0654, 0x0041 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_303)
{
    // FE8B 0061;	
    // (‎‎ﺋ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE INITIAL FORM	[236D 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE8B, 0x0061 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_304)
{
    // FE8B 0041;	
    // (‎‎ﺋ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE INITIAL FORM	[236D 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFE8B, 0x0041 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_305)
{
    // FE8C 0061;	
    // (‎‎ﺌ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE MEDIAL FORM	[236D 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE8C, 0x0061 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_306)
{
    // FE8C 0041;	
    // (‎‎ﺌ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE MEDIAL FORM	[236D 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFE8C, 0x0041 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_307)
{
    // FE8A 0061;	
    // (‎‎ﺊ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE FINAL FORM	[236D 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE8A, 0x0061 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_308)
{
    // FE8A 0041;	
    // (‎‎ﺊ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE FINAL FORM	[236D 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFE8A, 0x0041 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_309)
{
    // FE89 0061;	
    // (‎‎ﺉ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE ISOLATED FORM	[236D 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE89, 0x0061 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_310)
{
    // FE89 0041;	
    // (‎‎ﺉ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE ISOLATED FORM	[236D 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFE89, 0x0041 };
    uint32_t const ces[9] = { 0x236D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_311)
{
    // 0626 0062;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE	[236D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0626, 0x0062 };
    uint32_t const ces[9] = { 0x236D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_312)
{
    // 064A 0654 0062;	
    // (‎‎ئ‎‎) ARABIC LETTER YEH, ARABIC HAMZA ABOVE	[236D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x064A, 0x0654, 0x0062 };
    uint32_t const ces[9] = { 0x236D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_313)
{
    // FE8B 0062;	
    // (‎‎ﺋ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE INITIAL FORM	[236D 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFE8B, 0x0062 };
    uint32_t const ces[9] = { 0x236D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_314)
{
    // FE8C 0062;	
    // (‎‎ﺌ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE MEDIAL FORM	[236D 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE8C, 0x0062 };
    uint32_t const ces[9] = { 0x236D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_315)
{
    // FE8A 0062;	
    // (‎‎ﺊ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE FINAL FORM	[236D 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFE8A, 0x0062 };
    uint32_t const ces[9] = { 0x236D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_316)
{
    // FE89 0062;	
    // (‎‎ﺉ‎‎) ARABIC LETTER YEH WITH HAMZA ABOVE ISOLATED FORM	[236D 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE89, 0x0062 };
    uint32_t const ces[9] = { 0x236D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_317)
{
    // FBEB 0021;	
    // (‎‎ﯫ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM	[236D 2371 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBEB, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_318)
{
    // FBEA 0021;	
    // (‎‎ﯪ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM	[236D 2371 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEA, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_319)
{
    // FBEB 003F;	
    // (‎‎ﯫ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM	[236D 2371 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBEB, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_320)
{
    // FBEA 003F;	
    // (‎‎ﯪ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM	[236D 2371 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEA, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_321)
{
    // FBEB 0061;	
    // (‎‎ﯫ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM	[236D 2371 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBEB, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_322)
{
    // FBEB 0041;	
    // (‎‎ﯫ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM	[236D 2371 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFBEB, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_323)
{
    // FBEA 0061;	
    // (‎‎ﯪ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM	[236D 2371 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEA, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_324)
{
    // FBEA 0041;	
    // (‎‎ﯪ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM	[236D 2371 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFBEA, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_325)
{
    // FBEB 0062;	
    // (‎‎ﯫ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM	[236D 2371 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBEB, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_326)
{
    // FBEA 0062;	
    // (‎‎ﯪ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM	[236D 2371 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEA, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_327)
{
    // FC97 0021;	
    // (‎‎ﲗ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM	[236D 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC97, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_328)
{
    // FC00 0021;	
    // (‎‎ﰀ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM	[236D 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC00, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_329)
{
    // FC97 003F;	
    // (‎‎ﲗ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM	[236D 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC97, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_330)
{
    // FC00 003F;	
    // (‎‎ﰀ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM	[236D 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC00, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_331)
{
    // FC97 0061;	
    // (‎‎ﲗ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM	[236D 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC97, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_332)
{
    // FC97 0041;	
    // (‎‎ﲗ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM	[236D 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFC97, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_333)
{
    // FC00 0061;	
    // (‎‎ﰀ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM	[236D 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC00, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_334)
{
    // FC00 0041;	
    // (‎‎ﰀ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM	[236D 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC00, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_335)
{
    // FC97 0062;	
    // (‎‎ﲗ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM	[236D 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC97, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_336)
{
    // FC00 0062;	
    // (‎‎ﰀ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM	[236D 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC00, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_337)
{
    // FC98 0021;	
    // (‎‎ﲘ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM	[236D 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC98, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_338)
{
    // FC01 0021;	
    // (‎‎ﰁ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM	[236D 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC01, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_339)
{
    // FC98 003F;	
    // (‎‎ﲘ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM	[236D 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC98, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_340)
{
    // FC01 003F;	
    // (‎‎ﰁ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM	[236D 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC01, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_341)
{
    // FC98 0061;	
    // (‎‎ﲘ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM	[236D 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC98, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_342)
{
    // FC98 0041;	
    // (‎‎ﲘ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM	[236D 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFC98, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_343)
{
    // FC01 0061;	
    // (‎‎ﰁ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM	[236D 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC01, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_344)
{
    // FC01 0041;	
    // (‎‎ﰁ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM	[236D 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC01, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_345)
{
    // FC98 0062;	
    // (‎‎ﲘ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM	[236D 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC98, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_346)
{
    // FC01 0062;	
    // (‎‎ﰁ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM	[236D 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC01, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_347)
{
    // FC99 0021;	
    // (‎‎ﲙ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM	[236D 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC99, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_348)
{
    // FC99 003F;	
    // (‎‎ﲙ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM	[236D 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC99, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_349)
{
    // FC99 0061;	
    // (‎‎ﲙ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM	[236D 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC99, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_350)
{
    // FC99 0041;	
    // (‎‎ﲙ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM	[236D 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFC99, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_351)
{
    // FC99 0062;	
    // (‎‎ﲙ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM	[236D 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC99, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_352)
{
    // FC64 0021;	
    // (‎‎ﱤ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM	[236D 23AC 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC64, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_353)
{
    // FC64 003F;	
    // (‎‎ﱤ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM	[236D 23AC 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC64, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_354)
{
    // FC64 0061;	
    // (‎‎ﱤ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM	[236D 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC64, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_355)
{
    // FC64 0041;	
    // (‎‎ﱤ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM	[236D 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC64, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_356)
{
    // FC64 0062;	
    // (‎‎ﱤ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM	[236D 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC64, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_357)
{
    // FC65 0021;	
    // (‎‎ﱥ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM	[236D 23AD 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC65, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x23AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_358)
{
    // FC65 003F;	
    // (‎‎ﱥ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM	[236D 23AD 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC65, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x23AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_359)
{
    // FC65 0061;	
    // (‎‎ﱥ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM	[236D 23AD 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC65, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_360)
{
    // FC65 0041;	
    // (‎‎ﱥ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM	[236D 23AD 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC65, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x23AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_361)
{
    // FC65 0062;	
    // (‎‎ﱥ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM	[236D 23AD 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC65, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x23AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_362)
{
    // FC9A 0021;	
    // (‎‎ﲚ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM	[236D 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9A, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_363)
{
    // FCDF 0021;	
    // (‎‎ﳟ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM	[236D 2409 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCDF, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_364)
{
    // FC66 0021;	
    // (‎‎ﱦ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM	[236D 2409 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC66, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_365)
{
    // FC02 0021;	
    // (‎‎ﰂ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM	[236D 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC02, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_366)
{
    // FC9A 003F;	
    // (‎‎ﲚ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM	[236D 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9A, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_367)
{
    // FCDF 003F;	
    // (‎‎ﳟ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM	[236D 2409 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCDF, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_368)
{
    // FC66 003F;	
    // (‎‎ﱦ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM	[236D 2409 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC66, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_369)
{
    // FC02 003F;	
    // (‎‎ﰂ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM	[236D 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC02, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_370)
{
    // FC9A 0061;	
    // (‎‎ﲚ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM	[236D 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9A, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_371)
{
    // FC9A 0041;	
    // (‎‎ﲚ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM	[236D 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFC9A, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_372)
{
    // FCDF 0061;	
    // (‎‎ﳟ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM	[236D 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCDF, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_373)
{
    // FCDF 0041;	
    // (‎‎ﳟ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM	[236D 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCDF, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_374)
{
    // FC66 0061;	
    // (‎‎ﱦ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM	[236D 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC66, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_375)
{
    // FC66 0041;	
    // (‎‎ﱦ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM	[236D 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC66, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_376)
{
    // FC02 0061;	
    // (‎‎ﰂ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM	[236D 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC02, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_377)
{
    // FC02 0041;	
    // (‎‎ﰂ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM	[236D 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC02, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_378)
{
    // FC9A 0062;	
    // (‎‎ﲚ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM	[236D 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9A, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_379)
{
    // FCDF 0062;	
    // (‎‎ﳟ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM	[236D 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCDF, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_380)
{
    // FC66 0062;	
    // (‎‎ﱦ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM	[236D 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC66, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_381)
{
    // FC02 0062;	
    // (‎‎ﰂ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM	[236D 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC02, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_382)
{
    // FC67 0021;	
    // (‎‎ﱧ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM	[236D 240D 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC67, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x240D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_383)
{
    // FC67 003F;	
    // (‎‎ﱧ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM	[236D 240D 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC67, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x240D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_384)
{
    // FC67 0061;	
    // (‎‎ﱧ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM	[236D 240D 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC67, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_385)
{
    // FC67 0041;	
    // (‎‎ﱧ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM	[236D 240D 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC67, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x240D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_386)
{
    // FC67 0062;	
    // (‎‎ﱧ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM	[236D 240D 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC67, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x240D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_387)
{
    // FC9B 0021;	
    // (‎‎ﲛ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM	[236D 2417 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9B, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_388)
{
    // FCE0 0021;	
    // (‎‎ﳠ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM	[236D 2417 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE0, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_389)
{
    // FC9B 003F;	
    // (‎‎ﲛ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM	[236D 2417 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9B, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_390)
{
    // FCE0 003F;	
    // (‎‎ﳠ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM	[236D 2417 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE0, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_391)
{
    // FC9B 0061;	
    // (‎‎ﲛ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM	[236D 2417 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9B, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_392)
{
    // FC9B 0041;	
    // (‎‎ﲛ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM	[236D 2417 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFC9B, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_393)
{
    // FCE0 0061;	
    // (‎‎ﳠ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM	[236D 2417 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE0, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_394)
{
    // FCE0 0041;	
    // (‎‎ﳠ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM	[236D 2417 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCE0, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_395)
{
    // FC9B 0062;	
    // (‎‎ﲛ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM	[236D 2417 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFC9B, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_396)
{
    // FCE0 0062;	
    // (‎‎ﳠ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM	[236D 2417 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE0, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_397)
{
    // FBED 0021;	
    // (‎‎ﯭ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM	[236D 241C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBED, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_398)
{
    // FBEC 0021;	
    // (‎‎ﯬ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM	[236D 241C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEC, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_399)
{
    // FBED 003F;	
    // (‎‎ﯭ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM	[236D 241C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBED, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_400)
{
    // FBEC 003F;	
    // (‎‎ﯬ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM	[236D 241C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEC, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_401)
{
    // FBED 0061;	
    // (‎‎ﯭ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM	[236D 241C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBED, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_402)
{
    // FBED 0041;	
    // (‎‎ﯭ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM	[236D 241C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFBED, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_403)
{
    // FBEC 0061;	
    // (‎‎ﯬ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM	[236D 241C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEC, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_404)
{
    // FBEC 0041;	
    // (‎‎ﯬ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM	[236D 241C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFBEC, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_405)
{
    // FBED 0062;	
    // (‎‎ﯭ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM	[236D 241C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBED, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_406)
{
    // FBEC 0062;	
    // (‎‎ﯬ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM	[236D 241C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEC, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x241C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_407)
{
    // FBEF 0021;	
    // (‎‎ﯯ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM	[236D 241D 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBEF, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_408)
{
    // FBEE 0021;	
    // (‎‎ﯮ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM	[236D 241D 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEE, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_409)
{
    // FBEF 003F;	
    // (‎‎ﯯ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM	[236D 241D 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBEF, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_410)
{
    // FBEE 003F;	
    // (‎‎ﯮ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM	[236D 241D 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEE, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_411)
{
    // FBEF 0061;	
    // (‎‎ﯯ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM	[236D 241D 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBEF, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_412)
{
    // FBEF 0041;	
    // (‎‎ﯯ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM	[236D 241D 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFBEF, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_413)
{
    // FBEE 0061;	
    // (‎‎ﯮ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM	[236D 241D 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEE, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_414)
{
    // FBEE 0041;	
    // (‎‎ﯮ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM	[236D 241D 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFBEE, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_415)
{
    // FBEF 0062;	
    // (‎‎ﯯ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM	[236D 241D 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBEF, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_416)
{
    // FBEE 0062;	
    // (‎‎ﯮ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM	[236D 241D 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBEE, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x241D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_417)
{
    // FBF3 0021;	
    // (‎‎ﯳ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM	[236D 2420 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF3, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_418)
{
    // FBF2 0021;	
    // (‎‎ﯲ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM	[236D 2420 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF2, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_419)
{
    // FBF3 003F;	
    // (‎‎ﯳ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM	[236D 2420 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF3, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_420)
{
    // FBF2 003F;	
    // (‎‎ﯲ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM	[236D 2420 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF2, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_421)
{
    // FBF3 0061;	
    // (‎‎ﯳ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM	[236D 2420 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF3, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_422)
{
    // FBF3 0041;	
    // (‎‎ﯳ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM	[236D 2420 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFBF3, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_423)
{
    // FBF2 0061;	
    // (‎‎ﯲ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM	[236D 2420 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF2, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_424)
{
    // FBF2 0041;	
    // (‎‎ﯲ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM	[236D 2420 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFBF2, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_425)
{
    // FBF3 0062;	
    // (‎‎ﯳ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM	[236D 2420 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF3, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_426)
{
    // FBF2 0062;	
    // (‎‎ﯲ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM	[236D 2420 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF2, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2420, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_427)
{
    // FBF1 0021;	
    // (‎‎ﯱ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM	[236D 2421 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF1, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_428)
{
    // FBF0 0021;	
    // (‎‎ﯰ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM	[236D 2421 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF0, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_429)
{
    // FBF1 003F;	
    // (‎‎ﯱ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM	[236D 2421 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF1, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_430)
{
    // FBF0 003F;	
    // (‎‎ﯰ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM	[236D 2421 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF0, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_431)
{
    // FBF1 0061;	
    // (‎‎ﯱ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM	[236D 2421 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF1, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_432)
{
    // FBF1 0041;	
    // (‎‎ﯱ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM	[236D 2421 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFBF1, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_433)
{
    // FBF0 0061;	
    // (‎‎ﯰ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM	[236D 2421 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF0, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_434)
{
    // FBF0 0041;	
    // (‎‎ﯰ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM	[236D 2421 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFBF0, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_435)
{
    // FBF1 0062;	
    // (‎‎ﯱ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM	[236D 2421 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF1, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_436)
{
    // FBF0 0062;	
    // (‎‎ﯰ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM	[236D 2421 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF0, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2421, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_437)
{
    // FBF5 0021;	
    // (‎‎ﯵ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM	[236D 2422 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF5, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_438)
{
    // FBF4 0021;	
    // (‎‎ﯴ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM	[236D 2422 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF4, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_439)
{
    // FBF5 003F;	
    // (‎‎ﯵ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM	[236D 2422 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF5, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_440)
{
    // FBF4 003F;	
    // (‎‎ﯴ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM	[236D 2422 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF4, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_441)
{
    // FBF5 0061;	
    // (‎‎ﯵ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM	[236D 2422 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF5, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_442)
{
    // FBF5 0041;	
    // (‎‎ﯵ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM	[236D 2422 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFBF5, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_443)
{
    // FBF4 0061;	
    // (‎‎ﯴ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM	[236D 2422 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF4, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_444)
{
    // FBF4 0041;	
    // (‎‎ﯴ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM	[236D 2422 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFBF4, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_445)
{
    // FBF5 0062;	
    // (‎‎ﯵ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM	[236D 2422 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF5, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_446)
{
    // FBF4 0062;	
    // (‎‎ﯴ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM	[236D 2422 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF4, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_447)
{
    // FBFB 0021;	
    // (‎‎ﯻ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM	[236D 242B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFBFB, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_448)
{
    // FBFA 0021;	
    // (‎‎ﯺ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBFA, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_449)
{
    // FC68 0021;	
    // (‎‎ﱨ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC68, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_450)
{
    // FBF9 0021;	
    // (‎‎ﯹ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF9, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_451)
{
    // FC03 0021;	
    // (‎‎ﰃ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC03, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_452)
{
    // FBFB 003F;	
    // (‎‎ﯻ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM	[236D 242B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFBFB, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_453)
{
    // FBFA 003F;	
    // (‎‎ﯺ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBFA, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_454)
{
    // FC68 003F;	
    // (‎‎ﱨ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC68, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_455)
{
    // FBF9 003F;	
    // (‎‎ﯹ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF9, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_456)
{
    // FC03 003F;	
    // (‎‎ﰃ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC03, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_457)
{
    // FBFB 0061;	
    // (‎‎ﯻ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM	[236D 242B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFBFB, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_458)
{
    // FBFB 0041;	
    // (‎‎ﯻ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM	[236D 242B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFBFB, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_459)
{
    // FBFA 0061;	
    // (‎‎ﯺ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBFA, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_460)
{
    // FC68 0061;	
    // (‎‎ﱨ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC68, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_461)
{
    // FBFA 0041;	
    // (‎‎ﯺ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFBFA, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_462)
{
    // FC68 0041;	
    // (‎‎ﱨ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC68, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_463)
{
    // FBF9 0061;	
    // (‎‎ﯹ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF9, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_464)
{
    // FC03 0061;	
    // (‎‎ﰃ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC03, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_465)
{
    // FBF9 0041;	
    // (‎‎ﯹ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFBF9, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_466)
{
    // FC03 0041;	
    // (‎‎ﰃ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC03, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_467)
{
    // FBFB 0062;	
    // (‎‎ﯻ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM	[236D 242B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFBFB, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_468)
{
    // FBFA 0062;	
    // (‎‎ﯺ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBFA, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_469)
{
    // FC68 0062;	
    // (‎‎ﱨ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM	[236D 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC68, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_470)
{
    // FBF9 0062;	
    // (‎‎ﯹ‎‎) ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF9, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_471)
{
    // FC03 0062;	
    // (‎‎ﰃ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM	[236D 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC03, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_472)
{
    // FC69 0021;	
    // (‎‎ﱩ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM	[236D 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC69, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_473)
{
    // FC04 0021;	
    // (‎‎ﰄ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM	[236D 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC04, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_474)
{
    // FC69 003F;	
    // (‎‎ﱩ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM	[236D 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC69, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_475)
{
    // FC04 003F;	
    // (‎‎ﰄ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM	[236D 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC04, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_476)
{
    // FC69 0061;	
    // (‎‎ﱩ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM	[236D 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC69, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_477)
{
    // FC69 0041;	
    // (‎‎ﱩ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM	[236D 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFC69, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_478)
{
    // FC04 0061;	
    // (‎‎ﰄ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM	[236D 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC04, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_479)
{
    // FC04 0041;	
    // (‎‎ﰄ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM	[236D 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC04, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_480)
{
    // FC69 0062;	
    // (‎‎ﱩ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM	[236D 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFC69, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_481)
{
    // FC04 0062;	
    // (‎‎ﰄ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM	[236D 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC04, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_482)
{
    // FBF8 0021;	
    // (‎‎ﯸ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM	[236D 2430 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFBF8, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_483)
{
    // FBF7 0021;	
    // (‎‎ﯷ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM	[236D 2430 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF7, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_484)
{
    // FBF6 0021;	
    // (‎‎ﯶ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM	[236D 2430 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF6, 0x0021 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_485)
{
    // FBF8 003F;	
    // (‎‎ﯸ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM	[236D 2430 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFBF8, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_486)
{
    // FBF7 003F;	
    // (‎‎ﯷ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM	[236D 2430 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF7, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_487)
{
    // FBF6 003F;	
    // (‎‎ﯶ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM	[236D 2430 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF6, 0x003F };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_488)
{
    // FBF8 0061;	
    // (‎‎ﯸ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM	[236D 2430 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFBF8, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_489)
{
    // FBF8 0041;	
    // (‎‎ﯸ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM	[236D 2430 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFBF8, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_490)
{
    // FBF7 0061;	
    // (‎‎ﯷ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM	[236D 2430 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF7, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_491)
{
    // FBF7 0041;	
    // (‎‎ﯷ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM	[236D 2430 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFBF7, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_492)
{
    // FBF6 0061;	
    // (‎‎ﯶ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM	[236D 2430 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF6, 0x0061 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_493)
{
    // FBF6 0041;	
    // (‎‎ﯶ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM	[236D 2430 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFBF6, 0x0041 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_494)
{
    // FBF8 0062;	
    // (‎‎ﯸ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM	[236D 2430 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFBF8, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_495)
{
    // FBF7 0062;	
    // (‎‎ﯷ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM	[236D 2430 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBF7, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_496)
{
    // FBF6 0062;	
    // (‎‎ﯶ‎‎) ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM	[236D 2430 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBF6, 0x0062 };
    uint32_t const ces[12] = { 0x236D, 0x2430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_497)
{
    // 08A8 0021;	
    // (‎‎ࢨ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND HAMZA ABOVE	[236E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A8, 0x0021 };
    uint32_t const ces[9] = { 0x236E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_498)
{
    // 08A8 003F;	
    // (‎‎ࢨ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND HAMZA ABOVE	[236E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A8, 0x003F };
    uint32_t const ces[9] = { 0x236E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_147_499)
{
    // 08A8 0061;	
    // (‎‎ࢨ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND HAMZA ABOVE	[236E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A8, 0x0061 };
    uint32_t const ces[9] = { 0x236E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

