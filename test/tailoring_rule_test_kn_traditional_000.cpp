
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/save_load_table.hpp>
#include <boost/text/data/all.hpp>

#include <boost/filesystem.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

collation_table make_save_load_table()
{
    if (!exists(boost::filesystem::path("kn_traditional.table"))) {
        string const table_str(data::kn::traditional_collation_tailoring());
        collation_table table = tailored_collation_table(
            table_str,
            "kn::traditional_collation_tailoring()", error, warning);
        save_table(table, "kn_traditional.table.0");
        boost::filesystem::rename("kn_traditional.table.0", "kn_traditional.table");
    }
    return load_table("kn_traditional.table");
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, kn_traditional_000_001)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x0c94);
    auto const rel = std::vector<uint32_t>(1, 0x0c82);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x0c82);
    auto const rel = std::vector<uint32_t>(1, 0x0c83);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x0c83);
    auto const rel = std::vector<uint32_t>(1, 0x0cf1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x0cf1);
    auto const rel = std::vector<uint32_t>(1, 0x0cf2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>(1, 0x0cf2);
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cb5, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cb6, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb6, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cb7, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb7, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cb8, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb8, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cb9, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb9, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cb3, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb3, 0x0ccd};
    auto const rel = std::vector<uint32_t>{0x0cde, 0x0ccd};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::primary),
        -1);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c95);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_002)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c95, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c96);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_003)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c96, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c97);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c97, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c98);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_004)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c98, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c99);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c99, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c9a);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_005)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c9a, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c9b);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_006)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c9b, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c9c);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c9c, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c9d);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_007)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c9d, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c9e);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c9e, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0c9f);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_008)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0c9f, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0ca0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_009)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0ca0, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0ca1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0ca1, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0ca2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_010)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0ca2, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0ca3);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_011)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0ca3, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0ca4);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0ca4, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0ca5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_012)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0ca5, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0ca6);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0ca6, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0ca7);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_013)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0ca7, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0ca8);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_014)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0ca8, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0caa);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0caa, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0cab);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_015)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0cab, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0cac);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0cac, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0cad);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_016)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0cad, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0cae);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_017)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0cae, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0caf);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0caf, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0cb0);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_018)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0cb0, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0cb1);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

TEST(tailoring, kn_traditional_000_019)
{
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0cb1, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0cb2);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0ce1};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0ce3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8e};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cc6};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8f};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cc7};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c90};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cc8};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c92};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0cca};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c93};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0ccb};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c94};
    auto const rel = std::vector<uint32_t>{0x0cb2, 0x0ccc};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c85};
    auto const rel = std::vector<uint32_t>(1, 0x0cb5);
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c86};
    auto const rel = std::vector<uint32_t>{0x0cb5, 0x0cbe};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c87};
    auto const rel = std::vector<uint32_t>{0x0cb5, 0x0cbf};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c88};
    auto const rel = std::vector<uint32_t>{0x0cb5, 0x0cc0};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c89};
    auto const rel = std::vector<uint32_t>{0x0cb5, 0x0cc1};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c8a};
    auto const rel = std::vector<uint32_t>{0x0cb5, 0x0cc2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c8b};
    auto const rel = std::vector<uint32_t>{0x0cb5, 0x0cc3};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0ce0};
    auto const rel = std::vector<uint32_t>{0x0cb5, 0x0cc4};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
    // greater than (or equal to, for =) preceeding cps
    {
    auto const res = std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c8c};
    auto const rel = std::vector<uint32_t>{0x0cb5, 0x0ce2};
    EXPECT_EQ(collate(
        res.begin(), res.end(),
        rel.begin(), rel.end(),
        table(), collation_strength::quaternary),
        0);
    }
}

