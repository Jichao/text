
// Warning! This file is autogenerated.
#include <boost/text/collation_tailoring.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

tailored_collation_element_table const & table()
{
    static tailored_collation_element_table retval =
        make_tailored_collation_element_table(
            data::kn::traditional_collation_tailoring(),
            "kn::traditional_collation_tailoring()", error, warning);
    return retval;
}
TEST(tailoring, kn_traditional_000_001)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0c94),
        std::vector<uint32_t>(1, 0x0c82),
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0c82),
        std::vector<uint32_t>(1, 0x0c83),
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0c83),
        std::vector<uint32_t>(1, 0x0cf1),
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0cf1),
        std::vector<uint32_t>(1, 0x0cf2),
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0cf2),
        std::vector<uint32_t>{0x0c95, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd},
        std::vector<uint32_t>{0x0c96, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd},
        std::vector<uint32_t>{0x0c97, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd},
        std::vector<uint32_t>{0x0c98, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd},
        std::vector<uint32_t>{0x0c99, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd},
        std::vector<uint32_t>{0x0c9a, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd},
        std::vector<uint32_t>{0x0c9b, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd},
        std::vector<uint32_t>{0x0c9c, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd},
        std::vector<uint32_t>{0x0c9d, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd},
        std::vector<uint32_t>{0x0c9e, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd},
        std::vector<uint32_t>{0x0c9f, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd},
        std::vector<uint32_t>{0x0ca0, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd},
        std::vector<uint32_t>{0x0ca1, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd},
        std::vector<uint32_t>{0x0ca2, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd},
        std::vector<uint32_t>{0x0ca3, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd},
        std::vector<uint32_t>{0x0ca4, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd},
        std::vector<uint32_t>{0x0ca5, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd},
        std::vector<uint32_t>{0x0ca6, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd},
        std::vector<uint32_t>{0x0ca7, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd},
        std::vector<uint32_t>{0x0ca8, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd},
        std::vector<uint32_t>{0x0caa, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd},
        std::vector<uint32_t>{0x0cab, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd},
        std::vector<uint32_t>{0x0cac, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd},
        std::vector<uint32_t>{0x0cad, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd},
        std::vector<uint32_t>{0x0cae, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd},
        std::vector<uint32_t>{0x0caf, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd},
        std::vector<uint32_t>{0x0cb0, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd},
        std::vector<uint32_t>{0x0cb1, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd},
        std::vector<uint32_t>{0x0cb2, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd},
        std::vector<uint32_t>{0x0cb5, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd},
        std::vector<uint32_t>{0x0cb6, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb6, 0x0ccd},
        std::vector<uint32_t>{0x0cb7, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb7, 0x0ccd},
        std::vector<uint32_t>{0x0cb8, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb8, 0x0ccd},
        std::vector<uint32_t>{0x0cb9, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb9, 0x0ccd},
        std::vector<uint32_t>{0x0cb3, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb3, 0x0ccd},
        std::vector<uint32_t>{0x0cde, 0x0ccd},
        table(), collation_strength::primary),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c95),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c95),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c95, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c95, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c95, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c95, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c95, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c95, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c95, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c95, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_002)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c95, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c95, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c95, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c95, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c95, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c95, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c95, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c95, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c95, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c95, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c95, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c95, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c95, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c95, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c95, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c95, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c95, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c95, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c95, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c95, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c95, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c95, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c95, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c96),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c96),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c96, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c96, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c96, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c96, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c96, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c96, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c96, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c96, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c96, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c96, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c96, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c96, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c96, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c96, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c96, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c96, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c96, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c96, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c96, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c96, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c96, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c96, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c96, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c96, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c96, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c96, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c96, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c96, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_003)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c96, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c96, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c96, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c97),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c97),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c97, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c97, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c97, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c97, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c97, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c97, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c97, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c97, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c97, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c97, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c97, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c97, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c97, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c97, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c97, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c97, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c97, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c97, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c97, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c97, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c97, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c97, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c97, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c97, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c97, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c97, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c97, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c97, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c97, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c97, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c97, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c98),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c98),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c98, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c98, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c98, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c98, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c98, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c98, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c98, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c98, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c98, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c98, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c98, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c98, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c98, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c98, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c98, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c98, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_004)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c98, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c98, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c98, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c98, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c98, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c98, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c98, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c98, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c98, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c98, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c98, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c98, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c98, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c98, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c98, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c99),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c99),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c99, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c99, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c99, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c99, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c99, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c99, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c99, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c99, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c99, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c99, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c99, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c99, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c99, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c99, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c99, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c99, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c99, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c99, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c99, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c99, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c99, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c99, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c99, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c99, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c99, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c99, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c99, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c99, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c99, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c99, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c99, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9a),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9a),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9a, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9a, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9a, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9a, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_005)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9a, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9a, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9a, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9a, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9a, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9a, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9a, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9a, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9a, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9a, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9a, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9a, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9a, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9a, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9a, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9a, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9a, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9a, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9a, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9a, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9a, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9a, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9a, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9a, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9a, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9a, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9a, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9b),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9b),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9b, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9b, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9b, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9b, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9b, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9b, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9b, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9b, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9b, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9b, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9b, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9b, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9b, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9b, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9b, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9b, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9b, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9b, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9b, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9b, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9b, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9b, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9b, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9b, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_006)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9b, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9b, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9b, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9b, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9b, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9b, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9b, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9c),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9c),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9c, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9c, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9c, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9c, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9c, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9c, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9c, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9c, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9c, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9c, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9c, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9c, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9c, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9c, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9c, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9c, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9c, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9c, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9c, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9c, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9c, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9c, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9c, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9c, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9c, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9c, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9c, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9c, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9c, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9c, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9c, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9d),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9d),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9d, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9d, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9d, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9d, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9d, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9d, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9d, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9d, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9d, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9d, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9d, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9d, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_007)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9d, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9d, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9d, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9d, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9d, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9d, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9d, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9d, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9d, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9d, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9d, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9d, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9d, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9d, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9d, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9d, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9d, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9d, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9d, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9e),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9e),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9e, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9e, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9e, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9e, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9e, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9e, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9e, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9e, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9e, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9e, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9e, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9e, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9e, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9e, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9e, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9e, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9e, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9e, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9e, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9e, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9e, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9e, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9e, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9e, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9e, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9e, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9e, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9e, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9e, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9e, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9e, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9f),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0c9f),
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_008)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9f, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0c9f, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9f, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0c9f, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9f, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0c9f, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9f, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0c9f, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9f, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0c9f, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9f, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0c9f, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9f, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0c9f, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9f, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0c9f, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9f, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0c9f, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9f, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0c9f, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9f, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0c9f, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9f, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0c9f, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9f, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0c9f, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9f, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0c9f, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9f, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0c9f, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0c9f, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca0),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca0),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca0, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca0, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca0, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca0, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca0, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca0, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca0, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca0, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca0, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca0, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca0, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca0, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca0, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca0, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca0, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca0, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca0, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca0, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca0, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca0, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_009)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca0, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca0, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca0, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca0, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca0, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca0, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca0, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca0, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca0, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca0, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca0, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca1),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca1),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca1, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca1, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca1, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca1, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca1, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca1, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca1, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca1, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca1, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca1, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca1, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca1, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca1, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca1, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca1, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca1, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca1, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca1, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca1, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca1, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca1, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca1, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca1, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca1, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca1, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca1, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca1, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca1, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca1, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca1, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca1, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca2),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca2),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca2, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca2, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca2, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca2, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca2, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca2, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca2, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca2, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_010)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca2, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca2, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca2, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca2, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca2, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca2, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca2, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca2, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca2, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca2, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca2, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca2, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca2, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca2, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca2, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca2, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca2, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca2, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca2, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca2, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca2, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca2, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca2, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca3),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca3),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca3, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca3, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca3, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca3, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca3, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca3, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca3, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca3, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca3, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca3, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca3, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca3, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca3, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca3, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca3, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca3, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca3, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca3, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca3, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca3, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca3, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca3, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca3, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca3, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca3, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca3, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca3, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca3, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_011)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca3, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca3, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca3, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca4),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca4),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca4, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca4, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca4, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca4, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca4, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca4, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca4, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca4, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca4, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca4, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca4, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca4, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca4, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca4, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca4, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca4, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca4, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca4, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca4, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca4, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca4, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca4, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca4, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca4, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca4, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca4, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca4, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca4, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca4, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca4, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca4, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca5),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca5),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca5, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca5, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca5, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca5, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca5, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca5, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca5, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca5, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca5, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca5, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca5, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca5, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca5, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca5, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca5, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca5, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_012)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca5, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca5, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca5, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca5, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca5, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca5, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca5, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca5, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca5, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca5, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca5, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca5, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca5, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca5, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca5, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca6),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca6),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca6, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca6, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca6, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca6, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca6, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca6, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca6, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca6, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca6, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca6, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca6, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca6, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca6, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca6, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca6, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca6, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca6, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca6, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca6, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca6, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca6, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca6, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca6, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca6, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca6, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca6, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca6, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca6, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca6, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca6, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca6, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca7),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca7),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca7, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca7, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca7, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca7, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_013)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca7, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca7, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca7, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca7, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca7, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca7, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca7, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca7, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca7, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca7, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca7, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca7, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca7, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca7, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca7, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca7, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca7, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca7, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca7, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca7, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca7, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca7, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca7, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca7, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca7, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca7, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca7, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca8),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0ca8),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca8, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0ca8, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca8, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0ca8, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca8, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0ca8, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca8, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0ca8, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca8, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0ca8, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca8, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0ca8, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca8, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0ca8, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca8, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0ca8, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca8, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0ca8, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca8, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0ca8, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca8, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0ca8, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca8, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0ca8, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_014)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca8, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0ca8, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca8, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0ca8, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca8, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0ca8, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0ca8, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0caa),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0caa),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0caa, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0caa, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0caa, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0caa, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0caa, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0caa, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0caa, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0caa, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0caa, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0caa, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0caa, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0caa, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0caa, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0caa, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0caa, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0caa, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0caa, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0caa, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0caa, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0caa, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0caa, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0caa, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0caa, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0caa, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0caa, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0caa, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0caa, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0caa, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0caa, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caa, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0caa, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cab),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cab),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cab, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cab, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cab, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cab, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cab, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cab, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cab, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cab, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cab, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cab, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cab, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cab, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_015)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cab, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cab, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cab, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cab, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cab, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cab, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cab, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cab, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cab, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cab, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cab, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cab, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cab, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cab, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cab, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cab, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cab, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cab, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cab, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cac),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cac),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cac, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cac, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cac, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cac, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cac, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cac, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cac, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cac, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cac, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cac, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cac, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cac, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cac, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cac, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cac, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cac, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cac, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cac, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cac, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cac, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cac, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cac, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cac, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cac, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cac, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cac, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cac, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cac, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cac, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cac, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cac, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cad),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cad),
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_016)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cad, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cad, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cad, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cad, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cad, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cad, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cad, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cad, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cad, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cad, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cad, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cad, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cad, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cad, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cad, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cad, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cad, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cad, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cad, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cad, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cad, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cad, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cad, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cad, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cad, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cad, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cad, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cad, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cad, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cad, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cad, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cae),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cae),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cae, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cae, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cae, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cae, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cae, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cae, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cae, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cae, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cae, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cae, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cae, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cae, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cae, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cae, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cae, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cae, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cae, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cae, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cae, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cae, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_017)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cae, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cae, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cae, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cae, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cae, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cae, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cae, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cae, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cae, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cae, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cae, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0caf),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0caf),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0caf, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0caf, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0caf, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0caf, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0caf, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0caf, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0caf, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0caf, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0caf, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0caf, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0caf, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0caf, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0caf, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0caf, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0caf, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0caf, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0caf, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0caf, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0caf, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0caf, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0caf, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0caf, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0caf, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0caf, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0caf, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0caf, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0caf, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0caf, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0caf, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0caf, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0caf, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cb0),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cb0),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cb0, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cb0, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cb0, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cb0, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cb0, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cb0, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cb0, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cb0, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_018)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cb0, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cb0, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cb0, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cb0, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cb0, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cb0, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cb0, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cb0, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cb0, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cb0, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cb0, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cb0, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cb0, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cb0, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cb0, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cb0, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cb0, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cb0, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cb0, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cb0, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cb0, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb0, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cb0, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cb1),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cb1),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cb1, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cb1, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cb1, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cb1, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cb1, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cb1, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cb1, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cb1, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cb1, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cb1, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cb1, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cb1, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cb1, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cb1, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cb1, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cb1, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cb1, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cb1, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cb1, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cb1, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cb1, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cb1, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cb1, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cb1, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cb1, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cb1, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cb1, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cb1, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, kn_traditional_000_019)
{
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cb1, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb1, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cb1, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cb2),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cb2),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cb2, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cb2, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cb2, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cb2, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cb2, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cb2, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cb2, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cb2, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cb2, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cb2, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cb2, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cb2, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cb2, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cb2, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cb2, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cb2, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cb2, 0x0ce3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0ce1},
        std::vector<uint32_t>{0x0cb2, 0x0ce3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cb2, 0x0cc6},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8e},
        std::vector<uint32_t>{0x0cb2, 0x0cc6},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cb2, 0x0cc7},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c8f},
        std::vector<uint32_t>{0x0cb2, 0x0cc7},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cb2, 0x0cc8},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c90},
        std::vector<uint32_t>{0x0cb2, 0x0cc8},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cb2, 0x0cca},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c92},
        std::vector<uint32_t>{0x0cb2, 0x0cca},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cb2, 0x0ccb},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c93},
        std::vector<uint32_t>{0x0cb2, 0x0ccb},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cb2, 0x0ccc},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb2, 0x0ccd, 0x0c94},
        std::vector<uint32_t>{0x0cb2, 0x0ccc},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cb5),
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c85},
        std::vector<uint32_t>(1, 0x0cb5),
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cb5, 0x0cbe},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c86},
        std::vector<uint32_t>{0x0cb5, 0x0cbe},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cb5, 0x0cbf},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c87},
        std::vector<uint32_t>{0x0cb5, 0x0cbf},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cb5, 0x0cc0},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c88},
        std::vector<uint32_t>{0x0cb5, 0x0cc0},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cb5, 0x0cc1},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c89},
        std::vector<uint32_t>{0x0cb5, 0x0cc1},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cb5, 0x0cc2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c8a},
        std::vector<uint32_t>{0x0cb5, 0x0cc2},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cb5, 0x0cc3},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c8b},
        std::vector<uint32_t>{0x0cb5, 0x0cc3},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cb5, 0x0cc4},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0ce0},
        std::vector<uint32_t>{0x0cb5, 0x0cc4},
        table(), collation_strength::quaternary),
        0);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cb5, 0x0ce2},
        table(), collation_strength::identical),
        -1);
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x0cb5, 0x0ccd, 0x0c8c},
        std::vector<uint32_t>{0x0cb5, 0x0ce2},
        table(), collation_strength::quaternary),
        0);
}

