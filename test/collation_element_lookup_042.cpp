// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_042_000)
{
    // 19B6 19AA ; [.32C0.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER HIGH SUA>

    uint32_t const cps[2] = { 0x19b6, 0x19aa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32c0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_001)
{
    // 19B6 19AB ; [.32C1.0020.0002][.32C8.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AE, NEW TAI LUE LETTER LOW SUA>

    uint32_t const cps[2] = { 0x19b6, 0x19ab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32c1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_002)
{
    // 19B7  ; [.32C9.0020.0002] 
    // NEW TAI LUE VOWEL SIGN O

    uint32_t const cps[1] = { 0x19b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_003)
{
    // 19B7 1980 ; [.3296.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH QA>

    uint32_t const cps[2] = { 0x19b7, 0x1980 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3296), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_004)
{
    // 19B7 1981 ; [.3297.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW QA>

    uint32_t const cps[2] = { 0x19b7, 0x1981 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3297), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_005)
{
    // 19B7 1982 ; [.3298.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH KA>

    uint32_t const cps[2] = { 0x19b7, 0x1982 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3298), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_006)
{
    // 19B7 1983 ; [.3299.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH XA>

    uint32_t const cps[2] = { 0x19b7, 0x1983 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3299), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_007)
{
    // 19B7 1984 ; [.329A.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH NGA>

    uint32_t const cps[2] = { 0x19b7, 0x1984 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_008)
{
    // 19B7 1985 ; [.329B.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW KA>

    uint32_t const cps[2] = { 0x19b7, 0x1985 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_009)
{
    // 19B7 1986 ; [.329C.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW XA>

    uint32_t const cps[2] = { 0x19b7, 0x1986 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_010)
{
    // 19B7 1987 ; [.329D.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW NGA>

    uint32_t const cps[2] = { 0x19b7, 0x1987 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_011)
{
    // 19B7 1988 ; [.329E.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH TSA>

    uint32_t const cps[2] = { 0x19b7, 0x1988 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_012)
{
    // 19B7 1989 ; [.329F.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH SA>

    uint32_t const cps[2] = { 0x19b7, 0x1989 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_013)
{
    // 19B7 198A ; [.32A0.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH YA>

    uint32_t const cps[2] = { 0x19b7, 0x198a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_014)
{
    // 19B7 198B ; [.32A1.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW TSA>

    uint32_t const cps[2] = { 0x19b7, 0x198b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_015)
{
    // 19B7 198C ; [.32A2.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW SA>

    uint32_t const cps[2] = { 0x19b7, 0x198c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_016)
{
    // 19B7 198D ; [.32A3.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW YA>

    uint32_t const cps[2] = { 0x19b7, 0x198d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_017)
{
    // 19B7 198E ; [.32A4.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH TA>

    uint32_t const cps[2] = { 0x19b7, 0x198e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_018)
{
    // 19B7 198F ; [.32A5.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH THA>

    uint32_t const cps[2] = { 0x19b7, 0x198f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_019)
{
    // 19B7 1990 ; [.32A6.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH NA>

    uint32_t const cps[2] = { 0x19b7, 0x1990 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_020)
{
    // 19B7 1991 ; [.32A7.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW TA>

    uint32_t const cps[2] = { 0x19b7, 0x1991 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_021)
{
    // 19B7 1992 ; [.32A8.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW THA>

    uint32_t const cps[2] = { 0x19b7, 0x1992 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_022)
{
    // 19B7 1993 ; [.32A9.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW NA>

    uint32_t const cps[2] = { 0x19b7, 0x1993 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_023)
{
    // 19B7 1994 ; [.32AA.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH PA>

    uint32_t const cps[2] = { 0x19b7, 0x1994 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32aa), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_024)
{
    // 19B7 1995 ; [.32AB.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH PHA>

    uint32_t const cps[2] = { 0x19b7, 0x1995 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ab), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_025)
{
    // 19B7 1996 ; [.32AC.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH MA>

    uint32_t const cps[2] = { 0x19b7, 0x1996 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ac), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_026)
{
    // 19B7 1997 ; [.32AD.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW PA>

    uint32_t const cps[2] = { 0x19b7, 0x1997 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ad), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_027)
{
    // 19B7 1998 ; [.32AE.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW PHA>

    uint32_t const cps[2] = { 0x19b7, 0x1998 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ae), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_028)
{
    // 19B7 1999 ; [.32AF.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW MA>

    uint32_t const cps[2] = { 0x19b7, 0x1999 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32af), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_029)
{
    // 19B7 199A ; [.32B0.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH FA>

    uint32_t const cps[2] = { 0x19b7, 0x199a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_030)
{
    // 19B7 199B ; [.32B1.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH VA>

    uint32_t const cps[2] = { 0x19b7, 0x199b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_031)
{
    // 19B7 199C ; [.32B2.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH LA>

    uint32_t const cps[2] = { 0x19b7, 0x199c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_032)
{
    // 19B7 199D ; [.32B3.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW FA>

    uint32_t const cps[2] = { 0x19b7, 0x199d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_033)
{
    // 19B7 199E ; [.32B4.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW VA>

    uint32_t const cps[2] = { 0x19b7, 0x199e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_034)
{
    // 19B7 199F ; [.32B5.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW LA>

    uint32_t const cps[2] = { 0x19b7, 0x199f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_035)
{
    // 19B7 19A0 ; [.32B6.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH HA>

    uint32_t const cps[2] = { 0x19b7, 0x19a0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_036)
{
    // 19B7 19A1 ; [.32B7.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH DA>

    uint32_t const cps[2] = { 0x19b7, 0x19a1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_037)
{
    // 19B7 19A2 ; [.32B8.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH BA>

    uint32_t const cps[2] = { 0x19b7, 0x19a2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_038)
{
    // 19B7 19A3 ; [.32B9.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW HA>

    uint32_t const cps[2] = { 0x19b7, 0x19a3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_039)
{
    // 19B7 19A4 ; [.32BA.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW DA>

    uint32_t const cps[2] = { 0x19b7, 0x19a4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ba), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_040)
{
    // 19B7 19A5 ; [.32BB.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW BA>

    uint32_t const cps[2] = { 0x19b7, 0x19a5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32bb), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_041)
{
    // 19B7 19A6 ; [.32BC.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH KVA>

    uint32_t const cps[2] = { 0x19b7, 0x19a6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32bc), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_042)
{
    // 19B7 19A7 ; [.32BD.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH XVA>

    uint32_t const cps[2] = { 0x19b7, 0x19a7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32bd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_043)
{
    // 19B7 19A8 ; [.32BE.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW KVA>

    uint32_t const cps[2] = { 0x19b7, 0x19a8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32be), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_044)
{
    // 19B7 19A9 ; [.32BF.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW XVA>

    uint32_t const cps[2] = { 0x19b7, 0x19a9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32bf), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_045)
{
    // 19B7 19AA ; [.32C0.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER HIGH SUA>

    uint32_t const cps[2] = { 0x19b7, 0x19aa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32c0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_046)
{
    // 19B7 19AB ; [.32C1.0020.0002][.32C9.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN O, NEW TAI LUE LETTER LOW SUA>

    uint32_t const cps[2] = { 0x19b7, 0x19ab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32c1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_047)
{
    // 19B8  ; [.32CA.0020.0002] 
    // NEW TAI LUE VOWEL SIGN OA

    uint32_t const cps[1] = { 0x19b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_048)
{
    // 19B9  ; [.32CB.0020.0002] 
    // NEW TAI LUE VOWEL SIGN UE

    uint32_t const cps[1] = { 0x19b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_049)
{
    // 19BA  ; [.32CC.0020.0002] 
    // NEW TAI LUE VOWEL SIGN AY

    uint32_t const cps[1] = { 0x19ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_050)
{
    // 19BA 1980 ; [.3296.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH QA>

    uint32_t const cps[2] = { 0x19ba, 0x1980 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3296), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_051)
{
    // 19BA 1981 ; [.3297.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW QA>

    uint32_t const cps[2] = { 0x19ba, 0x1981 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3297), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_052)
{
    // 19BA 1982 ; [.3298.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH KA>

    uint32_t const cps[2] = { 0x19ba, 0x1982 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3298), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_053)
{
    // 19BA 1983 ; [.3299.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH XA>

    uint32_t const cps[2] = { 0x19ba, 0x1983 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3299), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_054)
{
    // 19BA 1984 ; [.329A.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH NGA>

    uint32_t const cps[2] = { 0x19ba, 0x1984 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_055)
{
    // 19BA 1985 ; [.329B.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW KA>

    uint32_t const cps[2] = { 0x19ba, 0x1985 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_056)
{
    // 19BA 1986 ; [.329C.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW XA>

    uint32_t const cps[2] = { 0x19ba, 0x1986 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_057)
{
    // 19BA 1987 ; [.329D.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW NGA>

    uint32_t const cps[2] = { 0x19ba, 0x1987 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_058)
{
    // 19BA 1988 ; [.329E.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH TSA>

    uint32_t const cps[2] = { 0x19ba, 0x1988 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_059)
{
    // 19BA 1989 ; [.329F.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH SA>

    uint32_t const cps[2] = { 0x19ba, 0x1989 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x329f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_060)
{
    // 19BA 198A ; [.32A0.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH YA>

    uint32_t const cps[2] = { 0x19ba, 0x198a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_061)
{
    // 19BA 198B ; [.32A1.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW TSA>

    uint32_t const cps[2] = { 0x19ba, 0x198b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_062)
{
    // 19BA 198C ; [.32A2.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW SA>

    uint32_t const cps[2] = { 0x19ba, 0x198c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_063)
{
    // 19BA 198D ; [.32A3.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW YA>

    uint32_t const cps[2] = { 0x19ba, 0x198d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_064)
{
    // 19BA 198E ; [.32A4.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH TA>

    uint32_t const cps[2] = { 0x19ba, 0x198e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_065)
{
    // 19BA 198F ; [.32A5.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH THA>

    uint32_t const cps[2] = { 0x19ba, 0x198f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_066)
{
    // 19BA 1990 ; [.32A6.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH NA>

    uint32_t const cps[2] = { 0x19ba, 0x1990 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_067)
{
    // 19BA 1991 ; [.32A7.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW TA>

    uint32_t const cps[2] = { 0x19ba, 0x1991 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_068)
{
    // 19BA 1992 ; [.32A8.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW THA>

    uint32_t const cps[2] = { 0x19ba, 0x1992 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_069)
{
    // 19BA 1993 ; [.32A9.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW NA>

    uint32_t const cps[2] = { 0x19ba, 0x1993 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32a9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_070)
{
    // 19BA 1994 ; [.32AA.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH PA>

    uint32_t const cps[2] = { 0x19ba, 0x1994 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32aa), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_071)
{
    // 19BA 1995 ; [.32AB.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH PHA>

    uint32_t const cps[2] = { 0x19ba, 0x1995 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ab), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_072)
{
    // 19BA 1996 ; [.32AC.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH MA>

    uint32_t const cps[2] = { 0x19ba, 0x1996 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ac), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_073)
{
    // 19BA 1997 ; [.32AD.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW PA>

    uint32_t const cps[2] = { 0x19ba, 0x1997 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ad), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_074)
{
    // 19BA 1998 ; [.32AE.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW PHA>

    uint32_t const cps[2] = { 0x19ba, 0x1998 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ae), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_075)
{
    // 19BA 1999 ; [.32AF.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW MA>

    uint32_t const cps[2] = { 0x19ba, 0x1999 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32af), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_076)
{
    // 19BA 199A ; [.32B0.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH FA>

    uint32_t const cps[2] = { 0x19ba, 0x199a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_077)
{
    // 19BA 199B ; [.32B1.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH VA>

    uint32_t const cps[2] = { 0x19ba, 0x199b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_078)
{
    // 19BA 199C ; [.32B2.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH LA>

    uint32_t const cps[2] = { 0x19ba, 0x199c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_079)
{
    // 19BA 199D ; [.32B3.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW FA>

    uint32_t const cps[2] = { 0x19ba, 0x199d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_080)
{
    // 19BA 199E ; [.32B4.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW VA>

    uint32_t const cps[2] = { 0x19ba, 0x199e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_081)
{
    // 19BA 199F ; [.32B5.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW LA>

    uint32_t const cps[2] = { 0x19ba, 0x199f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_082)
{
    // 19BA 19A0 ; [.32B6.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH HA>

    uint32_t const cps[2] = { 0x19ba, 0x19a0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_083)
{
    // 19BA 19A1 ; [.32B7.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH DA>

    uint32_t const cps[2] = { 0x19ba, 0x19a1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_084)
{
    // 19BA 19A2 ; [.32B8.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH BA>

    uint32_t const cps[2] = { 0x19ba, 0x19a2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_085)
{
    // 19BA 19A3 ; [.32B9.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW HA>

    uint32_t const cps[2] = { 0x19ba, 0x19a3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_086)
{
    // 19BA 19A4 ; [.32BA.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW DA>

    uint32_t const cps[2] = { 0x19ba, 0x19a4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32ba), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_087)
{
    // 19BA 19A5 ; [.32BB.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW BA>

    uint32_t const cps[2] = { 0x19ba, 0x19a5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32bb), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_088)
{
    // 19BA 19A6 ; [.32BC.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH KVA>

    uint32_t const cps[2] = { 0x19ba, 0x19a6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32bc), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_089)
{
    // 19BA 19A7 ; [.32BD.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH XVA>

    uint32_t const cps[2] = { 0x19ba, 0x19a7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32bd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_090)
{
    // 19BA 19A8 ; [.32BE.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW KVA>

    uint32_t const cps[2] = { 0x19ba, 0x19a8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32be), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_091)
{
    // 19BA 19A9 ; [.32BF.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW XVA>

    uint32_t const cps[2] = { 0x19ba, 0x19a9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32bf), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_092)
{
    // 19BA 19AA ; [.32C0.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER HIGH SUA>

    uint32_t const cps[2] = { 0x19ba, 0x19aa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32c0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_093)
{
    // 19BA 19AB ; [.32C1.0020.0002][.32CC.0020.0002] 
    // <NEW TAI LUE VOWEL SIGN AY, NEW TAI LUE LETTER LOW SUA>

    uint32_t const cps[2] = { 0x19ba, 0x19ab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32c1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x32cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_042_094)
{
    // 19BB  ; [.32CD.0020.0002] 
    // NEW TAI LUE VOWEL SIGN AAY

    uint32_t const cps[1] = { 0x19bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_095)
{
    // 19BC  ; [.32CE.0020.0002] 
    // NEW TAI LUE VOWEL SIGN UY

    uint32_t const cps[1] = { 0x19bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_096)
{
    // 19BD  ; [.32CF.0020.0002] 
    // NEW TAI LUE VOWEL SIGN OY

    uint32_t const cps[1] = { 0x19bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_097)
{
    // 19BE  ; [.32D0.0020.0002] 
    // NEW TAI LUE VOWEL SIGN OAY

    uint32_t const cps[1] = { 0x19be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_098)
{
    // 19BF  ; [.32D1.0020.0002] 
    // NEW TAI LUE VOWEL SIGN UEY

    uint32_t const cps[1] = { 0x19bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_099)
{
    // 19C0  ; [.32D2.0020.0002] 
    // NEW TAI LUE VOWEL SIGN IY

    uint32_t const cps[1] = { 0x19c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_100)
{
    // 19C1  ; [.32D3.0020.0002] 
    // NEW TAI LUE LETTER FINAL V

    uint32_t const cps[1] = { 0x19c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_101)
{
    // 19C2  ; [.32D4.0020.0002] 
    // NEW TAI LUE LETTER FINAL NG

    uint32_t const cps[1] = { 0x19c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_102)
{
    // 19C3  ; [.32D5.0020.0002] 
    // NEW TAI LUE LETTER FINAL N

    uint32_t const cps[1] = { 0x19c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_103)
{
    // 19C4  ; [.32D6.0020.0002] 
    // NEW TAI LUE LETTER FINAL M

    uint32_t const cps[1] = { 0x19c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_104)
{
    // 19C5  ; [.32D7.0020.0002] 
    // NEW TAI LUE LETTER FINAL K

    uint32_t const cps[1] = { 0x19c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_105)
{
    // 19C6  ; [.32D8.0020.0002] 
    // NEW TAI LUE LETTER FINAL D

    uint32_t const cps[1] = { 0x19c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_106)
{
    // 19C7  ; [.32D9.0020.0002] 
    // NEW TAI LUE LETTER FINAL B

    uint32_t const cps[1] = { 0x19c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_107)
{
    // 19C8  ; [.32DA.0020.0002] 
    // NEW TAI LUE TONE MARK-1

    uint32_t const cps[1] = { 0x19c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32da), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_108)
{
    // 19C9  ; [.32DB.0020.0002] 
    // NEW TAI LUE TONE MARK-2

    uint32_t const cps[1] = { 0x19c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x32db), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_109)
{
    // 19D0  ; [.1CA3.0020.0002] 
    // NEW TAI LUE DIGIT ZERO

    uint32_t const cps[1] = { 0x19d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_110)
{
    // 19D1  ; [.1CA4.0020.0002] 
    // NEW TAI LUE DIGIT ONE

    uint32_t const cps[1] = { 0x19d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_111)
{
    // 19D2  ; [.1CA5.0020.0002] 
    // NEW TAI LUE DIGIT TWO

    uint32_t const cps[1] = { 0x19d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_112)
{
    // 19D3  ; [.1CA6.0020.0002] 
    // NEW TAI LUE DIGIT THREE

    uint32_t const cps[1] = { 0x19d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_113)
{
    // 19D4  ; [.1CA7.0020.0002] 
    // NEW TAI LUE DIGIT FOUR

    uint32_t const cps[1] = { 0x19d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_114)
{
    // 19D5  ; [.1CA8.0020.0002] 
    // NEW TAI LUE DIGIT FIVE

    uint32_t const cps[1] = { 0x19d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_115)
{
    // 19D6  ; [.1CA9.0020.0002] 
    // NEW TAI LUE DIGIT SIX

    uint32_t const cps[1] = { 0x19d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_116)
{
    // 19D7  ; [.1CAA.0020.0002] 
    // NEW TAI LUE DIGIT SEVEN

    uint32_t const cps[1] = { 0x19d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_117)
{
    // 19D8  ; [.1CAB.0020.0002] 
    // NEW TAI LUE DIGIT EIGHT

    uint32_t const cps[1] = { 0x19d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_118)
{
    // 19D9  ; [.1CAC.0020.0002] 
    // NEW TAI LUE DIGIT NINE

    uint32_t const cps[1] = { 0x19d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_119)
{
    // 19DA  ; [.1CA4.0020.0002] 
    // NEW TAI LUE THAM DIGIT ONE

    uint32_t const cps[1] = { 0x19da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_120)
{
    // 19DE  ; [.32B2.0020.0004][.32C8.0020.0004] 
    // NEW TAI LUE SIGN LAE

    uint32_t const cps[1] = { 0x19de };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x32b2), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x4)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_042_121)
{
    // 19DF  ; [.32B2.0020.0004][.32C8.0020.0004][.32D3.0020.0004] 
    // NEW TAI LUE SIGN LAEV

    uint32_t const cps[1] = { 0x19df };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x32b2), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x32c8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x32d3), uint8_t(0x0), uint8_t(0x4)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_042_122)
{
    // 19E0  ; [*0567.0020.0002] 
    // KHMER SYMBOL PATHAMASAT

    uint32_t const cps[1] = { 0x19e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x567), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_123)
{
    // 19E1  ; [*0568.0020.0002] 
    // KHMER SYMBOL MUOY KOET

    uint32_t const cps[1] = { 0x19e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x568), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_124)
{
    // 19E2  ; [*0569.0020.0002] 
    // KHMER SYMBOL PII KOET

    uint32_t const cps[1] = { 0x19e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x569), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_125)
{
    // 19E3  ; [*056A.0020.0002] 
    // KHMER SYMBOL BEI KOET

    uint32_t const cps[1] = { 0x19e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x56a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_126)
{
    // 19E4  ; [*056B.0020.0002] 
    // KHMER SYMBOL BUON KOET

    uint32_t const cps[1] = { 0x19e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x56b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_127)
{
    // 19E5  ; [*056C.0020.0002] 
    // KHMER SYMBOL PRAM KOET

    uint32_t const cps[1] = { 0x19e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x56c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_128)
{
    // 19E6  ; [*056D.0020.0002] 
    // KHMER SYMBOL PRAM-MUOY KOET

    uint32_t const cps[1] = { 0x19e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x56d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_129)
{
    // 19E7  ; [*056E.0020.0002] 
    // KHMER SYMBOL PRAM-PII KOET

    uint32_t const cps[1] = { 0x19e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x56e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_130)
{
    // 19E8  ; [*056F.0020.0002] 
    // KHMER SYMBOL PRAM-BEI KOET

    uint32_t const cps[1] = { 0x19e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x56f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_131)
{
    // 19E9  ; [*0570.0020.0002] 
    // KHMER SYMBOL PRAM-BUON KOET

    uint32_t const cps[1] = { 0x19e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x570), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_132)
{
    // 19EA  ; [*0571.0020.0002] 
    // KHMER SYMBOL DAP KOET

    uint32_t const cps[1] = { 0x19ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x571), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_133)
{
    // 19EB  ; [*0572.0020.0002] 
    // KHMER SYMBOL DAP-MUOY KOET

    uint32_t const cps[1] = { 0x19eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x572), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_134)
{
    // 19EC  ; [*0573.0020.0002] 
    // KHMER SYMBOL DAP-PII KOET

    uint32_t const cps[1] = { 0x19ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x573), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_135)
{
    // 19ED  ; [*0574.0020.0002] 
    // KHMER SYMBOL DAP-BEI KOET

    uint32_t const cps[1] = { 0x19ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x574), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_136)
{
    // 19EE  ; [*0575.0020.0002] 
    // KHMER SYMBOL DAP-BUON KOET

    uint32_t const cps[1] = { 0x19ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x575), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_137)
{
    // 19EF  ; [*0576.0020.0002] 
    // KHMER SYMBOL DAP-PRAM KOET

    uint32_t const cps[1] = { 0x19ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x576), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_138)
{
    // 19F0  ; [*0577.0020.0002] 
    // KHMER SYMBOL TUTEYASAT

    uint32_t const cps[1] = { 0x19f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x577), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_139)
{
    // 19F1  ; [*0578.0020.0002] 
    // KHMER SYMBOL MUOY ROC

    uint32_t const cps[1] = { 0x19f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x578), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_140)
{
    // 19F2  ; [*0579.0020.0002] 
    // KHMER SYMBOL PII ROC

    uint32_t const cps[1] = { 0x19f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x579), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_141)
{
    // 19F3  ; [*057A.0020.0002] 
    // KHMER SYMBOL BEI ROC

    uint32_t const cps[1] = { 0x19f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x57a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_142)
{
    // 19F4  ; [*057B.0020.0002] 
    // KHMER SYMBOL BUON ROC

    uint32_t const cps[1] = { 0x19f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x57b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_143)
{
    // 19F5  ; [*057C.0020.0002] 
    // KHMER SYMBOL PRAM ROC

    uint32_t const cps[1] = { 0x19f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x57c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_144)
{
    // 19F6  ; [*057D.0020.0002] 
    // KHMER SYMBOL PRAM-MUOY ROC

    uint32_t const cps[1] = { 0x19f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x57d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_145)
{
    // 19F7  ; [*057E.0020.0002] 
    // KHMER SYMBOL PRAM-PII ROC

    uint32_t const cps[1] = { 0x19f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x57e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_146)
{
    // 19F8  ; [*057F.0020.0002] 
    // KHMER SYMBOL PRAM-BEI ROC

    uint32_t const cps[1] = { 0x19f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x57f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_147)
{
    // 19F9  ; [*0580.0020.0002] 
    // KHMER SYMBOL PRAM-BUON ROC

    uint32_t const cps[1] = { 0x19f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x580), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_148)
{
    // 19FA  ; [*0581.0020.0002] 
    // KHMER SYMBOL DAP ROC

    uint32_t const cps[1] = { 0x19fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x581), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_042_149)
{
    // 19FB  ; [*0582.0020.0002] 
    // KHMER SYMBOL DAP-MUOY ROC

    uint32_t const cps[1] = { 0x19fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x582), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

