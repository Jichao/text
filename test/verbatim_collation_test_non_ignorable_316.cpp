// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_316_000)
{
    // FA7A 0041;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-FA7A	[FB40 D599 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_001)
{
    // 2F847 0041;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-2F847	[FB40 D599 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F847, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_002)
{
    // FA7A 0062;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-FA7A	[FB40 D599 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_003)
{
    // 2F847 0062;	
    // (喙) CJK COMPATIBILITY IDEOGRAPH-2F847	[FB40 D599 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F847, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_004)
{
    // FA36 0021;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA36	[FB40 D59D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA36, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_005)
{
    // FA78 0021;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA78	[FB40 D59D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA78, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_006)
{
    // FA36 003F;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA36	[FB40 D59D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA36, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_007)
{
    // FA78 003F;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA78	[FB40 D59D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA78, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_008)
{
    // FA36 0061;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA36	[FB40 D59D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA36, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_009)
{
    // FA78 0061;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA78	[FB40 D59D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA78, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_010)
{
    // FA36 0041;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA36	[FB40 D59D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA36, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_011)
{
    // FA78 0041;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA78	[FB40 D59D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA78, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_012)
{
    // FA36 0062;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA36	[FB40 D59D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA36, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_013)
{
    // FA78 0062;	
    // (喝) CJK COMPATIBILITY IDEOGRAPH-FA78	[FB40 D59D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA78, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD59D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_014)
{
    // 2F848 0021;	
    // (喫) CJK COMPATIBILITY IDEOGRAPH-2F848	[FB40 D5AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F848, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD5AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_015)
{
    // 2F848 003F;	
    // (喫) CJK COMPATIBILITY IDEOGRAPH-2F848	[FB40 D5AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F848, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD5AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_016)
{
    // 2F848 0061;	
    // (喫) CJK COMPATIBILITY IDEOGRAPH-2F848	[FB40 D5AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F848, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD5AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_017)
{
    // 2F848 0041;	
    // (喫) CJK COMPATIBILITY IDEOGRAPH-2F848	[FB40 D5AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F848, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD5AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_018)
{
    // 2F848 0062;	
    // (喫) CJK COMPATIBILITY IDEOGRAPH-2F848	[FB40 D5AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F848, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD5AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_019)
{
    // 2F849 0021;	
    // (喳) CJK COMPATIBILITY IDEOGRAPH-2F849	[FB40 D5B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F849, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD5B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_020)
{
    // 2F849 003F;	
    // (喳) CJK COMPATIBILITY IDEOGRAPH-2F849	[FB40 D5B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F849, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD5B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_021)
{
    // 2F849 0061;	
    // (喳) CJK COMPATIBILITY IDEOGRAPH-2F849	[FB40 D5B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F849, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD5B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_022)
{
    // 2F849 0041;	
    // (喳) CJK COMPATIBILITY IDEOGRAPH-2F849	[FB40 D5B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F849, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD5B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_023)
{
    // 2F849 0062;	
    // (喳) CJK COMPATIBILITY IDEOGRAPH-2F849	[FB40 D5B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F849, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD5B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_024)
{
    // 1F23A 0021;	
    // (🈺) SQUARED CJK UNIFIED IDEOGRAPH-55B6	[FB40 D5B6 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F23A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD5B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_025)
{
    // 1F23A 003F;	
    // (🈺) SQUARED CJK UNIFIED IDEOGRAPH-55B6	[FB40 D5B6 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F23A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD5B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_026)
{
    // 1F23A 0061;	
    // (🈺) SQUARED CJK UNIFIED IDEOGRAPH-55B6	[FB40 D5B6 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F23A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD5B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_027)
{
    // 1F23A 0041;	
    // (🈺) SQUARED CJK UNIFIED IDEOGRAPH-55B6	[FB40 D5B6 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F23A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD5B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_028)
{
    // 1F23A 0062;	
    // (🈺) SQUARED CJK UNIFIED IDEOGRAPH-55B6	[FB40 D5B6 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F23A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD5B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_029)
{
    // FA0D 0021;	
    // (嗀) CJK COMPATIBILITY IDEOGRAPH-FA0D	[FB40 D5C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD5C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_030)
{
    // FA0D 003F;	
    // (嗀) CJK COMPATIBILITY IDEOGRAPH-FA0D	[FB40 D5C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD5C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_031)
{
    // FA0D 0061;	
    // (嗀) CJK COMPATIBILITY IDEOGRAPH-FA0D	[FB40 D5C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD5C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_032)
{
    // FA0D 0041;	
    // (嗀) CJK COMPATIBILITY IDEOGRAPH-FA0D	[FB40 D5C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD5C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_033)
{
    // FA0D 0062;	
    // (嗀) CJK COMPATIBILITY IDEOGRAPH-FA0D	[FB40 D5C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD5C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_034)
{
    // 2F84A 0021;	
    // (嗂) CJK COMPATIBILITY IDEOGRAPH-2F84A	[FB40 D5C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD5C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_035)
{
    // 2F84A 003F;	
    // (嗂) CJK COMPATIBILITY IDEOGRAPH-2F84A	[FB40 D5C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD5C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_036)
{
    // 2F84A 0061;	
    // (嗂) CJK COMPATIBILITY IDEOGRAPH-2F84A	[FB40 D5C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD5C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_037)
{
    // 2F84A 0041;	
    // (嗂) CJK COMPATIBILITY IDEOGRAPH-2F84A	[FB40 D5C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F84A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD5C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_038)
{
    // 2F84A 0062;	
    // (嗂) CJK COMPATIBILITY IDEOGRAPH-2F84A	[FB40 D5C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD5C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_039)
{
    // FA7B 0021;	
    // (嗢) CJK COMPATIBILITY IDEOGRAPH-FA7B	[FB40 D5E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD5E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_040)
{
    // FA7B 003F;	
    // (嗢) CJK COMPATIBILITY IDEOGRAPH-FA7B	[FB40 D5E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD5E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_041)
{
    // FA7B 0061;	
    // (嗢) CJK COMPATIBILITY IDEOGRAPH-FA7B	[FB40 D5E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD5E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_042)
{
    // FA7B 0041;	
    // (嗢) CJK COMPATIBILITY IDEOGRAPH-FA7B	[FB40 D5E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD5E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_043)
{
    // FA7B 0062;	
    // (嗢) CJK COMPATIBILITY IDEOGRAPH-FA7B	[FB40 D5E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD5E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_044)
{
    // FA37 0021;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-FA37	[FB40 D606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA37, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_045)
{
    // 2F84C 0021;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-2F84C	[FB40 D606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_046)
{
    // FA37 003F;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-FA37	[FB40 D606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA37, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_047)
{
    // 2F84C 003F;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-2F84C	[FB40 D606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_048)
{
    // FA37 0061;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-FA37	[FB40 D606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA37, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_049)
{
    // 2F84C 0061;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-2F84C	[FB40 D606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_050)
{
    // FA37 0041;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-FA37	[FB40 D606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA37, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_051)
{
    // 2F84C 0041;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-2F84C	[FB40 D606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F84C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_052)
{
    // FA37 0062;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-FA37	[FB40 D606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA37, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_053)
{
    // 2F84C 0062;	
    // (嘆) CJK COMPATIBILITY IDEOGRAPH-2F84C	[FB40 D606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_054)
{
    // 2F84E 0021;	
    // (噑) CJK COMPATIBILITY IDEOGRAPH-2F84E	[FB40 D651 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD651, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_055)
{
    // 2F84E 003F;	
    // (噑) CJK COMPATIBILITY IDEOGRAPH-2F84E	[FB40 D651 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD651, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_056)
{
    // 2F84E 0061;	
    // (噑) CJK COMPATIBILITY IDEOGRAPH-2F84E	[FB40 D651 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_057)
{
    // 2F84E 0041;	
    // (噑) CJK COMPATIBILITY IDEOGRAPH-2F84E	[FB40 D651 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F84E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD651, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_058)
{
    // 2F84E 0062;	
    // (噑) CJK COMPATIBILITY IDEOGRAPH-2F84E	[FB40 D651 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD651, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_059)
{
    // FA38 0021;	
    // (器) CJK COMPATIBILITY IDEOGRAPH-FA38	[FB40 D668 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA38, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD668, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_060)
{
    // FA38 003F;	
    // (器) CJK COMPATIBILITY IDEOGRAPH-FA38	[FB40 D668 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA38, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD668, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_061)
{
    // FA38 0061;	
    // (器) CJK COMPATIBILITY IDEOGRAPH-FA38	[FB40 D668 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA38, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_062)
{
    // FA38 0041;	
    // (器) CJK COMPATIBILITY IDEOGRAPH-FA38	[FB40 D668 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA38, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD668, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_063)
{
    // FA38 0062;	
    // (器) CJK COMPATIBILITY IDEOGRAPH-FA38	[FB40 D668 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA38, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD668, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_064)
{
    // 2F84F 0021;	
    // (噴) CJK COMPATIBILITY IDEOGRAPH-2F84F	[FB40 D674 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD674, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_065)
{
    // 2F84F 003F;	
    // (噴) CJK COMPATIBILITY IDEOGRAPH-2F84F	[FB40 D674 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD674, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_066)
{
    // 2F84F 0061;	
    // (噴) CJK COMPATIBILITY IDEOGRAPH-2F84F	[FB40 D674 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_067)
{
    // 2F84F 0041;	
    // (噴) CJK COMPATIBILITY IDEOGRAPH-2F84F	[FB40 D674 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F84F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD674, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_068)
{
    // 2F84F 0062;	
    // (噴) CJK COMPATIBILITY IDEOGRAPH-2F84F	[FB40 D674 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD674, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_069)
{
    // 2F1E 0021;	
    // (⼞) KANGXI RADICAL ENCLOSURE	[FB40 D6D7 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD6D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_070)
{
    // 2F1E 003F;	
    // (⼞) KANGXI RADICAL ENCLOSURE	[FB40 D6D7 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD6D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_071)
{
    // 2F1E 0061;	
    // (⼞) KANGXI RADICAL ENCLOSURE	[FB40 D6D7 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD6D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_072)
{
    // 2F1E 0041;	
    // (⼞) KANGXI RADICAL ENCLOSURE	[FB40 D6D7 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD6D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_073)
{
    // 2F1E 0062;	
    // (⼞) KANGXI RADICAL ENCLOSURE	[FB40 D6D7 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD6D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_074)
{
    // 3283 0021;	
    // (㊃) CIRCLED IDEOGRAPH FOUR	[FB40 D6DB 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3283, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_075)
{
    // 3195 0021;	
    // (㆕) IDEOGRAPHIC ANNOTATION FOUR MARK	[FB40 D6DB 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3195, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_076)
{
    // 3283 003F;	
    // (㊃) CIRCLED IDEOGRAPH FOUR	[FB40 D6DB 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3283, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_077)
{
    // 3195 003F;	
    // (㆕) IDEOGRAPHIC ANNOTATION FOUR MARK	[FB40 D6DB 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3195, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_078)
{
    // 3283 0061;	
    // (㊃) CIRCLED IDEOGRAPH FOUR	[FB40 D6DB 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3283, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_079)
{
    // 3283 0041;	
    // (㊃) CIRCLED IDEOGRAPH FOUR	[FB40 D6DB 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3283, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_080)
{
    // 3195 0061;	
    // (㆕) IDEOGRAPHIC ANNOTATION FOUR MARK	[FB40 D6DB 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3195, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_081)
{
    // 3195 0041;	
    // (㆕) IDEOGRAPHIC ANNOTATION FOUR MARK	[FB40 D6DB 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x3195, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_082)
{
    // 3283 0062;	
    // (㊃) CIRCLED IDEOGRAPH FOUR	[FB40 D6DB 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3283, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_083)
{
    // 3195 0062;	
    // (㆕) IDEOGRAPHIC ANNOTATION FOUR MARK	[FB40 D6DB 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3195, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD6DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_084)
{
    // F9A9 0021;	
    // (囹) CJK COMPATIBILITY IDEOGRAPH-F9A9	[FB40 D6F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD6F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_085)
{
    // F9A9 003F;	
    // (囹) CJK COMPATIBILITY IDEOGRAPH-F9A9	[FB40 D6F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD6F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_086)
{
    // F9A9 0061;	
    // (囹) CJK COMPATIBILITY IDEOGRAPH-F9A9	[FB40 D6F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD6F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_087)
{
    // F9A9 0041;	
    // (囹) CJK COMPATIBILITY IDEOGRAPH-F9A9	[FB40 D6F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD6F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_088)
{
    // F9A9 0062;	
    // (囹) CJK COMPATIBILITY IDEOGRAPH-F9A9	[FB40 D6F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD6F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_089)
{
    // 2F84B 0021;	
    // (圖) CJK COMPATIBILITY IDEOGRAPH-2F84B	[FB40 D716 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD716, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_090)
{
    // 2F84B 003F;	
    // (圖) CJK COMPATIBILITY IDEOGRAPH-2F84B	[FB40 D716 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD716, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_091)
{
    // 2F84B 0061;	
    // (圖) CJK COMPATIBILITY IDEOGRAPH-2F84B	[FB40 D716 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_092)
{
    // 2F84B 0041;	
    // (圖) CJK COMPATIBILITY IDEOGRAPH-2F84B	[FB40 D716 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F84B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_093)
{
    // 2F84B 0062;	
    // (圖) CJK COMPATIBILITY IDEOGRAPH-2F84B	[FB40 D716 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD716, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_094)
{
    // 2F84D 0021;	
    // (圗) CJK COMPATIBILITY IDEOGRAPH-2F84D	[FB40 D717 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD717, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_095)
{
    // 2F84D 003F;	
    // (圗) CJK COMPATIBILITY IDEOGRAPH-2F84D	[FB40 D717 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD717, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_096)
{
    // 2F84D 0061;	
    // (圗) CJK COMPATIBILITY IDEOGRAPH-2F84D	[FB40 D717 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_097)
{
    // 2F84D 0041;	
    // (圗) CJK COMPATIBILITY IDEOGRAPH-2F84D	[FB40 D717 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F84D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_098)
{
    // 2F84D 0062;	
    // (圗) CJK COMPATIBILITY IDEOGRAPH-2F84D	[FB40 D717 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F84D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD717, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_099)
{
    // 2F1F 0021;	
    // (⼟) KANGXI RADICAL EARTH	[FB40 D71F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_100)
{
    // 328F 0021;	
    // (㊏) CIRCLED IDEOGRAPH EARTH	[FB40 D71F 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_101)
{
    // 2F1F 003F;	
    // (⼟) KANGXI RADICAL EARTH	[FB40 D71F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_102)
{
    // 328F 003F;	
    // (㊏) CIRCLED IDEOGRAPH EARTH	[FB40 D71F 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_103)
{
    // 2F1F 0061;	
    // (⼟) KANGXI RADICAL EARTH	[FB40 D71F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_104)
{
    // 2F1F 0041;	
    // (⼟) KANGXI RADICAL EARTH	[FB40 D71F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_105)
{
    // 328F 0061;	
    // (㊏) CIRCLED IDEOGRAPH EARTH	[FB40 D71F 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_106)
{
    // 328F 0041;	
    // (㊏) CIRCLED IDEOGRAPH EARTH	[FB40 D71F 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x328F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_107)
{
    // 2F1F 0062;	
    // (⼟) KANGXI RADICAL EARTH	[FB40 D71F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_108)
{
    // 328F 0062;	
    // (㊏) CIRCLED IDEOGRAPH EARTH	[FB40 D71F 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD71F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_109)
{
    // 319E 0021;	
    // (㆞) IDEOGRAPHIC ANNOTATION EARTH MARK	[FB40 D730 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD730, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_110)
{
    // 319E 003F;	
    // (㆞) IDEOGRAPHIC ANNOTATION EARTH MARK	[FB40 D730 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD730, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_111)
{
    // 319E 0061;	
    // (㆞) IDEOGRAPHIC ANNOTATION EARTH MARK	[FB40 D730 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_112)
{
    // 319E 0041;	
    // (㆞) IDEOGRAPHIC ANNOTATION EARTH MARK	[FB40 D730 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x319E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD730, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_113)
{
    // 319E 0062;	
    // (㆞) IDEOGRAPHIC ANNOTATION EARTH MARK	[FB40 D730 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD730, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_114)
{
    // 2F855 0021;	
    // (型) CJK COMPATIBILITY IDEOGRAPH-2F855	[FB40 D78B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F855, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD78B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_115)
{
    // 2F855 003F;	
    // (型) CJK COMPATIBILITY IDEOGRAPH-2F855	[FB40 D78B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F855, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD78B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_116)
{
    // 2F855 0061;	
    // (型) CJK COMPATIBILITY IDEOGRAPH-2F855	[FB40 D78B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F855, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD78B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_117)
{
    // 2F855 0041;	
    // (型) CJK COMPATIBILITY IDEOGRAPH-2F855	[FB40 D78B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F855, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD78B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_118)
{
    // 2F855 0062;	
    // (型) CJK COMPATIBILITY IDEOGRAPH-2F855	[FB40 D78B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F855, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD78B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_119)
{
    // 2F852 0021;	
    // (城) CJK COMPATIBILITY IDEOGRAPH-2F852	[FB40 D7CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F852, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD7CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_120)
{
    // 2F852 003F;	
    // (城) CJK COMPATIBILITY IDEOGRAPH-2F852	[FB40 D7CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F852, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD7CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_121)
{
    // 2F852 0061;	
    // (城) CJK COMPATIBILITY IDEOGRAPH-2F852	[FB40 D7CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F852, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD7CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_122)
{
    // 2F852 0041;	
    // (城) CJK COMPATIBILITY IDEOGRAPH-2F852	[FB40 D7CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F852, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD7CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_123)
{
    // 2F852 0062;	
    // (城) CJK COMPATIBILITY IDEOGRAPH-2F852	[FB40 D7CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F852, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD7CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_124)
{
    // 2F853 0021;	
    // (埴) CJK COMPATIBILITY IDEOGRAPH-2F853	[FB40 D7F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F853, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD7F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_125)
{
    // 2F853 003F;	
    // (埴) CJK COMPATIBILITY IDEOGRAPH-2F853	[FB40 D7F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F853, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD7F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_126)
{
    // 2F853 0061;	
    // (埴) CJK COMPATIBILITY IDEOGRAPH-2F853	[FB40 D7F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F853, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD7F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_127)
{
    // 2F853 0041;	
    // (埴) CJK COMPATIBILITY IDEOGRAPH-2F853	[FB40 D7F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F853, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD7F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_128)
{
    // 2F853 0062;	
    // (埴) CJK COMPATIBILITY IDEOGRAPH-2F853	[FB40 D7F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F853, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD7F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_129)
{
    // 2F854 0021;	
    // (堍) CJK COMPATIBILITY IDEOGRAPH-2F854	[FB40 D80D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F854, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD80D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_130)
{
    // 2F854 003F;	
    // (堍) CJK COMPATIBILITY IDEOGRAPH-2F854	[FB40 D80D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F854, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD80D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_131)
{
    // 2F854 0061;	
    // (堍) CJK COMPATIBILITY IDEOGRAPH-2F854	[FB40 D80D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F854, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD80D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_132)
{
    // 2F854 0041;	
    // (堍) CJK COMPATIBILITY IDEOGRAPH-2F854	[FB40 D80D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F854, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD80D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_133)
{
    // 2F854 0062;	
    // (堍) CJK COMPATIBILITY IDEOGRAPH-2F854	[FB40 D80D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F854, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD80D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_134)
{
    // 2F857 0021;	
    // (報) CJK COMPATIBILITY IDEOGRAPH-2F857	[FB40 D831 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F857, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD831, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_135)
{
    // 2F857 003F;	
    // (報) CJK COMPATIBILITY IDEOGRAPH-2F857	[FB40 D831 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F857, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD831, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_136)
{
    // 2F857 0061;	
    // (報) CJK COMPATIBILITY IDEOGRAPH-2F857	[FB40 D831 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F857, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_137)
{
    // 2F857 0041;	
    // (報) CJK COMPATIBILITY IDEOGRAPH-2F857	[FB40 D831 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F857, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD831, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_138)
{
    // 2F857 0062;	
    // (報) CJK COMPATIBILITY IDEOGRAPH-2F857	[FB40 D831 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F857, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD831, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_139)
{
    // 2F856 0021;	
    // (堲) CJK COMPATIBILITY IDEOGRAPH-2F856	[FB40 D832 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F856, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD832, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_140)
{
    // 2F856 003F;	
    // (堲) CJK COMPATIBILITY IDEOGRAPH-2F856	[FB40 D832 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F856, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD832, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_141)
{
    // 2F856 0061;	
    // (堲) CJK COMPATIBILITY IDEOGRAPH-2F856	[FB40 D832 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F856, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_142)
{
    // 2F856 0041;	
    // (堲) CJK COMPATIBILITY IDEOGRAPH-2F856	[FB40 D832 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F856, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_143)
{
    // 2F856 0062;	
    // (堲) CJK COMPATIBILITY IDEOGRAPH-2F856	[FB40 D832 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F856, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD832, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_144)
{
    // FA39 0021;	
    // (塀) CJK COMPATIBILITY IDEOGRAPH-FA39	[FB40 D840 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA39, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD840, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_145)
{
    // FA39 003F;	
    // (塀) CJK COMPATIBILITY IDEOGRAPH-FA39	[FB40 D840 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA39, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD840, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_146)
{
    // FA39 0061;	
    // (塀) CJK COMPATIBILITY IDEOGRAPH-FA39	[FB40 D840 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA39, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_147)
{
    // FA39 0041;	
    // (塀) CJK COMPATIBILITY IDEOGRAPH-FA39	[FB40 D840 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA39, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_148)
{
    // FA39 0062;	
    // (塀) CJK COMPATIBILITY IDEOGRAPH-FA39	[FB40 D840 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA39, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD840, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_149)
{
    // FA10 0021;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA10	[FB40 D85A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA10, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_150)
{
    // FA7C 0021;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA7C	[FB40 D85A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_151)
{
    // FA10 003F;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA10	[FB40 D85A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA10, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_152)
{
    // FA7C 003F;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA7C	[FB40 D85A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_153)
{
    // FA10 0061;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA10	[FB40 D85A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA10, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_154)
{
    // FA7C 0061;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA7C	[FB40 D85A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_155)
{
    // FA10 0041;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA10	[FB40 D85A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA10, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_156)
{
    // FA7C 0041;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA7C	[FB40 D85A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_157)
{
    // FA10 0062;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA10	[FB40 D85A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA10, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_158)
{
    // FA7C 0062;	
    // (塚) CJK COMPATIBILITY IDEOGRAPH-FA7C	[FB40 D85A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD85A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_159)
{
    // F96C 0021;	
    // (塞) CJK COMPATIBILITY IDEOGRAPH-F96C	[FB40 D85E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD85E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_160)
{
    // F96C 003F;	
    // (塞) CJK COMPATIBILITY IDEOGRAPH-F96C	[FB40 D85E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD85E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_161)
{
    // F96C 0061;	
    // (塞) CJK COMPATIBILITY IDEOGRAPH-F96C	[FB40 D85E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD85E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_162)
{
    // F96C 0041;	
    // (塞) CJK COMPATIBILITY IDEOGRAPH-F96C	[FB40 D85E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF96C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD85E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_163)
{
    // F96C 0062;	
    // (塞) CJK COMPATIBILITY IDEOGRAPH-F96C	[FB40 D85E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD85E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_164)
{
    // FA3A 0021;	
    // (墨) CJK COMPATIBILITY IDEOGRAPH-FA3A	[FB40 D8A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_165)
{
    // FA3A 003F;	
    // (墨) CJK COMPATIBILITY IDEOGRAPH-FA3A	[FB40 D8A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_166)
{
    // FA3A 0061;	
    // (墨) CJK COMPATIBILITY IDEOGRAPH-FA3A	[FB40 D8A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_167)
{
    // FA3A 0041;	
    // (墨) CJK COMPATIBILITY IDEOGRAPH-FA3A	[FB40 D8A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA3A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_168)
{
    // FA3A 0062;	
    // (墨) CJK COMPATIBILITY IDEOGRAPH-FA3A	[FB40 D8A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA3A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_169)
{
    // 2F858 0021;	
    // (墬) CJK COMPATIBILITY IDEOGRAPH-2F858	[FB40 D8AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F858, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_170)
{
    // 2F858 003F;	
    // (墬) CJK COMPATIBILITY IDEOGRAPH-2F858	[FB40 D8AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F858, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_171)
{
    // 2F858 0061;	
    // (墬) CJK COMPATIBILITY IDEOGRAPH-2F858	[FB40 D8AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F858, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_172)
{
    // 2F858 0041;	
    // (墬) CJK COMPATIBILITY IDEOGRAPH-2F858	[FB40 D8AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F858, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_173)
{
    // 2F858 0062;	
    // (墬) CJK COMPATIBILITY IDEOGRAPH-2F858	[FB40 D8AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F858, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_174)
{
    // FA7D 0021;	
    // (墳) CJK COMPATIBILITY IDEOGRAPH-FA7D	[FB40 D8B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_175)
{
    // FA7D 003F;	
    // (墳) CJK COMPATIBILITY IDEOGRAPH-FA7D	[FB40 D8B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_176)
{
    // FA7D 0061;	
    // (墳) CJK COMPATIBILITY IDEOGRAPH-FA7D	[FB40 D8B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_177)
{
    // FA7D 0041;	
    // (墳) CJK COMPATIBILITY IDEOGRAPH-FA7D	[FB40 D8B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_178)
{
    // FA7D 0062;	
    // (墳) CJK COMPATIBILITY IDEOGRAPH-FA7D	[FB40 D8B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_179)
{
    // F94A 0021;	
    // (壘) CJK COMPATIBILITY IDEOGRAPH-F94A	[FB40 D8D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_180)
{
    // F94A 003F;	
    // (壘) CJK COMPATIBILITY IDEOGRAPH-F94A	[FB40 D8D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_181)
{
    // F94A 0061;	
    // (壘) CJK COMPATIBILITY IDEOGRAPH-F94A	[FB40 D8D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_182)
{
    // F94A 0041;	
    // (壘) CJK COMPATIBILITY IDEOGRAPH-F94A	[FB40 D8D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF94A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_183)
{
    // F94A 0062;	
    // (壘) CJK COMPATIBILITY IDEOGRAPH-F94A	[FB40 D8D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_184)
{
    // F942 0021;	
    // (壟) CJK COMPATIBILITY IDEOGRAPH-F942	[FB40 D8DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF942, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_185)
{
    // F942 003F;	
    // (壟) CJK COMPATIBILITY IDEOGRAPH-F942	[FB40 D8DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF942, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_186)
{
    // F942 0061;	
    // (壟) CJK COMPATIBILITY IDEOGRAPH-F942	[FB40 D8DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF942, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_187)
{
    // F942 0041;	
    // (壟) CJK COMPATIBILITY IDEOGRAPH-F942	[FB40 D8DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF942, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_188)
{
    // F942 0062;	
    // (壟) CJK COMPATIBILITY IDEOGRAPH-F942	[FB40 D8DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF942, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_189)
{
    // 2F20 0021;	
    // (⼠) KANGXI RADICAL SCHOLAR	[FB40 D8EB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F20, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_190)
{
    // 2F20 003F;	
    // (⼠) KANGXI RADICAL SCHOLAR	[FB40 D8EB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F20, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_191)
{
    // 2F20 0061;	
    // (⼠) KANGXI RADICAL SCHOLAR	[FB40 D8EB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F20, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_192)
{
    // 2F20 0041;	
    // (⼠) KANGXI RADICAL SCHOLAR	[FB40 D8EB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F20, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_193)
{
    // 2F20 0062;	
    // (⼠) KANGXI RADICAL SCHOLAR	[FB40 D8EB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F20, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_194)
{
    // 2F851 0021;	
    // (壮) CJK COMPATIBILITY IDEOGRAPH-2F851	[FB40 D8EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F851, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_195)
{
    // 2F851 003F;	
    // (壮) CJK COMPATIBILITY IDEOGRAPH-2F851	[FB40 D8EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F851, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_196)
{
    // 2F851 0061;	
    // (壮) CJK COMPATIBILITY IDEOGRAPH-2F851	[FB40 D8EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F851, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_197)
{
    // 2F851 0041;	
    // (壮) CJK COMPATIBILITY IDEOGRAPH-2F851	[FB40 D8EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F851, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_198)
{
    // 2F851 0062;	
    // (壮) CJK COMPATIBILITY IDEOGRAPH-2F851	[FB40 D8EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F851, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_199)
{
    // 1F224 0021;	
    // (🈤) SQUARED CJK UNIFIED IDEOGRAPH-58F0	[FB40 D8F0 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F224, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_200)
{
    // 1F224 003F;	
    // (🈤) SQUARED CJK UNIFIED IDEOGRAPH-58F0	[FB40 D8F0 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F224, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_201)
{
    // 1F224 0061;	
    // (🈤) SQUARED CJK UNIFIED IDEOGRAPH-58F0	[FB40 D8F0 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F224, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_202)
{
    // 1F224 0041;	
    // (🈤) SQUARED CJK UNIFIED IDEOGRAPH-58F0	[FB40 D8F0 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F224, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_203)
{
    // 1F224 0062;	
    // (🈤) SQUARED CJK UNIFIED IDEOGRAPH-58F0	[FB40 D8F0 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F224, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_204)
{
    // 2F85A 0021;	
    // (売) CJK COMPATIBILITY IDEOGRAPH-2F85A	[FB40 D8F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_205)
{
    // 2F85A 003F;	
    // (売) CJK COMPATIBILITY IDEOGRAPH-2F85A	[FB40 D8F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_206)
{
    // 2F85A 0061;	
    // (売) CJK COMPATIBILITY IDEOGRAPH-2F85A	[FB40 D8F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_207)
{
    // 2F85A 0041;	
    // (売) CJK COMPATIBILITY IDEOGRAPH-2F85A	[FB40 D8F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F85A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_208)
{
    // 2F85A 0062;	
    // (売) CJK COMPATIBILITY IDEOGRAPH-2F85A	[FB40 D8F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_209)
{
    // 2F85B 0021;	
    // (壷) CJK COMPATIBILITY IDEOGRAPH-2F85B	[FB40 D8F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_210)
{
    // 2F85B 003F;	
    // (壷) CJK COMPATIBILITY IDEOGRAPH-2F85B	[FB40 D8F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD8F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_211)
{
    // 2F85B 0061;	
    // (壷) CJK COMPATIBILITY IDEOGRAPH-2F85B	[FB40 D8F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_212)
{
    // 2F85B 0041;	
    // (壷) CJK COMPATIBILITY IDEOGRAPH-2F85B	[FB40 D8F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F85B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_213)
{
    // 2F85B 0062;	
    // (壷) CJK COMPATIBILITY IDEOGRAPH-2F85B	[FB40 D8F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD8F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_214)
{
    // 2F21 0021;	
    // (⼡) KANGXI RADICAL GO	[FB40 D902 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F21, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD902, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_215)
{
    // 2F21 003F;	
    // (⼡) KANGXI RADICAL GO	[FB40 D902 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F21, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD902, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_216)
{
    // 2F21 0061;	
    // (⼡) KANGXI RADICAL GO	[FB40 D902 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F21, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_217)
{
    // 2F21 0041;	
    // (⼡) KANGXI RADICAL GO	[FB40 D902 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F21, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_218)
{
    // 2F21 0062;	
    // (⼡) KANGXI RADICAL GO	[FB40 D902 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F21, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD902, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_219)
{
    // 2F85C 0021;	
    // (夆) CJK COMPATIBILITY IDEOGRAPH-2F85C	[FB40 D906 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD906, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_220)
{
    // 2F85C 003F;	
    // (夆) CJK COMPATIBILITY IDEOGRAPH-2F85C	[FB40 D906 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD906, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_221)
{
    // 2F85C 0061;	
    // (夆) CJK COMPATIBILITY IDEOGRAPH-2F85C	[FB40 D906 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_222)
{
    // 2F85C 0041;	
    // (夆) CJK COMPATIBILITY IDEOGRAPH-2F85C	[FB40 D906 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F85C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_223)
{
    // 2F85C 0062;	
    // (夆) CJK COMPATIBILITY IDEOGRAPH-2F85C	[FB40 D906 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD906, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_224)
{
    // 2F22 0021;	
    // (⼢) KANGXI RADICAL GO SLOWLY	[FB40 D90A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F22, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD90A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_225)
{
    // 2F22 003F;	
    // (⼢) KANGXI RADICAL GO SLOWLY	[FB40 D90A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F22, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD90A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_226)
{
    // 2F22 0061;	
    // (⼢) KANGXI RADICAL GO SLOWLY	[FB40 D90A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F22, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD90A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_227)
{
    // 2F22 0041;	
    // (⼢) KANGXI RADICAL GO SLOWLY	[FB40 D90A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F22, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD90A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_228)
{
    // 2F22 0062;	
    // (⼢) KANGXI RADICAL GO SLOWLY	[FB40 D90A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F22, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD90A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_229)
{
    // 2F23 0021;	
    // (⼣) KANGXI RADICAL EVENING	[FB40 D915 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F23, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD915, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_230)
{
    // 2F23 003F;	
    // (⼣) KANGXI RADICAL EVENING	[FB40 D915 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F23, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD915, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_231)
{
    // 2F23 0061;	
    // (⼣) KANGXI RADICAL EVENING	[FB40 D915 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F23, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_232)
{
    // 2F23 0041;	
    // (⼣) KANGXI RADICAL EVENING	[FB40 D915 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F23, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_233)
{
    // 2F23 0062;	
    // (⼣) KANGXI RADICAL EVENING	[FB40 D915 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F23, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD915, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_234)
{
    // 2F85D 0021;	
    // (多) CJK COMPATIBILITY IDEOGRAPH-2F85D	[FB40 D91A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_235)
{
    // 1F215 0021;	
    // (🈕) SQUARED CJK UNIFIED IDEOGRAPH-591A	[FB40 D91A 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F215, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_236)
{
    // 2F85D 003F;	
    // (多) CJK COMPATIBILITY IDEOGRAPH-2F85D	[FB40 D91A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_237)
{
    // 1F215 003F;	
    // (🈕) SQUARED CJK UNIFIED IDEOGRAPH-591A	[FB40 D91A 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F215, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_238)
{
    // 2F85D 0061;	
    // (多) CJK COMPATIBILITY IDEOGRAPH-2F85D	[FB40 D91A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_239)
{
    // 2F85D 0041;	
    // (多) CJK COMPATIBILITY IDEOGRAPH-2F85D	[FB40 D91A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F85D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_240)
{
    // 1F215 0061;	
    // (🈕) SQUARED CJK UNIFIED IDEOGRAPH-591A	[FB40 D91A 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F215, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_241)
{
    // 1F215 0041;	
    // (🈕) SQUARED CJK UNIFIED IDEOGRAPH-591A	[FB40 D91A 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F215, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_242)
{
    // 2F85D 0062;	
    // (多) CJK COMPATIBILITY IDEOGRAPH-2F85D	[FB40 D91A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_243)
{
    // 1F215 0062;	
    // (🈕) SQUARED CJK UNIFIED IDEOGRAPH-591A	[FB40 D91A 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F215, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD91A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_244)
{
    // 32B0 0021;	
    // (㊰) CIRCLED IDEOGRAPH NIGHT	[FB40 D91C 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD91C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_245)
{
    // 32B0 003F;	
    // (㊰) CIRCLED IDEOGRAPH NIGHT	[FB40 D91C 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32B0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD91C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_246)
{
    // 32B0 0061;	
    // (㊰) CIRCLED IDEOGRAPH NIGHT	[FB40 D91C 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD91C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_247)
{
    // 32B0 0041;	
    // (㊰) CIRCLED IDEOGRAPH NIGHT	[FB40 D91C 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD91C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_248)
{
    // 32B0 0062;	
    // (㊰) CIRCLED IDEOGRAPH NIGHT	[FB40 D91C 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD91C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_249)
{
    // 2F85E 0021;	
    // (夢) CJK COMPATIBILITY IDEOGRAPH-2F85E	[FB40 D922 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD922, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_250)
{
    // 2F85E 003F;	
    // (夢) CJK COMPATIBILITY IDEOGRAPH-2F85E	[FB40 D922 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD922, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_251)
{
    // 2F85E 0061;	
    // (夢) CJK COMPATIBILITY IDEOGRAPH-2F85E	[FB40 D922 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_252)
{
    // 2F85E 0041;	
    // (夢) CJK COMPATIBILITY IDEOGRAPH-2F85E	[FB40 D922 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F85E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_253)
{
    // 2F85E 0062;	
    // (夢) CJK COMPATIBILITY IDEOGRAPH-2F85E	[FB40 D922 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD922, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_254)
{
    // 2F24 0021;	
    // (⼤) KANGXI RADICAL BIG	[FB40 D927 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F24, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD927, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_255)
{
    // 2F24 003F;	
    // (⼤) KANGXI RADICAL BIG	[FB40 D927 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F24, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD927, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_256)
{
    // 2F24 0061;	
    // (⼤) KANGXI RADICAL BIG	[FB40 D927 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F24, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_257)
{
    // 2F24 0041;	
    // (⼤) KANGXI RADICAL BIG	[FB40 D927 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F24, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_258)
{
    // 2F24 0062;	
    // (⼤) KANGXI RADICAL BIG	[FB40 D927 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F24, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD927, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_259)
{
    // 337D 0021;	
    // (㍽) SQUARE ERA NAME TAISYOU	[FB40 D927 FB40 EB63 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337D, 0x0021 };
    uint32_t const ces[14] = { 0xFB40, 0xD927, 0xFB40, 0xEB63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_260)
{
    // 337D 003F;	
    // (㍽) SQUARE ERA NAME TAISYOU	[FB40 D927 FB40 EB63 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337D, 0x003F };
    uint32_t const ces[14] = { 0xFB40, 0xD927, 0xFB40, 0xEB63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_261)
{
    // 337D 0061;	
    // (㍽) SQUARE ERA NAME TAISYOU	[FB40 D927 FB40 EB63 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337D, 0x0061 };
    uint32_t const ces[14] = { 0xFB40, 0xD927, 0xFB40, 0xEB63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_262)
{
    // 337D 0041;	
    // (㍽) SQUARE ERA NAME TAISYOU	[FB40 D927 FB40 EB63 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x337D, 0x0041 };
    uint32_t const ces[14] = { 0xFB40, 0xD927, 0xFB40, 0xEB63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_263)
{
    // 337D 0062;	
    // (㍽) SQUARE ERA NAME TAISYOU	[FB40 D927 FB40 EB63 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337D, 0x0062 };
    uint32_t const ces[14] = { 0xFB40, 0xD927, 0xFB40, 0xEB63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_264)
{
    // 319D 0021;	
    // (㆝) IDEOGRAPHIC ANNOTATION HEAVEN MARK	[FB40 D929 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_265)
{
    // 1F217 0021;	
    // (🈗) SQUARED CJK UNIFIED IDEOGRAPH-5929	[FB40 D929 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F217, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_266)
{
    // 319D 003F;	
    // (㆝) IDEOGRAPHIC ANNOTATION HEAVEN MARK	[FB40 D929 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_267)
{
    // 1F217 003F;	
    // (🈗) SQUARED CJK UNIFIED IDEOGRAPH-5929	[FB40 D929 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F217, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_268)
{
    // 319D 0061;	
    // (㆝) IDEOGRAPHIC ANNOTATION HEAVEN MARK	[FB40 D929 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_269)
{
    // 319D 0041;	
    // (㆝) IDEOGRAPHIC ANNOTATION HEAVEN MARK	[FB40 D929 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x319D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_270)
{
    // 1F217 0061;	
    // (🈗) SQUARED CJK UNIFIED IDEOGRAPH-5929	[FB40 D929 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F217, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_271)
{
    // 1F217 0041;	
    // (🈗) SQUARED CJK UNIFIED IDEOGRAPH-5929	[FB40 D929 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F217, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_272)
{
    // 319D 0062;	
    // (㆝) IDEOGRAPHIC ANNOTATION HEAVEN MARK	[FB40 D929 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_273)
{
    // 1F217 0062;	
    // (🈗) SQUARED CJK UNIFIED IDEOGRAPH-5929	[FB40 D929 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F217, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD929, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_274)
{
    // FA7E 0021;	
    // (奄) CJK COMPATIBILITY IDEOGRAPH-FA7E	[FB40 D944 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD944, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_275)
{
    // FA7E 003F;	
    // (奄) CJK COMPATIBILITY IDEOGRAPH-FA7E	[FB40 D944 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD944, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_276)
{
    // FA7E 0061;	
    // (奄) CJK COMPATIBILITY IDEOGRAPH-FA7E	[FB40 D944 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_277)
{
    // FA7E 0041;	
    // (奄) CJK COMPATIBILITY IDEOGRAPH-FA7E	[FB40 D944 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_278)
{
    // FA7E 0062;	
    // (奄) CJK COMPATIBILITY IDEOGRAPH-FA7E	[FB40 D944 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD944, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_279)
{
    // F90C 0021;	
    // (奈) CJK COMPATIBILITY IDEOGRAPH-F90C	[FB40 D948 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD948, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_280)
{
    // F90C 003F;	
    // (奈) CJK COMPATIBILITY IDEOGRAPH-F90C	[FB40 D948 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD948, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_281)
{
    // F90C 0061;	
    // (奈) CJK COMPATIBILITY IDEOGRAPH-F90C	[FB40 D948 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_282)
{
    // F90C 0041;	
    // (奈) CJK COMPATIBILITY IDEOGRAPH-F90C	[FB40 D948 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF90C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_283)
{
    // F90C 0062;	
    // (奈) CJK COMPATIBILITY IDEOGRAPH-F90C	[FB40 D948 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF90C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD948, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_284)
{
    // F909 0021;	
    // (契) CJK COMPATIBILITY IDEOGRAPH-F909	[FB40 D951 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF909, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD951, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_285)
{
    // F909 003F;	
    // (契) CJK COMPATIBILITY IDEOGRAPH-F909	[FB40 D951 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF909, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD951, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_286)
{
    // F909 0061;	
    // (契) CJK COMPATIBILITY IDEOGRAPH-F909	[FB40 D951 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF909, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_287)
{
    // F909 0041;	
    // (契) CJK COMPATIBILITY IDEOGRAPH-F909	[FB40 D951 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF909, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_288)
{
    // F909 0062;	
    // (契) CJK COMPATIBILITY IDEOGRAPH-F909	[FB40 D951 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF909, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD951, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_289)
{
    // FA7F 0021;	
    // (奔) CJK COMPATIBILITY IDEOGRAPH-FA7F	[FB40 D954 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD954, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_290)
{
    // FA7F 003F;	
    // (奔) CJK COMPATIBILITY IDEOGRAPH-FA7F	[FB40 D954 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD954, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_291)
{
    // FA7F 0061;	
    // (奔) CJK COMPATIBILITY IDEOGRAPH-FA7F	[FB40 D954 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_292)
{
    // FA7F 0041;	
    // (奔) CJK COMPATIBILITY IDEOGRAPH-FA7F	[FB40 D954 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_293)
{
    // FA7F 0062;	
    // (奔) CJK COMPATIBILITY IDEOGRAPH-FA7F	[FB40 D954 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD954, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_294)
{
    // 2F85F 0021;	
    // (奢) CJK COMPATIBILITY IDEOGRAPH-2F85F	[FB40 D962 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD962, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_295)
{
    // 2F85F 003F;	
    // (奢) CJK COMPATIBILITY IDEOGRAPH-2F85F	[FB40 D962 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD962, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_296)
{
    // 2F85F 0061;	
    // (奢) CJK COMPATIBILITY IDEOGRAPH-2F85F	[FB40 D962 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_297)
{
    // 2F85F 0041;	
    // (奢) CJK COMPATIBILITY IDEOGRAPH-2F85F	[FB40 D962 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F85F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_298)
{
    // 2F85F 0062;	
    // (奢) CJK COMPATIBILITY IDEOGRAPH-2F85F	[FB40 D962 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F85F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD962, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_299)
{
    // F981 0021;	
    // (女) CJK COMPATIBILITY IDEOGRAPH-F981	[FB40 D973 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF981, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_300)
{
    // 2F25 0021;	
    // (⼥) KANGXI RADICAL WOMAN	[FB40 D973 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F25, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_301)
{
    // 329B 0021;	
    // (㊛) CIRCLED IDEOGRAPH FEMALE	[FB40 D973 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_302)
{
    // F981 003F;	
    // (女) CJK COMPATIBILITY IDEOGRAPH-F981	[FB40 D973 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF981, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_303)
{
    // 2F25 003F;	
    // (⼥) KANGXI RADICAL WOMAN	[FB40 D973 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F25, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_304)
{
    // 329B 003F;	
    // (㊛) CIRCLED IDEOGRAPH FEMALE	[FB40 D973 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_305)
{
    // F981 0061;	
    // (女) CJK COMPATIBILITY IDEOGRAPH-F981	[FB40 D973 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF981, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_306)
{
    // F981 0041;	
    // (女) CJK COMPATIBILITY IDEOGRAPH-F981	[FB40 D973 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF981, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_307)
{
    // 2F25 0061;	
    // (⼥) KANGXI RADICAL WOMAN	[FB40 D973 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F25, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_308)
{
    // 2F25 0041;	
    // (⼥) KANGXI RADICAL WOMAN	[FB40 D973 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F25, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_309)
{
    // 329B 0061;	
    // (㊛) CIRCLED IDEOGRAPH FEMALE	[FB40 D973 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_310)
{
    // 329B 0041;	
    // (㊛) CIRCLED IDEOGRAPH FEMALE	[FB40 D973 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x329B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_311)
{
    // F981 0062;	
    // (女) CJK COMPATIBILITY IDEOGRAPH-F981	[FB40 D973 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF981, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_312)
{
    // 2F25 0062;	
    // (⼥) KANGXI RADICAL WOMAN	[FB40 D973 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F25, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_313)
{
    // 329B 0062;	
    // (㊛) CIRCLED IDEOGRAPH FEMALE	[FB40 D973 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD973, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_314)
{
    // 2F865 0021;	
    // (姘) CJK COMPATIBILITY IDEOGRAPH-2F865	[FB40 D9D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F865, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD9D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_315)
{
    // 2F865 003F;	
    // (姘) CJK COMPATIBILITY IDEOGRAPH-2F865	[FB40 D9D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F865, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD9D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_316)
{
    // 2F865 0061;	
    // (姘) CJK COMPATIBILITY IDEOGRAPH-2F865	[FB40 D9D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F865, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD9D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_317)
{
    // 2F865 0041;	
    // (姘) CJK COMPATIBILITY IDEOGRAPH-2F865	[FB40 D9D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F865, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD9D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_318)
{
    // 2F865 0062;	
    // (姘) CJK COMPATIBILITY IDEOGRAPH-2F865	[FB40 D9D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F865, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD9D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_319)
{
    // 2F862 0021;	
    // (姬) CJK COMPATIBILITY IDEOGRAPH-2F862	[FB40 D9EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F862, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD9EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_320)
{
    // 2F862 003F;	
    // (姬) CJK COMPATIBILITY IDEOGRAPH-2F862	[FB40 D9EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F862, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD9EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_321)
{
    // 2F862 0061;	
    // (姬) CJK COMPATIBILITY IDEOGRAPH-2F862	[FB40 D9EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F862, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD9EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_322)
{
    // 2F862 0041;	
    // (姬) CJK COMPATIBILITY IDEOGRAPH-2F862	[FB40 D9EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F862, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD9EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_323)
{
    // 2F862 0062;	
    // (姬) CJK COMPATIBILITY IDEOGRAPH-2F862	[FB40 D9EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F862, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD9EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_324)
{
    // 2F863 0021;	
    // (娛) CJK COMPATIBILITY IDEOGRAPH-2F863	[FB40 DA1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F863, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDA1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_325)
{
    // 2F863 003F;	
    // (娛) CJK COMPATIBILITY IDEOGRAPH-2F863	[FB40 DA1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F863, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDA1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_326)
{
    // 2F863 0061;	
    // (娛) CJK COMPATIBILITY IDEOGRAPH-2F863	[FB40 DA1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F863, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDA1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_327)
{
    // 2F863 0041;	
    // (娛) CJK COMPATIBILITY IDEOGRAPH-2F863	[FB40 DA1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F863, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDA1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_328)
{
    // 2F863 0062;	
    // (娛) CJK COMPATIBILITY IDEOGRAPH-2F863	[FB40 DA1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F863, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDA1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_329)
{
    // 2F864 0021;	
    // (娧) CJK COMPATIBILITY IDEOGRAPH-2F864	[FB40 DA27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F864, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDA27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_330)
{
    // 2F864 003F;	
    // (娧) CJK COMPATIBILITY IDEOGRAPH-2F864	[FB40 DA27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F864, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDA27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_331)
{
    // 2F864 0061;	
    // (娧) CJK COMPATIBILITY IDEOGRAPH-2F864	[FB40 DA27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F864, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDA27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_332)
{
    // 2F864 0041;	
    // (娧) CJK COMPATIBILITY IDEOGRAPH-2F864	[FB40 DA27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F864, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDA27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_333)
{
    // 2F864 0062;	
    // (娧) CJK COMPATIBILITY IDEOGRAPH-2F864	[FB40 DA27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F864, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDA27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_334)
{
    // FA80 0021;	
    // (婢) CJK COMPATIBILITY IDEOGRAPH-FA80	[FB40 DA62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA80, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDA62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_335)
{
    // FA80 003F;	
    // (婢) CJK COMPATIBILITY IDEOGRAPH-FA80	[FB40 DA62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA80, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDA62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_336)
{
    // FA80 0061;	
    // (婢) CJK COMPATIBILITY IDEOGRAPH-FA80	[FB40 DA62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA80, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDA62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_337)
{
    // FA80 0041;	
    // (婢) CJK COMPATIBILITY IDEOGRAPH-FA80	[FB40 DA62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA80, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDA62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_338)
{
    // FA80 0062;	
    // (婢) CJK COMPATIBILITY IDEOGRAPH-FA80	[FB40 DA62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA80, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDA62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_339)
{
    // 2F866 0021;	
    // (婦) CJK COMPATIBILITY IDEOGRAPH-2F866	[FB40 DA66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F866, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDA66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_340)
{
    // 2F866 003F;	
    // (婦) CJK COMPATIBILITY IDEOGRAPH-2F866	[FB40 DA66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F866, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDA66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_341)
{
    // 2F866 0061;	
    // (婦) CJK COMPATIBILITY IDEOGRAPH-2F866	[FB40 DA66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F866, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDA66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_342)
{
    // 2F866 0041;	
    // (婦) CJK COMPATIBILITY IDEOGRAPH-2F866	[FB40 DA66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F866, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDA66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_343)
{
    // 2F866 0062;	
    // (婦) CJK COMPATIBILITY IDEOGRAPH-2F866	[FB40 DA66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F866, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDA66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_344)
{
    // 2F986 0021;	
    // (媵) CJK COMPATIBILITY IDEOGRAPH-2F986	[FB40 DAB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F986, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDAB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_345)
{
    // 2F986 003F;	
    // (媵) CJK COMPATIBILITY IDEOGRAPH-2F986	[FB40 DAB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F986, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDAB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_346)
{
    // 2F986 0061;	
    // (媵) CJK COMPATIBILITY IDEOGRAPH-2F986	[FB40 DAB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F986, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDAB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_347)
{
    // 2F986 0041;	
    // (媵) CJK COMPATIBILITY IDEOGRAPH-2F986	[FB40 DAB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F986, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDAB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_348)
{
    // 2F986 0062;	
    // (媵) CJK COMPATIBILITY IDEOGRAPH-2F986	[FB40 DAB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F986, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDAB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_349)
{
    // 2F869 0021;	
    // (嬈) CJK COMPATIBILITY IDEOGRAPH-2F869	[FB40 DB08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F869, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_350)
{
    // 2F869 003F;	
    // (嬈) CJK COMPATIBILITY IDEOGRAPH-2F869	[FB40 DB08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F869, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_351)
{
    // 2F869 0061;	
    // (嬈) CJK COMPATIBILITY IDEOGRAPH-2F869	[FB40 DB08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F869, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_352)
{
    // 2F869 0041;	
    // (嬈) CJK COMPATIBILITY IDEOGRAPH-2F869	[FB40 DB08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F869, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_353)
{
    // 2F869 0062;	
    // (嬈) CJK COMPATIBILITY IDEOGRAPH-2F869	[FB40 DB08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F869, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_354)
{
    // FA81 0021;	
    // (嬨) CJK COMPATIBILITY IDEOGRAPH-FA81	[FB40 DB28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA81, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_355)
{
    // FA81 003F;	
    // (嬨) CJK COMPATIBILITY IDEOGRAPH-FA81	[FB40 DB28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA81, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_356)
{
    // FA81 0061;	
    // (嬨) CJK COMPATIBILITY IDEOGRAPH-FA81	[FB40 DB28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA81, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_357)
{
    // FA81 0041;	
    // (嬨) CJK COMPATIBILITY IDEOGRAPH-FA81	[FB40 DB28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA81, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_358)
{
    // FA81 0062;	
    // (嬨) CJK COMPATIBILITY IDEOGRAPH-FA81	[FB40 DB28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA81, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_359)
{
    // 2F86A 0021;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86A	[FB40 DB3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_360)
{
    // 2F86B 0021;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86B	[FB40 DB3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_361)
{
    // 2F86A 003F;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86A	[FB40 DB3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_362)
{
    // 2F86B 003F;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86B	[FB40 DB3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_363)
{
    // 2F86A 0061;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86A	[FB40 DB3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_364)
{
    // 2F86B 0061;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86B	[FB40 DB3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_365)
{
    // 2F86A 0041;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86A	[FB40 DB3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F86A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_366)
{
    // 2F86B 0041;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86B	[FB40 DB3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F86B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_367)
{
    // 2F86A 0062;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86A	[FB40 DB3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_368)
{
    // 2F86B 0062;	
    // (嬾) CJK COMPATIBILITY IDEOGRAPH-2F86B	[FB40 DB3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_369)
{
    // 2F26 0021;	
    // (⼦) KANGXI RADICAL CHILD	[FB40 DB50 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F26, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_370)
{
    // 2F26 003F;	
    // (⼦) KANGXI RADICAL CHILD	[FB40 DB50 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F26, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_371)
{
    // 2F26 0061;	
    // (⼦) KANGXI RADICAL CHILD	[FB40 DB50 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F26, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_372)
{
    // 2F26 0041;	
    // (⼦) KANGXI RADICAL CHILD	[FB40 DB50 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F26, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_373)
{
    // 2F26 0062;	
    // (⼦) KANGXI RADICAL CHILD	[FB40 DB50 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F26, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_374)
{
    // 1F211 0021;	
    // (🈑) SQUARED CJK UNIFIED IDEOGRAPH-5B57	[FB40 DB57 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F211, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_375)
{
    // 1F211 003F;	
    // (🈑) SQUARED CJK UNIFIED IDEOGRAPH-5B57	[FB40 DB57 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F211, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_376)
{
    // 1F211 0061;	
    // (🈑) SQUARED CJK UNIFIED IDEOGRAPH-5B57	[FB40 DB57 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F211, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_377)
{
    // 1F211 0041;	
    // (🈑) SQUARED CJK UNIFIED IDEOGRAPH-5B57	[FB40 DB57 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F211, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_378)
{
    // 1F211 0062;	
    // (🈑) SQUARED CJK UNIFIED IDEOGRAPH-5B57	[FB40 DB57 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F211, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_379)
{
    // 32AB 0021;	
    // (㊫) CIRCLED IDEOGRAPH STUDY	[FB40 DB66 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_380)
{
    // 32AB 003F;	
    // (㊫) CIRCLED IDEOGRAPH STUDY	[FB40 DB66 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_381)
{
    // 32AB 0061;	
    // (㊫) CIRCLED IDEOGRAPH STUDY	[FB40 DB66 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_382)
{
    // 32AB 0041;	
    // (㊫) CIRCLED IDEOGRAPH STUDY	[FB40 DB66 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_383)
{
    // 32AB 0062;	
    // (㊫) CIRCLED IDEOGRAPH STUDY	[FB40 DB66 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_384)
{
    // 2F27 0021;	
    // (⼧) KANGXI RADICAL ROOF	[FB40 DB80 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F27, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_385)
{
    // 2F27 003F;	
    // (⼧) KANGXI RADICAL ROOF	[FB40 DB80 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F27, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_386)
{
    // 2F27 0061;	
    // (⼧) KANGXI RADICAL ROOF	[FB40 DB80 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F27, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_387)
{
    // 2F27 0041;	
    // (⼧) KANGXI RADICAL ROOF	[FB40 DB80 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F27, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_388)
{
    // 2F27 0062;	
    // (⼧) KANGXI RADICAL ROOF	[FB40 DB80 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F27, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_389)
{
    // FA04 0021;	
    // (宅) CJK COMPATIBILITY IDEOGRAPH-FA04	[FB40 DB85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA04, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_390)
{
    // FA04 003F;	
    // (宅) CJK COMPATIBILITY IDEOGRAPH-FA04	[FB40 DB85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA04, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_391)
{
    // FA04 0061;	
    // (宅) CJK COMPATIBILITY IDEOGRAPH-FA04	[FB40 DB85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA04, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_392)
{
    // FA04 0041;	
    // (宅) CJK COMPATIBILITY IDEOGRAPH-FA04	[FB40 DB85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA04, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_393)
{
    // FA04 0062;	
    // (宅) CJK COMPATIBILITY IDEOGRAPH-FA04	[FB40 DB85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA04, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_394)
{
    // 32AA 0021;	
    // (㊪) CIRCLED IDEOGRAPH RELIGION	[FB40 DB97 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDB97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_395)
{
    // 32AA 003F;	
    // (㊪) CIRCLED IDEOGRAPH RELIGION	[FB40 DB97 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDB97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_396)
{
    // 32AA 0061;	
    // (㊪) CIRCLED IDEOGRAPH RELIGION	[FB40 DB97 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDB97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_397)
{
    // 32AA 0041;	
    // (㊪) CIRCLED IDEOGRAPH RELIGION	[FB40 DB97 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDB97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_398)
{
    // 32AA 0062;	
    // (㊪) CIRCLED IDEOGRAPH RELIGION	[FB40 DB97 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDB97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_399)
{
    // 2F86D 0021;	
    // (寃) CJK COMPATIBILITY IDEOGRAPH-2F86D	[FB40 DBC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDBC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_400)
{
    // 2F86D 003F;	
    // (寃) CJK COMPATIBILITY IDEOGRAPH-2F86D	[FB40 DBC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDBC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_401)
{
    // 2F86D 0061;	
    // (寃) CJK COMPATIBILITY IDEOGRAPH-2F86D	[FB40 DBC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDBC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_402)
{
    // 2F86D 0041;	
    // (寃) CJK COMPATIBILITY IDEOGRAPH-2F86D	[FB40 DBC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F86D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDBC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_403)
{
    // 2F86D 0062;	
    // (寃) CJK COMPATIBILITY IDEOGRAPH-2F86D	[FB40 DBC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDBC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_404)
{
    // 2F86E 0021;	
    // (寘) CJK COMPATIBILITY IDEOGRAPH-2F86E	[FB40 DBD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDBD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_405)
{
    // 2F86E 003F;	
    // (寘) CJK COMPATIBILITY IDEOGRAPH-2F86E	[FB40 DBD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDBD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_406)
{
    // 2F86E 0061;	
    // (寘) CJK COMPATIBILITY IDEOGRAPH-2F86E	[FB40 DBD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDBD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_407)
{
    // 2F86E 0041;	
    // (寘) CJK COMPATIBILITY IDEOGRAPH-2F86E	[FB40 DBD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F86E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDBD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_408)
{
    // 2F86E 0062;	
    // (寘) CJK COMPATIBILITY IDEOGRAPH-2F86E	[FB40 DBD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDBD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_409)
{
    // F95F 0021;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F95F	[FB40 DBE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_410)
{
    // F9AA 0021;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F9AA	[FB40 DBE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_411)
{
    // 2F86F 0021;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-2F86F	[FB40 DBE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_412)
{
    // F95F 003F;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F95F	[FB40 DBE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_413)
{
    // F9AA 003F;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F9AA	[FB40 DBE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_414)
{
    // 2F86F 003F;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-2F86F	[FB40 DBE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_415)
{
    // F95F 0061;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F95F	[FB40 DBE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_416)
{
    // F9AA 0061;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F9AA	[FB40 DBE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_417)
{
    // 2F86F 0061;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-2F86F	[FB40 DBE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_418)
{
    // F95F 0041;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F95F	[FB40 DBE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF95F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_419)
{
    // F9AA 0041;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F9AA	[FB40 DBE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_420)
{
    // 2F86F 0041;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-2F86F	[FB40 DBE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F86F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_421)
{
    // F95F 0062;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F95F	[FB40 DBE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_422)
{
    // F9AA 0062;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-F9AA	[FB40 DBE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_423)
{
    // 2F86F 0062;	
    // (寧) CJK COMPATIBILITY IDEOGRAPH-2F86F	[FB40 DBE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDBE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_424)
{
    // F9BC 0021;	
    // (寮) CJK COMPATIBILITY IDEOGRAPH-F9BC	[FB40 DBEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDBEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_425)
{
    // F9BC 003F;	
    // (寮) CJK COMPATIBILITY IDEOGRAPH-F9BC	[FB40 DBEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BC, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDBEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_426)
{
    // F9BC 0061;	
    // (寮) CJK COMPATIBILITY IDEOGRAPH-F9BC	[FB40 DBEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDBEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_427)
{
    // F9BC 0041;	
    // (寮) CJK COMPATIBILITY IDEOGRAPH-F9BC	[FB40 DBEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDBEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_428)
{
    // F9BC 0062;	
    // (寮) CJK COMPATIBILITY IDEOGRAPH-F9BC	[FB40 DBEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDBEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_429)
{
    // 2F870 0021;	
    // (寳) CJK COMPATIBILITY IDEOGRAPH-2F870	[FB40 DBF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F870, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDBF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_430)
{
    // 2F870 003F;	
    // (寳) CJK COMPATIBILITY IDEOGRAPH-2F870	[FB40 DBF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F870, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDBF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_431)
{
    // 2F870 0061;	
    // (寳) CJK COMPATIBILITY IDEOGRAPH-2F870	[FB40 DBF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F870, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDBF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_432)
{
    // 2F870 0041;	
    // (寳) CJK COMPATIBILITY IDEOGRAPH-2F870	[FB40 DBF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F870, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDBF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_433)
{
    // 2F870 0062;	
    // (寳) CJK COMPATIBILITY IDEOGRAPH-2F870	[FB40 DBF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F870, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDBF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_434)
{
    // 2F28 0021;	
    // (⼨) KANGXI RADICAL INCH	[FB40 DBF8 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F28, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDBF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_435)
{
    // 2F28 003F;	
    // (⼨) KANGXI RADICAL INCH	[FB40 DBF8 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F28, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDBF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_436)
{
    // 2F28 0061;	
    // (⼨) KANGXI RADICAL INCH	[FB40 DBF8 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F28, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDBF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_437)
{
    // 2F28 0041;	
    // (⼨) KANGXI RADICAL INCH	[FB40 DBF8 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F28, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDBF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_438)
{
    // 2F28 0062;	
    // (⼨) KANGXI RADICAL INCH	[FB40 DBF8 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F28, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDBF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_439)
{
    // 2F872 0021;	
    // (寿) CJK COMPATIBILITY IDEOGRAPH-2F872	[FB40 DBFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F872, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDBFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_440)
{
    // 2F872 003F;	
    // (寿) CJK COMPATIBILITY IDEOGRAPH-2F872	[FB40 DBFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F872, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDBFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_441)
{
    // 2F872 0061;	
    // (寿) CJK COMPATIBILITY IDEOGRAPH-2F872	[FB40 DBFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F872, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDBFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_442)
{
    // 2F872 0041;	
    // (寿) CJK COMPATIBILITY IDEOGRAPH-2F872	[FB40 DBFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F872, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDBFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_443)
{
    // 2F872 0062;	
    // (寿) CJK COMPATIBILITY IDEOGRAPH-2F872	[FB40 DBFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F872, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDBFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_444)
{
    // 2F873 0021;	
    // (将) CJK COMPATIBILITY IDEOGRAPH-2F873	[FB40 DC06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F873, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_445)
{
    // 2F873 003F;	
    // (将) CJK COMPATIBILITY IDEOGRAPH-2F873	[FB40 DC06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F873, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_446)
{
    // 2F873 0061;	
    // (将) CJK COMPATIBILITY IDEOGRAPH-2F873	[FB40 DC06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F873, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_447)
{
    // 2F873 0041;	
    // (将) CJK COMPATIBILITY IDEOGRAPH-2F873	[FB40 DC06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F873, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_448)
{
    // 2F873 0062;	
    // (将) CJK COMPATIBILITY IDEOGRAPH-2F873	[FB40 DC06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F873, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_449)
{
    // 2F29 0021;	
    // (⼩) KANGXI RADICAL SMALL	[FB40 DC0F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F29, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_450)
{
    // 2E8C 0021;	
    // (⺌) CJK RADICAL SMALL ONE	[FB40 DC0F 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8C, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_451)
{
    // 2E8D 0021;	
    // (⺍) CJK RADICAL SMALL TWO	[FB40 DC0F 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8D, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_452)
{
    // 2F29 003F;	
    // (⼩) KANGXI RADICAL SMALL	[FB40 DC0F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F29, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_453)
{
    // 2E8C 003F;	
    // (⺌) CJK RADICAL SMALL ONE	[FB40 DC0F 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8C, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_454)
{
    // 2E8D 003F;	
    // (⺍) CJK RADICAL SMALL TWO	[FB40 DC0F 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8D, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_455)
{
    // 2F29 0061;	
    // (⼩) KANGXI RADICAL SMALL	[FB40 DC0F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F29, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_456)
{
    // 2F29 0041;	
    // (⼩) KANGXI RADICAL SMALL	[FB40 DC0F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F29, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_457)
{
    // 2E8C 0061;	
    // (⺌) CJK RADICAL SMALL ONE	[FB40 DC0F 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8C, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_458)
{
    // 2E8C 0041;	
    // (⺌) CJK RADICAL SMALL ONE	[FB40 DC0F 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E8C, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_459)
{
    // 2E8D 0061;	
    // (⺍) CJK RADICAL SMALL TWO	[FB40 DC0F 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8D, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_460)
{
    // 2E8D 0041;	
    // (⺍) CJK RADICAL SMALL TWO	[FB40 DC0F 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E8D, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_461)
{
    // 2F29 0062;	
    // (⼩) KANGXI RADICAL SMALL	[FB40 DC0F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F29, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_462)
{
    // 2E8C 0062;	
    // (⺌) CJK RADICAL SMALL ONE	[FB40 DC0F 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8C, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_463)
{
    // 2E8D 0062;	
    // (⺍) CJK RADICAL SMALL TWO	[FB40 DC0F 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8D, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xDC0F, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_464)
{
    // 2F875 0021;	
    // (尢) CJK COMPATIBILITY IDEOGRAPH-2F875	[FB40 DC22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F875, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_465)
{
    // 2E90 0021;	
    // (⺐) CJK RADICAL LAME THREE	[FB40 DC22 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E90, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_466)
{
    // 2F2A 0021;	
    // (⼪) KANGXI RADICAL LAME	[FB40 DC22 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_467)
{
    // 2E8E 0021;	
    // (⺎) CJK RADICAL LAME ONE	[FB40 DC22 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8E, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xDC22, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_468)
{
    // 2F875 003F;	
    // (尢) CJK COMPATIBILITY IDEOGRAPH-2F875	[FB40 DC22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F875, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_469)
{
    // 2E90 003F;	
    // (⺐) CJK RADICAL LAME THREE	[FB40 DC22 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E90, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_470)
{
    // 2F2A 003F;	
    // (⼪) KANGXI RADICAL LAME	[FB40 DC22 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_471)
{
    // 2E8E 003F;	
    // (⺎) CJK RADICAL LAME ONE	[FB40 DC22 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8E, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xDC22, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_472)
{
    // 2F875 0061;	
    // (尢) CJK COMPATIBILITY IDEOGRAPH-2F875	[FB40 DC22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F875, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_473)
{
    // 2F875 0041;	
    // (尢) CJK COMPATIBILITY IDEOGRAPH-2F875	[FB40 DC22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F875, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_474)
{
    // 2E90 0061;	
    // (⺐) CJK RADICAL LAME THREE	[FB40 DC22 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E90, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_475)
{
    // 2F2A 0061;	
    // (⼪) KANGXI RADICAL LAME	[FB40 DC22 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_476)
{
    // 2E90 0041;	
    // (⺐) CJK RADICAL LAME THREE	[FB40 DC22 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E90, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_477)
{
    // 2F2A 0041;	
    // (⼪) KANGXI RADICAL LAME	[FB40 DC22 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F2A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_478)
{
    // 2E8E 0061;	
    // (⺎) CJK RADICAL LAME ONE	[FB40 DC22 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8E, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xDC22, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_479)
{
    // 2E8E 0041;	
    // (⺎) CJK RADICAL LAME ONE	[FB40 DC22 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E8E, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xDC22, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_480)
{
    // 2F875 0062;	
    // (尢) CJK COMPATIBILITY IDEOGRAPH-2F875	[FB40 DC22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F875, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_481)
{
    // 2E90 0062;	
    // (⺐) CJK RADICAL LAME THREE	[FB40 DC22 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E90, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_482)
{
    // 2F2A 0062;	
    // (⼪) KANGXI RADICAL LAME	[FB40 DC22 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_483)
{
    // 2E8E 0062;	
    // (⺎) CJK RADICAL LAME ONE	[FB40 DC22 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E8E, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xDC22, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_484)
{
    // 2E8F 0021;	
    // (⺏) CJK RADICAL LAME TWO	[FB40 DC23 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_485)
{
    // 2E91 0021;	
    // (⺑) CJK RADICAL LAME FOUR	[FB40 DC23 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E91, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xDC23, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_486)
{
    // 2E8F 003F;	
    // (⺏) CJK RADICAL LAME TWO	[FB40 DC23 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E8F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_487)
{
    // 2E91 003F;	
    // (⺑) CJK RADICAL LAME FOUR	[FB40 DC23 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E91, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xDC23, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_488)
{
    // 2E8F 0061;	
    // (⺏) CJK RADICAL LAME TWO	[FB40 DC23 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_489)
{
    // 2E8F 0041;	
    // (⺏) CJK RADICAL LAME TWO	[FB40 DC23 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_490)
{
    // 2E91 0061;	
    // (⺑) CJK RADICAL LAME FOUR	[FB40 DC23 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E91, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xDC23, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_491)
{
    // 2E91 0041;	
    // (⺑) CJK RADICAL LAME FOUR	[FB40 DC23 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E91, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xDC23, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_492)
{
    // 2E8F 0062;	
    // (⺏) CJK RADICAL LAME TWO	[FB40 DC23 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_493)
{
    // 2E91 0062;	
    // (⺑) CJK RADICAL LAME FOUR	[FB40 DC23 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E91, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xDC23, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_494)
{
    // 2F2B 0021;	
    // (⼫) KANGXI RADICAL CORPSE	[FB40 DC38 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_495)
{
    // 2F2B 003F;	
    // (⼫) KANGXI RADICAL CORPSE	[FB40 DC38 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xDC38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_496)
{
    // 2F2B 0061;	
    // (⼫) KANGXI RADICAL CORPSE	[FB40 DC38 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xDC38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_497)
{
    // 2F2B 0041;	
    // (⼫) KANGXI RADICAL CORPSE	[FB40 DC38 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F2B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xDC38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_498)
{
    // 2F2B 0062;	
    // (⼫) KANGXI RADICAL CORPSE	[FB40 DC38 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F2B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xDC38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_316_499)
{
    // F9BD 0021;	
    // (尿) CJK COMPATIBILITY IDEOGRAPH-F9BD	[FB40 DC3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xDC3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

