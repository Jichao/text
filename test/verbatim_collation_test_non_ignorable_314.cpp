// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_314_000)
{
    // F967 003F;	
    // (不) CJK COMPATIBILITY IDEOGRAPH-F967	[FB40 CE0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF967, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_001)
{
    // F967 0061;	
    // (不) CJK COMPATIBILITY IDEOGRAPH-F967	[FB40 CE0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF967, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_002)
{
    // F967 0041;	
    // (不) CJK COMPATIBILITY IDEOGRAPH-F967	[FB40 CE0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF967, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_003)
{
    // F967 0062;	
    // (不) CJK COMPATIBILITY IDEOGRAPH-F967	[FB40 CE0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF967, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_004)
{
    // 319B 0021;	
    // (㆛) IDEOGRAPHIC ANNOTATION THIRD MARK	[FB40 CE19 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_005)
{
    // 319B 003F;	
    // (㆛) IDEOGRAPHIC ANNOTATION THIRD MARK	[FB40 CE19 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_006)
{
    // 319B 0061;	
    // (㆛) IDEOGRAPHIC ANNOTATION THIRD MARK	[FB40 CE19 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_007)
{
    // 319B 0041;	
    // (㆛) IDEOGRAPHIC ANNOTATION THIRD MARK	[FB40 CE19 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x319B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_008)
{
    // 319B 0062;	
    // (㆛) IDEOGRAPHIC ANNOTATION THIRD MARK	[FB40 CE19 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_009)
{
    // FA70 0021;	
    // (並) CJK COMPATIBILITY IDEOGRAPH-FA70	[FB40 CE26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA70, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_010)
{
    // FA70 003F;	
    // (並) CJK COMPATIBILITY IDEOGRAPH-FA70	[FB40 CE26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA70, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_011)
{
    // FA70 0061;	
    // (並) CJK COMPATIBILITY IDEOGRAPH-FA70	[FB40 CE26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA70, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_012)
{
    // FA70 0041;	
    // (並) CJK COMPATIBILITY IDEOGRAPH-FA70	[FB40 CE26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA70, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_013)
{
    // FA70 0062;	
    // (並) CJK COMPATIBILITY IDEOGRAPH-FA70	[FB40 CE26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA70, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_014)
{
    // 2F01 0021;	
    // (⼁) KANGXI RADICAL LINE	[FB40 CE28 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F01, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_015)
{
    // 2F01 003F;	
    // (⼁) KANGXI RADICAL LINE	[FB40 CE28 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F01, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_016)
{
    // 2F01 0061;	
    // (⼁) KANGXI RADICAL LINE	[FB40 CE28 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F01, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_017)
{
    // 2F01 0041;	
    // (⼁) KANGXI RADICAL LINE	[FB40 CE28 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F01, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_018)
{
    // 2F01 0062;	
    // (⼁) KANGXI RADICAL LINE	[FB40 CE28 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F01, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_019)
{
    // 2EA6 0021;	
    // (⺦) CJK RADICAL SIMPLIFIED HALF TREE TRUNK	[FB40 CE2C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_020)
{
    // 2EA6 003F;	
    // (⺦) CJK RADICAL SIMPLIFIED HALF TREE TRUNK	[FB40 CE2C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA6, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_021)
{
    // 2EA6 0061;	
    // (⺦) CJK RADICAL SIMPLIFIED HALF TREE TRUNK	[FB40 CE2C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_022)
{
    // 2EA6 0041;	
    // (⺦) CJK RADICAL SIMPLIFIED HALF TREE TRUNK	[FB40 CE2C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_023)
{
    // 2EA6 0062;	
    // (⺦) CJK RADICAL SIMPLIFIED HALF TREE TRUNK	[FB40 CE2C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_024)
{
    // 32A5 0021;	
    // (㊥) CIRCLED IDEOGRAPH CENTRE	[FB40 CE2D 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_025)
{
    // 3197 0021;	
    // (㆗) IDEOGRAPHIC ANNOTATION MIDDLE MARK	[FB40 CE2D 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3197, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_026)
{
    // 1F22D 0021;	
    // (🈭) SQUARED CJK UNIFIED IDEOGRAPH-4E2D	[FB40 CE2D 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_027)
{
    // 32A5 003F;	
    // (㊥) CIRCLED IDEOGRAPH CENTRE	[FB40 CE2D 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_028)
{
    // 3197 003F;	
    // (㆗) IDEOGRAPHIC ANNOTATION MIDDLE MARK	[FB40 CE2D 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3197, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_029)
{
    // 1F22D 003F;	
    // (🈭) SQUARED CJK UNIFIED IDEOGRAPH-4E2D	[FB40 CE2D 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_030)
{
    // 32A5 0061;	
    // (㊥) CIRCLED IDEOGRAPH CENTRE	[FB40 CE2D 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_031)
{
    // 32A5 0041;	
    // (㊥) CIRCLED IDEOGRAPH CENTRE	[FB40 CE2D 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_032)
{
    // 3197 0061;	
    // (㆗) IDEOGRAPHIC ANNOTATION MIDDLE MARK	[FB40 CE2D 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3197, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_033)
{
    // 3197 0041;	
    // (㆗) IDEOGRAPHIC ANNOTATION MIDDLE MARK	[FB40 CE2D 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x3197, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_034)
{
    // 1F22D 0061;	
    // (🈭) SQUARED CJK UNIFIED IDEOGRAPH-4E2D	[FB40 CE2D 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_035)
{
    // 1F22D 0041;	
    // (🈭) SQUARED CJK UNIFIED IDEOGRAPH-4E2D	[FB40 CE2D 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F22D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_036)
{
    // 32A5 0062;	
    // (㊥) CIRCLED IDEOGRAPH CENTRE	[FB40 CE2D 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_037)
{
    // 3197 0062;	
    // (㆗) IDEOGRAPHIC ANNOTATION MIDDLE MARK	[FB40 CE2D 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3197, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_038)
{
    // 1F22D 0062;	
    // (🈭) SQUARED CJK UNIFIED IDEOGRAPH-4E2D	[FB40 CE2D 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F22D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_039)
{
    // F905 0021;	
    // (串) CJK COMPATIBILITY IDEOGRAPH-F905	[FB40 CE32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF905, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_040)
{
    // F905 003F;	
    // (串) CJK COMPATIBILITY IDEOGRAPH-F905	[FB40 CE32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF905, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_041)
{
    // F905 0061;	
    // (串) CJK COMPATIBILITY IDEOGRAPH-F905	[FB40 CE32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF905, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_042)
{
    // F905 0041;	
    // (串) CJK COMPATIBILITY IDEOGRAPH-F905	[FB40 CE32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF905, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_043)
{
    // F905 0062;	
    // (串) CJK COMPATIBILITY IDEOGRAPH-F905	[FB40 CE32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF905, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_044)
{
    // 2F02 0021;	
    // (⼂) KANGXI RADICAL DOT	[FB40 CE36 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F02, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_045)
{
    // 2E80 0021;	
    // (⺀) CJK RADICAL REPEAT	[FB40 CE36 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E80, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xCE36, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_046)
{
    // 2F02 003F;	
    // (⼂) KANGXI RADICAL DOT	[FB40 CE36 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F02, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_047)
{
    // 2E80 003F;	
    // (⺀) CJK RADICAL REPEAT	[FB40 CE36 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E80, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xCE36, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_048)
{
    // 2F02 0061;	
    // (⼂) KANGXI RADICAL DOT	[FB40 CE36 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F02, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_049)
{
    // 2F02 0041;	
    // (⼂) KANGXI RADICAL DOT	[FB40 CE36 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F02, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_050)
{
    // 2E80 0061;	
    // (⺀) CJK RADICAL REPEAT	[FB40 CE36 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E80, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xCE36, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_051)
{
    // 2E80 0041;	
    // (⺀) CJK RADICAL REPEAT	[FB40 CE36 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E80, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xCE36, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_052)
{
    // 2F02 0062;	
    // (⼂) KANGXI RADICAL DOT	[FB40 CE36 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F02, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_053)
{
    // 2E80 0062;	
    // (⺀) CJK RADICAL REPEAT	[FB40 CE36 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E80, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xCE36, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_054)
{
    // 2F801 0021;	
    // (丸) CJK COMPATIBILITY IDEOGRAPH-2F801	[FB40 CE38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F801, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_055)
{
    // 2F801 003F;	
    // (丸) CJK COMPATIBILITY IDEOGRAPH-2F801	[FB40 CE38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F801, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_056)
{
    // 2F801 0061;	
    // (丸) CJK COMPATIBILITY IDEOGRAPH-2F801	[FB40 CE38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F801, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_057)
{
    // 2F801 0041;	
    // (丸) CJK COMPATIBILITY IDEOGRAPH-2F801	[FB40 CE38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F801, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_058)
{
    // 2F801 0062;	
    // (丸) CJK COMPATIBILITY IDEOGRAPH-2F801	[FB40 CE38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F801, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_059)
{
    // F95E 0021;	
    // (丹) CJK COMPATIBILITY IDEOGRAPH-F95E	[FB40 CE39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_060)
{
    // F95E 003F;	
    // (丹) CJK COMPATIBILITY IDEOGRAPH-F95E	[FB40 CE39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_061)
{
    // F95E 0061;	
    // (丹) CJK COMPATIBILITY IDEOGRAPH-F95E	[FB40 CE39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_062)
{
    // F95E 0041;	
    // (丹) CJK COMPATIBILITY IDEOGRAPH-F95E	[FB40 CE39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF95E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_063)
{
    // F95E 0062;	
    // (丹) CJK COMPATIBILITY IDEOGRAPH-F95E	[FB40 CE39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_064)
{
    // 2F800 0021;	
    // (丽) CJK COMPATIBILITY IDEOGRAPH-2F800	[FB40 CE3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F800, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_065)
{
    // 2F800 003F;	
    // (丽) CJK COMPATIBILITY IDEOGRAPH-2F800	[FB40 CE3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F800, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_066)
{
    // 2F800 0061;	
    // (丽) CJK COMPATIBILITY IDEOGRAPH-2F800	[FB40 CE3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F800, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_067)
{
    // 2F800 0041;	
    // (丽) CJK COMPATIBILITY IDEOGRAPH-2F800	[FB40 CE3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F800, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_068)
{
    // 2F800 0062;	
    // (丽) CJK COMPATIBILITY IDEOGRAPH-2F800	[FB40 CE3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F800, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_069)
{
    // 2F03 0021;	
    // (⼃) KANGXI RADICAL SLASH	[FB40 CE3F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F03, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_070)
{
    // 2F03 003F;	
    // (⼃) KANGXI RADICAL SLASH	[FB40 CE3F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F03, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_071)
{
    // 2F03 0061;	
    // (⼃) KANGXI RADICAL SLASH	[FB40 CE3F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F03, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_072)
{
    // 2F03 0041;	
    // (⼃) KANGXI RADICAL SLASH	[FB40 CE3F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F03, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_073)
{
    // 2F03 0062;	
    // (⼃) KANGXI RADICAL SLASH	[FB40 CE3F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F03, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_074)
{
    // 2F802 0021;	
    // (乁) CJK COMPATIBILITY IDEOGRAPH-2F802	[FB40 CE41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F802, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_075)
{
    // 2F802 003F;	
    // (乁) CJK COMPATIBILITY IDEOGRAPH-2F802	[FB40 CE41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F802, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_076)
{
    // 2F802 0061;	
    // (乁) CJK COMPATIBILITY IDEOGRAPH-2F802	[FB40 CE41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F802, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_077)
{
    // 2F802 0041;	
    // (乁) CJK COMPATIBILITY IDEOGRAPH-2F802	[FB40 CE41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F802, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_078)
{
    // 2F802 0062;	
    // (乁) CJK COMPATIBILITY IDEOGRAPH-2F802	[FB40 CE41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F802, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_079)
{
    // 2F04 0021;	
    // (⼄) KANGXI RADICAL SECOND	[FB40 CE59 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F04, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_080)
{
    // 319A 0021;	
    // (㆚) IDEOGRAPHIC ANNOTATION SECOND MARK	[FB40 CE59 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_081)
{
    // 2E84 0021;	
    // (⺄) CJK RADICAL SECOND THREE	[FB40 CE59 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E84, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xCE59, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_082)
{
    // 2F04 003F;	
    // (⼄) KANGXI RADICAL SECOND	[FB40 CE59 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F04, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_083)
{
    // 319A 003F;	
    // (㆚) IDEOGRAPHIC ANNOTATION SECOND MARK	[FB40 CE59 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_084)
{
    // 2E84 003F;	
    // (⺄) CJK RADICAL SECOND THREE	[FB40 CE59 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E84, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xCE59, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_085)
{
    // 2F04 0061;	
    // (⼄) KANGXI RADICAL SECOND	[FB40 CE59 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F04, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_086)
{
    // 2F04 0041;	
    // (⼄) KANGXI RADICAL SECOND	[FB40 CE59 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F04, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_087)
{
    // 319A 0061;	
    // (㆚) IDEOGRAPHIC ANNOTATION SECOND MARK	[FB40 CE59 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_088)
{
    // 319A 0041;	
    // (㆚) IDEOGRAPHIC ANNOTATION SECOND MARK	[FB40 CE59 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x319A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_089)
{
    // 2E84 0061;	
    // (⺄) CJK RADICAL SECOND THREE	[FB40 CE59 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E84, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xCE59, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_090)
{
    // 2E84 0041;	
    // (⺄) CJK RADICAL SECOND THREE	[FB40 CE59 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E84, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xCE59, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_091)
{
    // 2F04 0062;	
    // (⼄) KANGXI RADICAL SECOND	[FB40 CE59 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F04, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_092)
{
    // 319A 0062;	
    // (㆚) IDEOGRAPHIC ANNOTATION SECOND MARK	[FB40 CE59 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_093)
{
    // 2E84 0062;	
    // (⺄) CJK RADICAL SECOND THREE	[FB40 CE59 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E84, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xCE59, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_094)
{
    // 2E83 0021;	
    // (⺃) CJK RADICAL SECOND TWO	[FB40 CE5A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E83, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_095)
{
    // 2E83 003F;	
    // (⺃) CJK RADICAL SECOND TWO	[FB40 CE5A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E83, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_096)
{
    // 2E83 0061;	
    // (⺃) CJK RADICAL SECOND TWO	[FB40 CE5A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E83, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_097)
{
    // 2E83 0041;	
    // (⺃) CJK RADICAL SECOND TWO	[FB40 CE5A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E83, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_098)
{
    // 2E83 0062;	
    // (⺃) CJK RADICAL SECOND TWO	[FB40 CE5A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E83, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_099)
{
    // 2E82 0021;	
    // (⺂) CJK RADICAL SECOND ONE	[FB40 CE5B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E82, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_100)
{
    // 2E82 003F;	
    // (⺂) CJK RADICAL SECOND ONE	[FB40 CE5B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E82, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_101)
{
    // 2E82 0061;	
    // (⺂) CJK RADICAL SECOND ONE	[FB40 CE5B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E82, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_102)
{
    // 2E82 0041;	
    // (⺂) CJK RADICAL SECOND ONE	[FB40 CE5B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E82, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_103)
{
    // 2E82 0062;	
    // (⺂) CJK RADICAL SECOND ONE	[FB40 CE5B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E82, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_104)
{
    // 3288 0021;	
    // (㊈) CIRCLED IDEOGRAPH NINE	[FB40 CE5D 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3288, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_105)
{
    // 3288 003F;	
    // (㊈) CIRCLED IDEOGRAPH NINE	[FB40 CE5D 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3288, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_106)
{
    // 3288 0061;	
    // (㊈) CIRCLED IDEOGRAPH NINE	[FB40 CE5D 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3288, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_107)
{
    // 3288 0041;	
    // (㊈) CIRCLED IDEOGRAPH NINE	[FB40 CE5D 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3288, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_108)
{
    // 3288 0062;	
    // (㊈) CIRCLED IDEOGRAPH NINE	[FB40 CE5D 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3288, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_109)
{
    // F91B 0021;	
    // (亂) CJK COMPATIBILITY IDEOGRAPH-F91B	[FB40 CE82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_110)
{
    // F91B 003F;	
    // (亂) CJK COMPATIBILITY IDEOGRAPH-F91B	[FB40 CE82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_111)
{
    // F91B 0061;	
    // (亂) CJK COMPATIBILITY IDEOGRAPH-F91B	[FB40 CE82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_112)
{
    // F91B 0041;	
    // (亂) CJK COMPATIBILITY IDEOGRAPH-F91B	[FB40 CE82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF91B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_113)
{
    // F91B 0062;	
    // (亂) CJK COMPATIBILITY IDEOGRAPH-F91B	[FB40 CE82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_114)
{
    // 2F05 0021;	
    // (⼅) KANGXI RADICAL HOOK	[FB40 CE85 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F05, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_115)
{
    // 2F05 003F;	
    // (⼅) KANGXI RADICAL HOOK	[FB40 CE85 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F05, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_116)
{
    // 2F05 0061;	
    // (⼅) KANGXI RADICAL HOOK	[FB40 CE85 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F05, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_117)
{
    // 2F05 0041;	
    // (⼅) KANGXI RADICAL HOOK	[FB40 CE85 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F05, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_118)
{
    // 2F05 0062;	
    // (⼅) KANGXI RADICAL HOOK	[FB40 CE85 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F05, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_119)
{
    // F9BA 0021;	
    // (了) CJK COMPATIBILITY IDEOGRAPH-F9BA	[FB40 CE86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_120)
{
    // F9BA 003F;	
    // (了) CJK COMPATIBILITY IDEOGRAPH-F9BA	[FB40 CE86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_121)
{
    // F9BA 0061;	
    // (了) CJK COMPATIBILITY IDEOGRAPH-F9BA	[FB40 CE86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_122)
{
    // F9BA 0041;	
    // (了) CJK COMPATIBILITY IDEOGRAPH-F9BA	[FB40 CE86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_123)
{
    // F9BA 0062;	
    // (了) CJK COMPATIBILITY IDEOGRAPH-F9BA	[FB40 CE86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_124)
{
    // 2F06 0021;	
    // (⼆) KANGXI RADICAL TWO	[FB40 CE8C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F06, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_125)
{
    // 3281 0021;	
    // (㊁) CIRCLED IDEOGRAPH TWO	[FB40 CE8C 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3281, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_126)
{
    // 3193 0021;	
    // (㆓) IDEOGRAPHIC ANNOTATION TWO MARK	[FB40 CE8C 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3193, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_127)
{
    // 1F214 0021;	
    // (🈔) SQUARED CJK UNIFIED IDEOGRAPH-4E8C	[FB40 CE8C 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F214, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_128)
{
    // 2F06 003F;	
    // (⼆) KANGXI RADICAL TWO	[FB40 CE8C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F06, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_129)
{
    // 3281 003F;	
    // (㊁) CIRCLED IDEOGRAPH TWO	[FB40 CE8C 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3281, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_130)
{
    // 3193 003F;	
    // (㆓) IDEOGRAPHIC ANNOTATION TWO MARK	[FB40 CE8C 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3193, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_131)
{
    // 1F214 003F;	
    // (🈔) SQUARED CJK UNIFIED IDEOGRAPH-4E8C	[FB40 CE8C 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F214, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_132)
{
    // 2F06 0061;	
    // (⼆) KANGXI RADICAL TWO	[FB40 CE8C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F06, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_133)
{
    // 2F06 0041;	
    // (⼆) KANGXI RADICAL TWO	[FB40 CE8C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F06, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_134)
{
    // 3281 0061;	
    // (㊁) CIRCLED IDEOGRAPH TWO	[FB40 CE8C 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3281, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_135)
{
    // 3281 0041;	
    // (㊁) CIRCLED IDEOGRAPH TWO	[FB40 CE8C 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3281, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_136)
{
    // 3193 0061;	
    // (㆓) IDEOGRAPHIC ANNOTATION TWO MARK	[FB40 CE8C 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3193, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_137)
{
    // 3193 0041;	
    // (㆓) IDEOGRAPHIC ANNOTATION TWO MARK	[FB40 CE8C 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x3193, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_138)
{
    // 1F214 0061;	
    // (🈔) SQUARED CJK UNIFIED IDEOGRAPH-4E8C	[FB40 CE8C 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F214, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_139)
{
    // 1F214 0041;	
    // (🈔) SQUARED CJK UNIFIED IDEOGRAPH-4E8C	[FB40 CE8C 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F214, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_140)
{
    // 2F06 0062;	
    // (⼆) KANGXI RADICAL TWO	[FB40 CE8C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F06, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_141)
{
    // 3281 0062;	
    // (㊁) CIRCLED IDEOGRAPH TWO	[FB40 CE8C 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3281, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_142)
{
    // 3193 0062;	
    // (㆓) IDEOGRAPHIC ANNOTATION TWO MARK	[FB40 CE8C 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x3193, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_143)
{
    // 1F214 0062;	
    // (🈔) SQUARED CJK UNIFIED IDEOGRAPH-4E8C	[FB40 CE8C 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F214, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_144)
{
    // 3284 0021;	
    // (㊄) CIRCLED IDEOGRAPH FIVE	[FB40 CE94 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3284, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCE94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_145)
{
    // 3284 003F;	
    // (㊄) CIRCLED IDEOGRAPH FIVE	[FB40 CE94 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3284, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCE94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_146)
{
    // 3284 0061;	
    // (㊄) CIRCLED IDEOGRAPH FIVE	[FB40 CE94 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3284, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCE94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_147)
{
    // 3284 0041;	
    // (㊄) CIRCLED IDEOGRAPH FIVE	[FB40 CE94 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3284, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCE94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_148)
{
    // 3284 0062;	
    // (㊄) CIRCLED IDEOGRAPH FIVE	[FB40 CE94 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3284, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCE94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_149)
{
    // 2F07 0021;	
    // (⼇) KANGXI RADICAL LID	[FB40 CEA0 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F07, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCEA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_150)
{
    // 2F07 003F;	
    // (⼇) KANGXI RADICAL LID	[FB40 CEA0 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F07, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCEA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_151)
{
    // 2F07 0061;	
    // (⼇) KANGXI RADICAL LID	[FB40 CEA0 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F07, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCEA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_152)
{
    // 2F07 0041;	
    // (⼇) KANGXI RADICAL LID	[FB40 CEA0 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F07, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCEA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_153)
{
    // 2F07 0062;	
    // (⼇) KANGXI RADICAL LID	[FB40 CEA0 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F07, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCEA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_154)
{
    // 1F218 0021;	
    // (🈘) SQUARED CJK UNIFIED IDEOGRAPH-4EA4	[FB40 CEA4 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F218, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCEA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_155)
{
    // 1F218 003F;	
    // (🈘) SQUARED CJK UNIFIED IDEOGRAPH-4EA4	[FB40 CEA4 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F218, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCEA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_156)
{
    // 1F218 0061;	
    // (🈘) SQUARED CJK UNIFIED IDEOGRAPH-4EA4	[FB40 CEA4 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F218, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCEA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_157)
{
    // 1F218 0041;	
    // (🈘) SQUARED CJK UNIFIED IDEOGRAPH-4EA4	[FB40 CEA4 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F218, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCEA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_158)
{
    // 1F218 0062;	
    // (🈘) SQUARED CJK UNIFIED IDEOGRAPH-4EA4	[FB40 CEA4 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F218, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCEA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_159)
{
    // F977 0021;	
    // (亮) CJK COMPATIBILITY IDEOGRAPH-F977	[FB40 CEAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF977, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCEAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_160)
{
    // F977 003F;	
    // (亮) CJK COMPATIBILITY IDEOGRAPH-F977	[FB40 CEAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF977, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCEAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_161)
{
    // F977 0061;	
    // (亮) CJK COMPATIBILITY IDEOGRAPH-F977	[FB40 CEAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF977, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCEAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_162)
{
    // F977 0041;	
    // (亮) CJK COMPATIBILITY IDEOGRAPH-F977	[FB40 CEAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF977, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCEAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_163)
{
    // F977 0062;	
    // (亮) CJK COMPATIBILITY IDEOGRAPH-F977	[FB40 CEAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF977, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCEAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_164)
{
    // 2F08 0021;	
    // (⼈) KANGXI RADICAL MAN	[FB40 CEBA 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F08, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_165)
{
    // 319F 0021;	
    // (㆟) IDEOGRAPHIC ANNOTATION MAN MARK	[FB40 CEBA 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_166)
{
    // 2F08 003F;	
    // (⼈) KANGXI RADICAL MAN	[FB40 CEBA 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F08, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_167)
{
    // 319F 003F;	
    // (㆟) IDEOGRAPHIC ANNOTATION MAN MARK	[FB40 CEBA 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_168)
{
    // 2F08 0061;	
    // (⼈) KANGXI RADICAL MAN	[FB40 CEBA 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F08, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_169)
{
    // 2F08 0041;	
    // (⼈) KANGXI RADICAL MAN	[FB40 CEBA 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F08, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_170)
{
    // 319F 0061;	
    // (㆟) IDEOGRAPHIC ANNOTATION MAN MARK	[FB40 CEBA 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_171)
{
    // 319F 0041;	
    // (㆟) IDEOGRAPHIC ANNOTATION MAN MARK	[FB40 CEBA 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x319F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_172)
{
    // 2F08 0062;	
    // (⼈) KANGXI RADICAL MAN	[FB40 CEBA 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F08, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_173)
{
    // 319F 0062;	
    // (㆟) IDEOGRAPHIC ANNOTATION MAN MARK	[FB40 CEBA 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x319F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_174)
{
    // 2E85 0021;	
    // (⺅) CJK RADICAL PERSON	[FB40 CEBB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E85, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_175)
{
    // 2E85 003F;	
    // (⺅) CJK RADICAL PERSON	[FB40 CEBB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E85, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCEBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_176)
{
    // 2E85 0061;	
    // (⺅) CJK RADICAL PERSON	[FB40 CEBB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E85, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_177)
{
    // 2E85 0041;	
    // (⺅) CJK RADICAL PERSON	[FB40 CEBB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E85, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_178)
{
    // 2E85 0062;	
    // (⺅) CJK RADICAL PERSON	[FB40 CEBB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E85, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCEBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_179)
{
    // F9FD 0021;	
    // (什) CJK COMPATIBILITY IDEOGRAPH-F9FD	[FB40 CEC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCEC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_180)
{
    // F9FD 003F;	
    // (什) CJK COMPATIBILITY IDEOGRAPH-F9FD	[FB40 CEC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FD, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCEC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_181)
{
    // F9FD 0061;	
    // (什) CJK COMPATIBILITY IDEOGRAPH-F9FD	[FB40 CEC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCEC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_182)
{
    // F9FD 0041;	
    // (什) CJK COMPATIBILITY IDEOGRAPH-F9FD	[FB40 CEC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCEC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_183)
{
    // F9FD 0062;	
    // (什) CJK COMPATIBILITY IDEOGRAPH-F9FD	[FB40 CEC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCEC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_184)
{
    // 2F819 0021;	
    // (仌) CJK COMPATIBILITY IDEOGRAPH-2F819	[FB40 CECC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F819, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_185)
{
    // 2F819 003F;	
    // (仌) CJK COMPATIBILITY IDEOGRAPH-2F819	[FB40 CECC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F819, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_186)
{
    // 2F819 0061;	
    // (仌) CJK COMPATIBILITY IDEOGRAPH-2F819	[FB40 CECC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F819, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_187)
{
    // 2F819 0041;	
    // (仌) CJK COMPATIBILITY IDEOGRAPH-2F819	[FB40 CECC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F819, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_188)
{
    // 2F819 0062;	
    // (仌) CJK COMPATIBILITY IDEOGRAPH-2F819	[FB40 CECC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F819, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_189)
{
    // F9A8 0021;	
    // (令) CJK COMPATIBILITY IDEOGRAPH-F9A8	[FB40 CEE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCEE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_190)
{
    // F9A8 003F;	
    // (令) CJK COMPATIBILITY IDEOGRAPH-F9A8	[FB40 CEE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCEE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_191)
{
    // F9A8 0061;	
    // (令) CJK COMPATIBILITY IDEOGRAPH-F9A8	[FB40 CEE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCEE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_192)
{
    // F9A8 0041;	
    // (令) CJK COMPATIBILITY IDEOGRAPH-F9A8	[FB40 CEE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCEE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_193)
{
    // F9A8 0062;	
    // (令) CJK COMPATIBILITY IDEOGRAPH-F9A8	[FB40 CEE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCEE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_194)
{
    // 32AD 0021;	
    // (㊭) CIRCLED IDEOGRAPH ENTERPRISE	[FB40 CF01 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCF01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_195)
{
    // 32AD 003F;	
    // (㊭) CIRCLED IDEOGRAPH ENTERPRISE	[FB40 CF01 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AD, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCF01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_196)
{
    // 32AD 0061;	
    // (㊭) CIRCLED IDEOGRAPH ENTERPRISE	[FB40 CF01 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCF01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_197)
{
    // 32AD 0041;	
    // (㊭) CIRCLED IDEOGRAPH ENTERPRISE	[FB40 CF01 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCF01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_198)
{
    // 32AD 0062;	
    // (㊭) CIRCLED IDEOGRAPH ENTERPRISE	[FB40 CF01 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCF01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_199)
{
    // 32A1 0021;	
    // (㊡) CIRCLED IDEOGRAPH REST	[FB40 CF11 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCF11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_200)
{
    // 32A1 003F;	
    // (㊡) CIRCLED IDEOGRAPH REST	[FB40 CF11 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCF11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_201)
{
    // 32A1 0061;	
    // (㊡) CIRCLED IDEOGRAPH REST	[FB40 CF11 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCF11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_202)
{
    // 32A1 0041;	
    // (㊡) CIRCLED IDEOGRAPH REST	[FB40 CF11 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCF11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_203)
{
    // 32A1 0062;	
    // (㊡) CIRCLED IDEOGRAPH REST	[FB40 CF11 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCF11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_204)
{
    // 2F804 0021;	
    // (你) CJK COMPATIBILITY IDEOGRAPH-2F804	[FB40 CF60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F804, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCF60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_205)
{
    // 2F804 003F;	
    // (你) CJK COMPATIBILITY IDEOGRAPH-2F804	[FB40 CF60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F804, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCF60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_206)
{
    // 2F804 0061;	
    // (你) CJK COMPATIBILITY IDEOGRAPH-2F804	[FB40 CF60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F804, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCF60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_207)
{
    // 2F804 0041;	
    // (你) CJK COMPATIBILITY IDEOGRAPH-2F804	[FB40 CF60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F804, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCF60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_208)
{
    // 2F804 0062;	
    // (你) CJK COMPATIBILITY IDEOGRAPH-2F804	[FB40 CF60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F804, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCF60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_209)
{
    // FA73 0021;	
    // (侀) CJK COMPATIBILITY IDEOGRAPH-FA73	[FB40 CF80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA73, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCF80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_210)
{
    // FA73 003F;	
    // (侀) CJK COMPATIBILITY IDEOGRAPH-FA73	[FB40 CF80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA73, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCF80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_211)
{
    // FA73 0061;	
    // (侀) CJK COMPATIBILITY IDEOGRAPH-FA73	[FB40 CF80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA73, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCF80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_212)
{
    // FA73 0041;	
    // (侀) CJK COMPATIBILITY IDEOGRAPH-FA73	[FB40 CF80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA73, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCF80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_213)
{
    // FA73 0062;	
    // (侀) CJK COMPATIBILITY IDEOGRAPH-FA73	[FB40 CF80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA73, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCF80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_214)
{
    // F92D 0021;	
    // (來) CJK COMPATIBILITY IDEOGRAPH-F92D	[FB40 CF86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCF86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_215)
{
    // F92D 003F;	
    // (來) CJK COMPATIBILITY IDEOGRAPH-F92D	[FB40 CF86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCF86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_216)
{
    // F92D 0061;	
    // (來) CJK COMPATIBILITY IDEOGRAPH-F92D	[FB40 CF86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCF86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_217)
{
    // F92D 0041;	
    // (來) CJK COMPATIBILITY IDEOGRAPH-F92D	[FB40 CF86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF92D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCF86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_218)
{
    // F92D 0062;	
    // (來) CJK COMPATIBILITY IDEOGRAPH-F92D	[FB40 CF86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCF86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_219)
{
    // F9B5 0021;	
    // (例) CJK COMPATIBILITY IDEOGRAPH-F9B5	[FB40 CF8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCF8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_220)
{
    // F9B5 003F;	
    // (例) CJK COMPATIBILITY IDEOGRAPH-F9B5	[FB40 CF8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCF8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_221)
{
    // F9B5 0061;	
    // (例) CJK COMPATIBILITY IDEOGRAPH-F9B5	[FB40 CF8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCF8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_222)
{
    // F9B5 0041;	
    // (例) CJK COMPATIBILITY IDEOGRAPH-F9B5	[FB40 CF8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCF8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_223)
{
    // F9B5 0062;	
    // (例) CJK COMPATIBILITY IDEOGRAPH-F9B5	[FB40 CF8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCF8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_224)
{
    // FA30 0021;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-FA30	[FB40 CFAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA30, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_225)
{
    // 2F805 0021;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-2F805	[FB40 CFAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F805, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_226)
{
    // FA30 003F;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-FA30	[FB40 CFAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA30, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_227)
{
    // 2F805 003F;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-2F805	[FB40 CFAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F805, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_228)
{
    // FA30 0061;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-FA30	[FB40 CFAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA30, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_229)
{
    // 2F805 0061;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-2F805	[FB40 CFAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F805, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_230)
{
    // FA30 0041;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-FA30	[FB40 CFAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA30, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_231)
{
    // 2F805 0041;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-2F805	[FB40 CFAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F805, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_232)
{
    // FA30 0062;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-FA30	[FB40 CFAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA30, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_233)
{
    // 2F805 0062;	
    // (侮) CJK COMPATIBILITY IDEOGRAPH-2F805	[FB40 CFAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F805, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCFAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_234)
{
    // 2F806 0021;	
    // (侻) CJK COMPATIBILITY IDEOGRAPH-2F806	[FB40 CFBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F806, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCFBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_235)
{
    // 2F806 003F;	
    // (侻) CJK COMPATIBILITY IDEOGRAPH-2F806	[FB40 CFBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F806, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCFBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_236)
{
    // 2F806 0061;	
    // (侻) CJK COMPATIBILITY IDEOGRAPH-2F806	[FB40 CFBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F806, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCFBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_237)
{
    // 2F806 0041;	
    // (侻) CJK COMPATIBILITY IDEOGRAPH-2F806	[FB40 CFBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F806, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCFBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_238)
{
    // 2F806 0062;	
    // (侻) CJK COMPATIBILITY IDEOGRAPH-2F806	[FB40 CFBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F806, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCFBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_239)
{
    // F965 0021;	
    // (便) CJK COMPATIBILITY IDEOGRAPH-F965	[FB40 CFBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF965, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xCFBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_240)
{
    // F965 003F;	
    // (便) CJK COMPATIBILITY IDEOGRAPH-F965	[FB40 CFBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF965, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xCFBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_241)
{
    // F965 0061;	
    // (便) CJK COMPATIBILITY IDEOGRAPH-F965	[FB40 CFBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF965, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xCFBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_242)
{
    // F965 0041;	
    // (便) CJK COMPATIBILITY IDEOGRAPH-F965	[FB40 CFBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF965, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xCFBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_243)
{
    // F965 0062;	
    // (便) CJK COMPATIBILITY IDEOGRAPH-F965	[FB40 CFBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF965, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xCFBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_244)
{
    // 2F807 0021;	
    // (倂) CJK COMPATIBILITY IDEOGRAPH-2F807	[FB40 D002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F807, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_245)
{
    // 2F807 003F;	
    // (倂) CJK COMPATIBILITY IDEOGRAPH-2F807	[FB40 D002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F807, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_246)
{
    // 2F807 0061;	
    // (倂) CJK COMPATIBILITY IDEOGRAPH-2F807	[FB40 D002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F807, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_247)
{
    // 2F807 0041;	
    // (倂) CJK COMPATIBILITY IDEOGRAPH-2F807	[FB40 D002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F807, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_248)
{
    // 2F807 0062;	
    // (倂) CJK COMPATIBILITY IDEOGRAPH-2F807	[FB40 D002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F807, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_249)
{
    // F9D4 0021;	
    // (倫) CJK COMPATIBILITY IDEOGRAPH-F9D4	[FB40 D02B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD02B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_250)
{
    // F9D4 003F;	
    // (倫) CJK COMPATIBILITY IDEOGRAPH-F9D4	[FB40 D02B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD02B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_251)
{
    // F9D4 0061;	
    // (倫) CJK COMPATIBILITY IDEOGRAPH-F9D4	[FB40 D02B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD02B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_252)
{
    // F9D4 0041;	
    // (倫) CJK COMPATIBILITY IDEOGRAPH-F9D4	[FB40 D02B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD02B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_253)
{
    // F9D4 0062;	
    // (倫) CJK COMPATIBILITY IDEOGRAPH-F9D4	[FB40 D02B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD02B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_254)
{
    // 2F808 0021;	
    // (偺) CJK COMPATIBILITY IDEOGRAPH-2F808	[FB40 D07A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F808, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD07A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_255)
{
    // 2F808 003F;	
    // (偺) CJK COMPATIBILITY IDEOGRAPH-2F808	[FB40 D07A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F808, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD07A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_256)
{
    // 2F808 0061;	
    // (偺) CJK COMPATIBILITY IDEOGRAPH-2F808	[FB40 D07A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F808, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD07A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_257)
{
    // 2F808 0041;	
    // (偺) CJK COMPATIBILITY IDEOGRAPH-2F808	[FB40 D07A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F808, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD07A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_258)
{
    // 2F808 0062;	
    // (偺) CJK COMPATIBILITY IDEOGRAPH-2F808	[FB40 D07A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F808, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD07A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_259)
{
    // 2F809 0021;	
    // (備) CJK COMPATIBILITY IDEOGRAPH-2F809	[FB40 D099 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F809, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD099, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_260)
{
    // 2F809 003F;	
    // (備) CJK COMPATIBILITY IDEOGRAPH-2F809	[FB40 D099 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F809, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD099, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_261)
{
    // 2F809 0061;	
    // (備) CJK COMPATIBILITY IDEOGRAPH-2F809	[FB40 D099 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F809, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_262)
{
    // 2F809 0041;	
    // (備) CJK COMPATIBILITY IDEOGRAPH-2F809	[FB40 D099 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F809, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_263)
{
    // 2F809 0062;	
    // (備) CJK COMPATIBILITY IDEOGRAPH-2F809	[FB40 D099 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F809, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD099, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_264)
{
    // 2F80B 0021;	
    // (像) CJK COMPATIBILITY IDEOGRAPH-2F80B	[FB40 D0CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD0CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_265)
{
    // 2F80B 003F;	
    // (像) CJK COMPATIBILITY IDEOGRAPH-2F80B	[FB40 D0CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD0CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_266)
{
    // 2F80B 0061;	
    // (像) CJK COMPATIBILITY IDEOGRAPH-2F80B	[FB40 D0CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD0CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_267)
{
    // 2F80B 0041;	
    // (像) CJK COMPATIBILITY IDEOGRAPH-2F80B	[FB40 D0CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F80B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD0CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_268)
{
    // 2F80B 0062;	
    // (像) CJK COMPATIBILITY IDEOGRAPH-2F80B	[FB40 D0CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD0CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_269)
{
    // F9BB 0021;	
    // (僚) CJK COMPATIBILITY IDEOGRAPH-F9BB	[FB40 D0DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD0DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_270)
{
    // F9BB 003F;	
    // (僚) CJK COMPATIBILITY IDEOGRAPH-F9BB	[FB40 D0DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD0DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_271)
{
    // F9BB 0061;	
    // (僚) CJK COMPATIBILITY IDEOGRAPH-F9BB	[FB40 D0DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD0DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_272)
{
    // F9BB 0041;	
    // (僚) CJK COMPATIBILITY IDEOGRAPH-F9BB	[FB40 D0DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD0DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_273)
{
    // F9BB 0062;	
    // (僚) CJK COMPATIBILITY IDEOGRAPH-F9BB	[FB40 D0DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD0DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_274)
{
    // FA31 0021;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-FA31	[FB40 D0E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA31, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_275)
{
    // 2F80A 0021;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-2F80A	[FB40 D0E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_276)
{
    // FA31 003F;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-FA31	[FB40 D0E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA31, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_277)
{
    // 2F80A 003F;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-2F80A	[FB40 D0E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_278)
{
    // FA31 0061;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-FA31	[FB40 D0E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA31, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_279)
{
    // 2F80A 0061;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-2F80A	[FB40 D0E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_280)
{
    // FA31 0041;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-FA31	[FB40 D0E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA31, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_281)
{
    // 2F80A 0041;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-2F80A	[FB40 D0E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F80A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_282)
{
    // FA31 0062;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-FA31	[FB40 D0E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA31, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_283)
{
    // 2F80A 0062;	
    // (僧) CJK COMPATIBILITY IDEOGRAPH-2F80A	[FB40 D0E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD0E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_284)
{
    // 329D 0021;	
    // (㊝) CIRCLED IDEOGRAPH EXCELLENT	[FB40 D12A 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD12A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_285)
{
    // 329D 003F;	
    // (㊝) CIRCLED IDEOGRAPH EXCELLENT	[FB40 D12A 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD12A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_286)
{
    // 329D 0061;	
    // (㊝) CIRCLED IDEOGRAPH EXCELLENT	[FB40 D12A 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD12A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_287)
{
    // 329D 0041;	
    // (㊝) CIRCLED IDEOGRAPH EXCELLENT	[FB40 D12A 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x329D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD12A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_288)
{
    // 329D 0062;	
    // (㊝) CIRCLED IDEOGRAPH EXCELLENT	[FB40 D12A 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD12A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_289)
{
    // 2F09 0021;	
    // (⼉) KANGXI RADICAL LEGS	[FB40 D13F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F09, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD13F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_290)
{
    // 2F09 003F;	
    // (⼉) KANGXI RADICAL LEGS	[FB40 D13F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F09, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD13F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_291)
{
    // 2F09 0061;	
    // (⼉) KANGXI RADICAL LEGS	[FB40 D13F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F09, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD13F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_292)
{
    // 2F09 0041;	
    // (⼉) KANGXI RADICAL LEGS	[FB40 D13F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F09, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD13F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_293)
{
    // 2F09 0062;	
    // (⼉) KANGXI RADICAL LEGS	[FB40 D13F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F09, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD13F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_294)
{
    // FA0C 0021;	
    // (兀) CJK COMPATIBILITY IDEOGRAPH-FA0C	[FB40 D140 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD140, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_295)
{
    // FA0C 003F;	
    // (兀) CJK COMPATIBILITY IDEOGRAPH-FA0C	[FB40 D140 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD140, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_296)
{
    // FA0C 0061;	
    // (兀) CJK COMPATIBILITY IDEOGRAPH-FA0C	[FB40 D140 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_297)
{
    // FA0C 0041;	
    // (兀) CJK COMPATIBILITY IDEOGRAPH-FA0C	[FB40 D140 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD140, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_298)
{
    // FA0C 0062;	
    // (兀) CJK COMPATIBILITY IDEOGRAPH-FA0C	[FB40 D140 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD140, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_299)
{
    // FA74 0021;	
    // (充) CJK COMPATIBILITY IDEOGRAPH-FA74	[FB40 D145 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA74, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD145, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_300)
{
    // FA74 003F;	
    // (充) CJK COMPATIBILITY IDEOGRAPH-FA74	[FB40 D145 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA74, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD145, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_301)
{
    // FA74 0061;	
    // (充) CJK COMPATIBILITY IDEOGRAPH-FA74	[FB40 D145 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA74, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_302)
{
    // FA74 0041;	
    // (充) CJK COMPATIBILITY IDEOGRAPH-FA74	[FB40 D145 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA74, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD145, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_303)
{
    // FA74 0062;	
    // (充) CJK COMPATIBILITY IDEOGRAPH-FA74	[FB40 D145 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA74, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD145, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_304)
{
    // FA32 0021;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-FA32	[FB40 D14D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA32, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_305)
{
    // 2F80E 0021;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-2F80E	[FB40 D14D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_306)
{
    // FA32 003F;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-FA32	[FB40 D14D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA32, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_307)
{
    // 2F80E 003F;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-2F80E	[FB40 D14D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_308)
{
    // FA32 0061;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-FA32	[FB40 D14D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA32, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_309)
{
    // 2F80E 0061;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-2F80E	[FB40 D14D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_310)
{
    // FA32 0041;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-FA32	[FB40 D14D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA32, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_311)
{
    // 2F80E 0041;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-2F80E	[FB40 D14D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F80E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_312)
{
    // FA32 0062;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-FA32	[FB40 D14D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA32, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_313)
{
    // 2F80E 0062;	
    // (免) CJK COMPATIBILITY IDEOGRAPH-2F80E	[FB40 D14D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD14D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_314)
{
    // 2F80F 0021;	
    // (兔) CJK COMPATIBILITY IDEOGRAPH-2F80F	[FB40 D154 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD154, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_315)
{
    // 2F80F 003F;	
    // (兔) CJK COMPATIBILITY IDEOGRAPH-2F80F	[FB40 D154 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD154, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_316)
{
    // 2F80F 0061;	
    // (兔) CJK COMPATIBILITY IDEOGRAPH-2F80F	[FB40 D154 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_317)
{
    // 2F80F 0041;	
    // (兔) CJK COMPATIBILITY IDEOGRAPH-2F80F	[FB40 D154 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F80F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD154, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_318)
{
    // 2F80F 0062;	
    // (兔) CJK COMPATIBILITY IDEOGRAPH-2F80F	[FB40 D154 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD154, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_319)
{
    // 2F810 0021;	
    // (兤) CJK COMPATIBILITY IDEOGRAPH-2F810	[FB40 D164 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F810, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD164, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_320)
{
    // 2F810 003F;	
    // (兤) CJK COMPATIBILITY IDEOGRAPH-2F810	[FB40 D164 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F810, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD164, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_321)
{
    // 2F810 0061;	
    // (兤) CJK COMPATIBILITY IDEOGRAPH-2F810	[FB40 D164 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F810, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_322)
{
    // 2F810 0041;	
    // (兤) CJK COMPATIBILITY IDEOGRAPH-2F810	[FB40 D164 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F810, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD164, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_323)
{
    // 2F810 0062;	
    // (兤) CJK COMPATIBILITY IDEOGRAPH-2F810	[FB40 D164 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F810, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD164, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_324)
{
    // 2F0A 0021;	
    // (⼊) KANGXI RADICAL ENTER	[FB40 D165 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD165, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_325)
{
    // 2F0A 003F;	
    // (⼊) KANGXI RADICAL ENTER	[FB40 D165 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD165, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_326)
{
    // 2F0A 0061;	
    // (⼊) KANGXI RADICAL ENTER	[FB40 D165 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_327)
{
    // 2F0A 0041;	
    // (⼊) KANGXI RADICAL ENTER	[FB40 D165 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD165, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_328)
{
    // 2F0A 0062;	
    // (⼊) KANGXI RADICAL ENTER	[FB40 D165 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD165, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_329)
{
    // 2F814 0021;	
    // (內) CJK COMPATIBILITY IDEOGRAPH-2F814	[FB40 D167 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F814, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD167, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_330)
{
    // 2F814 003F;	
    // (內) CJK COMPATIBILITY IDEOGRAPH-2F814	[FB40 D167 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F814, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD167, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_331)
{
    // 2F814 0061;	
    // (內) CJK COMPATIBILITY IDEOGRAPH-2F814	[FB40 D167 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F814, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_332)
{
    // 2F814 0041;	
    // (內) CJK COMPATIBILITY IDEOGRAPH-2F814	[FB40 D167 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F814, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD167, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_333)
{
    // 2F814 0062;	
    // (內) CJK COMPATIBILITY IDEOGRAPH-2F814	[FB40 D167 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F814, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD167, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_334)
{
    // FA72 0021;	
    // (全) CJK COMPATIBILITY IDEOGRAPH-FA72	[FB40 D168 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA72, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD168, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_335)
{
    // FA72 003F;	
    // (全) CJK COMPATIBILITY IDEOGRAPH-FA72	[FB40 D168 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA72, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD168, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_336)
{
    // FA72 0061;	
    // (全) CJK COMPATIBILITY IDEOGRAPH-FA72	[FB40 D168 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA72, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_337)
{
    // FA72 0041;	
    // (全) CJK COMPATIBILITY IDEOGRAPH-FA72	[FB40 D168 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA72, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD168, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_338)
{
    // FA72 0062;	
    // (全) CJK COMPATIBILITY IDEOGRAPH-FA72	[FB40 D168 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA72, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD168, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_339)
{
    // F978 0021;	
    // (兩) CJK COMPATIBILITY IDEOGRAPH-F978	[FB40 D169 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF978, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD169, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_340)
{
    // F978 003F;	
    // (兩) CJK COMPATIBILITY IDEOGRAPH-F978	[FB40 D169 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF978, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD169, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_341)
{
    // F978 0061;	
    // (兩) CJK COMPATIBILITY IDEOGRAPH-F978	[FB40 D169 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF978, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_342)
{
    // F978 0041;	
    // (兩) CJK COMPATIBILITY IDEOGRAPH-F978	[FB40 D169 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF978, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD169, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_343)
{
    // F978 0062;	
    // (兩) CJK COMPATIBILITY IDEOGRAPH-F978	[FB40 D169 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF978, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD169, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_344)
{
    // 2F0B 0021;	
    // (⼋) KANGXI RADICAL EIGHT	[FB40 D16B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_345)
{
    // 3287 0021;	
    // (㊇) CIRCLED IDEOGRAPH EIGHT	[FB40 D16B 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3287, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_346)
{
    // 2F0B 003F;	
    // (⼋) KANGXI RADICAL EIGHT	[FB40 D16B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_347)
{
    // 3287 003F;	
    // (㊇) CIRCLED IDEOGRAPH EIGHT	[FB40 D16B 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3287, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_348)
{
    // 2F0B 0061;	
    // (⼋) KANGXI RADICAL EIGHT	[FB40 D16B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_349)
{
    // 2F0B 0041;	
    // (⼋) KANGXI RADICAL EIGHT	[FB40 D16B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_350)
{
    // 3287 0061;	
    // (㊇) CIRCLED IDEOGRAPH EIGHT	[FB40 D16B 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3287, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_351)
{
    // 3287 0041;	
    // (㊇) CIRCLED IDEOGRAPH EIGHT	[FB40 D16B 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3287, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_352)
{
    // 2F0B 0062;	
    // (⼋) KANGXI RADICAL EIGHT	[FB40 D16B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_353)
{
    // 3287 0062;	
    // (㊇) CIRCLED IDEOGRAPH EIGHT	[FB40 D16B 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3287, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD16B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_354)
{
    // F9D1 0021;	
    // (六) CJK COMPATIBILITY IDEOGRAPH-F9D1	[FB40 D16D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_355)
{
    // 3285 0021;	
    // (㊅) CIRCLED IDEOGRAPH SIX	[FB40 D16D 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3285, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_356)
{
    // F9D1 003F;	
    // (六) CJK COMPATIBILITY IDEOGRAPH-F9D1	[FB40 D16D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_357)
{
    // 3285 003F;	
    // (㊅) CIRCLED IDEOGRAPH SIX	[FB40 D16D 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3285, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_358)
{
    // F9D1 0061;	
    // (六) CJK COMPATIBILITY IDEOGRAPH-F9D1	[FB40 D16D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_359)
{
    // F9D1 0041;	
    // (六) CJK COMPATIBILITY IDEOGRAPH-F9D1	[FB40 D16D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_360)
{
    // 3285 0061;	
    // (㊅) CIRCLED IDEOGRAPH SIX	[FB40 D16D 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3285, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_361)
{
    // 3285 0041;	
    // (㊅) CIRCLED IDEOGRAPH SIX	[FB40 D16D 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3285, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_362)
{
    // F9D1 0062;	
    // (六) CJK COMPATIBILITY IDEOGRAPH-F9D1	[FB40 D16D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_363)
{
    // 3285 0062;	
    // (㊅) CIRCLED IDEOGRAPH SIX	[FB40 D16D 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3285, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD16D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_364)
{
    // 2F811 0021;	
    // (具) CJK COMPATIBILITY IDEOGRAPH-2F811	[FB40 D177 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F811, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD177, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_365)
{
    // 2F811 003F;	
    // (具) CJK COMPATIBILITY IDEOGRAPH-2F811	[FB40 D177 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F811, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD177, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_366)
{
    // 2F811 0061;	
    // (具) CJK COMPATIBILITY IDEOGRAPH-2F811	[FB40 D177 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F811, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_367)
{
    // 2F811 0041;	
    // (具) CJK COMPATIBILITY IDEOGRAPH-2F811	[FB40 D177 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F811, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD177, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_368)
{
    // 2F811 0062;	
    // (具) CJK COMPATIBILITY IDEOGRAPH-2F811	[FB40 D177 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F811, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD177, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_369)
{
    // FA75 0021;	
    // (冀) CJK COMPATIBILITY IDEOGRAPH-FA75	[FB40 D180 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA75, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD180, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_370)
{
    // FA75 003F;	
    // (冀) CJK COMPATIBILITY IDEOGRAPH-FA75	[FB40 D180 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA75, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD180, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_371)
{
    // FA75 0061;	
    // (冀) CJK COMPATIBILITY IDEOGRAPH-FA75	[FB40 D180 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA75, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_372)
{
    // FA75 0041;	
    // (冀) CJK COMPATIBILITY IDEOGRAPH-FA75	[FB40 D180 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA75, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD180, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_373)
{
    // FA75 0062;	
    // (冀) CJK COMPATIBILITY IDEOGRAPH-FA75	[FB40 D180 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA75, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD180, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_374)
{
    // 2F0C 0021;	
    // (⼌) KANGXI RADICAL DOWN BOX	[FB40 D182 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD182, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_375)
{
    // 2E86 0021;	
    // (⺆) CJK RADICAL BOX	[FB40 D182 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E86, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xD182, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_376)
{
    // 2F0C 003F;	
    // (⼌) KANGXI RADICAL DOWN BOX	[FB40 D182 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD182, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_377)
{
    // 2E86 003F;	
    // (⺆) CJK RADICAL BOX	[FB40 D182 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E86, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xD182, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_378)
{
    // 2F0C 0061;	
    // (⼌) KANGXI RADICAL DOWN BOX	[FB40 D182 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_379)
{
    // 2F0C 0041;	
    // (⼌) KANGXI RADICAL DOWN BOX	[FB40 D182 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD182, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_380)
{
    // 2E86 0061;	
    // (⺆) CJK RADICAL BOX	[FB40 D182 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E86, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xD182, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_381)
{
    // 2E86 0041;	
    // (⺆) CJK RADICAL BOX	[FB40 D182 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E86, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xD182, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_382)
{
    // 2F0C 0062;	
    // (⼌) KANGXI RADICAL DOWN BOX	[FB40 D182 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD182, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_383)
{
    // 2E86 0062;	
    // (⺆) CJK RADICAL BOX	[FB40 D182 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E86, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xD182, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_384)
{
    // 2F815 0021;	
    // (再) CJK COMPATIBILITY IDEOGRAPH-2F815	[FB40 D18D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F815, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_385)
{
    // 1F21E 0021;	
    // (🈞) SQUARED CJK UNIFIED IDEOGRAPH-518D	[FB40 D18D 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_386)
{
    // 2F815 003F;	
    // (再) CJK COMPATIBILITY IDEOGRAPH-2F815	[FB40 D18D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F815, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_387)
{
    // 1F21E 003F;	
    // (🈞) SQUARED CJK UNIFIED IDEOGRAPH-518D	[FB40 D18D 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_388)
{
    // 2F815 0061;	
    // (再) CJK COMPATIBILITY IDEOGRAPH-2F815	[FB40 D18D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F815, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_389)
{
    // 2F815 0041;	
    // (再) CJK COMPATIBILITY IDEOGRAPH-2F815	[FB40 D18D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F815, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_390)
{
    // 1F21E 0061;	
    // (🈞) SQUARED CJK UNIFIED IDEOGRAPH-518D	[FB40 D18D 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_391)
{
    // 1F21E 0041;	
    // (🈞) SQUARED CJK UNIFIED IDEOGRAPH-518D	[FB40 D18D 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F21E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_392)
{
    // 2F815 0062;	
    // (再) CJK COMPATIBILITY IDEOGRAPH-2F815	[FB40 D18D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F815, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_393)
{
    // 1F21E 0062;	
    // (🈞) SQUARED CJK UNIFIED IDEOGRAPH-518D	[FB40 D18D 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F21E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD18D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_394)
{
    // 2F8D2 0021;	
    // (冒) CJK COMPATIBILITY IDEOGRAPH-2F8D2	[FB40 D192 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD192, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_395)
{
    // 2F8D2 003F;	
    // (冒) CJK COMPATIBILITY IDEOGRAPH-2F8D2	[FB40 D192 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD192, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_396)
{
    // 2F8D2 0061;	
    // (冒) CJK COMPATIBILITY IDEOGRAPH-2F8D2	[FB40 D192 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_397)
{
    // 2F8D2 0041;	
    // (冒) CJK COMPATIBILITY IDEOGRAPH-2F8D2	[FB40 D192 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD192, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_398)
{
    // 2F8D2 0062;	
    // (冒) CJK COMPATIBILITY IDEOGRAPH-2F8D2	[FB40 D192 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD192, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_399)
{
    // 2F8D3 0021;	
    // (冕) CJK COMPATIBILITY IDEOGRAPH-2F8D3	[FB40 D195 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD195, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_400)
{
    // 2F8D3 003F;	
    // (冕) CJK COMPATIBILITY IDEOGRAPH-2F8D3	[FB40 D195 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD195, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_401)
{
    // 2F8D3 0061;	
    // (冕) CJK COMPATIBILITY IDEOGRAPH-2F8D3	[FB40 D195 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_402)
{
    // 2F8D3 0041;	
    // (冕) CJK COMPATIBILITY IDEOGRAPH-2F8D3	[FB40 D195 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD195, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_403)
{
    // 2F8D3 0062;	
    // (冕) CJK COMPATIBILITY IDEOGRAPH-2F8D3	[FB40 D195 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD195, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_404)
{
    // 2F0D 0021;	
    // (⼍) KANGXI RADICAL COVER	[FB40 D196 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD196, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_405)
{
    // 2F0D 003F;	
    // (⼍) KANGXI RADICAL COVER	[FB40 D196 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD196, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_406)
{
    // 2F0D 0061;	
    // (⼍) KANGXI RADICAL COVER	[FB40 D196 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_407)
{
    // 2F0D 0041;	
    // (⼍) KANGXI RADICAL COVER	[FB40 D196 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD196, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_408)
{
    // 2F0D 0062;	
    // (⼍) KANGXI RADICAL COVER	[FB40 D196 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD196, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_409)
{
    // 2F817 0021;	
    // (冗) CJK COMPATIBILITY IDEOGRAPH-2F817	[FB40 D197 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F817, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD197, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_410)
{
    // 2F817 003F;	
    // (冗) CJK COMPATIBILITY IDEOGRAPH-2F817	[FB40 D197 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F817, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD197, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_411)
{
    // 2F817 0061;	
    // (冗) CJK COMPATIBILITY IDEOGRAPH-2F817	[FB40 D197 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F817, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_412)
{
    // 2F817 0041;	
    // (冗) CJK COMPATIBILITY IDEOGRAPH-2F817	[FB40 D197 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F817, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD197, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_413)
{
    // 2F817 0062;	
    // (冗) CJK COMPATIBILITY IDEOGRAPH-2F817	[FB40 D197 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F817, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD197, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_414)
{
    // 32A2 0021;	
    // (㊢) CIRCLED IDEOGRAPH COPY	[FB40 D199 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD199, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_415)
{
    // 32A2 003F;	
    // (㊢) CIRCLED IDEOGRAPH COPY	[FB40 D199 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD199, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_416)
{
    // 32A2 0061;	
    // (㊢) CIRCLED IDEOGRAPH COPY	[FB40 D199 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_417)
{
    // 32A2 0041;	
    // (㊢) CIRCLED IDEOGRAPH COPY	[FB40 D199 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD199, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_418)
{
    // 32A2 0062;	
    // (㊢) CIRCLED IDEOGRAPH COPY	[FB40 D199 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD199, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_419)
{
    // 2F818 0021;	
    // (冤) CJK COMPATIBILITY IDEOGRAPH-2F818	[FB40 D1A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F818, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_420)
{
    // 2F818 003F;	
    // (冤) CJK COMPATIBILITY IDEOGRAPH-2F818	[FB40 D1A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F818, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_421)
{
    // 2F818 0061;	
    // (冤) CJK COMPATIBILITY IDEOGRAPH-2F818	[FB40 D1A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F818, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_422)
{
    // 2F818 0041;	
    // (冤) CJK COMPATIBILITY IDEOGRAPH-2F818	[FB40 D1A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F818, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_423)
{
    // 2F818 0062;	
    // (冤) CJK COMPATIBILITY IDEOGRAPH-2F818	[FB40 D1A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F818, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_424)
{
    // 2F0E 0021;	
    // (⼎) KANGXI RADICAL ICE	[FB40 D1AB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_425)
{
    // 2F0E 003F;	
    // (⼎) KANGXI RADICAL ICE	[FB40 D1AB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_426)
{
    // 2F0E 0061;	
    // (⼎) KANGXI RADICAL ICE	[FB40 D1AB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_427)
{
    // 2F0E 0041;	
    // (⼎) KANGXI RADICAL ICE	[FB40 D1AB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_428)
{
    // 2F0E 0062;	
    // (⼎) KANGXI RADICAL ICE	[FB40 D1AB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_429)
{
    // 2F81A 0021;	
    // (冬) CJK COMPATIBILITY IDEOGRAPH-2F81A	[FB40 D1AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_430)
{
    // 2F81A 003F;	
    // (冬) CJK COMPATIBILITY IDEOGRAPH-2F81A	[FB40 D1AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_431)
{
    // 2F81A 0061;	
    // (冬) CJK COMPATIBILITY IDEOGRAPH-2F81A	[FB40 D1AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_432)
{
    // 2F81A 0041;	
    // (冬) CJK COMPATIBILITY IDEOGRAPH-2F81A	[FB40 D1AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F81A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_433)
{
    // 2F81A 0062;	
    // (冬) CJK COMPATIBILITY IDEOGRAPH-2F81A	[FB40 D1AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_434)
{
    // FA71 0021;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-FA71	[FB40 D1B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA71, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_435)
{
    // 2F81B 0021;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-2F81B	[FB40 D1B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_436)
{
    // FA71 003F;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-FA71	[FB40 D1B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA71, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_437)
{
    // 2F81B 003F;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-2F81B	[FB40 D1B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_438)
{
    // FA71 0061;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-FA71	[FB40 D1B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA71, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_439)
{
    // 2F81B 0061;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-2F81B	[FB40 D1B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_440)
{
    // FA71 0041;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-FA71	[FB40 D1B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA71, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_441)
{
    // 2F81B 0041;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-2F81B	[FB40 D1B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F81B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_442)
{
    // FA71 0062;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-FA71	[FB40 D1B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA71, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_443)
{
    // 2F81B 0062;	
    // (况) CJK COMPATIBILITY IDEOGRAPH-2F81B	[FB40 D1B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_444)
{
    // F92E 0021;	
    // (冷) CJK COMPATIBILITY IDEOGRAPH-F92E	[FB40 D1B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_445)
{
    // F92E 003F;	
    // (冷) CJK COMPATIBILITY IDEOGRAPH-F92E	[FB40 D1B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_446)
{
    // F92E 0061;	
    // (冷) CJK COMPATIBILITY IDEOGRAPH-F92E	[FB40 D1B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_447)
{
    // F92E 0041;	
    // (冷) CJK COMPATIBILITY IDEOGRAPH-F92E	[FB40 D1B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF92E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_448)
{
    // F92E 0062;	
    // (冷) CJK COMPATIBILITY IDEOGRAPH-F92E	[FB40 D1B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_449)
{
    // F979 0021;	
    // (凉) CJK COMPATIBILITY IDEOGRAPH-F979	[FB40 D1C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF979, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_450)
{
    // F979 003F;	
    // (凉) CJK COMPATIBILITY IDEOGRAPH-F979	[FB40 D1C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF979, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_451)
{
    // F979 0061;	
    // (凉) CJK COMPATIBILITY IDEOGRAPH-F979	[FB40 D1C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF979, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_452)
{
    // F979 0041;	
    // (凉) CJK COMPATIBILITY IDEOGRAPH-F979	[FB40 D1C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF979, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_453)
{
    // F979 0062;	
    // (凉) CJK COMPATIBILITY IDEOGRAPH-F979	[FB40 D1C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF979, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_454)
{
    // F955 0021;	
    // (凌) CJK COMPATIBILITY IDEOGRAPH-F955	[FB40 D1CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF955, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_455)
{
    // F955 003F;	
    // (凌) CJK COMPATIBILITY IDEOGRAPH-F955	[FB40 D1CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF955, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_456)
{
    // F955 0061;	
    // (凌) CJK COMPATIBILITY IDEOGRAPH-F955	[FB40 D1CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF955, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_457)
{
    // F955 0041;	
    // (凌) CJK COMPATIBILITY IDEOGRAPH-F955	[FB40 D1CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF955, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_458)
{
    // F955 0062;	
    // (凌) CJK COMPATIBILITY IDEOGRAPH-F955	[FB40 D1CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF955, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_459)
{
    // F954 0021;	
    // (凜) CJK COMPATIBILITY IDEOGRAPH-F954	[FB40 D1DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF954, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_460)
{
    // F954 003F;	
    // (凜) CJK COMPATIBILITY IDEOGRAPH-F954	[FB40 D1DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF954, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_461)
{
    // F954 0061;	
    // (凜) CJK COMPATIBILITY IDEOGRAPH-F954	[FB40 D1DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF954, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_462)
{
    // F954 0041;	
    // (凜) CJK COMPATIBILITY IDEOGRAPH-F954	[FB40 D1DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF954, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_463)
{
    // F954 0062;	
    // (凜) CJK COMPATIBILITY IDEOGRAPH-F954	[FB40 D1DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF954, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_464)
{
    // FA15 0021;	
    // (凞) CJK COMPATIBILITY IDEOGRAPH-FA15	[FB40 D1DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA15, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_465)
{
    // FA15 003F;	
    // (凞) CJK COMPATIBILITY IDEOGRAPH-FA15	[FB40 D1DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA15, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_466)
{
    // FA15 0061;	
    // (凞) CJK COMPATIBILITY IDEOGRAPH-FA15	[FB40 D1DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA15, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_467)
{
    // FA15 0041;	
    // (凞) CJK COMPATIBILITY IDEOGRAPH-FA15	[FB40 D1DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA15, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_468)
{
    // FA15 0062;	
    // (凞) CJK COMPATIBILITY IDEOGRAPH-FA15	[FB40 D1DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA15, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_469)
{
    // 2F0F 0021;	
    // (⼏) KANGXI RADICAL TABLE	[FB40 D1E0 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_470)
{
    // 2E87 0021;	
    // (⺇) CJK RADICAL TABLE	[FB40 D1E0 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E87, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xD1E0, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_471)
{
    // 2F0F 003F;	
    // (⼏) KANGXI RADICAL TABLE	[FB40 D1E0 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_472)
{
    // 2E87 003F;	
    // (⺇) CJK RADICAL TABLE	[FB40 D1E0 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E87, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xD1E0, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_473)
{
    // 2F0F 0061;	
    // (⼏) KANGXI RADICAL TABLE	[FB40 D1E0 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_474)
{
    // 2F0F 0041;	
    // (⼏) KANGXI RADICAL TABLE	[FB40 D1E0 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_475)
{
    // 2E87 0061;	
    // (⺇) CJK RADICAL TABLE	[FB40 D1E0 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E87, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xD1E0, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_476)
{
    // 2E87 0041;	
    // (⺇) CJK RADICAL TABLE	[FB40 D1E0 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E87, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xD1E0, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_477)
{
    // 2F0F 0062;	
    // (⼏) KANGXI RADICAL TABLE	[FB40 D1E0 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_478)
{
    // 2E87 0062;	
    // (⺇) CJK RADICAL TABLE	[FB40 D1E0 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E87, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xD1E0, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_479)
{
    // 2F81D 0021;	
    // (凵) CJK COMPATIBILITY IDEOGRAPH-2F81D	[FB40 D1F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_480)
{
    // 2F10 0021;	
    // (⼐) KANGXI RADICAL OPEN BOX	[FB40 D1F5 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F10, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_481)
{
    // 2F81D 003F;	
    // (凵) CJK COMPATIBILITY IDEOGRAPH-2F81D	[FB40 D1F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_482)
{
    // 2F10 003F;	
    // (⼐) KANGXI RADICAL OPEN BOX	[FB40 D1F5 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F10, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_483)
{
    // 2F81D 0061;	
    // (凵) CJK COMPATIBILITY IDEOGRAPH-2F81D	[FB40 D1F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_484)
{
    // 2F81D 0041;	
    // (凵) CJK COMPATIBILITY IDEOGRAPH-2F81D	[FB40 D1F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F81D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_485)
{
    // 2F10 0061;	
    // (⼐) KANGXI RADICAL OPEN BOX	[FB40 D1F5 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F10, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_486)
{
    // 2F10 0041;	
    // (⼐) KANGXI RADICAL OPEN BOX	[FB40 D1F5 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F10, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_487)
{
    // 2F81D 0062;	
    // (凵) CJK COMPATIBILITY IDEOGRAPH-2F81D	[FB40 D1F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F81D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_488)
{
    // 2F10 0062;	
    // (⼐) KANGXI RADICAL OPEN BOX	[FB40 D1F5 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F10, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD1F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_489)
{
    // 2F11 0021;	
    // (⼑) KANGXI RADICAL KNIFE	[FB40 D200 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F11, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD200, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_490)
{
    // 2E88 0021;	
    // (⺈) CJK RADICAL KNIFE ONE	[FB40 D200 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E88, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xD200, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_491)
{
    // 2F11 003F;	
    // (⼑) KANGXI RADICAL KNIFE	[FB40 D200 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F11, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xD200, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_492)
{
    // 2E88 003F;	
    // (⺈) CJK RADICAL KNIFE ONE	[FB40 D200 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E88, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xD200, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_493)
{
    // 2F11 0061;	
    // (⼑) KANGXI RADICAL KNIFE	[FB40 D200 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F11, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xD200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_494)
{
    // 2F11 0041;	
    // (⼑) KANGXI RADICAL KNIFE	[FB40 D200 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F11, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xD200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_495)
{
    // 2E88 0061;	
    // (⺈) CJK RADICAL KNIFE ONE	[FB40 D200 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E88, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xD200, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_496)
{
    // 2E88 0041;	
    // (⺈) CJK RADICAL KNIFE ONE	[FB40 D200 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E88, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xD200, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_497)
{
    // 2F11 0062;	
    // (⼑) KANGXI RADICAL KNIFE	[FB40 D200 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F11, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xD200, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_498)
{
    // 2E88 0062;	
    // (⺈) CJK RADICAL KNIFE ONE	[FB40 D200 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E88, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xD200, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_314_499)
{
    // 2E89 0021;	
    // (⺉) CJK RADICAL KNIFE TWO	[FB40 D202 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E89, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xD202, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

