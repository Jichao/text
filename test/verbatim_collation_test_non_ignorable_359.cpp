// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_359_000)
{
    // 4076 003F;	
    // (䁶) CJK UNIFIED IDEOGRAPH-4076	[FB80 C076 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4076, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC076, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_001)
{
    // 4076 0061;	
    // (䁶) CJK UNIFIED IDEOGRAPH-4076	[FB80 C076 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4076, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC076, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_002)
{
    // 4076 0041;	
    // (䁶) CJK UNIFIED IDEOGRAPH-4076	[FB80 C076 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4076, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC076, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_003)
{
    // 4076 0062;	
    // (䁶) CJK UNIFIED IDEOGRAPH-4076	[FB80 C076 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4076, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC076, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_004)
{
    // 4077 0021;	
    // (䁷) CJK UNIFIED IDEOGRAPH-4077	[FB80 C077 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4077, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC077, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_005)
{
    // 4077 003F;	
    // (䁷) CJK UNIFIED IDEOGRAPH-4077	[FB80 C077 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4077, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC077, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_006)
{
    // 4077 0061;	
    // (䁷) CJK UNIFIED IDEOGRAPH-4077	[FB80 C077 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4077, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC077, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_007)
{
    // 4077 0041;	
    // (䁷) CJK UNIFIED IDEOGRAPH-4077	[FB80 C077 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4077, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC077, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_008)
{
    // 4077 0062;	
    // (䁷) CJK UNIFIED IDEOGRAPH-4077	[FB80 C077 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4077, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC077, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_009)
{
    // 4078 0021;	
    // (䁸) CJK UNIFIED IDEOGRAPH-4078	[FB80 C078 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4078, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC078, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_010)
{
    // 4078 003F;	
    // (䁸) CJK UNIFIED IDEOGRAPH-4078	[FB80 C078 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4078, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC078, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_011)
{
    // 4078 0061;	
    // (䁸) CJK UNIFIED IDEOGRAPH-4078	[FB80 C078 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4078, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC078, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_012)
{
    // 4078 0041;	
    // (䁸) CJK UNIFIED IDEOGRAPH-4078	[FB80 C078 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4078, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC078, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_013)
{
    // 4078 0062;	
    // (䁸) CJK UNIFIED IDEOGRAPH-4078	[FB80 C078 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4078, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC078, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_014)
{
    // 4079 0021;	
    // (䁹) CJK UNIFIED IDEOGRAPH-4079	[FB80 C079 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4079, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC079, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_015)
{
    // 4079 003F;	
    // (䁹) CJK UNIFIED IDEOGRAPH-4079	[FB80 C079 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4079, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC079, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_016)
{
    // 4079 0061;	
    // (䁹) CJK UNIFIED IDEOGRAPH-4079	[FB80 C079 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4079, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC079, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_017)
{
    // 4079 0041;	
    // (䁹) CJK UNIFIED IDEOGRAPH-4079	[FB80 C079 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4079, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC079, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_018)
{
    // 4079 0062;	
    // (䁹) CJK UNIFIED IDEOGRAPH-4079	[FB80 C079 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4079, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC079, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_019)
{
    // 407A 0021;	
    // (䁺) CJK UNIFIED IDEOGRAPH-407A	[FB80 C07A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC07A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_020)
{
    // 407A 003F;	
    // (䁺) CJK UNIFIED IDEOGRAPH-407A	[FB80 C07A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC07A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_021)
{
    // 407A 0061;	
    // (䁺) CJK UNIFIED IDEOGRAPH-407A	[FB80 C07A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC07A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_022)
{
    // 407A 0041;	
    // (䁺) CJK UNIFIED IDEOGRAPH-407A	[FB80 C07A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x407A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC07A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_023)
{
    // 407A 0062;	
    // (䁺) CJK UNIFIED IDEOGRAPH-407A	[FB80 C07A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC07A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_024)
{
    // 407B 0021;	
    // (䁻) CJK UNIFIED IDEOGRAPH-407B	[FB80 C07B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC07B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_025)
{
    // 407B 003F;	
    // (䁻) CJK UNIFIED IDEOGRAPH-407B	[FB80 C07B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC07B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_026)
{
    // 407B 0061;	
    // (䁻) CJK UNIFIED IDEOGRAPH-407B	[FB80 C07B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC07B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_027)
{
    // 407B 0041;	
    // (䁻) CJK UNIFIED IDEOGRAPH-407B	[FB80 C07B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x407B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC07B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_028)
{
    // 407B 0062;	
    // (䁻) CJK UNIFIED IDEOGRAPH-407B	[FB80 C07B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC07B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_029)
{
    // 407C 0021;	
    // (䁼) CJK UNIFIED IDEOGRAPH-407C	[FB80 C07C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC07C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_030)
{
    // 407C 003F;	
    // (䁼) CJK UNIFIED IDEOGRAPH-407C	[FB80 C07C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC07C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_031)
{
    // 407C 0061;	
    // (䁼) CJK UNIFIED IDEOGRAPH-407C	[FB80 C07C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC07C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_032)
{
    // 407C 0041;	
    // (䁼) CJK UNIFIED IDEOGRAPH-407C	[FB80 C07C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x407C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC07C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_033)
{
    // 407C 0062;	
    // (䁼) CJK UNIFIED IDEOGRAPH-407C	[FB80 C07C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC07C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_034)
{
    // 407D 0021;	
    // (䁽) CJK UNIFIED IDEOGRAPH-407D	[FB80 C07D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC07D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_035)
{
    // 407D 003F;	
    // (䁽) CJK UNIFIED IDEOGRAPH-407D	[FB80 C07D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC07D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_036)
{
    // 407D 0061;	
    // (䁽) CJK UNIFIED IDEOGRAPH-407D	[FB80 C07D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC07D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_037)
{
    // 407D 0041;	
    // (䁽) CJK UNIFIED IDEOGRAPH-407D	[FB80 C07D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x407D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC07D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_038)
{
    // 407D 0062;	
    // (䁽) CJK UNIFIED IDEOGRAPH-407D	[FB80 C07D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC07D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_039)
{
    // 407E 0021;	
    // (䁾) CJK UNIFIED IDEOGRAPH-407E	[FB80 C07E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC07E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_040)
{
    // 407E 003F;	
    // (䁾) CJK UNIFIED IDEOGRAPH-407E	[FB80 C07E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC07E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_041)
{
    // 407E 0061;	
    // (䁾) CJK UNIFIED IDEOGRAPH-407E	[FB80 C07E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC07E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_042)
{
    // 407E 0041;	
    // (䁾) CJK UNIFIED IDEOGRAPH-407E	[FB80 C07E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x407E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC07E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_043)
{
    // 407E 0062;	
    // (䁾) CJK UNIFIED IDEOGRAPH-407E	[FB80 C07E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC07E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_044)
{
    // 407F 0021;	
    // (䁿) CJK UNIFIED IDEOGRAPH-407F	[FB80 C07F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC07F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_045)
{
    // 407F 003F;	
    // (䁿) CJK UNIFIED IDEOGRAPH-407F	[FB80 C07F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC07F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_046)
{
    // 407F 0061;	
    // (䁿) CJK UNIFIED IDEOGRAPH-407F	[FB80 C07F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC07F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_047)
{
    // 407F 0041;	
    // (䁿) CJK UNIFIED IDEOGRAPH-407F	[FB80 C07F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x407F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC07F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_048)
{
    // 407F 0062;	
    // (䁿) CJK UNIFIED IDEOGRAPH-407F	[FB80 C07F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x407F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC07F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_049)
{
    // 4080 0021;	
    // (䂀) CJK UNIFIED IDEOGRAPH-4080	[FB80 C080 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4080, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC080, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_050)
{
    // 4080 003F;	
    // (䂀) CJK UNIFIED IDEOGRAPH-4080	[FB80 C080 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4080, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC080, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_051)
{
    // 4080 0061;	
    // (䂀) CJK UNIFIED IDEOGRAPH-4080	[FB80 C080 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4080, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC080, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_052)
{
    // 4080 0041;	
    // (䂀) CJK UNIFIED IDEOGRAPH-4080	[FB80 C080 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4080, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC080, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_053)
{
    // 4080 0062;	
    // (䂀) CJK UNIFIED IDEOGRAPH-4080	[FB80 C080 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4080, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC080, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_054)
{
    // 4081 0021;	
    // (䂁) CJK UNIFIED IDEOGRAPH-4081	[FB80 C081 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4081, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC081, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_055)
{
    // 4081 003F;	
    // (䂁) CJK UNIFIED IDEOGRAPH-4081	[FB80 C081 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4081, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC081, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_056)
{
    // 4081 0061;	
    // (䂁) CJK UNIFIED IDEOGRAPH-4081	[FB80 C081 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4081, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC081, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_057)
{
    // 4081 0041;	
    // (䂁) CJK UNIFIED IDEOGRAPH-4081	[FB80 C081 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4081, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC081, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_058)
{
    // 4081 0062;	
    // (䂁) CJK UNIFIED IDEOGRAPH-4081	[FB80 C081 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4081, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC081, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_059)
{
    // 4082 0021;	
    // (䂂) CJK UNIFIED IDEOGRAPH-4082	[FB80 C082 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4082, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC082, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_060)
{
    // 4082 003F;	
    // (䂂) CJK UNIFIED IDEOGRAPH-4082	[FB80 C082 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4082, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC082, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_061)
{
    // 4082 0061;	
    // (䂂) CJK UNIFIED IDEOGRAPH-4082	[FB80 C082 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4082, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC082, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_062)
{
    // 4082 0041;	
    // (䂂) CJK UNIFIED IDEOGRAPH-4082	[FB80 C082 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4082, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC082, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_063)
{
    // 4082 0062;	
    // (䂂) CJK UNIFIED IDEOGRAPH-4082	[FB80 C082 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4082, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC082, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_064)
{
    // 4083 0021;	
    // (䂃) CJK UNIFIED IDEOGRAPH-4083	[FB80 C083 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4083, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC083, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_065)
{
    // 4083 003F;	
    // (䂃) CJK UNIFIED IDEOGRAPH-4083	[FB80 C083 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4083, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC083, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_066)
{
    // 4083 0061;	
    // (䂃) CJK UNIFIED IDEOGRAPH-4083	[FB80 C083 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4083, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC083, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_067)
{
    // 4083 0041;	
    // (䂃) CJK UNIFIED IDEOGRAPH-4083	[FB80 C083 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4083, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC083, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_068)
{
    // 4083 0062;	
    // (䂃) CJK UNIFIED IDEOGRAPH-4083	[FB80 C083 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4083, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC083, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_069)
{
    // 4084 0021;	
    // (䂄) CJK UNIFIED IDEOGRAPH-4084	[FB80 C084 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4084, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC084, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_070)
{
    // 4084 003F;	
    // (䂄) CJK UNIFIED IDEOGRAPH-4084	[FB80 C084 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4084, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC084, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_071)
{
    // 4084 0061;	
    // (䂄) CJK UNIFIED IDEOGRAPH-4084	[FB80 C084 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4084, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC084, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_072)
{
    // 4084 0041;	
    // (䂄) CJK UNIFIED IDEOGRAPH-4084	[FB80 C084 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4084, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC084, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_073)
{
    // 4084 0062;	
    // (䂄) CJK UNIFIED IDEOGRAPH-4084	[FB80 C084 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4084, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC084, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_074)
{
    // 4085 0021;	
    // (䂅) CJK UNIFIED IDEOGRAPH-4085	[FB80 C085 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4085, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC085, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_075)
{
    // 4085 003F;	
    // (䂅) CJK UNIFIED IDEOGRAPH-4085	[FB80 C085 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4085, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC085, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_076)
{
    // 4085 0061;	
    // (䂅) CJK UNIFIED IDEOGRAPH-4085	[FB80 C085 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4085, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC085, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_077)
{
    // 4085 0041;	
    // (䂅) CJK UNIFIED IDEOGRAPH-4085	[FB80 C085 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4085, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC085, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_078)
{
    // 4085 0062;	
    // (䂅) CJK UNIFIED IDEOGRAPH-4085	[FB80 C085 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4085, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC085, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_079)
{
    // 4086 0021;	
    // (䂆) CJK UNIFIED IDEOGRAPH-4086	[FB80 C086 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4086, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC086, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_080)
{
    // 4086 003F;	
    // (䂆) CJK UNIFIED IDEOGRAPH-4086	[FB80 C086 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4086, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC086, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_081)
{
    // 4086 0061;	
    // (䂆) CJK UNIFIED IDEOGRAPH-4086	[FB80 C086 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4086, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC086, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_082)
{
    // 4086 0041;	
    // (䂆) CJK UNIFIED IDEOGRAPH-4086	[FB80 C086 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4086, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC086, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_083)
{
    // 4086 0062;	
    // (䂆) CJK UNIFIED IDEOGRAPH-4086	[FB80 C086 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4086, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC086, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_084)
{
    // 4087 0021;	
    // (䂇) CJK UNIFIED IDEOGRAPH-4087	[FB80 C087 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4087, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC087, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_085)
{
    // 4087 003F;	
    // (䂇) CJK UNIFIED IDEOGRAPH-4087	[FB80 C087 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4087, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC087, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_086)
{
    // 4087 0061;	
    // (䂇) CJK UNIFIED IDEOGRAPH-4087	[FB80 C087 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4087, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC087, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_087)
{
    // 4087 0041;	
    // (䂇) CJK UNIFIED IDEOGRAPH-4087	[FB80 C087 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4087, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC087, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_088)
{
    // 4087 0062;	
    // (䂇) CJK UNIFIED IDEOGRAPH-4087	[FB80 C087 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4087, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC087, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_089)
{
    // 4088 0021;	
    // (䂈) CJK UNIFIED IDEOGRAPH-4088	[FB80 C088 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4088, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC088, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_090)
{
    // 4088 003F;	
    // (䂈) CJK UNIFIED IDEOGRAPH-4088	[FB80 C088 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4088, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC088, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_091)
{
    // 4088 0061;	
    // (䂈) CJK UNIFIED IDEOGRAPH-4088	[FB80 C088 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4088, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_092)
{
    // 4088 0041;	
    // (䂈) CJK UNIFIED IDEOGRAPH-4088	[FB80 C088 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4088, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_093)
{
    // 4088 0062;	
    // (䂈) CJK UNIFIED IDEOGRAPH-4088	[FB80 C088 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4088, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC088, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_094)
{
    // 4089 0021;	
    // (䂉) CJK UNIFIED IDEOGRAPH-4089	[FB80 C089 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4089, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC089, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_095)
{
    // 4089 003F;	
    // (䂉) CJK UNIFIED IDEOGRAPH-4089	[FB80 C089 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4089, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC089, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_096)
{
    // 4089 0061;	
    // (䂉) CJK UNIFIED IDEOGRAPH-4089	[FB80 C089 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4089, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC089, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_097)
{
    // 4089 0041;	
    // (䂉) CJK UNIFIED IDEOGRAPH-4089	[FB80 C089 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4089, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC089, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_098)
{
    // 4089 0062;	
    // (䂉) CJK UNIFIED IDEOGRAPH-4089	[FB80 C089 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4089, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC089, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_099)
{
    // 408A 0021;	
    // (䂊) CJK UNIFIED IDEOGRAPH-408A	[FB80 C08A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC08A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_100)
{
    // 408A 003F;	
    // (䂊) CJK UNIFIED IDEOGRAPH-408A	[FB80 C08A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC08A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_101)
{
    // 408A 0061;	
    // (䂊) CJK UNIFIED IDEOGRAPH-408A	[FB80 C08A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC08A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_102)
{
    // 408A 0041;	
    // (䂊) CJK UNIFIED IDEOGRAPH-408A	[FB80 C08A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x408A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC08A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_103)
{
    // 408A 0062;	
    // (䂊) CJK UNIFIED IDEOGRAPH-408A	[FB80 C08A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC08A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_104)
{
    // 408B 0021;	
    // (䂋) CJK UNIFIED IDEOGRAPH-408B	[FB80 C08B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC08B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_105)
{
    // 408B 003F;	
    // (䂋) CJK UNIFIED IDEOGRAPH-408B	[FB80 C08B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC08B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_106)
{
    // 408B 0061;	
    // (䂋) CJK UNIFIED IDEOGRAPH-408B	[FB80 C08B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC08B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_107)
{
    // 408B 0041;	
    // (䂋) CJK UNIFIED IDEOGRAPH-408B	[FB80 C08B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x408B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC08B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_108)
{
    // 408B 0062;	
    // (䂋) CJK UNIFIED IDEOGRAPH-408B	[FB80 C08B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC08B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_109)
{
    // 408C 0021;	
    // (䂌) CJK UNIFIED IDEOGRAPH-408C	[FB80 C08C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC08C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_110)
{
    // 408C 003F;	
    // (䂌) CJK UNIFIED IDEOGRAPH-408C	[FB80 C08C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC08C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_111)
{
    // 408C 0061;	
    // (䂌) CJK UNIFIED IDEOGRAPH-408C	[FB80 C08C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC08C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_112)
{
    // 408C 0041;	
    // (䂌) CJK UNIFIED IDEOGRAPH-408C	[FB80 C08C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x408C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC08C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_113)
{
    // 408C 0062;	
    // (䂌) CJK UNIFIED IDEOGRAPH-408C	[FB80 C08C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC08C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_114)
{
    // 408D 0021;	
    // (䂍) CJK UNIFIED IDEOGRAPH-408D	[FB80 C08D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC08D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_115)
{
    // 408D 003F;	
    // (䂍) CJK UNIFIED IDEOGRAPH-408D	[FB80 C08D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC08D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_116)
{
    // 408D 0061;	
    // (䂍) CJK UNIFIED IDEOGRAPH-408D	[FB80 C08D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC08D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_117)
{
    // 408D 0041;	
    // (䂍) CJK UNIFIED IDEOGRAPH-408D	[FB80 C08D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x408D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC08D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_118)
{
    // 408D 0062;	
    // (䂍) CJK UNIFIED IDEOGRAPH-408D	[FB80 C08D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC08D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_119)
{
    // 408E 0021;	
    // (䂎) CJK UNIFIED IDEOGRAPH-408E	[FB80 C08E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC08E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_120)
{
    // 408E 003F;	
    // (䂎) CJK UNIFIED IDEOGRAPH-408E	[FB80 C08E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC08E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_121)
{
    // 408E 0061;	
    // (䂎) CJK UNIFIED IDEOGRAPH-408E	[FB80 C08E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC08E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_122)
{
    // 408E 0041;	
    // (䂎) CJK UNIFIED IDEOGRAPH-408E	[FB80 C08E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x408E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC08E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_123)
{
    // 408E 0062;	
    // (䂎) CJK UNIFIED IDEOGRAPH-408E	[FB80 C08E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC08E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_124)
{
    // 408F 0021;	
    // (䂏) CJK UNIFIED IDEOGRAPH-408F	[FB80 C08F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC08F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_125)
{
    // 408F 003F;	
    // (䂏) CJK UNIFIED IDEOGRAPH-408F	[FB80 C08F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC08F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_126)
{
    // 408F 0061;	
    // (䂏) CJK UNIFIED IDEOGRAPH-408F	[FB80 C08F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC08F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_127)
{
    // 408F 0041;	
    // (䂏) CJK UNIFIED IDEOGRAPH-408F	[FB80 C08F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x408F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC08F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_128)
{
    // 408F 0062;	
    // (䂏) CJK UNIFIED IDEOGRAPH-408F	[FB80 C08F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x408F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC08F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_129)
{
    // 4090 0021;	
    // (䂐) CJK UNIFIED IDEOGRAPH-4090	[FB80 C090 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4090, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC090, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_130)
{
    // 4090 003F;	
    // (䂐) CJK UNIFIED IDEOGRAPH-4090	[FB80 C090 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4090, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC090, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_131)
{
    // 4090 0061;	
    // (䂐) CJK UNIFIED IDEOGRAPH-4090	[FB80 C090 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4090, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_132)
{
    // 4090 0041;	
    // (䂐) CJK UNIFIED IDEOGRAPH-4090	[FB80 C090 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4090, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_133)
{
    // 4090 0062;	
    // (䂐) CJK UNIFIED IDEOGRAPH-4090	[FB80 C090 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4090, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC090, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_134)
{
    // 4091 0021;	
    // (䂑) CJK UNIFIED IDEOGRAPH-4091	[FB80 C091 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4091, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC091, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_135)
{
    // 4091 003F;	
    // (䂑) CJK UNIFIED IDEOGRAPH-4091	[FB80 C091 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4091, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC091, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_136)
{
    // 4091 0061;	
    // (䂑) CJK UNIFIED IDEOGRAPH-4091	[FB80 C091 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4091, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC091, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_137)
{
    // 4091 0041;	
    // (䂑) CJK UNIFIED IDEOGRAPH-4091	[FB80 C091 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4091, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC091, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_138)
{
    // 4091 0062;	
    // (䂑) CJK UNIFIED IDEOGRAPH-4091	[FB80 C091 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4091, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC091, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_139)
{
    // 4092 0021;	
    // (䂒) CJK UNIFIED IDEOGRAPH-4092	[FB80 C092 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4092, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC092, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_140)
{
    // 4092 003F;	
    // (䂒) CJK UNIFIED IDEOGRAPH-4092	[FB80 C092 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4092, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC092, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_141)
{
    // 4092 0061;	
    // (䂒) CJK UNIFIED IDEOGRAPH-4092	[FB80 C092 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4092, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC092, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_142)
{
    // 4092 0041;	
    // (䂒) CJK UNIFIED IDEOGRAPH-4092	[FB80 C092 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4092, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC092, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_143)
{
    // 4092 0062;	
    // (䂒) CJK UNIFIED IDEOGRAPH-4092	[FB80 C092 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4092, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC092, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_144)
{
    // 4093 0021;	
    // (䂓) CJK UNIFIED IDEOGRAPH-4093	[FB80 C093 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4093, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC093, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_145)
{
    // 4093 003F;	
    // (䂓) CJK UNIFIED IDEOGRAPH-4093	[FB80 C093 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4093, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC093, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_146)
{
    // 4093 0061;	
    // (䂓) CJK UNIFIED IDEOGRAPH-4093	[FB80 C093 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4093, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC093, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_147)
{
    // 4093 0041;	
    // (䂓) CJK UNIFIED IDEOGRAPH-4093	[FB80 C093 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4093, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC093, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_148)
{
    // 4093 0062;	
    // (䂓) CJK UNIFIED IDEOGRAPH-4093	[FB80 C093 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4093, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC093, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_149)
{
    // 4094 0021;	
    // (䂔) CJK UNIFIED IDEOGRAPH-4094	[FB80 C094 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4094, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC094, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_150)
{
    // 4094 003F;	
    // (䂔) CJK UNIFIED IDEOGRAPH-4094	[FB80 C094 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4094, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC094, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_151)
{
    // 4094 0061;	
    // (䂔) CJK UNIFIED IDEOGRAPH-4094	[FB80 C094 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4094, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_152)
{
    // 4094 0041;	
    // (䂔) CJK UNIFIED IDEOGRAPH-4094	[FB80 C094 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4094, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_153)
{
    // 4094 0062;	
    // (䂔) CJK UNIFIED IDEOGRAPH-4094	[FB80 C094 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4094, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC094, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_154)
{
    // 4095 0021;	
    // (䂕) CJK UNIFIED IDEOGRAPH-4095	[FB80 C095 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4095, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC095, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_155)
{
    // 4095 003F;	
    // (䂕) CJK UNIFIED IDEOGRAPH-4095	[FB80 C095 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4095, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC095, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_156)
{
    // 4095 0061;	
    // (䂕) CJK UNIFIED IDEOGRAPH-4095	[FB80 C095 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4095, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC095, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_157)
{
    // 4095 0041;	
    // (䂕) CJK UNIFIED IDEOGRAPH-4095	[FB80 C095 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4095, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC095, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_158)
{
    // 4095 0062;	
    // (䂕) CJK UNIFIED IDEOGRAPH-4095	[FB80 C095 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4095, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC095, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_159)
{
    // 4096 0021;	
    // (䂖) CJK UNIFIED IDEOGRAPH-4096	[FB80 C096 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4096, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_160)
{
    // 2F94C 0021;	
    // (䂖) CJK COMPATIBILITY IDEOGRAPH-2F94C	[FB80 C096 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_161)
{
    // 4096 003F;	
    // (䂖) CJK UNIFIED IDEOGRAPH-4096	[FB80 C096 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4096, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_162)
{
    // 2F94C 003F;	
    // (䂖) CJK COMPATIBILITY IDEOGRAPH-2F94C	[FB80 C096 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_163)
{
    // 4096 0061;	
    // (䂖) CJK UNIFIED IDEOGRAPH-4096	[FB80 C096 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4096, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_164)
{
    // 2F94C 0061;	
    // (䂖) CJK COMPATIBILITY IDEOGRAPH-2F94C	[FB80 C096 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_165)
{
    // 4096 0041;	
    // (䂖) CJK UNIFIED IDEOGRAPH-4096	[FB80 C096 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4096, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_166)
{
    // 2F94C 0041;	
    // (䂖) CJK COMPATIBILITY IDEOGRAPH-2F94C	[FB80 C096 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F94C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_167)
{
    // 4096 0062;	
    // (䂖) CJK UNIFIED IDEOGRAPH-4096	[FB80 C096 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4096, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_168)
{
    // 2F94C 0062;	
    // (䂖) CJK COMPATIBILITY IDEOGRAPH-2F94C	[FB80 C096 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC096, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_169)
{
    // 4097 0021;	
    // (䂗) CJK UNIFIED IDEOGRAPH-4097	[FB80 C097 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4097, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC097, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_170)
{
    // 4097 003F;	
    // (䂗) CJK UNIFIED IDEOGRAPH-4097	[FB80 C097 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4097, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC097, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_171)
{
    // 4097 0061;	
    // (䂗) CJK UNIFIED IDEOGRAPH-4097	[FB80 C097 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4097, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC097, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_172)
{
    // 4097 0041;	
    // (䂗) CJK UNIFIED IDEOGRAPH-4097	[FB80 C097 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4097, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC097, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_173)
{
    // 4097 0062;	
    // (䂗) CJK UNIFIED IDEOGRAPH-4097	[FB80 C097 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4097, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC097, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_174)
{
    // 4098 0021;	
    // (䂘) CJK UNIFIED IDEOGRAPH-4098	[FB80 C098 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4098, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC098, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_175)
{
    // 4098 003F;	
    // (䂘) CJK UNIFIED IDEOGRAPH-4098	[FB80 C098 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4098, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC098, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_176)
{
    // 4098 0061;	
    // (䂘) CJK UNIFIED IDEOGRAPH-4098	[FB80 C098 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4098, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_177)
{
    // 4098 0041;	
    // (䂘) CJK UNIFIED IDEOGRAPH-4098	[FB80 C098 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4098, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_178)
{
    // 4098 0062;	
    // (䂘) CJK UNIFIED IDEOGRAPH-4098	[FB80 C098 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4098, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC098, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_179)
{
    // 4099 0021;	
    // (䂙) CJK UNIFIED IDEOGRAPH-4099	[FB80 C099 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4099, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC099, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_180)
{
    // 4099 003F;	
    // (䂙) CJK UNIFIED IDEOGRAPH-4099	[FB80 C099 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4099, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC099, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_181)
{
    // 4099 0061;	
    // (䂙) CJK UNIFIED IDEOGRAPH-4099	[FB80 C099 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4099, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_182)
{
    // 4099 0041;	
    // (䂙) CJK UNIFIED IDEOGRAPH-4099	[FB80 C099 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4099, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_183)
{
    // 4099 0062;	
    // (䂙) CJK UNIFIED IDEOGRAPH-4099	[FB80 C099 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4099, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC099, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_184)
{
    // 409A 0021;	
    // (䂚) CJK UNIFIED IDEOGRAPH-409A	[FB80 C09A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC09A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_185)
{
    // 409A 003F;	
    // (䂚) CJK UNIFIED IDEOGRAPH-409A	[FB80 C09A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC09A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_186)
{
    // 409A 0061;	
    // (䂚) CJK UNIFIED IDEOGRAPH-409A	[FB80 C09A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC09A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_187)
{
    // 409A 0041;	
    // (䂚) CJK UNIFIED IDEOGRAPH-409A	[FB80 C09A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x409A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC09A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_188)
{
    // 409A 0062;	
    // (䂚) CJK UNIFIED IDEOGRAPH-409A	[FB80 C09A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC09A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_189)
{
    // 409B 0021;	
    // (䂛) CJK UNIFIED IDEOGRAPH-409B	[FB80 C09B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC09B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_190)
{
    // 409B 003F;	
    // (䂛) CJK UNIFIED IDEOGRAPH-409B	[FB80 C09B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC09B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_191)
{
    // 409B 0061;	
    // (䂛) CJK UNIFIED IDEOGRAPH-409B	[FB80 C09B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC09B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_192)
{
    // 409B 0041;	
    // (䂛) CJK UNIFIED IDEOGRAPH-409B	[FB80 C09B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x409B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC09B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_193)
{
    // 409B 0062;	
    // (䂛) CJK UNIFIED IDEOGRAPH-409B	[FB80 C09B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC09B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_194)
{
    // 409C 0021;	
    // (䂜) CJK UNIFIED IDEOGRAPH-409C	[FB80 C09C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC09C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_195)
{
    // 409C 003F;	
    // (䂜) CJK UNIFIED IDEOGRAPH-409C	[FB80 C09C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC09C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_196)
{
    // 409C 0061;	
    // (䂜) CJK UNIFIED IDEOGRAPH-409C	[FB80 C09C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC09C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_197)
{
    // 409C 0041;	
    // (䂜) CJK UNIFIED IDEOGRAPH-409C	[FB80 C09C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x409C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC09C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_198)
{
    // 409C 0062;	
    // (䂜) CJK UNIFIED IDEOGRAPH-409C	[FB80 C09C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC09C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_199)
{
    // 409D 0021;	
    // (䂝) CJK UNIFIED IDEOGRAPH-409D	[FB80 C09D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC09D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_200)
{
    // 409D 003F;	
    // (䂝) CJK UNIFIED IDEOGRAPH-409D	[FB80 C09D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC09D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_201)
{
    // 409D 0061;	
    // (䂝) CJK UNIFIED IDEOGRAPH-409D	[FB80 C09D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC09D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_202)
{
    // 409D 0041;	
    // (䂝) CJK UNIFIED IDEOGRAPH-409D	[FB80 C09D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x409D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC09D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_203)
{
    // 409D 0062;	
    // (䂝) CJK UNIFIED IDEOGRAPH-409D	[FB80 C09D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC09D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_204)
{
    // 409E 0021;	
    // (䂞) CJK UNIFIED IDEOGRAPH-409E	[FB80 C09E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC09E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_205)
{
    // 409E 003F;	
    // (䂞) CJK UNIFIED IDEOGRAPH-409E	[FB80 C09E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC09E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_206)
{
    // 409E 0061;	
    // (䂞) CJK UNIFIED IDEOGRAPH-409E	[FB80 C09E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC09E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_207)
{
    // 409E 0041;	
    // (䂞) CJK UNIFIED IDEOGRAPH-409E	[FB80 C09E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x409E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC09E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_208)
{
    // 409E 0062;	
    // (䂞) CJK UNIFIED IDEOGRAPH-409E	[FB80 C09E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC09E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_209)
{
    // 409F 0021;	
    // (䂟) CJK UNIFIED IDEOGRAPH-409F	[FB80 C09F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC09F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_210)
{
    // 409F 003F;	
    // (䂟) CJK UNIFIED IDEOGRAPH-409F	[FB80 C09F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC09F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_211)
{
    // 409F 0061;	
    // (䂟) CJK UNIFIED IDEOGRAPH-409F	[FB80 C09F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC09F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_212)
{
    // 409F 0041;	
    // (䂟) CJK UNIFIED IDEOGRAPH-409F	[FB80 C09F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x409F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC09F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_213)
{
    // 409F 0062;	
    // (䂟) CJK UNIFIED IDEOGRAPH-409F	[FB80 C09F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x409F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC09F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_214)
{
    // 40A0 0021;	
    // (䂠) CJK UNIFIED IDEOGRAPH-40A0	[FB80 C0A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_215)
{
    // 40A0 003F;	
    // (䂠) CJK UNIFIED IDEOGRAPH-40A0	[FB80 C0A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_216)
{
    // 40A0 0061;	
    // (䂠) CJK UNIFIED IDEOGRAPH-40A0	[FB80 C0A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_217)
{
    // 40A0 0041;	
    // (䂠) CJK UNIFIED IDEOGRAPH-40A0	[FB80 C0A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_218)
{
    // 40A0 0062;	
    // (䂠) CJK UNIFIED IDEOGRAPH-40A0	[FB80 C0A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_219)
{
    // 40A1 0021;	
    // (䂡) CJK UNIFIED IDEOGRAPH-40A1	[FB80 C0A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_220)
{
    // 40A1 003F;	
    // (䂡) CJK UNIFIED IDEOGRAPH-40A1	[FB80 C0A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_221)
{
    // 40A1 0061;	
    // (䂡) CJK UNIFIED IDEOGRAPH-40A1	[FB80 C0A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_222)
{
    // 40A1 0041;	
    // (䂡) CJK UNIFIED IDEOGRAPH-40A1	[FB80 C0A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_223)
{
    // 40A1 0062;	
    // (䂡) CJK UNIFIED IDEOGRAPH-40A1	[FB80 C0A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_224)
{
    // 40A2 0021;	
    // (䂢) CJK UNIFIED IDEOGRAPH-40A2	[FB80 C0A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_225)
{
    // 40A2 003F;	
    // (䂢) CJK UNIFIED IDEOGRAPH-40A2	[FB80 C0A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_226)
{
    // 40A2 0061;	
    // (䂢) CJK UNIFIED IDEOGRAPH-40A2	[FB80 C0A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_227)
{
    // 40A2 0041;	
    // (䂢) CJK UNIFIED IDEOGRAPH-40A2	[FB80 C0A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_228)
{
    // 40A2 0062;	
    // (䂢) CJK UNIFIED IDEOGRAPH-40A2	[FB80 C0A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_229)
{
    // 40A3 0021;	
    // (䂣) CJK UNIFIED IDEOGRAPH-40A3	[FB80 C0A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_230)
{
    // 40A3 003F;	
    // (䂣) CJK UNIFIED IDEOGRAPH-40A3	[FB80 C0A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_231)
{
    // 40A3 0061;	
    // (䂣) CJK UNIFIED IDEOGRAPH-40A3	[FB80 C0A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_232)
{
    // 40A3 0041;	
    // (䂣) CJK UNIFIED IDEOGRAPH-40A3	[FB80 C0A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_233)
{
    // 40A3 0062;	
    // (䂣) CJK UNIFIED IDEOGRAPH-40A3	[FB80 C0A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_234)
{
    // 40A4 0021;	
    // (䂤) CJK UNIFIED IDEOGRAPH-40A4	[FB80 C0A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_235)
{
    // 40A4 003F;	
    // (䂤) CJK UNIFIED IDEOGRAPH-40A4	[FB80 C0A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_236)
{
    // 40A4 0061;	
    // (䂤) CJK UNIFIED IDEOGRAPH-40A4	[FB80 C0A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_237)
{
    // 40A4 0041;	
    // (䂤) CJK UNIFIED IDEOGRAPH-40A4	[FB80 C0A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_238)
{
    // 40A4 0062;	
    // (䂤) CJK UNIFIED IDEOGRAPH-40A4	[FB80 C0A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_239)
{
    // 40A5 0021;	
    // (䂥) CJK UNIFIED IDEOGRAPH-40A5	[FB80 C0A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_240)
{
    // 40A5 003F;	
    // (䂥) CJK UNIFIED IDEOGRAPH-40A5	[FB80 C0A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_241)
{
    // 40A5 0061;	
    // (䂥) CJK UNIFIED IDEOGRAPH-40A5	[FB80 C0A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_242)
{
    // 40A5 0041;	
    // (䂥) CJK UNIFIED IDEOGRAPH-40A5	[FB80 C0A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_243)
{
    // 40A5 0062;	
    // (䂥) CJK UNIFIED IDEOGRAPH-40A5	[FB80 C0A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_244)
{
    // 40A6 0021;	
    // (䂦) CJK UNIFIED IDEOGRAPH-40A6	[FB80 C0A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_245)
{
    // 40A6 003F;	
    // (䂦) CJK UNIFIED IDEOGRAPH-40A6	[FB80 C0A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_246)
{
    // 40A6 0061;	
    // (䂦) CJK UNIFIED IDEOGRAPH-40A6	[FB80 C0A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_247)
{
    // 40A6 0041;	
    // (䂦) CJK UNIFIED IDEOGRAPH-40A6	[FB80 C0A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_248)
{
    // 40A6 0062;	
    // (䂦) CJK UNIFIED IDEOGRAPH-40A6	[FB80 C0A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_249)
{
    // 40A7 0021;	
    // (䂧) CJK UNIFIED IDEOGRAPH-40A7	[FB80 C0A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_250)
{
    // 40A7 003F;	
    // (䂧) CJK UNIFIED IDEOGRAPH-40A7	[FB80 C0A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_251)
{
    // 40A7 0061;	
    // (䂧) CJK UNIFIED IDEOGRAPH-40A7	[FB80 C0A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_252)
{
    // 40A7 0041;	
    // (䂧) CJK UNIFIED IDEOGRAPH-40A7	[FB80 C0A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_253)
{
    // 40A7 0062;	
    // (䂧) CJK UNIFIED IDEOGRAPH-40A7	[FB80 C0A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_254)
{
    // 40A8 0021;	
    // (䂨) CJK UNIFIED IDEOGRAPH-40A8	[FB80 C0A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_255)
{
    // 40A8 003F;	
    // (䂨) CJK UNIFIED IDEOGRAPH-40A8	[FB80 C0A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_256)
{
    // 40A8 0061;	
    // (䂨) CJK UNIFIED IDEOGRAPH-40A8	[FB80 C0A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_257)
{
    // 40A8 0041;	
    // (䂨) CJK UNIFIED IDEOGRAPH-40A8	[FB80 C0A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_258)
{
    // 40A8 0062;	
    // (䂨) CJK UNIFIED IDEOGRAPH-40A8	[FB80 C0A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_259)
{
    // 40A9 0021;	
    // (䂩) CJK UNIFIED IDEOGRAPH-40A9	[FB80 C0A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_260)
{
    // 40A9 003F;	
    // (䂩) CJK UNIFIED IDEOGRAPH-40A9	[FB80 C0A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_261)
{
    // 40A9 0061;	
    // (䂩) CJK UNIFIED IDEOGRAPH-40A9	[FB80 C0A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_262)
{
    // 40A9 0041;	
    // (䂩) CJK UNIFIED IDEOGRAPH-40A9	[FB80 C0A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_263)
{
    // 40A9 0062;	
    // (䂩) CJK UNIFIED IDEOGRAPH-40A9	[FB80 C0A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_264)
{
    // 40AA 0021;	
    // (䂪) CJK UNIFIED IDEOGRAPH-40AA	[FB80 C0AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_265)
{
    // 40AA 003F;	
    // (䂪) CJK UNIFIED IDEOGRAPH-40AA	[FB80 C0AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_266)
{
    // 40AA 0061;	
    // (䂪) CJK UNIFIED IDEOGRAPH-40AA	[FB80 C0AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_267)
{
    // 40AA 0041;	
    // (䂪) CJK UNIFIED IDEOGRAPH-40AA	[FB80 C0AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_268)
{
    // 40AA 0062;	
    // (䂪) CJK UNIFIED IDEOGRAPH-40AA	[FB80 C0AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_269)
{
    // 40AB 0021;	
    // (䂫) CJK UNIFIED IDEOGRAPH-40AB	[FB80 C0AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_270)
{
    // 40AB 003F;	
    // (䂫) CJK UNIFIED IDEOGRAPH-40AB	[FB80 C0AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_271)
{
    // 40AB 0061;	
    // (䂫) CJK UNIFIED IDEOGRAPH-40AB	[FB80 C0AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_272)
{
    // 40AB 0041;	
    // (䂫) CJK UNIFIED IDEOGRAPH-40AB	[FB80 C0AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_273)
{
    // 40AB 0062;	
    // (䂫) CJK UNIFIED IDEOGRAPH-40AB	[FB80 C0AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_274)
{
    // 40AC 0021;	
    // (䂬) CJK UNIFIED IDEOGRAPH-40AC	[FB80 C0AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_275)
{
    // 40AC 003F;	
    // (䂬) CJK UNIFIED IDEOGRAPH-40AC	[FB80 C0AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_276)
{
    // 40AC 0061;	
    // (䂬) CJK UNIFIED IDEOGRAPH-40AC	[FB80 C0AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_277)
{
    // 40AC 0041;	
    // (䂬) CJK UNIFIED IDEOGRAPH-40AC	[FB80 C0AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_278)
{
    // 40AC 0062;	
    // (䂬) CJK UNIFIED IDEOGRAPH-40AC	[FB80 C0AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_279)
{
    // 40AD 0021;	
    // (䂭) CJK UNIFIED IDEOGRAPH-40AD	[FB80 C0AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_280)
{
    // 40AD 003F;	
    // (䂭) CJK UNIFIED IDEOGRAPH-40AD	[FB80 C0AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_281)
{
    // 40AD 0061;	
    // (䂭) CJK UNIFIED IDEOGRAPH-40AD	[FB80 C0AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_282)
{
    // 40AD 0041;	
    // (䂭) CJK UNIFIED IDEOGRAPH-40AD	[FB80 C0AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_283)
{
    // 40AD 0062;	
    // (䂭) CJK UNIFIED IDEOGRAPH-40AD	[FB80 C0AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_284)
{
    // 40AE 0021;	
    // (䂮) CJK UNIFIED IDEOGRAPH-40AE	[FB80 C0AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_285)
{
    // 40AE 003F;	
    // (䂮) CJK UNIFIED IDEOGRAPH-40AE	[FB80 C0AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_286)
{
    // 40AE 0061;	
    // (䂮) CJK UNIFIED IDEOGRAPH-40AE	[FB80 C0AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_287)
{
    // 40AE 0041;	
    // (䂮) CJK UNIFIED IDEOGRAPH-40AE	[FB80 C0AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_288)
{
    // 40AE 0062;	
    // (䂮) CJK UNIFIED IDEOGRAPH-40AE	[FB80 C0AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_289)
{
    // 40AF 0021;	
    // (䂯) CJK UNIFIED IDEOGRAPH-40AF	[FB80 C0AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_290)
{
    // 40AF 003F;	
    // (䂯) CJK UNIFIED IDEOGRAPH-40AF	[FB80 C0AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_291)
{
    // 40AF 0061;	
    // (䂯) CJK UNIFIED IDEOGRAPH-40AF	[FB80 C0AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_292)
{
    // 40AF 0041;	
    // (䂯) CJK UNIFIED IDEOGRAPH-40AF	[FB80 C0AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_293)
{
    // 40AF 0062;	
    // (䂯) CJK UNIFIED IDEOGRAPH-40AF	[FB80 C0AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_294)
{
    // 40B0 0021;	
    // (䂰) CJK UNIFIED IDEOGRAPH-40B0	[FB80 C0B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_295)
{
    // 40B0 003F;	
    // (䂰) CJK UNIFIED IDEOGRAPH-40B0	[FB80 C0B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_296)
{
    // 40B0 0061;	
    // (䂰) CJK UNIFIED IDEOGRAPH-40B0	[FB80 C0B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_297)
{
    // 40B0 0041;	
    // (䂰) CJK UNIFIED IDEOGRAPH-40B0	[FB80 C0B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_298)
{
    // 40B0 0062;	
    // (䂰) CJK UNIFIED IDEOGRAPH-40B0	[FB80 C0B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_299)
{
    // 40B1 0021;	
    // (䂱) CJK UNIFIED IDEOGRAPH-40B1	[FB80 C0B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_300)
{
    // 40B1 003F;	
    // (䂱) CJK UNIFIED IDEOGRAPH-40B1	[FB80 C0B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_301)
{
    // 40B1 0061;	
    // (䂱) CJK UNIFIED IDEOGRAPH-40B1	[FB80 C0B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_302)
{
    // 40B1 0041;	
    // (䂱) CJK UNIFIED IDEOGRAPH-40B1	[FB80 C0B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_303)
{
    // 40B1 0062;	
    // (䂱) CJK UNIFIED IDEOGRAPH-40B1	[FB80 C0B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_304)
{
    // 40B2 0021;	
    // (䂲) CJK UNIFIED IDEOGRAPH-40B2	[FB80 C0B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_305)
{
    // 40B2 003F;	
    // (䂲) CJK UNIFIED IDEOGRAPH-40B2	[FB80 C0B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_306)
{
    // 40B2 0061;	
    // (䂲) CJK UNIFIED IDEOGRAPH-40B2	[FB80 C0B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_307)
{
    // 40B2 0041;	
    // (䂲) CJK UNIFIED IDEOGRAPH-40B2	[FB80 C0B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_308)
{
    // 40B2 0062;	
    // (䂲) CJK UNIFIED IDEOGRAPH-40B2	[FB80 C0B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_309)
{
    // 40B3 0021;	
    // (䂳) CJK UNIFIED IDEOGRAPH-40B3	[FB80 C0B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_310)
{
    // 40B3 003F;	
    // (䂳) CJK UNIFIED IDEOGRAPH-40B3	[FB80 C0B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_311)
{
    // 40B3 0061;	
    // (䂳) CJK UNIFIED IDEOGRAPH-40B3	[FB80 C0B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_312)
{
    // 40B3 0041;	
    // (䂳) CJK UNIFIED IDEOGRAPH-40B3	[FB80 C0B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_313)
{
    // 40B3 0062;	
    // (䂳) CJK UNIFIED IDEOGRAPH-40B3	[FB80 C0B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_314)
{
    // 40B4 0021;	
    // (䂴) CJK UNIFIED IDEOGRAPH-40B4	[FB80 C0B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_315)
{
    // 40B4 003F;	
    // (䂴) CJK UNIFIED IDEOGRAPH-40B4	[FB80 C0B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_316)
{
    // 40B4 0061;	
    // (䂴) CJK UNIFIED IDEOGRAPH-40B4	[FB80 C0B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_317)
{
    // 40B4 0041;	
    // (䂴) CJK UNIFIED IDEOGRAPH-40B4	[FB80 C0B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_318)
{
    // 40B4 0062;	
    // (䂴) CJK UNIFIED IDEOGRAPH-40B4	[FB80 C0B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_319)
{
    // 40B5 0021;	
    // (䂵) CJK UNIFIED IDEOGRAPH-40B5	[FB80 C0B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_320)
{
    // 40B5 003F;	
    // (䂵) CJK UNIFIED IDEOGRAPH-40B5	[FB80 C0B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_321)
{
    // 40B5 0061;	
    // (䂵) CJK UNIFIED IDEOGRAPH-40B5	[FB80 C0B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_322)
{
    // 40B5 0041;	
    // (䂵) CJK UNIFIED IDEOGRAPH-40B5	[FB80 C0B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_323)
{
    // 40B5 0062;	
    // (䂵) CJK UNIFIED IDEOGRAPH-40B5	[FB80 C0B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_324)
{
    // 40B6 0021;	
    // (䂶) CJK UNIFIED IDEOGRAPH-40B6	[FB80 C0B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_325)
{
    // 40B6 003F;	
    // (䂶) CJK UNIFIED IDEOGRAPH-40B6	[FB80 C0B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_326)
{
    // 40B6 0061;	
    // (䂶) CJK UNIFIED IDEOGRAPH-40B6	[FB80 C0B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_327)
{
    // 40B6 0041;	
    // (䂶) CJK UNIFIED IDEOGRAPH-40B6	[FB80 C0B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_328)
{
    // 40B6 0062;	
    // (䂶) CJK UNIFIED IDEOGRAPH-40B6	[FB80 C0B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_329)
{
    // 40B7 0021;	
    // (䂷) CJK UNIFIED IDEOGRAPH-40B7	[FB80 C0B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_330)
{
    // 40B7 003F;	
    // (䂷) CJK UNIFIED IDEOGRAPH-40B7	[FB80 C0B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_331)
{
    // 40B7 0061;	
    // (䂷) CJK UNIFIED IDEOGRAPH-40B7	[FB80 C0B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_332)
{
    // 40B7 0041;	
    // (䂷) CJK UNIFIED IDEOGRAPH-40B7	[FB80 C0B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_333)
{
    // 40B7 0062;	
    // (䂷) CJK UNIFIED IDEOGRAPH-40B7	[FB80 C0B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_334)
{
    // 40B8 0021;	
    // (䂸) CJK UNIFIED IDEOGRAPH-40B8	[FB80 C0B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_335)
{
    // 40B8 003F;	
    // (䂸) CJK UNIFIED IDEOGRAPH-40B8	[FB80 C0B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_336)
{
    // 40B8 0061;	
    // (䂸) CJK UNIFIED IDEOGRAPH-40B8	[FB80 C0B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_337)
{
    // 40B8 0041;	
    // (䂸) CJK UNIFIED IDEOGRAPH-40B8	[FB80 C0B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_338)
{
    // 40B8 0062;	
    // (䂸) CJK UNIFIED IDEOGRAPH-40B8	[FB80 C0B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_339)
{
    // 40B9 0021;	
    // (䂹) CJK UNIFIED IDEOGRAPH-40B9	[FB80 C0B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_340)
{
    // 40B9 003F;	
    // (䂹) CJK UNIFIED IDEOGRAPH-40B9	[FB80 C0B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_341)
{
    // 40B9 0061;	
    // (䂹) CJK UNIFIED IDEOGRAPH-40B9	[FB80 C0B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_342)
{
    // 40B9 0041;	
    // (䂹) CJK UNIFIED IDEOGRAPH-40B9	[FB80 C0B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_343)
{
    // 40B9 0062;	
    // (䂹) CJK UNIFIED IDEOGRAPH-40B9	[FB80 C0B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_344)
{
    // 40BA 0021;	
    // (䂺) CJK UNIFIED IDEOGRAPH-40BA	[FB80 C0BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_345)
{
    // 40BA 003F;	
    // (䂺) CJK UNIFIED IDEOGRAPH-40BA	[FB80 C0BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_346)
{
    // 40BA 0061;	
    // (䂺) CJK UNIFIED IDEOGRAPH-40BA	[FB80 C0BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_347)
{
    // 40BA 0041;	
    // (䂺) CJK UNIFIED IDEOGRAPH-40BA	[FB80 C0BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_348)
{
    // 40BA 0062;	
    // (䂺) CJK UNIFIED IDEOGRAPH-40BA	[FB80 C0BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_349)
{
    // 40BB 0021;	
    // (䂻) CJK UNIFIED IDEOGRAPH-40BB	[FB80 C0BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_350)
{
    // 40BB 003F;	
    // (䂻) CJK UNIFIED IDEOGRAPH-40BB	[FB80 C0BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_351)
{
    // 40BB 0061;	
    // (䂻) CJK UNIFIED IDEOGRAPH-40BB	[FB80 C0BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_352)
{
    // 40BB 0041;	
    // (䂻) CJK UNIFIED IDEOGRAPH-40BB	[FB80 C0BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_353)
{
    // 40BB 0062;	
    // (䂻) CJK UNIFIED IDEOGRAPH-40BB	[FB80 C0BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_354)
{
    // 40BC 0021;	
    // (䂼) CJK UNIFIED IDEOGRAPH-40BC	[FB80 C0BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_355)
{
    // 40BC 003F;	
    // (䂼) CJK UNIFIED IDEOGRAPH-40BC	[FB80 C0BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_356)
{
    // 40BC 0061;	
    // (䂼) CJK UNIFIED IDEOGRAPH-40BC	[FB80 C0BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_357)
{
    // 40BC 0041;	
    // (䂼) CJK UNIFIED IDEOGRAPH-40BC	[FB80 C0BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_358)
{
    // 40BC 0062;	
    // (䂼) CJK UNIFIED IDEOGRAPH-40BC	[FB80 C0BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_359)
{
    // 40BD 0021;	
    // (䂽) CJK UNIFIED IDEOGRAPH-40BD	[FB80 C0BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_360)
{
    // 40BD 003F;	
    // (䂽) CJK UNIFIED IDEOGRAPH-40BD	[FB80 C0BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_361)
{
    // 40BD 0061;	
    // (䂽) CJK UNIFIED IDEOGRAPH-40BD	[FB80 C0BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_362)
{
    // 40BD 0041;	
    // (䂽) CJK UNIFIED IDEOGRAPH-40BD	[FB80 C0BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_363)
{
    // 40BD 0062;	
    // (䂽) CJK UNIFIED IDEOGRAPH-40BD	[FB80 C0BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_364)
{
    // 40BE 0021;	
    // (䂾) CJK UNIFIED IDEOGRAPH-40BE	[FB80 C0BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_365)
{
    // 40BE 003F;	
    // (䂾) CJK UNIFIED IDEOGRAPH-40BE	[FB80 C0BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_366)
{
    // 40BE 0061;	
    // (䂾) CJK UNIFIED IDEOGRAPH-40BE	[FB80 C0BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_367)
{
    // 40BE 0041;	
    // (䂾) CJK UNIFIED IDEOGRAPH-40BE	[FB80 C0BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_368)
{
    // 40BE 0062;	
    // (䂾) CJK UNIFIED IDEOGRAPH-40BE	[FB80 C0BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_369)
{
    // 40BF 0021;	
    // (䂿) CJK UNIFIED IDEOGRAPH-40BF	[FB80 C0BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_370)
{
    // 40BF 003F;	
    // (䂿) CJK UNIFIED IDEOGRAPH-40BF	[FB80 C0BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_371)
{
    // 40BF 0061;	
    // (䂿) CJK UNIFIED IDEOGRAPH-40BF	[FB80 C0BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_372)
{
    // 40BF 0041;	
    // (䂿) CJK UNIFIED IDEOGRAPH-40BF	[FB80 C0BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_373)
{
    // 40BF 0062;	
    // (䂿) CJK UNIFIED IDEOGRAPH-40BF	[FB80 C0BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_374)
{
    // 40C0 0021;	
    // (䃀) CJK UNIFIED IDEOGRAPH-40C0	[FB80 C0C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_375)
{
    // 40C0 003F;	
    // (䃀) CJK UNIFIED IDEOGRAPH-40C0	[FB80 C0C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_376)
{
    // 40C0 0061;	
    // (䃀) CJK UNIFIED IDEOGRAPH-40C0	[FB80 C0C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_377)
{
    // 40C0 0041;	
    // (䃀) CJK UNIFIED IDEOGRAPH-40C0	[FB80 C0C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_378)
{
    // 40C0 0062;	
    // (䃀) CJK UNIFIED IDEOGRAPH-40C0	[FB80 C0C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_379)
{
    // 40C1 0021;	
    // (䃁) CJK UNIFIED IDEOGRAPH-40C1	[FB80 C0C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_380)
{
    // 40C1 003F;	
    // (䃁) CJK UNIFIED IDEOGRAPH-40C1	[FB80 C0C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_381)
{
    // 40C1 0061;	
    // (䃁) CJK UNIFIED IDEOGRAPH-40C1	[FB80 C0C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_382)
{
    // 40C1 0041;	
    // (䃁) CJK UNIFIED IDEOGRAPH-40C1	[FB80 C0C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_383)
{
    // 40C1 0062;	
    // (䃁) CJK UNIFIED IDEOGRAPH-40C1	[FB80 C0C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_384)
{
    // 40C2 0021;	
    // (䃂) CJK UNIFIED IDEOGRAPH-40C2	[FB80 C0C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_385)
{
    // 40C2 003F;	
    // (䃂) CJK UNIFIED IDEOGRAPH-40C2	[FB80 C0C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_386)
{
    // 40C2 0061;	
    // (䃂) CJK UNIFIED IDEOGRAPH-40C2	[FB80 C0C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_387)
{
    // 40C2 0041;	
    // (䃂) CJK UNIFIED IDEOGRAPH-40C2	[FB80 C0C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_388)
{
    // 40C2 0062;	
    // (䃂) CJK UNIFIED IDEOGRAPH-40C2	[FB80 C0C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_389)
{
    // 40C3 0021;	
    // (䃃) CJK UNIFIED IDEOGRAPH-40C3	[FB80 C0C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_390)
{
    // 40C3 003F;	
    // (䃃) CJK UNIFIED IDEOGRAPH-40C3	[FB80 C0C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_391)
{
    // 40C3 0061;	
    // (䃃) CJK UNIFIED IDEOGRAPH-40C3	[FB80 C0C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_392)
{
    // 40C3 0041;	
    // (䃃) CJK UNIFIED IDEOGRAPH-40C3	[FB80 C0C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_393)
{
    // 40C3 0062;	
    // (䃃) CJK UNIFIED IDEOGRAPH-40C3	[FB80 C0C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_394)
{
    // 40C4 0021;	
    // (䃄) CJK UNIFIED IDEOGRAPH-40C4	[FB80 C0C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_395)
{
    // 40C4 003F;	
    // (䃄) CJK UNIFIED IDEOGRAPH-40C4	[FB80 C0C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_396)
{
    // 40C4 0061;	
    // (䃄) CJK UNIFIED IDEOGRAPH-40C4	[FB80 C0C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_397)
{
    // 40C4 0041;	
    // (䃄) CJK UNIFIED IDEOGRAPH-40C4	[FB80 C0C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_398)
{
    // 40C4 0062;	
    // (䃄) CJK UNIFIED IDEOGRAPH-40C4	[FB80 C0C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_399)
{
    // 40C5 0021;	
    // (䃅) CJK UNIFIED IDEOGRAPH-40C5	[FB80 C0C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_400)
{
    // 40C5 003F;	
    // (䃅) CJK UNIFIED IDEOGRAPH-40C5	[FB80 C0C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_401)
{
    // 40C5 0061;	
    // (䃅) CJK UNIFIED IDEOGRAPH-40C5	[FB80 C0C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_402)
{
    // 40C5 0041;	
    // (䃅) CJK UNIFIED IDEOGRAPH-40C5	[FB80 C0C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_403)
{
    // 40C5 0062;	
    // (䃅) CJK UNIFIED IDEOGRAPH-40C5	[FB80 C0C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_404)
{
    // 40C6 0021;	
    // (䃆) CJK UNIFIED IDEOGRAPH-40C6	[FB80 C0C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_405)
{
    // 40C6 003F;	
    // (䃆) CJK UNIFIED IDEOGRAPH-40C6	[FB80 C0C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_406)
{
    // 40C6 0061;	
    // (䃆) CJK UNIFIED IDEOGRAPH-40C6	[FB80 C0C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_407)
{
    // 40C6 0041;	
    // (䃆) CJK UNIFIED IDEOGRAPH-40C6	[FB80 C0C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_408)
{
    // 40C6 0062;	
    // (䃆) CJK UNIFIED IDEOGRAPH-40C6	[FB80 C0C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_409)
{
    // 40C7 0021;	
    // (䃇) CJK UNIFIED IDEOGRAPH-40C7	[FB80 C0C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_410)
{
    // 40C7 003F;	
    // (䃇) CJK UNIFIED IDEOGRAPH-40C7	[FB80 C0C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_411)
{
    // 40C7 0061;	
    // (䃇) CJK UNIFIED IDEOGRAPH-40C7	[FB80 C0C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_412)
{
    // 40C7 0041;	
    // (䃇) CJK UNIFIED IDEOGRAPH-40C7	[FB80 C0C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_413)
{
    // 40C7 0062;	
    // (䃇) CJK UNIFIED IDEOGRAPH-40C7	[FB80 C0C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_414)
{
    // 40C8 0021;	
    // (䃈) CJK UNIFIED IDEOGRAPH-40C8	[FB80 C0C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_415)
{
    // 40C8 003F;	
    // (䃈) CJK UNIFIED IDEOGRAPH-40C8	[FB80 C0C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_416)
{
    // 40C8 0061;	
    // (䃈) CJK UNIFIED IDEOGRAPH-40C8	[FB80 C0C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_417)
{
    // 40C8 0041;	
    // (䃈) CJK UNIFIED IDEOGRAPH-40C8	[FB80 C0C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_418)
{
    // 40C8 0062;	
    // (䃈) CJK UNIFIED IDEOGRAPH-40C8	[FB80 C0C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_419)
{
    // 40C9 0021;	
    // (䃉) CJK UNIFIED IDEOGRAPH-40C9	[FB80 C0C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_420)
{
    // 40C9 003F;	
    // (䃉) CJK UNIFIED IDEOGRAPH-40C9	[FB80 C0C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_421)
{
    // 40C9 0061;	
    // (䃉) CJK UNIFIED IDEOGRAPH-40C9	[FB80 C0C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_422)
{
    // 40C9 0041;	
    // (䃉) CJK UNIFIED IDEOGRAPH-40C9	[FB80 C0C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_423)
{
    // 40C9 0062;	
    // (䃉) CJK UNIFIED IDEOGRAPH-40C9	[FB80 C0C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_424)
{
    // 40CA 0021;	
    // (䃊) CJK UNIFIED IDEOGRAPH-40CA	[FB80 C0CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_425)
{
    // 40CA 003F;	
    // (䃊) CJK UNIFIED IDEOGRAPH-40CA	[FB80 C0CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_426)
{
    // 40CA 0061;	
    // (䃊) CJK UNIFIED IDEOGRAPH-40CA	[FB80 C0CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_427)
{
    // 40CA 0041;	
    // (䃊) CJK UNIFIED IDEOGRAPH-40CA	[FB80 C0CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_428)
{
    // 40CA 0062;	
    // (䃊) CJK UNIFIED IDEOGRAPH-40CA	[FB80 C0CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_429)
{
    // 40CB 0021;	
    // (䃋) CJK UNIFIED IDEOGRAPH-40CB	[FB80 C0CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_430)
{
    // 40CB 003F;	
    // (䃋) CJK UNIFIED IDEOGRAPH-40CB	[FB80 C0CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_431)
{
    // 40CB 0061;	
    // (䃋) CJK UNIFIED IDEOGRAPH-40CB	[FB80 C0CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_432)
{
    // 40CB 0041;	
    // (䃋) CJK UNIFIED IDEOGRAPH-40CB	[FB80 C0CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_433)
{
    // 40CB 0062;	
    // (䃋) CJK UNIFIED IDEOGRAPH-40CB	[FB80 C0CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_434)
{
    // 40CC 0021;	
    // (䃌) CJK UNIFIED IDEOGRAPH-40CC	[FB80 C0CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_435)
{
    // 40CC 003F;	
    // (䃌) CJK UNIFIED IDEOGRAPH-40CC	[FB80 C0CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_436)
{
    // 40CC 0061;	
    // (䃌) CJK UNIFIED IDEOGRAPH-40CC	[FB80 C0CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_437)
{
    // 40CC 0041;	
    // (䃌) CJK UNIFIED IDEOGRAPH-40CC	[FB80 C0CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_438)
{
    // 40CC 0062;	
    // (䃌) CJK UNIFIED IDEOGRAPH-40CC	[FB80 C0CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_439)
{
    // 40CD 0021;	
    // (䃍) CJK UNIFIED IDEOGRAPH-40CD	[FB80 C0CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_440)
{
    // 40CD 003F;	
    // (䃍) CJK UNIFIED IDEOGRAPH-40CD	[FB80 C0CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_441)
{
    // 40CD 0061;	
    // (䃍) CJK UNIFIED IDEOGRAPH-40CD	[FB80 C0CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_442)
{
    // 40CD 0041;	
    // (䃍) CJK UNIFIED IDEOGRAPH-40CD	[FB80 C0CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_443)
{
    // 40CD 0062;	
    // (䃍) CJK UNIFIED IDEOGRAPH-40CD	[FB80 C0CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_444)
{
    // 40CE 0021;	
    // (䃎) CJK UNIFIED IDEOGRAPH-40CE	[FB80 C0CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_445)
{
    // 40CE 003F;	
    // (䃎) CJK UNIFIED IDEOGRAPH-40CE	[FB80 C0CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_446)
{
    // 40CE 0061;	
    // (䃎) CJK UNIFIED IDEOGRAPH-40CE	[FB80 C0CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_447)
{
    // 40CE 0041;	
    // (䃎) CJK UNIFIED IDEOGRAPH-40CE	[FB80 C0CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_448)
{
    // 40CE 0062;	
    // (䃎) CJK UNIFIED IDEOGRAPH-40CE	[FB80 C0CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_449)
{
    // 40CF 0021;	
    // (䃏) CJK UNIFIED IDEOGRAPH-40CF	[FB80 C0CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_450)
{
    // 40CF 003F;	
    // (䃏) CJK UNIFIED IDEOGRAPH-40CF	[FB80 C0CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_451)
{
    // 40CF 0061;	
    // (䃏) CJK UNIFIED IDEOGRAPH-40CF	[FB80 C0CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_452)
{
    // 40CF 0041;	
    // (䃏) CJK UNIFIED IDEOGRAPH-40CF	[FB80 C0CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_453)
{
    // 40CF 0062;	
    // (䃏) CJK UNIFIED IDEOGRAPH-40CF	[FB80 C0CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_454)
{
    // 40D0 0021;	
    // (䃐) CJK UNIFIED IDEOGRAPH-40D0	[FB80 C0D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_455)
{
    // 40D0 003F;	
    // (䃐) CJK UNIFIED IDEOGRAPH-40D0	[FB80 C0D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_456)
{
    // 40D0 0061;	
    // (䃐) CJK UNIFIED IDEOGRAPH-40D0	[FB80 C0D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_457)
{
    // 40D0 0041;	
    // (䃐) CJK UNIFIED IDEOGRAPH-40D0	[FB80 C0D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_458)
{
    // 40D0 0062;	
    // (䃐) CJK UNIFIED IDEOGRAPH-40D0	[FB80 C0D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_459)
{
    // 40D1 0021;	
    // (䃑) CJK UNIFIED IDEOGRAPH-40D1	[FB80 C0D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_460)
{
    // 40D1 003F;	
    // (䃑) CJK UNIFIED IDEOGRAPH-40D1	[FB80 C0D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_461)
{
    // 40D1 0061;	
    // (䃑) CJK UNIFIED IDEOGRAPH-40D1	[FB80 C0D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_462)
{
    // 40D1 0041;	
    // (䃑) CJK UNIFIED IDEOGRAPH-40D1	[FB80 C0D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_463)
{
    // 40D1 0062;	
    // (䃑) CJK UNIFIED IDEOGRAPH-40D1	[FB80 C0D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_464)
{
    // 40D2 0021;	
    // (䃒) CJK UNIFIED IDEOGRAPH-40D2	[FB80 C0D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_465)
{
    // 40D2 003F;	
    // (䃒) CJK UNIFIED IDEOGRAPH-40D2	[FB80 C0D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_466)
{
    // 40D2 0061;	
    // (䃒) CJK UNIFIED IDEOGRAPH-40D2	[FB80 C0D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_467)
{
    // 40D2 0041;	
    // (䃒) CJK UNIFIED IDEOGRAPH-40D2	[FB80 C0D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_468)
{
    // 40D2 0062;	
    // (䃒) CJK UNIFIED IDEOGRAPH-40D2	[FB80 C0D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_469)
{
    // 40D3 0021;	
    // (䃓) CJK UNIFIED IDEOGRAPH-40D3	[FB80 C0D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_470)
{
    // 40D3 003F;	
    // (䃓) CJK UNIFIED IDEOGRAPH-40D3	[FB80 C0D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_471)
{
    // 40D3 0061;	
    // (䃓) CJK UNIFIED IDEOGRAPH-40D3	[FB80 C0D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_472)
{
    // 40D3 0041;	
    // (䃓) CJK UNIFIED IDEOGRAPH-40D3	[FB80 C0D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_473)
{
    // 40D3 0062;	
    // (䃓) CJK UNIFIED IDEOGRAPH-40D3	[FB80 C0D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_474)
{
    // 40D4 0021;	
    // (䃔) CJK UNIFIED IDEOGRAPH-40D4	[FB80 C0D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_475)
{
    // 40D4 003F;	
    // (䃔) CJK UNIFIED IDEOGRAPH-40D4	[FB80 C0D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_476)
{
    // 40D4 0061;	
    // (䃔) CJK UNIFIED IDEOGRAPH-40D4	[FB80 C0D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_477)
{
    // 40D4 0041;	
    // (䃔) CJK UNIFIED IDEOGRAPH-40D4	[FB80 C0D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_478)
{
    // 40D4 0062;	
    // (䃔) CJK UNIFIED IDEOGRAPH-40D4	[FB80 C0D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_479)
{
    // 40D5 0021;	
    // (䃕) CJK UNIFIED IDEOGRAPH-40D5	[FB80 C0D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_480)
{
    // 40D5 003F;	
    // (䃕) CJK UNIFIED IDEOGRAPH-40D5	[FB80 C0D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_481)
{
    // 40D5 0061;	
    // (䃕) CJK UNIFIED IDEOGRAPH-40D5	[FB80 C0D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_482)
{
    // 40D5 0041;	
    // (䃕) CJK UNIFIED IDEOGRAPH-40D5	[FB80 C0D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_483)
{
    // 40D5 0062;	
    // (䃕) CJK UNIFIED IDEOGRAPH-40D5	[FB80 C0D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_484)
{
    // 40D6 0021;	
    // (䃖) CJK UNIFIED IDEOGRAPH-40D6	[FB80 C0D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_485)
{
    // 40D6 003F;	
    // (䃖) CJK UNIFIED IDEOGRAPH-40D6	[FB80 C0D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_486)
{
    // 40D6 0061;	
    // (䃖) CJK UNIFIED IDEOGRAPH-40D6	[FB80 C0D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_487)
{
    // 40D6 0041;	
    // (䃖) CJK UNIFIED IDEOGRAPH-40D6	[FB80 C0D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_488)
{
    // 40D6 0062;	
    // (䃖) CJK UNIFIED IDEOGRAPH-40D6	[FB80 C0D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_489)
{
    // 40D7 0021;	
    // (䃗) CJK UNIFIED IDEOGRAPH-40D7	[FB80 C0D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_490)
{
    // 40D7 003F;	
    // (䃗) CJK UNIFIED IDEOGRAPH-40D7	[FB80 C0D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_491)
{
    // 40D7 0061;	
    // (䃗) CJK UNIFIED IDEOGRAPH-40D7	[FB80 C0D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_492)
{
    // 40D7 0041;	
    // (䃗) CJK UNIFIED IDEOGRAPH-40D7	[FB80 C0D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_493)
{
    // 40D7 0062;	
    // (䃗) CJK UNIFIED IDEOGRAPH-40D7	[FB80 C0D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_494)
{
    // 40D8 0021;	
    // (䃘) CJK UNIFIED IDEOGRAPH-40D8	[FB80 C0D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_495)
{
    // 40D8 003F;	
    // (䃘) CJK UNIFIED IDEOGRAPH-40D8	[FB80 C0D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC0D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_496)
{
    // 40D8 0061;	
    // (䃘) CJK UNIFIED IDEOGRAPH-40D8	[FB80 C0D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_497)
{
    // 40D8 0041;	
    // (䃘) CJK UNIFIED IDEOGRAPH-40D8	[FB80 C0D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x40D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_498)
{
    // 40D8 0062;	
    // (䃘) CJK UNIFIED IDEOGRAPH-40D8	[FB80 C0D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_359_499)
{
    // 40D9 0021;	
    // (䃙) CJK UNIFIED IDEOGRAPH-40D9	[FB80 C0D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x40D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC0D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

