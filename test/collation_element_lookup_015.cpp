// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_015_000)
{
    // 0951  ; [.0000.0000.0000] 
    // DEVANAGARI STRESS SIGN UDATTA

    uint32_t const cps[1] = { 0x951 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_001)
{
    // 0952  ; [.0000.0000.0000] 
    // DEVANAGARI STRESS SIGN ANUDATTA

    uint32_t const cps[1] = { 0x952 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_002)
{
    // 0953  ; [.0000.0025.0002] 
    // DEVANAGARI GRAVE ACCENT

    uint32_t const cps[1] = { 0x953 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_003)
{
    // 0954  ; [.0000.0024.0002] 
    // DEVANAGARI ACUTE ACCENT

    uint32_t const cps[1] = { 0x954 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_004)
{
    // 0955  ; [.2726.0020.0002] 
    // DEVANAGARI VOWEL SIGN CANDRA LONG E

    uint32_t const cps[1] = { 0x955 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2726), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_005)
{
    // 0956  ; [.271B.0020.0002] 
    // DEVANAGARI VOWEL SIGN UE

    uint32_t const cps[1] = { 0x956 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x271b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_006)
{
    // 0957  ; [.271C.0020.0002] 
    // DEVANAGARI VOWEL SIGN UUE

    uint32_t const cps[1] = { 0x957 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x271c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_007)
{
    // 0958  ; [.26E7.0020.0002][.0000.00C2.0002] 
    // DEVANAGARI LETTER QA

    uint32_t const cps[1] = { 0x958 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x26e7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_008)
{
    // 0959  ; [.26E8.0020.0002][.0000.00C2.0002] 
    // DEVANAGARI LETTER KHHA

    uint32_t const cps[1] = { 0x959 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x26e8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_009)
{
    // 095A  ; [.26E9.0020.0002][.0000.00C2.0002] 
    // DEVANAGARI LETTER GHHA

    uint32_t const cps[1] = { 0x95a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x26e9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_010)
{
    // 095B  ; [.26EF.0020.0002][.0000.00C2.0002] 
    // DEVANAGARI LETTER ZA

    uint32_t const cps[1] = { 0x95b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x26ef), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_011)
{
    // 095C  ; [.26F7.0020.0002][.0000.00C2.0002] 
    // DEVANAGARI LETTER DDDHA

    uint32_t const cps[1] = { 0x95c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x26f7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_012)
{
    // 095D  ; [.26F9.0020.0002][.0000.00C2.0002] 
    // DEVANAGARI LETTER RHA

    uint32_t const cps[1] = { 0x95d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x26f9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_013)
{
    // 095E  ; [.2701.0020.0002][.0000.00C2.0002] 
    // DEVANAGARI LETTER FA

    uint32_t const cps[1] = { 0x95e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2701), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_014)
{
    // 095F  ; [.2706.0020.0002][.0000.00C2.0002] 
    // DEVANAGARI LETTER YYA

    uint32_t const cps[1] = { 0x95f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2706), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_015)
{
    // 0960  ; [.26DC.0020.0002] 
    // DEVANAGARI LETTER VOCALIC RR

    uint32_t const cps[1] = { 0x960 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_016)
{
    // 0961  ; [.26DE.0020.0002] 
    // DEVANAGARI LETTER VOCALIC LL

    uint32_t const cps[1] = { 0x961 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_017)
{
    // 0962  ; [.2723.0020.0002] 
    // DEVANAGARI VOWEL SIGN VOCALIC L

    uint32_t const cps[1] = { 0x962 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2723), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_018)
{
    // 0963  ; [.2724.0020.0002] 
    // DEVANAGARI VOWEL SIGN VOCALIC LL

    uint32_t const cps[1] = { 0x963 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2724), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_019)
{
    // 0964  ; [*028F.0020.0002] 
    // DEVANAGARI DANDA

    uint32_t const cps[1] = { 0x964 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_020)
{
    // 0965  ; [*0290.0020.0002] 
    // DEVANAGARI DOUBLE DANDA

    uint32_t const cps[1] = { 0x965 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x290), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_021)
{
    // 0966  ; [.1CA3.0020.0002] 
    // DEVANAGARI DIGIT ZERO

    uint32_t const cps[1] = { 0x966 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_022)
{
    // 0967  ; [.1CA4.0020.0002] 
    // DEVANAGARI DIGIT ONE

    uint32_t const cps[1] = { 0x967 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_023)
{
    // 0968  ; [.1CA5.0020.0002] 
    // DEVANAGARI DIGIT TWO

    uint32_t const cps[1] = { 0x968 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_024)
{
    // 0969  ; [.1CA6.0020.0002] 
    // DEVANAGARI DIGIT THREE

    uint32_t const cps[1] = { 0x969 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_025)
{
    // 096A  ; [.1CA7.0020.0002] 
    // DEVANAGARI DIGIT FOUR

    uint32_t const cps[1] = { 0x96a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_026)
{
    // 096B  ; [.1CA8.0020.0002] 
    // DEVANAGARI DIGIT FIVE

    uint32_t const cps[1] = { 0x96b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_027)
{
    // 096C  ; [.1CA9.0020.0002] 
    // DEVANAGARI DIGIT SIX

    uint32_t const cps[1] = { 0x96c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_028)
{
    // 096D  ; [.1CAA.0020.0002] 
    // DEVANAGARI DIGIT SEVEN

    uint32_t const cps[1] = { 0x96d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_029)
{
    // 096E  ; [.1CAB.0020.0002] 
    // DEVANAGARI DIGIT EIGHT

    uint32_t const cps[1] = { 0x96e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_030)
{
    // 096F  ; [.1CAC.0020.0002] 
    // DEVANAGARI DIGIT NINE

    uint32_t const cps[1] = { 0x96f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_031)
{
    // 0970  ; [*03EC.0020.0002] 
    // DEVANAGARI ABBREVIATION SIGN

    uint32_t const cps[1] = { 0x970 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_032)
{
    // 0971  ; [.1C5E.0020.0002] 
    // DEVANAGARI SIGN HIGH SPACING DOT

    uint32_t const cps[1] = { 0x971 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_033)
{
    // 0972  ; [.26CE.0020.0002] 
    // DEVANAGARI LETTER CANDRA A

    uint32_t const cps[1] = { 0x972 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_034)
{
    // 0973  ; [.26D2.0020.0002] 
    // DEVANAGARI LETTER OE

    uint32_t const cps[1] = { 0x973 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_035)
{
    // 0974  ; [.26D3.0020.0002] 
    // DEVANAGARI LETTER OOE

    uint32_t const cps[1] = { 0x974 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_036)
{
    // 0975  ; [.26D4.0020.0002] 
    // DEVANAGARI LETTER AW

    uint32_t const cps[1] = { 0x975 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_037)
{
    // 0976  ; [.26D5.0020.0002] 
    // DEVANAGARI LETTER UE

    uint32_t const cps[1] = { 0x976 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_038)
{
    // 0977  ; [.26D6.0020.0002] 
    // DEVANAGARI LETTER UUE

    uint32_t const cps[1] = { 0x977 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_039)
{
    // 0978  ; [.26F6.0020.0002] 
    // DEVANAGARI LETTER MARWARI DDA

    uint32_t const cps[1] = { 0x978 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_040)
{
    // 0979  ; [.26F0.0020.0002] 
    // DEVANAGARI LETTER ZHA

    uint32_t const cps[1] = { 0x979 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_041)
{
    // 097A  ; [.2707.0020.0002] 
    // DEVANAGARI LETTER HEAVY YA

    uint32_t const cps[1] = { 0x97a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2707), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_042)
{
    // 097B  ; [.26EA.0020.0002] 
    // DEVANAGARI LETTER GGA

    uint32_t const cps[1] = { 0x97b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_043)
{
    // 097C  ; [.26F1.0020.0002] 
    // DEVANAGARI LETTER JJA

    uint32_t const cps[1] = { 0x97c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_044)
{
    // 097D  ; [.2711.0020.0002] 
    // DEVANAGARI LETTER GLOTTAL STOP

    uint32_t const cps[1] = { 0x97d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2711), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_045)
{
    // 097E  ; [.26F8.0020.0002] 
    // DEVANAGARI LETTER DDDA

    uint32_t const cps[1] = { 0x97e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x26f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_046)
{
    // 097F  ; [.2703.0020.0002] 
    // DEVANAGARI LETTER BBA

    uint32_t const cps[1] = { 0x97f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2703), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_047)
{
    // 0980  ; [.2730.0020.0002] 
    // BENGALI ANJI

    uint32_t const cps[1] = { 0x980 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2730), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_048)
{
    // 0981  ; [.0000.00C3.0002] 
    // BENGALI SIGN CANDRABINDU

    uint32_t const cps[1] = { 0x981 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_049)
{
    // 0982  ; [.0000.00C4.0002] 
    // BENGALI SIGN ANUSVARA

    uint32_t const cps[1] = { 0x982 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_050)
{
    // 0983  ; [.0000.00C5.0002] 
    // BENGALI SIGN VISARGA

    uint32_t const cps[1] = { 0x983 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_051)
{
    // 0985  ; [.2731.0020.0002] 
    // BENGALI LETTER A

    uint32_t const cps[1] = { 0x985 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2731), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_052)
{
    // 0986  ; [.2732.0020.0002] 
    // BENGALI LETTER AA

    uint32_t const cps[1] = { 0x986 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2732), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_053)
{
    // 0987  ; [.2733.0020.0002] 
    // BENGALI LETTER I

    uint32_t const cps[1] = { 0x987 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2733), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_054)
{
    // 0988  ; [.2734.0020.0002] 
    // BENGALI LETTER II

    uint32_t const cps[1] = { 0x988 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2734), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_055)
{
    // 0989  ; [.2735.0020.0002] 
    // BENGALI LETTER U

    uint32_t const cps[1] = { 0x989 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2735), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_056)
{
    // 098A  ; [.2736.0020.0002] 
    // BENGALI LETTER UU

    uint32_t const cps[1] = { 0x98a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2736), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_057)
{
    // 098B  ; [.2737.0020.0002] 
    // BENGALI LETTER VOCALIC R

    uint32_t const cps[1] = { 0x98b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2737), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_058)
{
    // 098C  ; [.2739.0020.0002] 
    // BENGALI LETTER VOCALIC L

    uint32_t const cps[1] = { 0x98c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2739), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_059)
{
    // 098F  ; [.273B.0020.0002] 
    // BENGALI LETTER E

    uint32_t const cps[1] = { 0x98f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x273b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_060)
{
    // 0990  ; [.273C.0020.0002] 
    // BENGALI LETTER AI

    uint32_t const cps[1] = { 0x990 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x273c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_061)
{
    // 0993  ; [.273D.0020.0002] 
    // BENGALI LETTER O

    uint32_t const cps[1] = { 0x993 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x273d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_062)
{
    // 0994  ; [.273E.0020.0002] 
    // BENGALI LETTER AU

    uint32_t const cps[1] = { 0x994 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x273e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_063)
{
    // 0995  ; [.273F.0020.0002] 
    // BENGALI LETTER KA

    uint32_t const cps[1] = { 0x995 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x273f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_064)
{
    // 0996  ; [.2740.0020.0002] 
    // BENGALI LETTER KHA

    uint32_t const cps[1] = { 0x996 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2740), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_065)
{
    // 0997  ; [.2741.0020.0002] 
    // BENGALI LETTER GA

    uint32_t const cps[1] = { 0x997 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2741), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_066)
{
    // 0998  ; [.2742.0020.0002] 
    // BENGALI LETTER GHA

    uint32_t const cps[1] = { 0x998 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2742), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_067)
{
    // 0999  ; [.2743.0020.0002] 
    // BENGALI LETTER NGA

    uint32_t const cps[1] = { 0x999 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2743), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_068)
{
    // 099A  ; [.2744.0020.0002] 
    // BENGALI LETTER CA

    uint32_t const cps[1] = { 0x99a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2744), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_069)
{
    // 099B  ; [.2745.0020.0002] 
    // BENGALI LETTER CHA

    uint32_t const cps[1] = { 0x99b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2745), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_070)
{
    // 099C  ; [.2746.0020.0002] 
    // BENGALI LETTER JA

    uint32_t const cps[1] = { 0x99c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2746), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_071)
{
    // 099D  ; [.2747.0020.0002] 
    // BENGALI LETTER JHA

    uint32_t const cps[1] = { 0x99d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2747), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_072)
{
    // 099E  ; [.2748.0020.0002] 
    // BENGALI LETTER NYA

    uint32_t const cps[1] = { 0x99e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2748), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_073)
{
    // 099F  ; [.2749.0020.0002] 
    // BENGALI LETTER TTA

    uint32_t const cps[1] = { 0x99f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2749), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_074)
{
    // 09A0  ; [.274A.0020.0002] 
    // BENGALI LETTER TTHA

    uint32_t const cps[1] = { 0x9a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x274a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_075)
{
    // 09A1  ; [.274B.0020.0002] 
    // BENGALI LETTER DDA

    uint32_t const cps[1] = { 0x9a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x274b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_076)
{
    // 09A2  ; [.274C.0020.0002] 
    // BENGALI LETTER DDHA

    uint32_t const cps[1] = { 0x9a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x274c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_077)
{
    // 09A3  ; [.274D.0020.0002] 
    // BENGALI LETTER NNA

    uint32_t const cps[1] = { 0x9a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x274d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_078)
{
    // 09A4  ; [.274E.0020.0002] 
    // BENGALI LETTER TA

    uint32_t const cps[1] = { 0x9a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x274e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_079)
{
    // 09A5  ; [.274F.0020.0002] 
    // BENGALI LETTER THA

    uint32_t const cps[1] = { 0x9a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x274f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_080)
{
    // 09A6  ; [.2750.0020.0002] 
    // BENGALI LETTER DA

    uint32_t const cps[1] = { 0x9a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2750), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_081)
{
    // 09A7  ; [.2751.0020.0002] 
    // BENGALI LETTER DHA

    uint32_t const cps[1] = { 0x9a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2751), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_082)
{
    // 09A8  ; [.2752.0020.0002] 
    // BENGALI LETTER NA

    uint32_t const cps[1] = { 0x9a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2752), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_083)
{
    // 09AA  ; [.2753.0020.0002] 
    // BENGALI LETTER PA

    uint32_t const cps[1] = { 0x9aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2753), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_084)
{
    // 09AB  ; [.2754.0020.0002] 
    // BENGALI LETTER PHA

    uint32_t const cps[1] = { 0x9ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2754), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_085)
{
    // 09AC  ; [.2755.0020.0002] 
    // BENGALI LETTER BA

    uint32_t const cps[1] = { 0x9ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2755), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_086)
{
    // 09AD  ; [.2756.0020.0002] 
    // BENGALI LETTER BHA

    uint32_t const cps[1] = { 0x9ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2756), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_087)
{
    // 09AE  ; [.2757.0020.0002] 
    // BENGALI LETTER MA

    uint32_t const cps[1] = { 0x9ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2757), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_088)
{
    // 09AF  ; [.2758.0020.0002] 
    // BENGALI LETTER YA

    uint32_t const cps[1] = { 0x9af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2758), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_089)
{
    // 09B0  ; [.2759.0020.0002] 
    // BENGALI LETTER RA

    uint32_t const cps[1] = { 0x9b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2759), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_090)
{
    // 09B2  ; [.275B.0020.0002] 
    // BENGALI LETTER LA

    uint32_t const cps[1] = { 0x9b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x275b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_091)
{
    // 09B6  ; [.275D.0020.0002] 
    // BENGALI LETTER SHA

    uint32_t const cps[1] = { 0x9b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x275d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_092)
{
    // 09B7  ; [.275E.0020.0002] 
    // BENGALI LETTER SSA

    uint32_t const cps[1] = { 0x9b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x275e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_093)
{
    // 09B8  ; [.275F.0020.0002] 
    // BENGALI LETTER SA

    uint32_t const cps[1] = { 0x9b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x275f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_094)
{
    // 09B9  ; [.2760.0020.0002] 
    // BENGALI LETTER HA

    uint32_t const cps[1] = { 0x9b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2760), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_095)
{
    // 09BC  ; [.0000.00C2.0002] 
    // BENGALI SIGN NUKTA

    uint32_t const cps[1] = { 0x9bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_096)
{
    // 09BD  ; [.2761.0020.0002] 
    // BENGALI SIGN AVAGRAHA

    uint32_t const cps[1] = { 0x9bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2761), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_097)
{
    // 09BE  ; [.2762.0020.0002] 
    // BENGALI VOWEL SIGN AA

    uint32_t const cps[1] = { 0x9be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2762), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_098)
{
    // 09BF  ; [.2763.0020.0002] 
    // BENGALI VOWEL SIGN I

    uint32_t const cps[1] = { 0x9bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2763), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_099)
{
    // 09C0  ; [.2764.0020.0002] 
    // BENGALI VOWEL SIGN II

    uint32_t const cps[1] = { 0x9c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2764), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_100)
{
    // 09C1  ; [.2765.0020.0002] 
    // BENGALI VOWEL SIGN U

    uint32_t const cps[1] = { 0x9c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2765), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_101)
{
    // 09C2  ; [.2766.0020.0002] 
    // BENGALI VOWEL SIGN UU

    uint32_t const cps[1] = { 0x9c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2766), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_102)
{
    // 09C3  ; [.2767.0020.0002] 
    // BENGALI VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0x9c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2767), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_103)
{
    // 09C4  ; [.2768.0020.0002] 
    // BENGALI VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0x9c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2768), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_104)
{
    // 09C7  ; [.276B.0020.0002] 
    // BENGALI VOWEL SIGN E

    uint32_t const cps[1] = { 0x9c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x276b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_105)
{
    // 09C7 09BE ; [.276D.0020.0002] 
    // BENGALI VOWEL SIGN O

    uint32_t const cps[2] = { 0x9c7, 0x9be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x276d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_106)
{
    // 09C7 09D7 ; [.276E.0020.0002] 
    // BENGALI VOWEL SIGN AU

    uint32_t const cps[2] = { 0x9c7, 0x9d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x276e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_107)
{
    // 09C8  ; [.276C.0020.0002] 
    // BENGALI VOWEL SIGN AI

    uint32_t const cps[1] = { 0x9c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x276c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_108)
{
    // 09CB  ; [.276D.0020.0002] 
    // BENGALI VOWEL SIGN O

    uint32_t const cps[1] = { 0x9cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x276d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_109)
{
    // 09CC  ; [.276E.0020.0002] 
    // BENGALI VOWEL SIGN AU

    uint32_t const cps[1] = { 0x9cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x276e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_110)
{
    // 09CD  ; [.276F.0020.0002] 
    // BENGALI SIGN VIRAMA

    uint32_t const cps[1] = { 0x9cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x276f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_111)
{
    // 09CE  ; [.274E.0020.0004][.276F.0020.0004] 
    // BENGALI LETTER KHANDA TA

    uint32_t const cps[1] = { 0x9ce };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x274e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x276f), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_112)
{
    // 09D7  ; [.2770.0020.0002] 
    // BENGALI AU LENGTH MARK

    uint32_t const cps[1] = { 0x9d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2770), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_113)
{
    // 09DC  ; [.274B.0020.0002][.0000.00C2.0002] 
    // BENGALI LETTER RRA

    uint32_t const cps[1] = { 0x9dc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x274b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_114)
{
    // 09DD  ; [.274C.0020.0002][.0000.00C2.0002] 
    // BENGALI LETTER RHA

    uint32_t const cps[1] = { 0x9dd };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x274c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_115)
{
    // 09DF  ; [.2758.0020.0002][.0000.00C2.0002] 
    // BENGALI LETTER YYA

    uint32_t const cps[1] = { 0x9df };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2758), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_015_116)
{
    // 09E0  ; [.2738.0020.0002] 
    // BENGALI LETTER VOCALIC RR

    uint32_t const cps[1] = { 0x9e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2738), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_117)
{
    // 09E1  ; [.273A.0020.0002] 
    // BENGALI LETTER VOCALIC LL

    uint32_t const cps[1] = { 0x9e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x273a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_118)
{
    // 09E2  ; [.2769.0020.0002] 
    // BENGALI VOWEL SIGN VOCALIC L

    uint32_t const cps[1] = { 0x9e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2769), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_119)
{
    // 09E3  ; [.276A.0020.0002] 
    // BENGALI VOWEL SIGN VOCALIC LL

    uint32_t const cps[1] = { 0x9e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x276a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_120)
{
    // 09E6  ; [.1CA3.0020.0002] 
    // BENGALI DIGIT ZERO

    uint32_t const cps[1] = { 0x9e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_121)
{
    // 09E7  ; [.1CA4.0020.0002] 
    // BENGALI DIGIT ONE

    uint32_t const cps[1] = { 0x9e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_122)
{
    // 09E8  ; [.1CA5.0020.0002] 
    // BENGALI DIGIT TWO

    uint32_t const cps[1] = { 0x9e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_123)
{
    // 09E9  ; [.1CA6.0020.0002] 
    // BENGALI DIGIT THREE

    uint32_t const cps[1] = { 0x9e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_124)
{
    // 09EA  ; [.1CA7.0020.0002] 
    // BENGALI DIGIT FOUR

    uint32_t const cps[1] = { 0x9ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_125)
{
    // 09EB  ; [.1CA8.0020.0002] 
    // BENGALI DIGIT FIVE

    uint32_t const cps[1] = { 0x9eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_126)
{
    // 09EC  ; [.1CA9.0020.0002] 
    // BENGALI DIGIT SIX

    uint32_t const cps[1] = { 0x9ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_127)
{
    // 09ED  ; [.1CAA.0020.0002] 
    // BENGALI DIGIT SEVEN

    uint32_t const cps[1] = { 0x9ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_128)
{
    // 09EE  ; [.1CAB.0020.0002] 
    // BENGALI DIGIT EIGHT

    uint32_t const cps[1] = { 0x9ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_129)
{
    // 09EF  ; [.1CAC.0020.0002] 
    // BENGALI DIGIT NINE

    uint32_t const cps[1] = { 0x9ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_130)
{
    // 09F0  ; [.275A.0020.0002] 
    // BENGALI LETTER RA WITH MIDDLE DIAGONAL

    uint32_t const cps[1] = { 0x9f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x275a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_131)
{
    // 09F1  ; [.275C.0020.0002] 
    // BENGALI LETTER RA WITH LOWER DIAGONAL

    uint32_t const cps[1] = { 0x9f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x275c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_132)
{
    // 09F2  ; [.1C7C.0020.0002] 
    // BENGALI RUPEE MARK

    uint32_t const cps[1] = { 0x9f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_133)
{
    // 09F3  ; [.1C7D.0020.0002] 
    // BENGALI RUPEE SIGN

    uint32_t const cps[1] = { 0x9f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_134)
{
    // 09F4  ; [*1AFA.0020.0002] 
    // BENGALI CURRENCY NUMERATOR ONE

    uint32_t const cps[1] = { 0x9f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1afa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_135)
{
    // 09F5  ; [*1AFB.0020.0002] 
    // BENGALI CURRENCY NUMERATOR TWO

    uint32_t const cps[1] = { 0x9f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1afb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_136)
{
    // 09F6  ; [*1AFC.0020.0002] 
    // BENGALI CURRENCY NUMERATOR THREE

    uint32_t const cps[1] = { 0x9f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1afc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_137)
{
    // 09F7  ; [*1AFD.0020.0002] 
    // BENGALI CURRENCY NUMERATOR FOUR

    uint32_t const cps[1] = { 0x9f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1afd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_138)
{
    // 09F8  ; [*1AFE.0020.0002] 
    // BENGALI CURRENCY NUMERATOR ONE LESS THAN THE DENOMINATOR

    uint32_t const cps[1] = { 0x9f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1afe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_139)
{
    // 09F9  ; [*1AFF.0020.0002] 
    // BENGALI CURRENCY DENOMINATOR SIXTEEN

    uint32_t const cps[1] = { 0x9f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1aff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_140)
{
    // 09FA  ; [*0529.0020.0002] 
    // BENGALI ISSHAR

    uint32_t const cps[1] = { 0x9fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x529), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_141)
{
    // 09FB  ; [.1C7E.0020.0002] 
    // BENGALI GANDA MARK

    uint32_t const cps[1] = { 0x9fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_142)
{
    // 09FC  ; [.2771.0020.0002] 
    // BENGALI LETTER VEDIC ANUSVARA

    uint32_t const cps[1] = { 0x9fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2771), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_143)
{
    // 09FD  ; [*03F1.0020.0002] 
    // BENGALI ABBREVIATION SIGN

    uint32_t const cps[1] = { 0x9fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_144)
{
    // 0A01  ; [.0000.00C3.0002] 
    // GURMUKHI SIGN ADAK BINDI

    uint32_t const cps[1] = { 0xa01 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_145)
{
    // 0A02  ; [.0000.00C4.0002] 
    // GURMUKHI SIGN BINDI

    uint32_t const cps[1] = { 0xa02 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_146)
{
    // 0A03  ; [.0000.00C5.0002] 
    // GURMUKHI SIGN VISARGA

    uint32_t const cps[1] = { 0xa03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_147)
{
    // 0A05  ; [.2777.0020.0002] 
    // GURMUKHI LETTER A

    uint32_t const cps[1] = { 0xa05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2777), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_148)
{
    // 0A06  ; [.2778.0020.0002] 
    // GURMUKHI LETTER AA

    uint32_t const cps[1] = { 0xa06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2778), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_015_149)
{
    // 0A07  ; [.277C.0020.0002] 
    // GURMUKHI LETTER I

    uint32_t const cps[1] = { 0xa07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x277c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

