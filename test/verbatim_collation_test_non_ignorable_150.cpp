// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_150_000)
{
    // FB7D 0061;	
    // (‎‎ﭽ‎‎) ARABIC LETTER TCHEH MEDIAL FORM	[238E 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB7D, 0x0061 };
    uint32_t const ces[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_001)
{
    // FB7D 0041;	
    // (‎‎ﭽ‎‎) ARABIC LETTER TCHEH MEDIAL FORM	[238E 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFB7D, 0x0041 };
    uint32_t const ces[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_002)
{
    // FB7B 0061;	
    // (‎‎ﭻ‎‎) ARABIC LETTER TCHEH FINAL FORM	[238E 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB7B, 0x0061 };
    uint32_t const ces[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_003)
{
    // FB7B 0041;	
    // (‎‎ﭻ‎‎) ARABIC LETTER TCHEH FINAL FORM	[238E 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB7B, 0x0041 };
    uint32_t const ces[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_004)
{
    // FB7A 0061;	
    // (‎‎ﭺ‎‎) ARABIC LETTER TCHEH ISOLATED FORM	[238E 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB7A, 0x0061 };
    uint32_t const ces[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_005)
{
    // FB7A 0041;	
    // (‎‎ﭺ‎‎) ARABIC LETTER TCHEH ISOLATED FORM	[238E 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB7A, 0x0041 };
    uint32_t const ces[9] = { 0x238E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_006)
{
    // 0686 0062;	
    // (‎‎چ‎‎) ARABIC LETTER TCHEH	[238E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0686, 0x0062 };
    uint32_t const ces[9] = { 0x238E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_007)
{
    // FB7C 0062;	
    // (‎‎ﭼ‎‎) ARABIC LETTER TCHEH INITIAL FORM	[238E 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB7C, 0x0062 };
    uint32_t const ces[9] = { 0x238E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_008)
{
    // FB7D 0062;	
    // (‎‎ﭽ‎‎) ARABIC LETTER TCHEH MEDIAL FORM	[238E 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB7D, 0x0062 };
    uint32_t const ces[9] = { 0x238E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_009)
{
    // FB7B 0062;	
    // (‎‎ﭻ‎‎) ARABIC LETTER TCHEH FINAL FORM	[238E 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB7B, 0x0062 };
    uint32_t const ces[9] = { 0x238E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_010)
{
    // FB7A 0062;	
    // (‎‎ﭺ‎‎) ARABIC LETTER TCHEH ISOLATED FORM	[238E 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB7A, 0x0062 };
    uint32_t const ces[9] = { 0x238E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_011)
{
    // 06BF 0021;	
    // (‎‎ڿ‎‎) ARABIC LETTER TCHEH WITH DOT ABOVE	[238F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BF, 0x0021 };
    uint32_t const ces[9] = { 0x238F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_012)
{
    // 06BF 003F;	
    // (‎‎ڿ‎‎) ARABIC LETTER TCHEH WITH DOT ABOVE	[238F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BF, 0x003F };
    uint32_t const ces[9] = { 0x238F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_013)
{
    // 06BF 0061;	
    // (‎‎ڿ‎‎) ARABIC LETTER TCHEH WITH DOT ABOVE	[238F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BF, 0x0061 };
    uint32_t const ces[9] = { 0x238F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_014)
{
    // 06BF 0041;	
    // (‎‎ڿ‎‎) ARABIC LETTER TCHEH WITH DOT ABOVE	[238F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06BF, 0x0041 };
    uint32_t const ces[9] = { 0x238F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_015)
{
    // 06BF 0062;	
    // (‎‎ڿ‎‎) ARABIC LETTER TCHEH WITH DOT ABOVE	[238F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06BF, 0x0062 };
    uint32_t const ces[9] = { 0x238F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_016)
{
    // 0687 0021;	
    // (‎‎ڇ‎‎) ARABIC LETTER TCHEHEH	[2390 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0687, 0x0021 };
    uint32_t const ces[9] = { 0x2390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_017)
{
    // FB80 0021;	
    // (‎‎ﮀ‎‎) ARABIC LETTER TCHEHEH INITIAL FORM	[2390 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB80, 0x0021 };
    uint32_t const ces[9] = { 0x2390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_018)
{
    // FB81 0021;	
    // (‎‎ﮁ‎‎) ARABIC LETTER TCHEHEH MEDIAL FORM	[2390 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB81, 0x0021 };
    uint32_t const ces[9] = { 0x2390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_019)
{
    // FB7F 0021;	
    // (‎‎ﭿ‎‎) ARABIC LETTER TCHEHEH FINAL FORM	[2390 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB7F, 0x0021 };
    uint32_t const ces[9] = { 0x2390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_020)
{
    // FB7E 0021;	
    // (‎‎ﭾ‎‎) ARABIC LETTER TCHEHEH ISOLATED FORM	[2390 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB7E, 0x0021 };
    uint32_t const ces[9] = { 0x2390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_021)
{
    // 0687 003F;	
    // (‎‎ڇ‎‎) ARABIC LETTER TCHEHEH	[2390 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0687, 0x003F };
    uint32_t const ces[9] = { 0x2390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_022)
{
    // FB80 003F;	
    // (‎‎ﮀ‎‎) ARABIC LETTER TCHEHEH INITIAL FORM	[2390 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB80, 0x003F };
    uint32_t const ces[9] = { 0x2390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_023)
{
    // FB81 003F;	
    // (‎‎ﮁ‎‎) ARABIC LETTER TCHEHEH MEDIAL FORM	[2390 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB81, 0x003F };
    uint32_t const ces[9] = { 0x2390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_024)
{
    // FB7F 003F;	
    // (‎‎ﭿ‎‎) ARABIC LETTER TCHEHEH FINAL FORM	[2390 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB7F, 0x003F };
    uint32_t const ces[9] = { 0x2390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_025)
{
    // FB7E 003F;	
    // (‎‎ﭾ‎‎) ARABIC LETTER TCHEHEH ISOLATED FORM	[2390 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB7E, 0x003F };
    uint32_t const ces[9] = { 0x2390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_026)
{
    // 0687 0061;	
    // (‎‎ڇ‎‎) ARABIC LETTER TCHEHEH	[2390 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0687, 0x0061 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_027)
{
    // 0687 0041;	
    // (‎‎ڇ‎‎) ARABIC LETTER TCHEHEH	[2390 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0687, 0x0041 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_028)
{
    // FB80 0061;	
    // (‎‎ﮀ‎‎) ARABIC LETTER TCHEHEH INITIAL FORM	[2390 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB80, 0x0061 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_029)
{
    // FB80 0041;	
    // (‎‎ﮀ‎‎) ARABIC LETTER TCHEHEH INITIAL FORM	[2390 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFB80, 0x0041 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_030)
{
    // FB81 0061;	
    // (‎‎ﮁ‎‎) ARABIC LETTER TCHEHEH MEDIAL FORM	[2390 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB81, 0x0061 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_031)
{
    // FB81 0041;	
    // (‎‎ﮁ‎‎) ARABIC LETTER TCHEHEH MEDIAL FORM	[2390 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFB81, 0x0041 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_032)
{
    // FB7F 0061;	
    // (‎‎ﭿ‎‎) ARABIC LETTER TCHEHEH FINAL FORM	[2390 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB7F, 0x0061 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_033)
{
    // FB7F 0041;	
    // (‎‎ﭿ‎‎) ARABIC LETTER TCHEHEH FINAL FORM	[2390 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB7F, 0x0041 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_034)
{
    // FB7E 0061;	
    // (‎‎ﭾ‎‎) ARABIC LETTER TCHEHEH ISOLATED FORM	[2390 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB7E, 0x0061 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_035)
{
    // FB7E 0041;	
    // (‎‎ﭾ‎‎) ARABIC LETTER TCHEHEH ISOLATED FORM	[2390 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB7E, 0x0041 };
    uint32_t const ces[9] = { 0x2390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_036)
{
    // 0687 0062;	
    // (‎‎ڇ‎‎) ARABIC LETTER TCHEHEH	[2390 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0687, 0x0062 };
    uint32_t const ces[9] = { 0x2390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_037)
{
    // FB80 0062;	
    // (‎‎ﮀ‎‎) ARABIC LETTER TCHEHEH INITIAL FORM	[2390 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFB80, 0x0062 };
    uint32_t const ces[9] = { 0x2390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_038)
{
    // FB81 0062;	
    // (‎‎ﮁ‎‎) ARABIC LETTER TCHEHEH MEDIAL FORM	[2390 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFB81, 0x0062 };
    uint32_t const ces[9] = { 0x2390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_039)
{
    // FB7F 0062;	
    // (‎‎ﭿ‎‎) ARABIC LETTER TCHEHEH FINAL FORM	[2390 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB7F, 0x0062 };
    uint32_t const ces[9] = { 0x2390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_040)
{
    // FB7E 0062;	
    // (‎‎ﭾ‎‎) ARABIC LETTER TCHEHEH ISOLATED FORM	[2390 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB7E, 0x0062 };
    uint32_t const ces[9] = { 0x2390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_041)
{
    // 08A2 0021;	
    // (‎‎ࢢ‎‎) ARABIC LETTER JEEM WITH TWO DOTS ABOVE	[2391 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A2, 0x0021 };
    uint32_t const ces[9] = { 0x2391, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_042)
{
    // 08A2 003F;	
    // (‎‎ࢢ‎‎) ARABIC LETTER JEEM WITH TWO DOTS ABOVE	[2391 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A2, 0x003F };
    uint32_t const ces[9] = { 0x2391, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_043)
{
    // 08A2 0061;	
    // (‎‎ࢢ‎‎) ARABIC LETTER JEEM WITH TWO DOTS ABOVE	[2391 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A2, 0x0061 };
    uint32_t const ces[9] = { 0x2391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_044)
{
    // 08A2 0041;	
    // (‎‎ࢢ‎‎) ARABIC LETTER JEEM WITH TWO DOTS ABOVE	[2391 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08A2, 0x0041 };
    uint32_t const ces[9] = { 0x2391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_045)
{
    // 08A2 0062;	
    // (‎‎ࢢ‎‎) ARABIC LETTER JEEM WITH TWO DOTS ABOVE	[2391 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08A2, 0x0062 };
    uint32_t const ces[9] = { 0x2391, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_046)
{
    // 062D 0021;	
    // (‎‎ح‎‎) ARABIC LETTER HAH	[2392 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062D, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_047)
{
    // 1EE07 0021;	
    // (‎‎𞸇‎‎) ARABIC MATHEMATICAL HAH	[2392 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE07, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_048)
{
    // 1EE27 0021;	
    // (‎‎𞸧‎‎) ARABIC MATHEMATICAL INITIAL HAH	[2392 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE27, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_049)
{
    // 1EE47 0021;	
    // (‎‎𞹇‎‎) ARABIC MATHEMATICAL TAILED HAH	[2392 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE47, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_050)
{
    // 1EE67 0021;	
    // (‎‎𞹧‎‎) ARABIC MATHEMATICAL STRETCHED HAH	[2392 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE67, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_051)
{
    // 1EE87 0021;	
    // (‎‎𞺇‎‎) ARABIC MATHEMATICAL LOOPED HAH	[2392 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE87, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_052)
{
    // 1EEA7 0021;	
    // (‎‎𞺧‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK HAH	[2392 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA7, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_053)
{
    // FEA3 0021;	
    // (‎‎ﺣ‎‎) ARABIC LETTER HAH INITIAL FORM	[2392 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEA3, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_054)
{
    // FEA4 0021;	
    // (‎‎ﺤ‎‎) ARABIC LETTER HAH MEDIAL FORM	[2392 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEA4, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_055)
{
    // FEA2 0021;	
    // (‎‎ﺢ‎‎) ARABIC LETTER HAH FINAL FORM	[2392 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEA2, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_056)
{
    // FEA1 0021;	
    // (‎‎ﺡ‎‎) ARABIC LETTER HAH ISOLATED FORM	[2392 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA1, 0x0021 };
    uint32_t const ces[9] = { 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_057)
{
    // 062D 003F;	
    // (‎‎ح‎‎) ARABIC LETTER HAH	[2392 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062D, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_058)
{
    // 1EE07 003F;	
    // (‎‎𞸇‎‎) ARABIC MATHEMATICAL HAH	[2392 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE07, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_059)
{
    // 1EE27 003F;	
    // (‎‎𞸧‎‎) ARABIC MATHEMATICAL INITIAL HAH	[2392 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE27, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_060)
{
    // 1EE47 003F;	
    // (‎‎𞹇‎‎) ARABIC MATHEMATICAL TAILED HAH	[2392 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE47, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_061)
{
    // 1EE67 003F;	
    // (‎‎𞹧‎‎) ARABIC MATHEMATICAL STRETCHED HAH	[2392 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE67, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_062)
{
    // 1EE87 003F;	
    // (‎‎𞺇‎‎) ARABIC MATHEMATICAL LOOPED HAH	[2392 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE87, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_063)
{
    // 1EEA7 003F;	
    // (‎‎𞺧‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK HAH	[2392 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA7, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_064)
{
    // FEA3 003F;	
    // (‎‎ﺣ‎‎) ARABIC LETTER HAH INITIAL FORM	[2392 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEA3, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_065)
{
    // FEA4 003F;	
    // (‎‎ﺤ‎‎) ARABIC LETTER HAH MEDIAL FORM	[2392 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEA4, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_066)
{
    // FEA2 003F;	
    // (‎‎ﺢ‎‎) ARABIC LETTER HAH FINAL FORM	[2392 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEA2, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_067)
{
    // FEA1 003F;	
    // (‎‎ﺡ‎‎) ARABIC LETTER HAH ISOLATED FORM	[2392 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA1, 0x003F };
    uint32_t const ces[9] = { 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_068)
{
    // 062D 0061;	
    // (‎‎ح‎‎) ARABIC LETTER HAH	[2392 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062D, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_069)
{
    // 062D 0041;	
    // (‎‎ح‎‎) ARABIC LETTER HAH	[2392 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x062D, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_070)
{
    // 1EE07 0061;	
    // (‎‎𞸇‎‎) ARABIC MATHEMATICAL HAH	[2392 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE07, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_071)
{
    // 1EE27 0061;	
    // (‎‎𞸧‎‎) ARABIC MATHEMATICAL INITIAL HAH	[2392 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE27, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_072)
{
    // 1EE47 0061;	
    // (‎‎𞹇‎‎) ARABIC MATHEMATICAL TAILED HAH	[2392 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE47, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_073)
{
    // 1EE67 0061;	
    // (‎‎𞹧‎‎) ARABIC MATHEMATICAL STRETCHED HAH	[2392 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE67, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_074)
{
    // 1EE87 0061;	
    // (‎‎𞺇‎‎) ARABIC MATHEMATICAL LOOPED HAH	[2392 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE87, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_075)
{
    // 1EEA7 0061;	
    // (‎‎𞺧‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK HAH	[2392 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA7, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_076)
{
    // 1EE07 0041;	
    // (‎‎𞸇‎‎) ARABIC MATHEMATICAL HAH	[2392 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE07, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_077)
{
    // 1EE27 0041;	
    // (‎‎𞸧‎‎) ARABIC MATHEMATICAL INITIAL HAH	[2392 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE27, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_078)
{
    // 1EE47 0041;	
    // (‎‎𞹇‎‎) ARABIC MATHEMATICAL TAILED HAH	[2392 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE47, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_079)
{
    // 1EE67 0041;	
    // (‎‎𞹧‎‎) ARABIC MATHEMATICAL STRETCHED HAH	[2392 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE67, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_080)
{
    // 1EE87 0041;	
    // (‎‎𞺇‎‎) ARABIC MATHEMATICAL LOOPED HAH	[2392 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE87, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_081)
{
    // 1EEA7 0041;	
    // (‎‎𞺧‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK HAH	[2392 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEA7, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_082)
{
    // FEA3 0061;	
    // (‎‎ﺣ‎‎) ARABIC LETTER HAH INITIAL FORM	[2392 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEA3, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_083)
{
    // FEA3 0041;	
    // (‎‎ﺣ‎‎) ARABIC LETTER HAH INITIAL FORM	[2392 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEA3, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_084)
{
    // FEA4 0061;	
    // (‎‎ﺤ‎‎) ARABIC LETTER HAH MEDIAL FORM	[2392 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEA4, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_085)
{
    // FEA4 0041;	
    // (‎‎ﺤ‎‎) ARABIC LETTER HAH MEDIAL FORM	[2392 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEA4, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_086)
{
    // FEA2 0061;	
    // (‎‎ﺢ‎‎) ARABIC LETTER HAH FINAL FORM	[2392 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEA2, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_087)
{
    // FEA2 0041;	
    // (‎‎ﺢ‎‎) ARABIC LETTER HAH FINAL FORM	[2392 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEA2, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_088)
{
    // FEA1 0061;	
    // (‎‎ﺡ‎‎) ARABIC LETTER HAH ISOLATED FORM	[2392 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA1, 0x0061 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_089)
{
    // FEA1 0041;	
    // (‎‎ﺡ‎‎) ARABIC LETTER HAH ISOLATED FORM	[2392 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEA1, 0x0041 };
    uint32_t const ces[9] = { 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_090)
{
    // 062D 0062;	
    // (‎‎ح‎‎) ARABIC LETTER HAH	[2392 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062D, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_091)
{
    // 1EE07 0062;	
    // (‎‎𞸇‎‎) ARABIC MATHEMATICAL HAH	[2392 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE07, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_092)
{
    // 1EE27 0062;	
    // (‎‎𞸧‎‎) ARABIC MATHEMATICAL INITIAL HAH	[2392 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE27, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_093)
{
    // 1EE47 0062;	
    // (‎‎𞹇‎‎) ARABIC MATHEMATICAL TAILED HAH	[2392 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE47, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_094)
{
    // 1EE67 0062;	
    // (‎‎𞹧‎‎) ARABIC MATHEMATICAL STRETCHED HAH	[2392 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE67, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_095)
{
    // 1EE87 0062;	
    // (‎‎𞺇‎‎) ARABIC MATHEMATICAL LOOPED HAH	[2392 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE87, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_096)
{
    // 1EEA7 0062;	
    // (‎‎𞺧‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK HAH	[2392 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA7, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_097)
{
    // FEA3 0062;	
    // (‎‎ﺣ‎‎) ARABIC LETTER HAH INITIAL FORM	[2392 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEA3, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_098)
{
    // FEA4 0062;	
    // (‎‎ﺤ‎‎) ARABIC LETTER HAH MEDIAL FORM	[2392 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEA4, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_099)
{
    // FEA2 0062;	
    // (‎‎ﺢ‎‎) ARABIC LETTER HAH FINAL FORM	[2392 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEA2, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_100)
{
    // FEA1 0062;	
    // (‎‎ﺡ‎‎) ARABIC LETTER HAH ISOLATED FORM	[2392 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA1, 0x0062 };
    uint32_t const ces[9] = { 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_101)
{
    // FCA9 0021;	
    // (‎‎ﲩ‎‎) ARABIC LIGATURE HAH WITH JEEM INITIAL FORM	[2392 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA9, 0x0021 };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_102)
{
    // FC17 0021;	
    // (‎‎ﰗ‎‎) ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM	[2392 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC17, 0x0021 };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_103)
{
    // FCA9 003F;	
    // (‎‎ﲩ‎‎) ARABIC LIGATURE HAH WITH JEEM INITIAL FORM	[2392 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA9, 0x003F };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_104)
{
    // FC17 003F;	
    // (‎‎ﰗ‎‎) ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM	[2392 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC17, 0x003F };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_105)
{
    // FCA9 0061;	
    // (‎‎ﲩ‎‎) ARABIC LIGATURE HAH WITH JEEM INITIAL FORM	[2392 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA9, 0x0061 };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_106)
{
    // FCA9 0041;	
    // (‎‎ﲩ‎‎) ARABIC LIGATURE HAH WITH JEEM INITIAL FORM	[2392 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCA9, 0x0041 };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_107)
{
    // FC17 0061;	
    // (‎‎ﰗ‎‎) ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM	[2392 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC17, 0x0061 };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_108)
{
    // FC17 0041;	
    // (‎‎ﰗ‎‎) ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM	[2392 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC17, 0x0041 };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_109)
{
    // FCA9 0062;	
    // (‎‎ﲩ‎‎) ARABIC LIGATURE HAH WITH JEEM INITIAL FORM	[2392 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCA9, 0x0062 };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_110)
{
    // FC17 0062;	
    // (‎‎ﰗ‎‎) ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM	[2392 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC17, 0x0062 };
    uint32_t const ces[12] = { 0x2392, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_111)
{
    // FDBF 0021;	
    // (‎‎ﶿ‎‎) ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM	[2392 238B 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBF, 0x0021 };
    uint32_t const ces[15] = { 0x2392, 0x238B, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_112)
{
    // FDBF 003F;	
    // (‎‎ﶿ‎‎) ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM	[2392 238B 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBF, 0x003F };
    uint32_t const ces[15] = { 0x2392, 0x238B, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_113)
{
    // FDBF 0061;	
    // (‎‎ﶿ‎‎) ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM	[2392 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBF, 0x0061 };
    uint32_t const ces[15] = { 0x2392, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_114)
{
    // FDBF 0041;	
    // (‎‎ﶿ‎‎) ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM	[2392 238B 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDBF, 0x0041 };
    uint32_t const ces[15] = { 0x2392, 0x238B, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_115)
{
    // FDBF 0062;	
    // (‎‎ﶿ‎‎) ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM	[2392 238B 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDBF, 0x0062 };
    uint32_t const ces[15] = { 0x2392, 0x238B, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_116)
{
    // FCAA 0021;	
    // (‎‎ﲪ‎‎) ARABIC LIGATURE HAH WITH MEEM INITIAL FORM	[2392 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAA, 0x0021 };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_117)
{
    // FC18 0021;	
    // (‎‎ﰘ‎‎) ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM	[2392 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC18, 0x0021 };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_118)
{
    // FCAA 003F;	
    // (‎‎ﲪ‎‎) ARABIC LIGATURE HAH WITH MEEM INITIAL FORM	[2392 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAA, 0x003F };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_119)
{
    // FC18 003F;	
    // (‎‎ﰘ‎‎) ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM	[2392 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC18, 0x003F };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_120)
{
    // FCAA 0061;	
    // (‎‎ﲪ‎‎) ARABIC LIGATURE HAH WITH MEEM INITIAL FORM	[2392 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAA, 0x0061 };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_121)
{
    // FCAA 0041;	
    // (‎‎ﲪ‎‎) ARABIC LIGATURE HAH WITH MEEM INITIAL FORM	[2392 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCAA, 0x0041 };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_122)
{
    // FC18 0061;	
    // (‎‎ﰘ‎‎) ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM	[2392 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC18, 0x0061 };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_123)
{
    // FC18 0041;	
    // (‎‎ﰘ‎‎) ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM	[2392 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC18, 0x0041 };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_124)
{
    // FCAA 0062;	
    // (‎‎ﲪ‎‎) ARABIC LIGATURE HAH WITH MEEM INITIAL FORM	[2392 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAA, 0x0062 };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_125)
{
    // FC18 0062;	
    // (‎‎ﰘ‎‎) ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM	[2392 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC18, 0x0062 };
    uint32_t const ces[12] = { 0x2392, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_126)
{
    // FD5B 0021;	
    // (‎‎ﵛ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2392 2409 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5B, 0x0021 };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_127)
{
    // FD5B 003F;	
    // (‎‎ﵛ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2392 2409 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5B, 0x003F };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_128)
{
    // FD5B 0061;	
    // (‎‎ﵛ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2392 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5B, 0x0061 };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_129)
{
    // FD5B 0041;	
    // (‎‎ﵛ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2392 2409 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD5B, 0x0041 };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_130)
{
    // FD5B 0062;	
    // (‎‎ﵛ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM	[2392 2409 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5B, 0x0062 };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_131)
{
    // FD5A 0021;	
    // (‎‎ﵚ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM	[2392 2409 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5A, 0x0021 };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_132)
{
    // FD5A 003F;	
    // (‎‎ﵚ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM	[2392 2409 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5A, 0x003F };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_133)
{
    // FD5A 0061;	
    // (‎‎ﵚ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM	[2392 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5A, 0x0061 };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_134)
{
    // FD5A 0041;	
    // (‎‎ﵚ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM	[2392 2409 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD5A, 0x0041 };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_135)
{
    // FD5A 0062;	
    // (‎‎ﵚ‎‎) ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM	[2392 2409 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD5A, 0x0062 };
    uint32_t const ces[15] = { 0x2392, 0x2409, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_136)
{
    // FD1B 0021;	
    // (‎‎ﴛ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM	[2392 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1B, 0x0021 };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_137)
{
    // FCFF 0021;	
    // (‎‎ﳿ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM	[2392 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFF, 0x0021 };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_138)
{
    // FD1B 003F;	
    // (‎‎ﴛ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM	[2392 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1B, 0x003F };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_139)
{
    // FCFF 003F;	
    // (‎‎ﳿ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM	[2392 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFF, 0x003F };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_140)
{
    // FD1B 0061;	
    // (‎‎ﴛ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM	[2392 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1B, 0x0061 };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_141)
{
    // FD1B 0041;	
    // (‎‎ﴛ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM	[2392 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD1B, 0x0041 };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_142)
{
    // FCFF 0061;	
    // (‎‎ﳿ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM	[2392 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFF, 0x0061 };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_143)
{
    // FCFF 0041;	
    // (‎‎ﳿ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM	[2392 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFCFF, 0x0041 };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_144)
{
    // FD1B 0062;	
    // (‎‎ﴛ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM	[2392 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1B, 0x0062 };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_145)
{
    // FCFF 0062;	
    // (‎‎ﳿ‎‎) ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM	[2392 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFF, 0x0062 };
    uint32_t const ces[12] = { 0x2392, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_146)
{
    // FD1C 0021;	
    // (‎‎ﴜ‎‎) ARABIC LIGATURE HAH WITH YEH FINAL FORM	[2392 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1C, 0x0021 };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_147)
{
    // FD00 0021;	
    // (‎‎ﴀ‎‎) ARABIC LIGATURE HAH WITH YEH ISOLATED FORM	[2392 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD00, 0x0021 };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_148)
{
    // FD1C 003F;	
    // (‎‎ﴜ‎‎) ARABIC LIGATURE HAH WITH YEH FINAL FORM	[2392 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1C, 0x003F };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_149)
{
    // FD00 003F;	
    // (‎‎ﴀ‎‎) ARABIC LIGATURE HAH WITH YEH ISOLATED FORM	[2392 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD00, 0x003F };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_150)
{
    // FD1C 0061;	
    // (‎‎ﴜ‎‎) ARABIC LIGATURE HAH WITH YEH FINAL FORM	[2392 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1C, 0x0061 };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_151)
{
    // FD1C 0041;	
    // (‎‎ﴜ‎‎) ARABIC LIGATURE HAH WITH YEH FINAL FORM	[2392 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD1C, 0x0041 };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_152)
{
    // FD00 0061;	
    // (‎‎ﴀ‎‎) ARABIC LIGATURE HAH WITH YEH ISOLATED FORM	[2392 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD00, 0x0061 };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_153)
{
    // FD00 0041;	
    // (‎‎ﴀ‎‎) ARABIC LIGATURE HAH WITH YEH ISOLATED FORM	[2392 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD00, 0x0041 };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_154)
{
    // FD1C 0062;	
    // (‎‎ﴜ‎‎) ARABIC LIGATURE HAH WITH YEH FINAL FORM	[2392 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1C, 0x0062 };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_155)
{
    // FD00 0062;	
    // (‎‎ﴀ‎‎) ARABIC LIGATURE HAH WITH YEH ISOLATED FORM	[2392 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD00, 0x0062 };
    uint32_t const ces[12] = { 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_156)
{
    // 062E 0021;	
    // (‎‎خ‎‎) ARABIC LETTER KHAH	[2393 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062E, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_157)
{
    // 1EE17 0021;	
    // (‎‎𞸗‎‎) ARABIC MATHEMATICAL KHAH	[2393 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE17, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_158)
{
    // 1EE37 0021;	
    // (‎‎𞸷‎‎) ARABIC MATHEMATICAL INITIAL KHAH	[2393 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE37, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_159)
{
    // 1EE57 0021;	
    // (‎‎𞹗‎‎) ARABIC MATHEMATICAL TAILED KHAH	[2393 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE57, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_160)
{
    // 1EE77 0021;	
    // (‎‎𞹷‎‎) ARABIC MATHEMATICAL STRETCHED KHAH	[2393 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE77, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_161)
{
    // 1EE97 0021;	
    // (‎‎𞺗‎‎) ARABIC MATHEMATICAL LOOPED KHAH	[2393 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE97, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_162)
{
    // 1EEB7 0021;	
    // (‎‎𞺷‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK KHAH	[2393 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB7, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_163)
{
    // FEA7 0021;	
    // (‎‎ﺧ‎‎) ARABIC LETTER KHAH INITIAL FORM	[2393 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEA7, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_164)
{
    // FEA8 0021;	
    // (‎‎ﺨ‎‎) ARABIC LETTER KHAH MEDIAL FORM	[2393 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEA8, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_165)
{
    // FEA6 0021;	
    // (‎‎ﺦ‎‎) ARABIC LETTER KHAH FINAL FORM	[2393 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEA6, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_166)
{
    // FEA5 0021;	
    // (‎‎ﺥ‎‎) ARABIC LETTER KHAH ISOLATED FORM	[2393 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA5, 0x0021 };
    uint32_t const ces[9] = { 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_167)
{
    // 062E 003F;	
    // (‎‎خ‎‎) ARABIC LETTER KHAH	[2393 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062E, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_168)
{
    // 1EE17 003F;	
    // (‎‎𞸗‎‎) ARABIC MATHEMATICAL KHAH	[2393 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE17, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_169)
{
    // 1EE37 003F;	
    // (‎‎𞸷‎‎) ARABIC MATHEMATICAL INITIAL KHAH	[2393 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE37, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_170)
{
    // 1EE57 003F;	
    // (‎‎𞹗‎‎) ARABIC MATHEMATICAL TAILED KHAH	[2393 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE57, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_171)
{
    // 1EE77 003F;	
    // (‎‎𞹷‎‎) ARABIC MATHEMATICAL STRETCHED KHAH	[2393 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE77, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_172)
{
    // 1EE97 003F;	
    // (‎‎𞺗‎‎) ARABIC MATHEMATICAL LOOPED KHAH	[2393 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE97, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_173)
{
    // 1EEB7 003F;	
    // (‎‎𞺷‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK KHAH	[2393 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB7, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_174)
{
    // FEA7 003F;	
    // (‎‎ﺧ‎‎) ARABIC LETTER KHAH INITIAL FORM	[2393 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEA7, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_175)
{
    // FEA8 003F;	
    // (‎‎ﺨ‎‎) ARABIC LETTER KHAH MEDIAL FORM	[2393 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEA8, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_176)
{
    // FEA6 003F;	
    // (‎‎ﺦ‎‎) ARABIC LETTER KHAH FINAL FORM	[2393 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEA6, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_177)
{
    // FEA5 003F;	
    // (‎‎ﺥ‎‎) ARABIC LETTER KHAH ISOLATED FORM	[2393 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA5, 0x003F };
    uint32_t const ces[9] = { 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_178)
{
    // 062E 0061;	
    // (‎‎خ‎‎) ARABIC LETTER KHAH	[2393 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062E, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_179)
{
    // 062E 0041;	
    // (‎‎خ‎‎) ARABIC LETTER KHAH	[2393 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x062E, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_180)
{
    // 1EE17 0061;	
    // (‎‎𞸗‎‎) ARABIC MATHEMATICAL KHAH	[2393 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE17, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_181)
{
    // 1EE37 0061;	
    // (‎‎𞸷‎‎) ARABIC MATHEMATICAL INITIAL KHAH	[2393 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE37, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_182)
{
    // 1EE57 0061;	
    // (‎‎𞹗‎‎) ARABIC MATHEMATICAL TAILED KHAH	[2393 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE57, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_183)
{
    // 1EE77 0061;	
    // (‎‎𞹷‎‎) ARABIC MATHEMATICAL STRETCHED KHAH	[2393 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE77, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_184)
{
    // 1EE97 0061;	
    // (‎‎𞺗‎‎) ARABIC MATHEMATICAL LOOPED KHAH	[2393 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE97, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_185)
{
    // 1EEB7 0061;	
    // (‎‎𞺷‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK KHAH	[2393 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB7, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_186)
{
    // 1EE17 0041;	
    // (‎‎𞸗‎‎) ARABIC MATHEMATICAL KHAH	[2393 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE17, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_187)
{
    // 1EE37 0041;	
    // (‎‎𞸷‎‎) ARABIC MATHEMATICAL INITIAL KHAH	[2393 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE37, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_188)
{
    // 1EE57 0041;	
    // (‎‎𞹗‎‎) ARABIC MATHEMATICAL TAILED KHAH	[2393 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE57, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_189)
{
    // 1EE77 0041;	
    // (‎‎𞹷‎‎) ARABIC MATHEMATICAL STRETCHED KHAH	[2393 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE77, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_190)
{
    // 1EE97 0041;	
    // (‎‎𞺗‎‎) ARABIC MATHEMATICAL LOOPED KHAH	[2393 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE97, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_191)
{
    // 1EEB7 0041;	
    // (‎‎𞺷‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK KHAH	[2393 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEB7, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_192)
{
    // FEA7 0061;	
    // (‎‎ﺧ‎‎) ARABIC LETTER KHAH INITIAL FORM	[2393 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEA7, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_193)
{
    // FEA7 0041;	
    // (‎‎ﺧ‎‎) ARABIC LETTER KHAH INITIAL FORM	[2393 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEA7, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_194)
{
    // FEA8 0061;	
    // (‎‎ﺨ‎‎) ARABIC LETTER KHAH MEDIAL FORM	[2393 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEA8, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_195)
{
    // FEA8 0041;	
    // (‎‎ﺨ‎‎) ARABIC LETTER KHAH MEDIAL FORM	[2393 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEA8, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_196)
{
    // FEA6 0061;	
    // (‎‎ﺦ‎‎) ARABIC LETTER KHAH FINAL FORM	[2393 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEA6, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_197)
{
    // FEA6 0041;	
    // (‎‎ﺦ‎‎) ARABIC LETTER KHAH FINAL FORM	[2393 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEA6, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_198)
{
    // FEA5 0061;	
    // (‎‎ﺥ‎‎) ARABIC LETTER KHAH ISOLATED FORM	[2393 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA5, 0x0061 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_199)
{
    // FEA5 0041;	
    // (‎‎ﺥ‎‎) ARABIC LETTER KHAH ISOLATED FORM	[2393 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEA5, 0x0041 };
    uint32_t const ces[9] = { 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_200)
{
    // 062E 0062;	
    // (‎‎خ‎‎) ARABIC LETTER KHAH	[2393 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062E, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_201)
{
    // 1EE17 0062;	
    // (‎‎𞸗‎‎) ARABIC MATHEMATICAL KHAH	[2393 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE17, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_202)
{
    // 1EE37 0062;	
    // (‎‎𞸷‎‎) ARABIC MATHEMATICAL INITIAL KHAH	[2393 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE37, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_203)
{
    // 1EE57 0062;	
    // (‎‎𞹗‎‎) ARABIC MATHEMATICAL TAILED KHAH	[2393 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE57, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_204)
{
    // 1EE77 0062;	
    // (‎‎𞹷‎‎) ARABIC MATHEMATICAL STRETCHED KHAH	[2393 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE77, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_205)
{
    // 1EE97 0062;	
    // (‎‎𞺗‎‎) ARABIC MATHEMATICAL LOOPED KHAH	[2393 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE97, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_206)
{
    // 1EEB7 0062;	
    // (‎‎𞺷‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK KHAH	[2393 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB7, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_207)
{
    // FEA7 0062;	
    // (‎‎ﺧ‎‎) ARABIC LETTER KHAH INITIAL FORM	[2393 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEA7, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_208)
{
    // FEA8 0062;	
    // (‎‎ﺨ‎‎) ARABIC LETTER KHAH MEDIAL FORM	[2393 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEA8, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_209)
{
    // FEA6 0062;	
    // (‎‎ﺦ‎‎) ARABIC LETTER KHAH FINAL FORM	[2393 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEA6, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_210)
{
    // FEA5 0062;	
    // (‎‎ﺥ‎‎) ARABIC LETTER KHAH ISOLATED FORM	[2393 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA5, 0x0062 };
    uint32_t const ces[9] = { 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_211)
{
    // FCAB 0021;	
    // (‎‎ﲫ‎‎) ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM	[2393 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAB, 0x0021 };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_212)
{
    // FC19 0021;	
    // (‎‎ﰙ‎‎) ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM	[2393 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC19, 0x0021 };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_213)
{
    // FCAB 003F;	
    // (‎‎ﲫ‎‎) ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM	[2393 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAB, 0x003F };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_214)
{
    // FC19 003F;	
    // (‎‎ﰙ‎‎) ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM	[2393 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC19, 0x003F };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_215)
{
    // FCAB 0061;	
    // (‎‎ﲫ‎‎) ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM	[2393 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAB, 0x0061 };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_216)
{
    // FCAB 0041;	
    // (‎‎ﲫ‎‎) ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM	[2393 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCAB, 0x0041 };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_217)
{
    // FC19 0061;	
    // (‎‎ﰙ‎‎) ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM	[2393 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC19, 0x0061 };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_218)
{
    // FC19 0041;	
    // (‎‎ﰙ‎‎) ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM	[2393 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC19, 0x0041 };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_219)
{
    // FCAB 0062;	
    // (‎‎ﲫ‎‎) ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM	[2393 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAB, 0x0062 };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_220)
{
    // FC19 0062;	
    // (‎‎ﰙ‎‎) ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM	[2393 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC19, 0x0062 };
    uint32_t const ces[12] = { 0x2393, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_221)
{
    // FC1A 0021;	
    // (‎‎ﰚ‎‎) ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM	[2393 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1A, 0x0021 };
    uint32_t const ces[12] = { 0x2393, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_222)
{
    // FC1A 003F;	
    // (‎‎ﰚ‎‎) ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM	[2393 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1A, 0x003F };
    uint32_t const ces[12] = { 0x2393, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_223)
{
    // FC1A 0061;	
    // (‎‎ﰚ‎‎) ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM	[2393 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1A, 0x0061 };
    uint32_t const ces[12] = { 0x2393, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_224)
{
    // FC1A 0041;	
    // (‎‎ﰚ‎‎) ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM	[2393 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC1A, 0x0041 };
    uint32_t const ces[12] = { 0x2393, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_225)
{
    // FC1A 0062;	
    // (‎‎ﰚ‎‎) ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM	[2393 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1A, 0x0062 };
    uint32_t const ces[12] = { 0x2393, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_226)
{
    // FCAC 0021;	
    // (‎‎ﲬ‎‎) ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM	[2393 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAC, 0x0021 };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_227)
{
    // FC1B 0021;	
    // (‎‎ﰛ‎‎) ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM	[2393 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1B, 0x0021 };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_228)
{
    // FCAC 003F;	
    // (‎‎ﲬ‎‎) ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM	[2393 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAC, 0x003F };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_229)
{
    // FC1B 003F;	
    // (‎‎ﰛ‎‎) ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM	[2393 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1B, 0x003F };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_230)
{
    // FCAC 0061;	
    // (‎‎ﲬ‎‎) ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM	[2393 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAC, 0x0061 };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_231)
{
    // FCAC 0041;	
    // (‎‎ﲬ‎‎) ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM	[2393 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCAC, 0x0041 };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_232)
{
    // FC1B 0061;	
    // (‎‎ﰛ‎‎) ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM	[2393 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1B, 0x0061 };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_233)
{
    // FC1B 0041;	
    // (‎‎ﰛ‎‎) ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM	[2393 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC1B, 0x0041 };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_234)
{
    // FCAC 0062;	
    // (‎‎ﲬ‎‎) ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM	[2393 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCAC, 0x0062 };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_235)
{
    // FC1B 0062;	
    // (‎‎ﰛ‎‎) ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM	[2393 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC1B, 0x0062 };
    uint32_t const ces[12] = { 0x2393, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_236)
{
    // FD1F 0021;	
    // (‎‎ﴟ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM	[2393 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1F, 0x0021 };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_237)
{
    // FD03 0021;	
    // (‎‎ﴃ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM	[2393 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD03, 0x0021 };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_238)
{
    // FD1F 003F;	
    // (‎‎ﴟ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM	[2393 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1F, 0x003F };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_239)
{
    // FD03 003F;	
    // (‎‎ﴃ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM	[2393 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD03, 0x003F };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_240)
{
    // FD1F 0061;	
    // (‎‎ﴟ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM	[2393 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1F, 0x0061 };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_241)
{
    // FD1F 0041;	
    // (‎‎ﴟ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM	[2393 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD1F, 0x0041 };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_242)
{
    // FD03 0061;	
    // (‎‎ﴃ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM	[2393 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD03, 0x0061 };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_243)
{
    // FD03 0041;	
    // (‎‎ﴃ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM	[2393 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD03, 0x0041 };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_244)
{
    // FD1F 0062;	
    // (‎‎ﴟ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM	[2393 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1F, 0x0062 };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_245)
{
    // FD03 0062;	
    // (‎‎ﴃ‎‎) ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM	[2393 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD03, 0x0062 };
    uint32_t const ces[12] = { 0x2393, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_246)
{
    // FD20 0021;	
    // (‎‎ﴠ‎‎) ARABIC LIGATURE KHAH WITH YEH FINAL FORM	[2393 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD20, 0x0021 };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_247)
{
    // FD04 0021;	
    // (‎‎ﴄ‎‎) ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM	[2393 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD04, 0x0021 };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_248)
{
    // FD20 003F;	
    // (‎‎ﴠ‎‎) ARABIC LIGATURE KHAH WITH YEH FINAL FORM	[2393 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD20, 0x003F };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_249)
{
    // FD04 003F;	
    // (‎‎ﴄ‎‎) ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM	[2393 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD04, 0x003F };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_250)
{
    // FD20 0061;	
    // (‎‎ﴠ‎‎) ARABIC LIGATURE KHAH WITH YEH FINAL FORM	[2393 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD20, 0x0061 };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_251)
{
    // FD20 0041;	
    // (‎‎ﴠ‎‎) ARABIC LIGATURE KHAH WITH YEH FINAL FORM	[2393 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD20, 0x0041 };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_252)
{
    // FD04 0061;	
    // (‎‎ﴄ‎‎) ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM	[2393 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD04, 0x0061 };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_253)
{
    // FD04 0041;	
    // (‎‎ﴄ‎‎) ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM	[2393 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD04, 0x0041 };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_254)
{
    // FD20 0062;	
    // (‎‎ﴠ‎‎) ARABIC LIGATURE KHAH WITH YEH FINAL FORM	[2393 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD20, 0x0062 };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_255)
{
    // FD04 0062;	
    // (‎‎ﴄ‎‎) ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM	[2393 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD04, 0x0062 };
    uint32_t const ces[12] = { 0x2393, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_256)
{
    // 0681 0021;	
    // (‎‎ځ‎‎) ARABIC LETTER HAH WITH HAMZA ABOVE	[2394 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0681, 0x0021 };
    uint32_t const ces[9] = { 0x2394, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_257)
{
    // 0681 003F;	
    // (‎‎ځ‎‎) ARABIC LETTER HAH WITH HAMZA ABOVE	[2394 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0681, 0x003F };
    uint32_t const ces[9] = { 0x2394, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_258)
{
    // 0681 0061;	
    // (‎‎ځ‎‎) ARABIC LETTER HAH WITH HAMZA ABOVE	[2394 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0681, 0x0061 };
    uint32_t const ces[9] = { 0x2394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_259)
{
    // 0681 0041;	
    // (‎‎ځ‎‎) ARABIC LETTER HAH WITH HAMZA ABOVE	[2394 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0681, 0x0041 };
    uint32_t const ces[9] = { 0x2394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_260)
{
    // 0681 0062;	
    // (‎‎ځ‎‎) ARABIC LETTER HAH WITH HAMZA ABOVE	[2394 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0681, 0x0062 };
    uint32_t const ces[9] = { 0x2394, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_261)
{
    // 0682 0021;	
    // (‎‎ڂ‎‎) ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE	[2395 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0682, 0x0021 };
    uint32_t const ces[9] = { 0x2395, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_262)
{
    // 0682 003F;	
    // (‎‎ڂ‎‎) ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE	[2395 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0682, 0x003F };
    uint32_t const ces[9] = { 0x2395, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_263)
{
    // 0682 0061;	
    // (‎‎ڂ‎‎) ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE	[2395 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0682, 0x0061 };
    uint32_t const ces[9] = { 0x2395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_264)
{
    // 0682 0041;	
    // (‎‎ڂ‎‎) ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE	[2395 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0682, 0x0041 };
    uint32_t const ces[9] = { 0x2395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_265)
{
    // 0682 0062;	
    // (‎‎ڂ‎‎) ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE	[2395 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0682, 0x0062 };
    uint32_t const ces[9] = { 0x2395, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_266)
{
    // 0685 0021;	
    // (‎‎څ‎‎) ARABIC LETTER HAH WITH THREE DOTS ABOVE	[2396 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0685, 0x0021 };
    uint32_t const ces[9] = { 0x2396, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_267)
{
    // 0685 003F;	
    // (‎‎څ‎‎) ARABIC LETTER HAH WITH THREE DOTS ABOVE	[2396 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0685, 0x003F };
    uint32_t const ces[9] = { 0x2396, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_268)
{
    // 0685 0061;	
    // (‎‎څ‎‎) ARABIC LETTER HAH WITH THREE DOTS ABOVE	[2396 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0685, 0x0061 };
    uint32_t const ces[9] = { 0x2396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_269)
{
    // 0685 0041;	
    // (‎‎څ‎‎) ARABIC LETTER HAH WITH THREE DOTS ABOVE	[2396 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0685, 0x0041 };
    uint32_t const ces[9] = { 0x2396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_270)
{
    // 0685 0062;	
    // (‎‎څ‎‎) ARABIC LETTER HAH WITH THREE DOTS ABOVE	[2396 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0685, 0x0062 };
    uint32_t const ces[9] = { 0x2396, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_271)
{
    // 0757 0021;	
    // (‎‎ݗ‎‎) ARABIC LETTER HAH WITH TWO DOTS ABOVE	[2397 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0757, 0x0021 };
    uint32_t const ces[9] = { 0x2397, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_272)
{
    // 0757 003F;	
    // (‎‎ݗ‎‎) ARABIC LETTER HAH WITH TWO DOTS ABOVE	[2397 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0757, 0x003F };
    uint32_t const ces[9] = { 0x2397, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_273)
{
    // 0757 0061;	
    // (‎‎ݗ‎‎) ARABIC LETTER HAH WITH TWO DOTS ABOVE	[2397 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0757, 0x0061 };
    uint32_t const ces[9] = { 0x2397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_274)
{
    // 0757 0041;	
    // (‎‎ݗ‎‎) ARABIC LETTER HAH WITH TWO DOTS ABOVE	[2397 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0757, 0x0041 };
    uint32_t const ces[9] = { 0x2397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_275)
{
    // 0757 0062;	
    // (‎‎ݗ‎‎) ARABIC LETTER HAH WITH TWO DOTS ABOVE	[2397 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0757, 0x0062 };
    uint32_t const ces[9] = { 0x2397, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_276)
{
    // 0758 0021;	
    // (‎‎ݘ‎‎) ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW	[2398 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0758, 0x0021 };
    uint32_t const ces[9] = { 0x2398, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_277)
{
    // 0758 003F;	
    // (‎‎ݘ‎‎) ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW	[2398 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0758, 0x003F };
    uint32_t const ces[9] = { 0x2398, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_278)
{
    // 0758 0061;	
    // (‎‎ݘ‎‎) ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW	[2398 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0758, 0x0061 };
    uint32_t const ces[9] = { 0x2398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_279)
{
    // 0758 0041;	
    // (‎‎ݘ‎‎) ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW	[2398 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0758, 0x0041 };
    uint32_t const ces[9] = { 0x2398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_280)
{
    // 0758 0062;	
    // (‎‎ݘ‎‎) ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW	[2398 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0758, 0x0062 };
    uint32_t const ces[9] = { 0x2398, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_281)
{
    // 076E 0021;	
    // (‎‎ݮ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW	[2399 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076E, 0x0021 };
    uint32_t const ces[9] = { 0x2399, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_282)
{
    // 076E 003F;	
    // (‎‎ݮ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW	[2399 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076E, 0x003F };
    uint32_t const ces[9] = { 0x2399, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_283)
{
    // 076E 0061;	
    // (‎‎ݮ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW	[2399 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076E, 0x0061 };
    uint32_t const ces[9] = { 0x2399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_284)
{
    // 076E 0041;	
    // (‎‎ݮ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW	[2399 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x076E, 0x0041 };
    uint32_t const ces[9] = { 0x2399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_285)
{
    // 076E 0062;	
    // (‎‎ݮ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW	[2399 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076E, 0x0062 };
    uint32_t const ces[9] = { 0x2399, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_286)
{
    // 076F 0021;	
    // (‎‎ݯ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[239A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076F, 0x0021 };
    uint32_t const ces[9] = { 0x239A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_287)
{
    // 076F 003F;	
    // (‎‎ݯ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[239A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076F, 0x003F };
    uint32_t const ces[9] = { 0x239A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_288)
{
    // 076F 0061;	
    // (‎‎ݯ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[239A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076F, 0x0061 };
    uint32_t const ces[9] = { 0x239A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_289)
{
    // 076F 0041;	
    // (‎‎ݯ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[239A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x076F, 0x0041 };
    uint32_t const ces[9] = { 0x239A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_290)
{
    // 076F 0062;	
    // (‎‎ݯ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[239A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076F, 0x0062 };
    uint32_t const ces[9] = { 0x239A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_291)
{
    // 0772 0021;	
    // (‎‎ݲ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE	[239B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0772, 0x0021 };
    uint32_t const ces[9] = { 0x239B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_292)
{
    // 0772 003F;	
    // (‎‎ݲ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE	[239B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0772, 0x003F };
    uint32_t const ces[9] = { 0x239B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_293)
{
    // 0772 0061;	
    // (‎‎ݲ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE	[239B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0772, 0x0061 };
    uint32_t const ces[9] = { 0x239B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_294)
{
    // 0772 0041;	
    // (‎‎ݲ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE	[239B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0772, 0x0041 };
    uint32_t const ces[9] = { 0x239B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_295)
{
    // 0772 0062;	
    // (‎‎ݲ‎‎) ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE	[239B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0772, 0x0062 };
    uint32_t const ces[9] = { 0x239B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_296)
{
    // 077C 0021;	
    // (‎‎ݼ‎‎) ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[239C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077C, 0x0021 };
    uint32_t const ces[9] = { 0x239C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_297)
{
    // 077C 003F;	
    // (‎‎ݼ‎‎) ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[239C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077C, 0x003F };
    uint32_t const ces[9] = { 0x239C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_298)
{
    // 077C 0061;	
    // (‎‎ݼ‎‎) ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[239C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077C, 0x0061 };
    uint32_t const ces[9] = { 0x239C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_299)
{
    // 077C 0041;	
    // (‎‎ݼ‎‎) ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[239C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x077C, 0x0041 };
    uint32_t const ces[9] = { 0x239C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_300)
{
    // 077C 0062;	
    // (‎‎ݼ‎‎) ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[239C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077C, 0x0062 };
    uint32_t const ces[9] = { 0x239C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_301)
{
    // 062F 0021;	
    // (‎‎د‎‎) ARABIC LETTER DAL	[239D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062F, 0x0021 };
    uint32_t const ces[9] = { 0x239D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_302)
{
    // 1EE03 0021;	
    // (‎‎𞸃‎‎) ARABIC MATHEMATICAL DAL	[239D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE03, 0x0021 };
    uint32_t const ces[9] = { 0x239D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_303)
{
    // 1EE83 0021;	
    // (‎‎𞺃‎‎) ARABIC MATHEMATICAL LOOPED DAL	[239D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE83, 0x0021 };
    uint32_t const ces[9] = { 0x239D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_304)
{
    // 1EEA3 0021;	
    // (‎‎𞺣‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAL	[239D 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA3, 0x0021 };
    uint32_t const ces[9] = { 0x239D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_305)
{
    // FEAA 0021;	
    // (‎‎ﺪ‎‎) ARABIC LETTER DAL FINAL FORM	[239D 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAA, 0x0021 };
    uint32_t const ces[9] = { 0x239D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_306)
{
    // FEA9 0021;	
    // (‎‎ﺩ‎‎) ARABIC LETTER DAL ISOLATED FORM	[239D 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA9, 0x0021 };
    uint32_t const ces[9] = { 0x239D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_307)
{
    // 062F 003F;	
    // (‎‎د‎‎) ARABIC LETTER DAL	[239D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062F, 0x003F };
    uint32_t const ces[9] = { 0x239D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_308)
{
    // 1EE03 003F;	
    // (‎‎𞸃‎‎) ARABIC MATHEMATICAL DAL	[239D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE03, 0x003F };
    uint32_t const ces[9] = { 0x239D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_309)
{
    // 1EE83 003F;	
    // (‎‎𞺃‎‎) ARABIC MATHEMATICAL LOOPED DAL	[239D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE83, 0x003F };
    uint32_t const ces[9] = { 0x239D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_310)
{
    // 1EEA3 003F;	
    // (‎‎𞺣‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAL	[239D 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA3, 0x003F };
    uint32_t const ces[9] = { 0x239D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_311)
{
    // FEAA 003F;	
    // (‎‎ﺪ‎‎) ARABIC LETTER DAL FINAL FORM	[239D 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAA, 0x003F };
    uint32_t const ces[9] = { 0x239D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_312)
{
    // FEA9 003F;	
    // (‎‎ﺩ‎‎) ARABIC LETTER DAL ISOLATED FORM	[239D 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA9, 0x003F };
    uint32_t const ces[9] = { 0x239D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_313)
{
    // 062F 0061;	
    // (‎‎د‎‎) ARABIC LETTER DAL	[239D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062F, 0x0061 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_314)
{
    // 062F 0041;	
    // (‎‎د‎‎) ARABIC LETTER DAL	[239D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x062F, 0x0041 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_315)
{
    // 1EE03 0061;	
    // (‎‎𞸃‎‎) ARABIC MATHEMATICAL DAL	[239D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE03, 0x0061 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_316)
{
    // 1EE83 0061;	
    // (‎‎𞺃‎‎) ARABIC MATHEMATICAL LOOPED DAL	[239D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE83, 0x0061 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_317)
{
    // 1EEA3 0061;	
    // (‎‎𞺣‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAL	[239D 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA3, 0x0061 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_318)
{
    // 1EE03 0041;	
    // (‎‎𞸃‎‎) ARABIC MATHEMATICAL DAL	[239D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE03, 0x0041 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_319)
{
    // 1EE83 0041;	
    // (‎‎𞺃‎‎) ARABIC MATHEMATICAL LOOPED DAL	[239D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE83, 0x0041 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_320)
{
    // 1EEA3 0041;	
    // (‎‎𞺣‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAL	[239D 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEA3, 0x0041 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_321)
{
    // FEAA 0061;	
    // (‎‎ﺪ‎‎) ARABIC LETTER DAL FINAL FORM	[239D 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAA, 0x0061 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_322)
{
    // FEAA 0041;	
    // (‎‎ﺪ‎‎) ARABIC LETTER DAL FINAL FORM	[239D 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEAA, 0x0041 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_323)
{
    // FEA9 0061;	
    // (‎‎ﺩ‎‎) ARABIC LETTER DAL ISOLATED FORM	[239D 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA9, 0x0061 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_324)
{
    // FEA9 0041;	
    // (‎‎ﺩ‎‎) ARABIC LETTER DAL ISOLATED FORM	[239D 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEA9, 0x0041 };
    uint32_t const ces[9] = { 0x239D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_325)
{
    // 062F 0062;	
    // (‎‎د‎‎) ARABIC LETTER DAL	[239D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x062F, 0x0062 };
    uint32_t const ces[9] = { 0x239D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_326)
{
    // 1EE03 0062;	
    // (‎‎𞸃‎‎) ARABIC MATHEMATICAL DAL	[239D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE03, 0x0062 };
    uint32_t const ces[9] = { 0x239D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_327)
{
    // 1EE83 0062;	
    // (‎‎𞺃‎‎) ARABIC MATHEMATICAL LOOPED DAL	[239D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE83, 0x0062 };
    uint32_t const ces[9] = { 0x239D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_328)
{
    // 1EEA3 0062;	
    // (‎‎𞺣‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAL	[239D 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA3, 0x0062 };
    uint32_t const ces[9] = { 0x239D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_329)
{
    // FEAA 0062;	
    // (‎‎ﺪ‎‎) ARABIC LETTER DAL FINAL FORM	[239D 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAA, 0x0062 };
    uint32_t const ces[9] = { 0x239D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_330)
{
    // FEA9 0062;	
    // (‎‎ﺩ‎‎) ARABIC LETTER DAL ISOLATED FORM	[239D 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEA9, 0x0062 };
    uint32_t const ces[9] = { 0x239D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_331)
{
    // 0630 0021;	
    // (‎‎ذ‎‎) ARABIC LETTER THAL	[239E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0630, 0x0021 };
    uint32_t const ces[9] = { 0x239E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_332)
{
    // 1EE18 0021;	
    // (‎‎𞸘‎‎) ARABIC MATHEMATICAL THAL	[239E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE18, 0x0021 };
    uint32_t const ces[9] = { 0x239E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_333)
{
    // 1EE98 0021;	
    // (‎‎𞺘‎‎) ARABIC MATHEMATICAL LOOPED THAL	[239E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE98, 0x0021 };
    uint32_t const ces[9] = { 0x239E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_334)
{
    // 1EEB8 0021;	
    // (‎‎𞺸‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THAL	[239E 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB8, 0x0021 };
    uint32_t const ces[9] = { 0x239E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_335)
{
    // FEAC 0021;	
    // (‎‎ﺬ‎‎) ARABIC LETTER THAL FINAL FORM	[239E 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAC, 0x0021 };
    uint32_t const ces[9] = { 0x239E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_336)
{
    // FEAB 0021;	
    // (‎‎ﺫ‎‎) ARABIC LETTER THAL ISOLATED FORM	[239E 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAB, 0x0021 };
    uint32_t const ces[9] = { 0x239E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_337)
{
    // FC5B 0021;	
    // (‎‎ﱛ‎‎) ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM	[239E 0261 | 0020 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5B, 0x0021 };
    uint32_t const ces[11] = { 0x239E, 0x0261, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_338)
{
    // 0630 003F;	
    // (‎‎ذ‎‎) ARABIC LETTER THAL	[239E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0630, 0x003F };
    uint32_t const ces[9] = { 0x239E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_339)
{
    // 1EE18 003F;	
    // (‎‎𞸘‎‎) ARABIC MATHEMATICAL THAL	[239E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE18, 0x003F };
    uint32_t const ces[9] = { 0x239E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_340)
{
    // 1EE98 003F;	
    // (‎‎𞺘‎‎) ARABIC MATHEMATICAL LOOPED THAL	[239E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE98, 0x003F };
    uint32_t const ces[9] = { 0x239E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_341)
{
    // 1EEB8 003F;	
    // (‎‎𞺸‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THAL	[239E 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB8, 0x003F };
    uint32_t const ces[9] = { 0x239E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_342)
{
    // FEAC 003F;	
    // (‎‎ﺬ‎‎) ARABIC LETTER THAL FINAL FORM	[239E 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAC, 0x003F };
    uint32_t const ces[9] = { 0x239E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_343)
{
    // FEAB 003F;	
    // (‎‎ﺫ‎‎) ARABIC LETTER THAL ISOLATED FORM	[239E 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAB, 0x003F };
    uint32_t const ces[9] = { 0x239E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_344)
{
    // FC5B 003F;	
    // (‎‎ﱛ‎‎) ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM	[239E 0267 | 0020 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5B, 0x003F };
    uint32_t const ces[11] = { 0x239E, 0x0267, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_345)
{
    // 0630 0061;	
    // (‎‎ذ‎‎) ARABIC LETTER THAL	[239E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0630, 0x0061 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_346)
{
    // 0630 0041;	
    // (‎‎ذ‎‎) ARABIC LETTER THAL	[239E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0630, 0x0041 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_347)
{
    // 1EE18 0061;	
    // (‎‎𞸘‎‎) ARABIC MATHEMATICAL THAL	[239E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE18, 0x0061 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_348)
{
    // 1EE98 0061;	
    // (‎‎𞺘‎‎) ARABIC MATHEMATICAL LOOPED THAL	[239E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE98, 0x0061 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_349)
{
    // 1EEB8 0061;	
    // (‎‎𞺸‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THAL	[239E 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB8, 0x0061 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_350)
{
    // 1EE18 0041;	
    // (‎‎𞸘‎‎) ARABIC MATHEMATICAL THAL	[239E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE18, 0x0041 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_351)
{
    // 1EE98 0041;	
    // (‎‎𞺘‎‎) ARABIC MATHEMATICAL LOOPED THAL	[239E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE98, 0x0041 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_352)
{
    // 1EEB8 0041;	
    // (‎‎𞺸‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THAL	[239E 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEB8, 0x0041 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_353)
{
    // FEAC 0061;	
    // (‎‎ﺬ‎‎) ARABIC LETTER THAL FINAL FORM	[239E 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAC, 0x0061 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_354)
{
    // FEAC 0041;	
    // (‎‎ﺬ‎‎) ARABIC LETTER THAL FINAL FORM	[239E 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEAC, 0x0041 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_355)
{
    // FEAB 0061;	
    // (‎‎ﺫ‎‎) ARABIC LETTER THAL ISOLATED FORM	[239E 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAB, 0x0061 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_356)
{
    // FEAB 0041;	
    // (‎‎ﺫ‎‎) ARABIC LETTER THAL ISOLATED FORM	[239E 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEAB, 0x0041 };
    uint32_t const ces[9] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_357)
{
    // FC5B 0061;	
    // (‎‎ﱛ‎‎) ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM	[239E 1CAD | 0020 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5B, 0x0061 };
    uint32_t const ces[11] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_358)
{
    // FC5B 0041;	
    // (‎‎ﱛ‎‎) ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM	[239E 1CAD | 0020 0098 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC5B, 0x0041 };
    uint32_t const ces[11] = { 0x239E, 0x1CAD, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_359)
{
    // 0630 0062;	
    // (‎‎ذ‎‎) ARABIC LETTER THAL	[239E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0630, 0x0062 };
    uint32_t const ces[9] = { 0x239E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_360)
{
    // 1EE18 0062;	
    // (‎‎𞸘‎‎) ARABIC MATHEMATICAL THAL	[239E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE18, 0x0062 };
    uint32_t const ces[9] = { 0x239E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_361)
{
    // 1EE98 0062;	
    // (‎‎𞺘‎‎) ARABIC MATHEMATICAL LOOPED THAL	[239E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE98, 0x0062 };
    uint32_t const ces[9] = { 0x239E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_362)
{
    // 1EEB8 0062;	
    // (‎‎𞺸‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK THAL	[239E 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB8, 0x0062 };
    uint32_t const ces[9] = { 0x239E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_363)
{
    // FEAC 0062;	
    // (‎‎ﺬ‎‎) ARABIC LETTER THAL FINAL FORM	[239E 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAC, 0x0062 };
    uint32_t const ces[9] = { 0x239E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_364)
{
    // FEAB 0062;	
    // (‎‎ﺫ‎‎) ARABIC LETTER THAL ISOLATED FORM	[239E 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAB, 0x0062 };
    uint32_t const ces[9] = { 0x239E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_365)
{
    // FC5B 0062;	
    // (‎‎ﱛ‎‎) ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM	[239E 1CC6 | 0020 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5B, 0x0062 };
    uint32_t const ces[11] = { 0x239E, 0x1CC6, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_366)
{
    // 0688 0021;	
    // (‎‎ڈ‎‎) ARABIC LETTER DDAL	[239F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0688, 0x0021 };
    uint32_t const ces[9] = { 0x239F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_367)
{
    // FB89 0021;	
    // (‎‎ﮉ‎‎) ARABIC LETTER DDAL FINAL FORM	[239F 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB89, 0x0021 };
    uint32_t const ces[9] = { 0x239F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_368)
{
    // FB88 0021;	
    // (‎‎ﮈ‎‎) ARABIC LETTER DDAL ISOLATED FORM	[239F 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB88, 0x0021 };
    uint32_t const ces[9] = { 0x239F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_369)
{
    // 0688 003F;	
    // (‎‎ڈ‎‎) ARABIC LETTER DDAL	[239F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0688, 0x003F };
    uint32_t const ces[9] = { 0x239F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_370)
{
    // FB89 003F;	
    // (‎‎ﮉ‎‎) ARABIC LETTER DDAL FINAL FORM	[239F 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB89, 0x003F };
    uint32_t const ces[9] = { 0x239F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_371)
{
    // FB88 003F;	
    // (‎‎ﮈ‎‎) ARABIC LETTER DDAL ISOLATED FORM	[239F 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB88, 0x003F };
    uint32_t const ces[9] = { 0x239F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_372)
{
    // 0688 0061;	
    // (‎‎ڈ‎‎) ARABIC LETTER DDAL	[239F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0688, 0x0061 };
    uint32_t const ces[9] = { 0x239F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_373)
{
    // 0688 0041;	
    // (‎‎ڈ‎‎) ARABIC LETTER DDAL	[239F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0688, 0x0041 };
    uint32_t const ces[9] = { 0x239F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_374)
{
    // FB89 0061;	
    // (‎‎ﮉ‎‎) ARABIC LETTER DDAL FINAL FORM	[239F 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB89, 0x0061 };
    uint32_t const ces[9] = { 0x239F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_375)
{
    // FB89 0041;	
    // (‎‎ﮉ‎‎) ARABIC LETTER DDAL FINAL FORM	[239F 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB89, 0x0041 };
    uint32_t const ces[9] = { 0x239F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_376)
{
    // FB88 0061;	
    // (‎‎ﮈ‎‎) ARABIC LETTER DDAL ISOLATED FORM	[239F 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB88, 0x0061 };
    uint32_t const ces[9] = { 0x239F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_377)
{
    // FB88 0041;	
    // (‎‎ﮈ‎‎) ARABIC LETTER DDAL ISOLATED FORM	[239F 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB88, 0x0041 };
    uint32_t const ces[9] = { 0x239F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_378)
{
    // 0688 0062;	
    // (‎‎ڈ‎‎) ARABIC LETTER DDAL	[239F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0688, 0x0062 };
    uint32_t const ces[9] = { 0x239F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_379)
{
    // FB89 0062;	
    // (‎‎ﮉ‎‎) ARABIC LETTER DDAL FINAL FORM	[239F 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB89, 0x0062 };
    uint32_t const ces[9] = { 0x239F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_380)
{
    // FB88 0062;	
    // (‎‎ﮈ‎‎) ARABIC LETTER DDAL ISOLATED FORM	[239F 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB88, 0x0062 };
    uint32_t const ces[9] = { 0x239F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_381)
{
    // 0689 0021;	
    // (‎‎ډ‎‎) ARABIC LETTER DAL WITH RING	[23A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0689, 0x0021 };
    uint32_t const ces[9] = { 0x23A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_382)
{
    // 0689 003F;	
    // (‎‎ډ‎‎) ARABIC LETTER DAL WITH RING	[23A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0689, 0x003F };
    uint32_t const ces[9] = { 0x23A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_383)
{
    // 0689 0061;	
    // (‎‎ډ‎‎) ARABIC LETTER DAL WITH RING	[23A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0689, 0x0061 };
    uint32_t const ces[9] = { 0x23A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_384)
{
    // 0689 0041;	
    // (‎‎ډ‎‎) ARABIC LETTER DAL WITH RING	[23A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0689, 0x0041 };
    uint32_t const ces[9] = { 0x23A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_385)
{
    // 0689 0062;	
    // (‎‎ډ‎‎) ARABIC LETTER DAL WITH RING	[23A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0689, 0x0062 };
    uint32_t const ces[9] = { 0x23A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_386)
{
    // 068A 0021;	
    // (‎‎ڊ‎‎) ARABIC LETTER DAL WITH DOT BELOW	[23A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068A, 0x0021 };
    uint32_t const ces[9] = { 0x23A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_387)
{
    // 068A 003F;	
    // (‎‎ڊ‎‎) ARABIC LETTER DAL WITH DOT BELOW	[23A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068A, 0x003F };
    uint32_t const ces[9] = { 0x23A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_388)
{
    // 068A 0061;	
    // (‎‎ڊ‎‎) ARABIC LETTER DAL WITH DOT BELOW	[23A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068A, 0x0061 };
    uint32_t const ces[9] = { 0x23A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_389)
{
    // 068A 0041;	
    // (‎‎ڊ‎‎) ARABIC LETTER DAL WITH DOT BELOW	[23A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x068A, 0x0041 };
    uint32_t const ces[9] = { 0x23A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_390)
{
    // 068A 0062;	
    // (‎‎ڊ‎‎) ARABIC LETTER DAL WITH DOT BELOW	[23A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068A, 0x0062 };
    uint32_t const ces[9] = { 0x23A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_391)
{
    // 068B 0021;	
    // (‎‎ڋ‎‎) ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH	[23A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068B, 0x0021 };
    uint32_t const ces[9] = { 0x23A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_392)
{
    // 068B 003F;	
    // (‎‎ڋ‎‎) ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH	[23A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068B, 0x003F };
    uint32_t const ces[9] = { 0x23A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_393)
{
    // 068B 0061;	
    // (‎‎ڋ‎‎) ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH	[23A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068B, 0x0061 };
    uint32_t const ces[9] = { 0x23A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_394)
{
    // 068B 0041;	
    // (‎‎ڋ‎‎) ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH	[23A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x068B, 0x0041 };
    uint32_t const ces[9] = { 0x23A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_395)
{
    // 068B 0062;	
    // (‎‎ڋ‎‎) ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH	[23A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068B, 0x0062 };
    uint32_t const ces[9] = { 0x23A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_396)
{
    // 068C 0021;	
    // (‎‎ڌ‎‎) ARABIC LETTER DAHAL	[23A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068C, 0x0021 };
    uint32_t const ces[9] = { 0x23A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_397)
{
    // FB85 0021;	
    // (‎‎ﮅ‎‎) ARABIC LETTER DAHAL FINAL FORM	[23A3 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB85, 0x0021 };
    uint32_t const ces[9] = { 0x23A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_398)
{
    // FB84 0021;	
    // (‎‎ﮄ‎‎) ARABIC LETTER DAHAL ISOLATED FORM	[23A3 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB84, 0x0021 };
    uint32_t const ces[9] = { 0x23A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_399)
{
    // 068C 003F;	
    // (‎‎ڌ‎‎) ARABIC LETTER DAHAL	[23A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068C, 0x003F };
    uint32_t const ces[9] = { 0x23A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_400)
{
    // FB85 003F;	
    // (‎‎ﮅ‎‎) ARABIC LETTER DAHAL FINAL FORM	[23A3 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB85, 0x003F };
    uint32_t const ces[9] = { 0x23A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_401)
{
    // FB84 003F;	
    // (‎‎ﮄ‎‎) ARABIC LETTER DAHAL ISOLATED FORM	[23A3 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB84, 0x003F };
    uint32_t const ces[9] = { 0x23A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_402)
{
    // 068C 0061;	
    // (‎‎ڌ‎‎) ARABIC LETTER DAHAL	[23A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068C, 0x0061 };
    uint32_t const ces[9] = { 0x23A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_403)
{
    // 068C 0041;	
    // (‎‎ڌ‎‎) ARABIC LETTER DAHAL	[23A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x068C, 0x0041 };
    uint32_t const ces[9] = { 0x23A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_404)
{
    // FB85 0061;	
    // (‎‎ﮅ‎‎) ARABIC LETTER DAHAL FINAL FORM	[23A3 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB85, 0x0061 };
    uint32_t const ces[9] = { 0x23A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_405)
{
    // FB85 0041;	
    // (‎‎ﮅ‎‎) ARABIC LETTER DAHAL FINAL FORM	[23A3 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB85, 0x0041 };
    uint32_t const ces[9] = { 0x23A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_406)
{
    // FB84 0061;	
    // (‎‎ﮄ‎‎) ARABIC LETTER DAHAL ISOLATED FORM	[23A3 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB84, 0x0061 };
    uint32_t const ces[9] = { 0x23A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_407)
{
    // FB84 0041;	
    // (‎‎ﮄ‎‎) ARABIC LETTER DAHAL ISOLATED FORM	[23A3 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB84, 0x0041 };
    uint32_t const ces[9] = { 0x23A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_408)
{
    // 068C 0062;	
    // (‎‎ڌ‎‎) ARABIC LETTER DAHAL	[23A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068C, 0x0062 };
    uint32_t const ces[9] = { 0x23A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_409)
{
    // FB85 0062;	
    // (‎‎ﮅ‎‎) ARABIC LETTER DAHAL FINAL FORM	[23A3 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB85, 0x0062 };
    uint32_t const ces[9] = { 0x23A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_410)
{
    // FB84 0062;	
    // (‎‎ﮄ‎‎) ARABIC LETTER DAHAL ISOLATED FORM	[23A3 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB84, 0x0062 };
    uint32_t const ces[9] = { 0x23A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_411)
{
    // 068D 0021;	
    // (‎‎ڍ‎‎) ARABIC LETTER DDAHAL	[23A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068D, 0x0021 };
    uint32_t const ces[9] = { 0x23A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_412)
{
    // FB83 0021;	
    // (‎‎ﮃ‎‎) ARABIC LETTER DDAHAL FINAL FORM	[23A4 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB83, 0x0021 };
    uint32_t const ces[9] = { 0x23A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_413)
{
    // FB82 0021;	
    // (‎‎ﮂ‎‎) ARABIC LETTER DDAHAL ISOLATED FORM	[23A4 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB82, 0x0021 };
    uint32_t const ces[9] = { 0x23A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_414)
{
    // 068D 003F;	
    // (‎‎ڍ‎‎) ARABIC LETTER DDAHAL	[23A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068D, 0x003F };
    uint32_t const ces[9] = { 0x23A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_415)
{
    // FB83 003F;	
    // (‎‎ﮃ‎‎) ARABIC LETTER DDAHAL FINAL FORM	[23A4 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB83, 0x003F };
    uint32_t const ces[9] = { 0x23A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_416)
{
    // FB82 003F;	
    // (‎‎ﮂ‎‎) ARABIC LETTER DDAHAL ISOLATED FORM	[23A4 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB82, 0x003F };
    uint32_t const ces[9] = { 0x23A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_417)
{
    // 068D 0061;	
    // (‎‎ڍ‎‎) ARABIC LETTER DDAHAL	[23A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068D, 0x0061 };
    uint32_t const ces[9] = { 0x23A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_418)
{
    // 068D 0041;	
    // (‎‎ڍ‎‎) ARABIC LETTER DDAHAL	[23A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x068D, 0x0041 };
    uint32_t const ces[9] = { 0x23A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_419)
{
    // FB83 0061;	
    // (‎‎ﮃ‎‎) ARABIC LETTER DDAHAL FINAL FORM	[23A4 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB83, 0x0061 };
    uint32_t const ces[9] = { 0x23A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_420)
{
    // FB83 0041;	
    // (‎‎ﮃ‎‎) ARABIC LETTER DDAHAL FINAL FORM	[23A4 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB83, 0x0041 };
    uint32_t const ces[9] = { 0x23A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_421)
{
    // FB82 0061;	
    // (‎‎ﮂ‎‎) ARABIC LETTER DDAHAL ISOLATED FORM	[23A4 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB82, 0x0061 };
    uint32_t const ces[9] = { 0x23A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_422)
{
    // FB82 0041;	
    // (‎‎ﮂ‎‎) ARABIC LETTER DDAHAL ISOLATED FORM	[23A4 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB82, 0x0041 };
    uint32_t const ces[9] = { 0x23A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_423)
{
    // 068D 0062;	
    // (‎‎ڍ‎‎) ARABIC LETTER DDAHAL	[23A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068D, 0x0062 };
    uint32_t const ces[9] = { 0x23A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_424)
{
    // FB83 0062;	
    // (‎‎ﮃ‎‎) ARABIC LETTER DDAHAL FINAL FORM	[23A4 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB83, 0x0062 };
    uint32_t const ces[9] = { 0x23A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_425)
{
    // FB82 0062;	
    // (‎‎ﮂ‎‎) ARABIC LETTER DDAHAL ISOLATED FORM	[23A4 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB82, 0x0062 };
    uint32_t const ces[9] = { 0x23A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_426)
{
    // 08AE 0021;	
    // (‎‎ࢮ‎‎) ARABIC LETTER DAL WITH THREE DOTS BELOW	[23A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AE, 0x0021 };
    uint32_t const ces[9] = { 0x23A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_427)
{
    // 08AE 003F;	
    // (‎‎ࢮ‎‎) ARABIC LETTER DAL WITH THREE DOTS BELOW	[23A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AE, 0x003F };
    uint32_t const ces[9] = { 0x23A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_428)
{
    // 08AE 0061;	
    // (‎‎ࢮ‎‎) ARABIC LETTER DAL WITH THREE DOTS BELOW	[23A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AE, 0x0061 };
    uint32_t const ces[9] = { 0x23A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_429)
{
    // 08AE 0041;	
    // (‎‎ࢮ‎‎) ARABIC LETTER DAL WITH THREE DOTS BELOW	[23A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08AE, 0x0041 };
    uint32_t const ces[9] = { 0x23A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_430)
{
    // 08AE 0062;	
    // (‎‎ࢮ‎‎) ARABIC LETTER DAL WITH THREE DOTS BELOW	[23A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AE, 0x0062 };
    uint32_t const ces[9] = { 0x23A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_431)
{
    // 068E 0021;	
    // (‎‎ڎ‎‎) ARABIC LETTER DUL	[23A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068E, 0x0021 };
    uint32_t const ces[9] = { 0x23A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_432)
{
    // FB87 0021;	
    // (‎‎ﮇ‎‎) ARABIC LETTER DUL FINAL FORM	[23A6 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB87, 0x0021 };
    uint32_t const ces[9] = { 0x23A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_433)
{
    // FB86 0021;	
    // (‎‎ﮆ‎‎) ARABIC LETTER DUL ISOLATED FORM	[23A6 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB86, 0x0021 };
    uint32_t const ces[9] = { 0x23A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_434)
{
    // 068E 003F;	
    // (‎‎ڎ‎‎) ARABIC LETTER DUL	[23A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068E, 0x003F };
    uint32_t const ces[9] = { 0x23A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_435)
{
    // FB87 003F;	
    // (‎‎ﮇ‎‎) ARABIC LETTER DUL FINAL FORM	[23A6 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB87, 0x003F };
    uint32_t const ces[9] = { 0x23A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_436)
{
    // FB86 003F;	
    // (‎‎ﮆ‎‎) ARABIC LETTER DUL ISOLATED FORM	[23A6 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB86, 0x003F };
    uint32_t const ces[9] = { 0x23A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_437)
{
    // 068E 0061;	
    // (‎‎ڎ‎‎) ARABIC LETTER DUL	[23A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068E, 0x0061 };
    uint32_t const ces[9] = { 0x23A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_438)
{
    // 068E 0041;	
    // (‎‎ڎ‎‎) ARABIC LETTER DUL	[23A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x068E, 0x0041 };
    uint32_t const ces[9] = { 0x23A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_439)
{
    // FB87 0061;	
    // (‎‎ﮇ‎‎) ARABIC LETTER DUL FINAL FORM	[23A6 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB87, 0x0061 };
    uint32_t const ces[9] = { 0x23A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_440)
{
    // FB87 0041;	
    // (‎‎ﮇ‎‎) ARABIC LETTER DUL FINAL FORM	[23A6 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFB87, 0x0041 };
    uint32_t const ces[9] = { 0x23A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_441)
{
    // FB86 0061;	
    // (‎‎ﮆ‎‎) ARABIC LETTER DUL ISOLATED FORM	[23A6 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB86, 0x0061 };
    uint32_t const ces[9] = { 0x23A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_442)
{
    // FB86 0041;	
    // (‎‎ﮆ‎‎) ARABIC LETTER DUL ISOLATED FORM	[23A6 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFB86, 0x0041 };
    uint32_t const ces[9] = { 0x23A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_443)
{
    // 068E 0062;	
    // (‎‎ڎ‎‎) ARABIC LETTER DUL	[23A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068E, 0x0062 };
    uint32_t const ces[9] = { 0x23A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_444)
{
    // FB87 0062;	
    // (‎‎ﮇ‎‎) ARABIC LETTER DUL FINAL FORM	[23A6 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFB87, 0x0062 };
    uint32_t const ces[9] = { 0x23A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_445)
{
    // FB86 0062;	
    // (‎‎ﮆ‎‎) ARABIC LETTER DUL ISOLATED FORM	[23A6 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFB86, 0x0062 };
    uint32_t const ces[9] = { 0x23A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_446)
{
    // 068F 0021;	
    // (‎‎ڏ‎‎) ARABIC LETTER DAL WITH THREE DOTS ABOVE DOWNWARDS	[23A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068F, 0x0021 };
    uint32_t const ces[9] = { 0x23A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_447)
{
    // 068F 003F;	
    // (‎‎ڏ‎‎) ARABIC LETTER DAL WITH THREE DOTS ABOVE DOWNWARDS	[23A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068F, 0x003F };
    uint32_t const ces[9] = { 0x23A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_448)
{
    // 068F 0061;	
    // (‎‎ڏ‎‎) ARABIC LETTER DAL WITH THREE DOTS ABOVE DOWNWARDS	[23A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068F, 0x0061 };
    uint32_t const ces[9] = { 0x23A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_449)
{
    // 068F 0041;	
    // (‎‎ڏ‎‎) ARABIC LETTER DAL WITH THREE DOTS ABOVE DOWNWARDS	[23A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x068F, 0x0041 };
    uint32_t const ces[9] = { 0x23A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_450)
{
    // 068F 0062;	
    // (‎‎ڏ‎‎) ARABIC LETTER DAL WITH THREE DOTS ABOVE DOWNWARDS	[23A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x068F, 0x0062 };
    uint32_t const ces[9] = { 0x23A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_451)
{
    // 0690 0021;	
    // (‎‎ڐ‎‎) ARABIC LETTER DAL WITH FOUR DOTS ABOVE	[23A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0690, 0x0021 };
    uint32_t const ces[9] = { 0x23A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_452)
{
    // 0690 003F;	
    // (‎‎ڐ‎‎) ARABIC LETTER DAL WITH FOUR DOTS ABOVE	[23A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0690, 0x003F };
    uint32_t const ces[9] = { 0x23A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_453)
{
    // 0690 0061;	
    // (‎‎ڐ‎‎) ARABIC LETTER DAL WITH FOUR DOTS ABOVE	[23A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0690, 0x0061 };
    uint32_t const ces[9] = { 0x23A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_454)
{
    // 0690 0041;	
    // (‎‎ڐ‎‎) ARABIC LETTER DAL WITH FOUR DOTS ABOVE	[23A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0690, 0x0041 };
    uint32_t const ces[9] = { 0x23A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_455)
{
    // 0690 0062;	
    // (‎‎ڐ‎‎) ARABIC LETTER DAL WITH FOUR DOTS ABOVE	[23A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0690, 0x0062 };
    uint32_t const ces[9] = { 0x23A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_456)
{
    // 06EE 0021;	
    // (‎‎ۮ‎‎) ARABIC LETTER DAL WITH INVERTED V	[23A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06EE, 0x0021 };
    uint32_t const ces[9] = { 0x23A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_457)
{
    // 06EE 003F;	
    // (‎‎ۮ‎‎) ARABIC LETTER DAL WITH INVERTED V	[23A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06EE, 0x003F };
    uint32_t const ces[9] = { 0x23A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_458)
{
    // 06EE 0061;	
    // (‎‎ۮ‎‎) ARABIC LETTER DAL WITH INVERTED V	[23A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06EE, 0x0061 };
    uint32_t const ces[9] = { 0x23A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_459)
{
    // 06EE 0041;	
    // (‎‎ۮ‎‎) ARABIC LETTER DAL WITH INVERTED V	[23A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06EE, 0x0041 };
    uint32_t const ces[9] = { 0x23A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_460)
{
    // 06EE 0062;	
    // (‎‎ۮ‎‎) ARABIC LETTER DAL WITH INVERTED V	[23A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06EE, 0x0062 };
    uint32_t const ces[9] = { 0x23A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_461)
{
    // 0759 0021;	
    // (‎‎ݙ‎‎) ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH	[23AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0759, 0x0021 };
    uint32_t const ces[9] = { 0x23AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_462)
{
    // 0759 003F;	
    // (‎‎ݙ‎‎) ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH	[23AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0759, 0x003F };
    uint32_t const ces[9] = { 0x23AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_463)
{
    // 0759 0061;	
    // (‎‎ݙ‎‎) ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH	[23AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0759, 0x0061 };
    uint32_t const ces[9] = { 0x23AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_464)
{
    // 0759 0041;	
    // (‎‎ݙ‎‎) ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH	[23AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0759, 0x0041 };
    uint32_t const ces[9] = { 0x23AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_465)
{
    // 0759 0062;	
    // (‎‎ݙ‎‎) ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH	[23AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0759, 0x0062 };
    uint32_t const ces[9] = { 0x23AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_466)
{
    // 075A 0021;	
    // (‎‎ݚ‎‎) ARABIC LETTER DAL WITH INVERTED SMALL V BELOW	[23AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075A, 0x0021 };
    uint32_t const ces[9] = { 0x23AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_467)
{
    // 075A 003F;	
    // (‎‎ݚ‎‎) ARABIC LETTER DAL WITH INVERTED SMALL V BELOW	[23AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075A, 0x003F };
    uint32_t const ces[9] = { 0x23AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_468)
{
    // 075A 0061;	
    // (‎‎ݚ‎‎) ARABIC LETTER DAL WITH INVERTED SMALL V BELOW	[23AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075A, 0x0061 };
    uint32_t const ces[9] = { 0x23AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_469)
{
    // 075A 0041;	
    // (‎‎ݚ‎‎) ARABIC LETTER DAL WITH INVERTED SMALL V BELOW	[23AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x075A, 0x0041 };
    uint32_t const ces[9] = { 0x23AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_470)
{
    // 075A 0062;	
    // (‎‎ݚ‎‎) ARABIC LETTER DAL WITH INVERTED SMALL V BELOW	[23AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075A, 0x0062 };
    uint32_t const ces[9] = { 0x23AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_471)
{
    // 0631 0021;	
    // (‎‎ر‎‎) ARABIC LETTER REH	[23AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0631, 0x0021 };
    uint32_t const ces[9] = { 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_472)
{
    // 1EE13 0021;	
    // (‎‎𞸓‎‎) ARABIC MATHEMATICAL REH	[23AC 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE13, 0x0021 };
    uint32_t const ces[9] = { 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_473)
{
    // 1EE93 0021;	
    // (‎‎𞺓‎‎) ARABIC MATHEMATICAL LOOPED REH	[23AC 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE93, 0x0021 };
    uint32_t const ces[9] = { 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_474)
{
    // 1EEB3 0021;	
    // (‎‎𞺳‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK REH	[23AC 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB3, 0x0021 };
    uint32_t const ces[9] = { 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_475)
{
    // FEAE 0021;	
    // (‎‎ﺮ‎‎) ARABIC LETTER REH FINAL FORM	[23AC 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAE, 0x0021 };
    uint32_t const ces[9] = { 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_476)
{
    // FEAD 0021;	
    // (‎‎ﺭ‎‎) ARABIC LETTER REH ISOLATED FORM	[23AC 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAD, 0x0021 };
    uint32_t const ces[9] = { 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_477)
{
    // FC5C 0021;	
    // (‎‎ﱜ‎‎) ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM	[23AC 0261 | 0020 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5C, 0x0021 };
    uint32_t const ces[11] = { 0x23AC, 0x0261, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_478)
{
    // 0631 003F;	
    // (‎‎ر‎‎) ARABIC LETTER REH	[23AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0631, 0x003F };
    uint32_t const ces[9] = { 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_479)
{
    // 1EE13 003F;	
    // (‎‎𞸓‎‎) ARABIC MATHEMATICAL REH	[23AC 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE13, 0x003F };
    uint32_t const ces[9] = { 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_480)
{
    // 1EE93 003F;	
    // (‎‎𞺓‎‎) ARABIC MATHEMATICAL LOOPED REH	[23AC 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE93, 0x003F };
    uint32_t const ces[9] = { 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_481)
{
    // 1EEB3 003F;	
    // (‎‎𞺳‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK REH	[23AC 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB3, 0x003F };
    uint32_t const ces[9] = { 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_482)
{
    // FEAE 003F;	
    // (‎‎ﺮ‎‎) ARABIC LETTER REH FINAL FORM	[23AC 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAE, 0x003F };
    uint32_t const ces[9] = { 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_483)
{
    // FEAD 003F;	
    // (‎‎ﺭ‎‎) ARABIC LETTER REH ISOLATED FORM	[23AC 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAD, 0x003F };
    uint32_t const ces[9] = { 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_484)
{
    // FC5C 003F;	
    // (‎‎ﱜ‎‎) ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM	[23AC 0267 | 0020 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5C, 0x003F };
    uint32_t const ces[11] = { 0x23AC, 0x0267, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_485)
{
    // 0631 0061;	
    // (‎‎ر‎‎) ARABIC LETTER REH	[23AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0631, 0x0061 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_486)
{
    // 0631 0041;	
    // (‎‎ر‎‎) ARABIC LETTER REH	[23AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0631, 0x0041 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_487)
{
    // 1EE13 0061;	
    // (‎‎𞸓‎‎) ARABIC MATHEMATICAL REH	[23AC 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE13, 0x0061 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_488)
{
    // 1EE93 0061;	
    // (‎‎𞺓‎‎) ARABIC MATHEMATICAL LOOPED REH	[23AC 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE93, 0x0061 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_489)
{
    // 1EEB3 0061;	
    // (‎‎𞺳‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK REH	[23AC 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB3, 0x0061 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_490)
{
    // 1EE13 0041;	
    // (‎‎𞸓‎‎) ARABIC MATHEMATICAL REH	[23AC 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE13, 0x0041 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_491)
{
    // 1EE93 0041;	
    // (‎‎𞺓‎‎) ARABIC MATHEMATICAL LOOPED REH	[23AC 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE93, 0x0041 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_492)
{
    // 1EEB3 0041;	
    // (‎‎𞺳‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK REH	[23AC 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEB3, 0x0041 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_493)
{
    // FEAE 0061;	
    // (‎‎ﺮ‎‎) ARABIC LETTER REH FINAL FORM	[23AC 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEAE, 0x0061 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_494)
{
    // FEAE 0041;	
    // (‎‎ﺮ‎‎) ARABIC LETTER REH FINAL FORM	[23AC 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEAE, 0x0041 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_495)
{
    // FEAD 0061;	
    // (‎‎ﺭ‎‎) ARABIC LETTER REH ISOLATED FORM	[23AC 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEAD, 0x0061 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_496)
{
    // FEAD 0041;	
    // (‎‎ﺭ‎‎) ARABIC LETTER REH ISOLATED FORM	[23AC 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEAD, 0x0041 };
    uint32_t const ces[9] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_497)
{
    // FC5C 0061;	
    // (‎‎ﱜ‎‎) ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM	[23AC 1CAD | 0020 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5C, 0x0061 };
    uint32_t const ces[11] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_498)
{
    // FC5C 0041;	
    // (‎‎ﱜ‎‎) ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM	[23AC 1CAD | 0020 0098 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC5C, 0x0041 };
    uint32_t const ces[11] = { 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_150_499)
{
    // 0631 0062;	
    // (‎‎ر‎‎) ARABIC LETTER REH	[23AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0631, 0x0062 };
    uint32_t const ces[9] = { 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

