// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_006_000)
{
    // FC60 0021;	
    // (‎‎ﱠ‎‎) ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM	[0261 | 0076 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC60, 0x0021 };
    uint32_t const ces[10] = { 0x0261, 0x0000, 0x0076, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_001)
{
    // 08E4 0021;	
    // (ࣤ) ARABIC CURLY FATHA	[0261 | 0077 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E4, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0077, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_002)
{
    // 08F4 0021;	
    // (ࣴ) ARABIC FATHA WITH RING	[0261 | 0078 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F4, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0078, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_003)
{
    // 08F5 0021;	
    // (ࣵ) ARABIC FATHA WITH DOT ABOVE	[0261 | 0079 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F5, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0079, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_004)
{
    // 064F 0021;	
    // (ُ) ARABIC DAMMA	[0261 | 007A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064F, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_005)
{
    // FE79 0021;	
    // (‎‎ﹹ‎‎) ARABIC DAMMA MEDIAL FORM	[0261 | 007A 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE79, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007A, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_006)
{
    // FE78 0021;	
    // (‎‎ﹸ‎‎) ARABIC DAMMA ISOLATED FORM	[0261 | 007A 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE78, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007A, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_007)
{
    // FCF3 0021;	
    // (‎‎ﳳ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM	[0261 | 007A 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF3, 0x0021 };
    uint32_t const ces[10] = { 0x0261, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_008)
{
    // FC61 0021;	
    // (‎‎ﱡ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM	[0261 | 007A 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC61, 0x0021 };
    uint32_t const ces[10] = { 0x0261, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_009)
{
    // 08E5 0021;	
    // (ࣥ) ARABIC CURLY DAMMA	[0261 | 007B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E5, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_010)
{
    // 08FE 0021;	
    // (ࣾ) ARABIC DAMMA WITH DOT	[0261 | 007C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FE, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_011)
{
    // 0650 0021;	
    // (ِ) ARABIC KASRA	[0261 | 007D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0650, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_012)
{
    // FE7B 0021;	
    // (‎‎ﹻ‎‎) ARABIC KASRA MEDIAL FORM	[0261 | 007D 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7B, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007D, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_013)
{
    // FE7A 0021;	
    // (‎‎ﹺ‎‎) ARABIC KASRA ISOLATED FORM	[0261 | 007D 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7A, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007D, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_014)
{
    // FCF4 0021;	
    // (‎‎ﳴ‎‎) ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM	[0261 | 007D 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF4, 0x0021 };
    uint32_t const ces[10] = { 0x0261, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_015)
{
    // FC62 0021;	
    // (‎‎ﱢ‎‎) ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM	[0261 | 007D 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC62, 0x0021 };
    uint32_t const ces[10] = { 0x0261, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_016)
{
    // 08E6 0021;	
    // (ࣦ) ARABIC CURLY KASRA	[0261 | 007E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E6, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_017)
{
    // 08F6 0021;	
    // (ࣶ) ARABIC KASRA WITH DOT BELOW	[0261 | 007F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F6, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x007F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_018)
{
    // 0651 0021;	
    // (ّ) ARABIC SHADDA	[0261 | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0651, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_019)
{
    // 0AFB 0021;	
    // (ૻ) GUJARATI SIGN SHADDA	[0261 | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFB, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_020)
{
    // 11237 0021;	
    // (𑈷) KHOJKI SIGN SHADDA	[0261 | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11237, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_021)
{
    // FE7D 0021;	
    // (‎‎ﹽ‎‎) ARABIC SHADDA MEDIAL FORM	[0261 | 0080 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7D, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0080, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_022)
{
    // FE7C 0021;	
    // (‎‎ﹼ‎‎) ARABIC SHADDA ISOLATED FORM	[0261 | 0080 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0080, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_023)
{
    // FC63 0021;	
    // (‎‎ﱣ‎‎) ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM	[0261 | 0080 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC63, 0x0021 };
    uint32_t const ces[10] = { 0x0261, 0x0000, 0x0080, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_024)
{
    // 0652 0021;	
    // (ْ) ARABIC SUKUN	[0261 | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0652, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_025)
{
    // 0AFA 0021;	
    // (ૺ) GUJARATI SIGN SUKUN	[0261 | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFA, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_026)
{
    // 1123E 0021;	
    // (𑈾) KHOJKI SIGN SUKUN	[0261 | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1123E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_027)
{
    // FE7F 0021;	
    // (‎‎ﹿ‎‎) ARABIC SUKUN MEDIAL FORM	[0261 | 0081 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7F, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0081, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_028)
{
    // FE7E 0021;	
    // (‎‎ﹾ‎‎) ARABIC SUKUN ISOLATED FORM	[0261 | 0081 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0081, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_029)
{
    // 0653 0021;	
    // (ٓ) ARABIC MADDAH ABOVE	[0261 | 0082 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0653, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_030)
{
    // 0AFC 0021;	
    // (ૼ) GUJARATI SIGN MADDAH	[0261 | 0082 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_031)
{
    // 0654 0021;	
    // (ٔ) ARABIC HAMZA ABOVE	[0261 | 0083 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0654, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_032)
{
    // 0655 0021;	
    // (ٕ) ARABIC HAMZA BELOW	[0261 | 0084 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0655, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0084, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_033)
{
    // 065F 0021;	
    // (ٟ) ARABIC WAVY HAMZA BELOW	[0261 | 0085 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065F, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0085, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_034)
{
    // 0656 0021;	
    // (ٖ) ARABIC SUBSCRIPT ALEF	[0261 | 0086 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0656, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0086, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_035)
{
    // 0657 0021;	
    // (ٗ) ARABIC INVERTED DAMMA	[0261 | 0087 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0657, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0087, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_036)
{
    // 0658 0021;	
    // (٘) ARABIC MARK NOON GHUNNA	[0261 | 0088 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0658, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0088, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_037)
{
    // 08FF 0021;	
    // (ࣿ) ARABIC MARK SIDEWAYS NOON GHUNNA	[0261 | 0089 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FF, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0089, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_038)
{
    // 0659 0021;	
    // (ٙ) ARABIC ZWARAKAY	[0261 | 008A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0659, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x008A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_039)
{
    // 065A 0021;	
    // (ٚ) ARABIC VOWEL SIGN SMALL V ABOVE	[0261 | 008B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065A, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x008B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_040)
{
    // 065B 0021;	
    // (ٛ) ARABIC VOWEL SIGN INVERTED SMALL V ABOVE	[0261 | 008C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065B, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x008C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_041)
{
    // 065C 0021;	
    // (ٜ) ARABIC VOWEL SIGN DOT BELOW	[0261 | 008D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x008D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_042)
{
    // 065D 0021;	
    // (ٝ) ARABIC REVERSED DAMMA	[0261 | 008E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065D, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x008E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_043)
{
    // 065E 0021;	
    // (ٞ) ARABIC FATHA WITH TWO DOTS	[0261 | 008F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x008F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_044)
{
    // 08E3 0021;	
    // (ࣣ) ARABIC TURNED DAMMA BELOW	[0261 | 0090 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E3, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0090, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_045)
{
    // 08F7 0021;	
    // (ࣷ) ARABIC LEFT ARROWHEAD ABOVE	[0261 | 0091 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F7, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0091, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_046)
{
    // 08F8 0021;	
    // (ࣸ) ARABIC RIGHT ARROWHEAD ABOVE	[0261 | 0092 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F8, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0092, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_047)
{
    // 08FD 0021;	
    // (ࣽ) ARABIC RIGHT ARROWHEAD ABOVE WITH DOT	[0261 | 0093 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FD, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0093, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_048)
{
    // 08FB 0021;	
    // (ࣻ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE	[0261 | 0094 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FB, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0094, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_049)
{
    // 08FC 0021;	
    // (ࣼ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT	[0261 | 0095 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0095, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_050)
{
    // 08F9 0021;	
    // (ࣹ) ARABIC LEFT ARROWHEAD BELOW	[0261 | 0096 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F9, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0096, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_051)
{
    // 08FA 0021;	
    // (ࣺ) ARABIC RIGHT ARROWHEAD BELOW	[0261 | 0097 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FA, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0097, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_052)
{
    // 0670 0021;	
    // (ٰ) ARABIC LETTER SUPERSCRIPT ALEF	[0261 | 0098 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0670, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0098, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_053)
{
    // 0711 0021;	
    // (ܑ) SYRIAC LETTER SUPERSCRIPT ALAPH	[0261 | 0099 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0711, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0099, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_054)
{
    // 0730 0021;	
    // (ܰ) SYRIAC PTHAHA ABOVE	[0261 | 009A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0730, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x009A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_055)
{
    // 0731 0021;	
    // (ܱ) SYRIAC PTHAHA BELOW	[0261 | 009B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0731, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x009B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_056)
{
    // 0732 0021;	
    // (ܲ) SYRIAC PTHAHA DOTTED	[0261 | 009C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0732, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x009C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_057)
{
    // 0733 0021;	
    // (ܳ) SYRIAC ZQAPHA ABOVE	[0261 | 009D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0733, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x009D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_058)
{
    // 0734 0021;	
    // (ܴ) SYRIAC ZQAPHA BELOW	[0261 | 009E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0734, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x009E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_059)
{
    // 0735 0021;	
    // (ܵ) SYRIAC ZQAPHA DOTTED	[0261 | 009F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0735, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x009F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_060)
{
    // 0736 0021;	
    // (ܶ) SYRIAC RBASA ABOVE	[0261 | 00A0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0736, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_061)
{
    // 0737 0021;	
    // (ܷ) SYRIAC RBASA BELOW	[0261 | 00A1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0737, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_062)
{
    // 0738 0021;	
    // (ܸ) SYRIAC DOTTED ZLAMA HORIZONTAL	[0261 | 00A2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0738, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_063)
{
    // 0739 0021;	
    // (ܹ) SYRIAC DOTTED ZLAMA ANGULAR	[0261 | 00A3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0739, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_064)
{
    // 073A 0021;	
    // (ܺ) SYRIAC HBASA ABOVE	[0261 | 00A4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073A, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_065)
{
    // 073B 0021;	
    // (ܻ) SYRIAC HBASA BELOW	[0261 | 00A5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073B, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_066)
{
    // 073C 0021;	
    // (ܼ) SYRIAC HBASA-ESASA DOTTED	[0261 | 00A6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_067)
{
    // 073D 0021;	
    // (ܽ) SYRIAC ESASA ABOVE	[0261 | 00A7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073D, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_068)
{
    // 073E 0021;	
    // (ܾ) SYRIAC ESASA BELOW	[0261 | 00A8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_069)
{
    // 073F 0021;	
    // (ܿ) SYRIAC RWAHA	[0261 | 00A9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x073F, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00A9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_070)
{
    // 07EB 0021;	
    // (߫) NKO COMBINING SHORT HIGH TONE	[0261 | 00AA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EB, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00AA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_071)
{
    // 07EC 0021;	
    // (߬) NKO COMBINING SHORT LOW TONE	[0261 | 00AB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00AB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_072)
{
    // 07ED 0021;	
    // (߭) NKO COMBINING SHORT RISING TONE	[0261 | 00AC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07ED, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00AC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_073)
{
    // 07EE 0021;	
    // (߮) NKO COMBINING LONG DESCENDING TONE	[0261 | 00AD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EE, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00AD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_074)
{
    // 07EF 0021;	
    // (߯) NKO COMBINING LONG HIGH TONE	[0261 | 00AE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07EF, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00AE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_075)
{
    // 07F0 0021;	
    // (߰) NKO COMBINING LONG LOW TONE	[0261 | 00AF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F0, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00AF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_076)
{
    // 07F1 0021;	
    // (߱) NKO COMBINING LONG RISING TONE	[0261 | 00B0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F1, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_077)
{
    // 07F2 0021;	
    // (߲) NKO COMBINING NASALIZATION MARK	[0261 | 00B1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F2, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_078)
{
    // 07F3 0021;	
    // (߳) NKO COMBINING DOUBLE DOT ABOVE	[0261 | 00B2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F3, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_079)
{
    // 135F 0021;	
    // (፟) ETHIOPIC COMBINING GEMINATION MARK	[0261 | 00B3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135F, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_080)
{
    // 135E 0021;	
    // (፞) ETHIOPIC COMBINING VOWEL LENGTH MARK	[0261 | 00B4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_081)
{
    // 135D 0021;	
    // (፝) ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK	[0261 | 00B5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135D, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_082)
{
    // A6F0 0021;	
    // (꛰) BAMUM COMBINING MARK KOQNDON	[0261 | 00B6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F0, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_083)
{
    // A6F1 0021;	
    // (꛱) BAMUM COMBINING MARK TUKWENTIS	[0261 | 00B7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA6F1, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_084)
{
    // 16AF0 0021;	
    // (𖫰) BASSA VAH COMBINING HIGH TONE	[0261 | 00B8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF0, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_085)
{
    // 16AF1 0021;	
    // (𖫱) BASSA VAH COMBINING LOW TONE	[0261 | 00B9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF1, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00B9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_086)
{
    // 16AF2 0021;	
    // (𖫲) BASSA VAH COMBINING MID TONE	[0261 | 00BA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF2, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00BA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_087)
{
    // 16AF3 0021;	
    // (𖫳) BASSA VAH COMBINING LOW-MID TONE	[0261 | 00BB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF3, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00BB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_088)
{
    // 16AF4 0021;	
    // (𖫴) BASSA VAH COMBINING HIGH-LOW TONE	[0261 | 00BC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AF4, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00BC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_089)
{
    // 1E944 0021;	
    // (𞥄) ADLAM ALIF LENGTHENER	[0261 | 00BD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E944, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00BD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_090)
{
    // 1E945 0021;	
    // (𞥅) ADLAM VOWEL LENGTHENER	[0261 | 00BD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E945, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00BD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_091)
{
    // 1E946 0021;	
    // (𞥆) ADLAM GEMINATION MARK	[0261 | 00BD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E946, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00BD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_092)
{
    // 1E94A 0021;	
    // (𞥊) ADLAM NUKTA	[0261 | 00BE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E94A, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00BE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_093)
{
    // 1E947 0021;	
    // (𞥇) ADLAM HAMZA	[0261 | 00BF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E947, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00BF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_094)
{
    // 1E948 0021;	
    // (𞥈) ADLAM CONSONANT MODIFIER	[0261 | 00C0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E948, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_095)
{
    // 1E949 0021;	
    // (𞥉) ADLAM GEMINATE CONSONANT MODIFIER	[0261 | 00C1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E949, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_096)
{
    // 093C 0021;	
    // (़) DEVANAGARI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_097)
{
    // 09BC 0021;	
    // (়) BENGALI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x09BC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_098)
{
    // 0A3C 0021;	
    // (਼) GURMUKHI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A3C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_099)
{
    // 0ABC 0021;	
    // (઼) GUJARATI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ABC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_100)
{
    // 0AFD 0021;	
    // (૽) GUJARATI SIGN THREE-DOT NUKTA ABOVE	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFD, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_101)
{
    // 0AFE 0021;	
    // (૾) GUJARATI SIGN CIRCLE NUKTA ABOVE	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFE, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_102)
{
    // 0AFF 0021;	
    // (૿) GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFF, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_103)
{
    // 0B3C 0021;	
    // (଼) ORIYA SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B3C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_104)
{
    // 0CBC 0021;	
    // (಼) KANNADA SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0CBC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_105)
{
    // 1B34 0021;	
    // (᬴) BALINESE SIGN REREKAN	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B34, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_106)
{
    // 1BE6 0021;	
    // (᯦) BATAK SIGN TOMPI	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BE6, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_107)
{
    // 1C37 0021;	
    // (᰷) LEPCHA SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1C37, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_108)
{
    // A9B3 0021;	
    // (꦳) JAVANESE SIGN CECAK TELU	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA9B3, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_109)
{
    // 110BA 0021;	
    // (𑂺) KAITHI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x110BA, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_110)
{
    // 11173 0021;	
    // (𑅳) MAHAJANI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11173, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_111)
{
    // 111CA 0021;	
    // (𑇊) SHARADA SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111CA, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_112)
{
    // 11236 0021;	
    // (𑈶) KHOJKI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11236, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_113)
{
    // 112E9 0021;	
    // (𑋩) KHUDAWADI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112E9, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_114)
{
    // 1133C 0021;	
    // (𑌼) GRANTHA SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1133C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_115)
{
    // 11446 0021;	
    // (𑑆) NEWA SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11446, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_116)
{
    // 114C3 0021;	
    // (𑓃) TIRHUTA SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C3, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_117)
{
    // 115C0 0021;	
    // (𑗀) SIDDHAM SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C0, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_118)
{
    // 116B7 0021;	
    // (𑚷) TAKRI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116B7, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_119)
{
    // 11A33 0021;	
    // (𑨳) ZANABAZAR SQUARE FINAL CONSONANT MARK	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A33, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_120)
{
    // 11D42 0021;	
    // (𑵂) MASARAM GONDI SIGN NUKTA	[0261 | 00C2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D42, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_121)
{
    // 0900 0021;	
    // (ऀ) DEVANAGARI SIGN INVERTED CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0900, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_122)
{
    // 0901 0021;	
    // (ँ) DEVANAGARI SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0901, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_123)
{
    // 0981 0021;	
    // (ঁ) BENGALI SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0981, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_124)
{
    // 0A01 0021;	
    // (ਁ) GURMUKHI SIGN ADAK BINDI	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A01, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_125)
{
    // 0A81 0021;	
    // (ઁ) GUJARATI SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A81, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_126)
{
    // 0B01 0021;	
    // (ଁ) ORIYA SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B01, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_127)
{
    // 0C00 0021;	
    // (ఀ) TELUGU SIGN COMBINING CANDRABINDU ABOVE	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C00, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_128)
{
    // 0C01 0021;	
    // (ఁ) TELUGU SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C01, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_129)
{
    // 0C81 0021;	
    // (ಁ) KANNADA SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C81, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_130)
{
    // 0D01 0021;	
    // (ഁ) MALAYALAM SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D01, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_131)
{
    // 1B00 0021;	
    // (ᬀ) BALINESE SIGN ULU RICEM	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B00, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_132)
{
    // 1B01 0021;	
    // (ᬁ) BALINESE SIGN ULU CANDRA	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B01, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_133)
{
    // A8C5 0021;	
    // (ꣅ) SAURASHTRA SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8C5, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_134)
{
    // A980 0021;	
    // (ꦀ) JAVANESE SIGN PANYANGGA	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA980, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_135)
{
    // 11000 0021;	
    // (𑀀) BRAHMI SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11000, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_136)
{
    // 11080 0021;	
    // (𑂀) KAITHI SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11080, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_137)
{
    // 11100 0021;	
    // (𑄀) CHAKMA SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11100, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_138)
{
    // 11180 0021;	
    // (𑆀) SHARADA SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11180, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_139)
{
    // 11301 0021;	
    // (𑌁) GRANTHA SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11301, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_140)
{
    // 11443 0021;	
    // (𑑃) NEWA SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11443, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_141)
{
    // 114BF 0021;	
    // (𑒿) TIRHUTA SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114BF, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_142)
{
    // 115BC 0021;	
    // (𑖼) SIDDHAM SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_143)
{
    // 11640 0021;	
    // (𑙀) MODI SIGN ARDHACANDRA	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11640, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_144)
{
    // 11A35 0021;	
    // (𑨵) ZANABAZAR SQUARE SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A35, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_145)
{
    // 11A36 0021;	
    // (𑨶) ZANABAZAR SQUARE SIGN CANDRABINDU WITH ORNAMENT	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A36, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_146)
{
    // 11A37 0021;	
    // (𑨷) ZANABAZAR SQUARE SIGN CANDRA WITH ORNAMENT	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A37, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_147)
{
    // 11C3C 0021;	
    // (𑰼) BHAIKSUKI SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_148)
{
    // 11CB6 0021;	
    // (𑲶) MARCHEN SIGN CANDRABINDU	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB6, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_149)
{
    // 11D43 0021;	
    // (𑵃) MASARAM GONDI SIGN CANDRA	[0261 | 00C3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D43, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_150)
{
    // 0902 0021;	
    // (ं) DEVANAGARI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0902, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_151)
{
    // 0982 0021;	
    // (ং) BENGALI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0982, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_152)
{
    // 0A02 0021;	
    // (ਂ) GURMUKHI SIGN BINDI	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A02, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_153)
{
    // 0A82 0021;	
    // (ં) GUJARATI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A82, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_154)
{
    // 0B02 0021;	
    // (ଂ) ORIYA SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B02, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_155)
{
    // 0B82 0021;	
    // (ஂ) TAMIL SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B82, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_156)
{
    // 0C02 0021;	
    // (ం) TELUGU SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C02, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_157)
{
    // 0C82 0021;	
    // (ಂ) KANNADA SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C82, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_158)
{
    // 0D00 0021;	
    // (ഀ) MALAYALAM SIGN COMBINING ANUSVARA ABOVE	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D00, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_159)
{
    // 0D02 0021;	
    // (ം) MALAYALAM SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D02, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_160)
{
    // 0D82 0021;	
    // (ං) SINHALA SIGN ANUSVARAYA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D82, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_161)
{
    // 0F7E 0021;	
    // (ཾ) TIBETAN SIGN RJES SU NGA RO	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F7E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_162)
{
    // 1036 0021;	
    // (ံ) MYANMAR SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1036, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_163)
{
    // 17C6 0021;	
    // (ំ) KHMER SIGN NIKAHIT	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17C6, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_164)
{
    // 1A74 0021;	
    // (ᩴ) TAI THAM SIGN MAI KANG	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A74, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_165)
{
    // 1B02 0021;	
    // (ᬂ) BALINESE SIGN CECEK	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B02, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_166)
{
    // 1B80 0021;	
    // (ᮀ) SUNDANESE SIGN PANYECEK	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B80, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_167)
{
    // 1CED 0021;	
    // (᳭) VEDIC SIGN TIRYAK	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CED, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_168)
{
    // A80B 0021;	
    // (ꠋ) SYLOTI NAGRI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80B, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_169)
{
    // A880 0021;	
    // (ꢀ) SAURASHTRA SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA880, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_170)
{
    // A981 0021;	
    // (ꦁ) JAVANESE SIGN CECAK	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA981, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_171)
{
    // 10A0E 0021;	
    // (𐨎) KHAROSHTHI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_172)
{
    // 11001 0021;	
    // (𑀁) BRAHMI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11001, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_173)
{
    // 11081 0021;	
    // (𑂁) KAITHI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11081, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_174)
{
    // 11101 0021;	
    // (𑄁) CHAKMA SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11101, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_175)
{
    // 11181 0021;	
    // (𑆁) SHARADA SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11181, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_176)
{
    // 11234 0021;	
    // (𑈴) KHOJKI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11234, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_177)
{
    // 112DF 0021;	
    // (𑋟) KHUDAWADI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x112DF, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_178)
{
    // 11300 0021;	
    // (𑌀) GRANTHA SIGN COMBINING ANUSVARA ABOVE	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11300, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_179)
{
    // 11302 0021;	
    // (𑌂) GRANTHA SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11302, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_180)
{
    // 11444 0021;	
    // (𑑄) NEWA SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11444, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_181)
{
    // 114C0 0021;	
    // (𑓀) TIRHUTA SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C0, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_182)
{
    // 115BD 0021;	
    // (𑖽) SIDDHAM SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BD, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_183)
{
    // 1163D 0021;	
    // (𑘽) MODI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163D, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_184)
{
    // 116AB 0021;	
    // (𑚫) TAKRI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AB, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_185)
{
    // 11A38 0021;	
    // (𑨸) ZANABAZAR SQUARE SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A38, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_186)
{
    // 11A96 0021;	
    // (𑪖) SOYOMBO SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A96, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_187)
{
    // 11C3D 0021;	
    // (𑰽) BHAIKSUKI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3D, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_188)
{
    // 11CB5 0021;	
    // (𑲵) MARCHEN SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11CB5, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_189)
{
    // 11D40 0021;	
    // (𑵀) MASARAM GONDI SIGN ANUSVARA	[0261 | 00C4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D40, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_190)
{
    // 0903 0021;	
    // (ः) DEVANAGARI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0903, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_191)
{
    // 0983 0021;	
    // (ঃ) BENGALI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0983, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_192)
{
    // 0A03 0021;	
    // (ਃ) GURMUKHI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A03, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_193)
{
    // 0A83 0021;	
    // (ઃ) GUJARATI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A83, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_194)
{
    // 0B03 0021;	
    // (ଃ) ORIYA SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B03, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_195)
{
    // 0C03 0021;	
    // (ః) TELUGU SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C03, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_196)
{
    // 0C83 0021;	
    // (ಃ) KANNADA SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C83, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_197)
{
    // 0D03 0021;	
    // (ഃ) MALAYALAM SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D03, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_198)
{
    // 0D83 0021;	
    // (ඃ) SINHALA SIGN VISARGAYA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0D83, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_199)
{
    // 0F7F 0021;	
    // (ཿ) TIBETAN SIGN RNAM BCAD	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F7F, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_200)
{
    // 1038 0021;	
    // (း) MYANMAR SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1038, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_201)
{
    // 17C7 0021;	
    // (ះ) KHMER SIGN REAHMUK	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17C7, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_202)
{
    // 1B04 0021;	
    // (ᬄ) BALINESE SIGN BISAH	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B04, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_203)
{
    // 1B82 0021;	
    // (ᮂ) SUNDANESE SIGN PANGWISAD	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B82, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_204)
{
    // 1CF2 0021;	
    // (ᳲ) VEDIC SIGN ARDHAVISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF2, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_205)
{
    // 1CF3 0021;	
    // (ᳳ) VEDIC SIGN ROTATED ARDHAVISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF3, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_206)
{
    // A881 0021;	
    // (ꢁ) SAURASHTRA SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA881, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_207)
{
    // A983 0021;	
    // (ꦃ) JAVANESE SIGN WIGNYAN	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA983, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_208)
{
    // 10A0F 0021;	
    // (𐨏) KHAROSHTHI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0F, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_209)
{
    // 11002 0021;	
    // (𑀂) BRAHMI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11002, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_210)
{
    // 11082 0021;	
    // (𑂂) KAITHI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11082, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_211)
{
    // 11102 0021;	
    // (𑄂) CHAKMA SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11102, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_212)
{
    // 11182 0021;	
    // (𑆂) SHARADA SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11182, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_213)
{
    // 11303 0021;	
    // (𑌃) GRANTHA SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11303, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_214)
{
    // 11445 0021;	
    // (𑑅) NEWA SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11445, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_215)
{
    // 114C1 0021;	
    // (𑓁) TIRHUTA SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C1, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_216)
{
    // 115BE 0021;	
    // (𑖾) SIDDHAM SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BE, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_217)
{
    // 1163E 0021;	
    // (𑘾) MODI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1163E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_218)
{
    // 116AC 0021;	
    // (𑚬) TAKRI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x116AC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_219)
{
    // 11A39 0021;	
    // (𑨹) ZANABAZAR SQUARE SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A39, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_220)
{
    // 11A97 0021;	
    // (𑪗) SOYOMBO SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A97, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_221)
{
    // 11C3E 0021;	
    // (𑰾) BHAIKSUKI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_222)
{
    // 11D41 0021;	
    // (𑵁) MASARAM GONDI SIGN VISARGA	[0261 | 00C5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11D41, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_223)
{
    // 0A70 0021;	
    // (ੰ) GURMUKHI TIPPI	[0261 | 00C6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A70, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_224)
{
    // 0A71 0021;	
    // (ੱ) GURMUKHI ADDAK	[0261 | 00C7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0A71, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_225)
{
    // 1B03 0021;	
    // (ᬃ) BALINESE SIGN SURANG	[0261 | 00C8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B03, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_226)
{
    // A982 0021;	
    // (ꦂ) JAVANESE SIGN LAYAR	[0261 | 00C9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA982, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00C9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_227)
{
    // 1B81 0021;	
    // (ᮁ) SUNDANESE SIGN PANGLAYAR	[0261 | 00CA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B81, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00CA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_228)
{
    // ABEC 0021;	
    // (꯬) MEETEI MAYEK LUM IYEK	[0261 | 00CB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABEC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00CB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_229)
{
    // 10A38 0021;	
    // (𐨸) KHAROSHTHI SIGN BAR ABOVE	[0261 | 00CC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A38, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00CC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_230)
{
    // 10A39 0021;	
    // (𐨹) KHAROSHTHI SIGN CAUDA	[0261 | 00CD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A39, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00CD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_231)
{
    // 10A3A 0021;	
    // (𐨺) KHAROSHTHI SIGN DOT BELOW	[0261 | 00CE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A3A, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00CE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_232)
{
    // 111CB 0021;	
    // (𑇋) SHARADA VOWEL MODIFIER MARK	[0261 | 00CF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111CB, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00CF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_233)
{
    // 111CC 0021;	
    // (𑇌) SHARADA EXTRA SHORT VOWEL MARK	[0261 | 00D0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x111CC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_234)
{
    // 11A98 0021;	
    // (𑪘) SOYOMBO GEMINATION MARK	[0261 | 00D1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11A98, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_235)
{
    // 0E4E 0021;	
    // (๎) THAI CHARACTER YAMAKKAN	[0261 | 00D2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_236)
{
    // 0E47 0021;	
    // (็) THAI CHARACTER MAITAIKHU	[0261 | 00D3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E47, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_237)
{
    // 0E48 0021;	
    // (่) THAI CHARACTER MAI EK	[0261 | 00D4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E48, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_238)
{
    // 0E49 0021;	
    // (้) THAI CHARACTER MAI THO	[0261 | 00D5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E49, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_239)
{
    // 0E4A 0021;	
    // (๊) THAI CHARACTER MAI TRI	[0261 | 00D6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4A, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_240)
{
    // 0E4B 0021;	
    // (๋) THAI CHARACTER MAI CHATTAWA	[0261 | 00D7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4B, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_241)
{
    // 0E4C 0021;	
    // (์) THAI CHARACTER THANTHAKHAT	[0261 | 00D8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_242)
{
    // 0E4D 0021;	
    // (ํ) THAI CHARACTER NIKHAHIT	[0261 | 00D9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E4D, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00D9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_243)
{
    // 0EC8 0021;	
    // (່) LAO TONE MAI EK	[0261 | 00DA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC8, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00DA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_244)
{
    // 0EC9 0021;	
    // (້) LAO TONE MAI THO	[0261 | 00DB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC9, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00DB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_245)
{
    // 0ECA 0021;	
    // (໊) LAO TONE MAI TI	[0261 | 00DC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECA, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00DC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_246)
{
    // 0ECB 0021;	
    // (໋) LAO TONE MAI CATAWA	[0261 | 00DD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECB, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00DD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_247)
{
    // 0ECC 0021;	
    // (໌) LAO CANCELLATION MARK	[0261 | 00DE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00DE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_248)
{
    // 0ECD 0021;	
    // (ໍ) LAO NIGGAHITA	[0261 | 00DF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0ECD, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00DF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_249)
{
    // AABF 0021;	
    // (꪿) TAI VIET TONE MAI EK	[0261 | 00E0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAABF, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_250)
{
    // AAC1 0021;	
    // (꫁) TAI VIET TONE MAI THO	[0261 | 00E1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAC1, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_251)
{
    // 0F39 0021;	
    // (༹) TIBETAN MARK TSA -PHRU	[0261 | 00E2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F39, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_252)
{
    // A92B 0021;	
    // (꤫) KAYAH LI TONE PLOPHU	[0261 | 00E3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA92B, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_253)
{
    // A92C 0021;	
    // (꤬) KAYAH LI TONE CALYA	[0261 | 00E4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA92C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_254)
{
    // A92D 0021;	
    // (꤭) KAYAH LI TONE CALYA PLOPHU	[0261 | 00E5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA92D, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_255)
{
    // 1037 0021;	
    // (့) MYANMAR SIGN DOT BELOW	[0261 | 00E6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1037, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_256)
{
    // 17C8 0021;	
    // (ៈ) KHMER SIGN YUUKALEAPINTU	[0261 | 00E7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17C8, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_257)
{
    // 17C9 0021;	
    // (៉) KHMER SIGN MUUSIKATOAN	[0261 | 00E8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17C9, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_258)
{
    // 17CA 0021;	
    // (៊) KHMER SIGN TRIISAP	[0261 | 00E9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CA, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00E9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_259)
{
    // 1A75 0021;	
    // (᩵) TAI THAM SIGN TONE-1	[0261 | 00EA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A75, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00EA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_260)
{
    // 1A76 0021;	
    // (᩶) TAI THAM SIGN TONE-2	[0261 | 00EB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A76, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00EB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_261)
{
    // 1A77 0021;	
    // (᩷) TAI THAM SIGN KHUEN TONE-3	[0261 | 00EC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A77, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00EC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_262)
{
    // 1A78 0021;	
    // (᩸) TAI THAM SIGN KHUEN TONE-4	[0261 | 00ED 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A78, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00ED, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_263)
{
    // 1A79 0021;	
    // (᩹) TAI THAM SIGN KHUEN TONE-5	[0261 | 00EE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A79, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00EE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_264)
{
    // 1A7A 0021;	
    // (᩺) TAI THAM SIGN RA HAAM	[0261 | 00EF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A7A, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00EF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_265)
{
    // 1A7B 0021;	
    // (᩻) TAI THAM SIGN MAI SAM	[0261 | 00F0 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A7B, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F0, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_266)
{
    // 1A7C 0021;	
    // (᩼) TAI THAM SIGN KHUEN-LUE KARAN	[0261 | 00F1 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1A7C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F1, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_267)
{
    // 1939 0021;	
    // (᤹) LIMBU SIGN MUKPHRENG	[0261 | 00F2 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1939, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_268)
{
    // 193A 0021;	
    // (᤺) LIMBU SIGN KEMPHRENG	[0261 | 00F3 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x193A, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F3, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_269)
{
    // 193B 0021;	
    // (᤻) LIMBU SIGN SA-I	[0261 | 00F4 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x193B, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F4, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_270)
{
    // 16B30 0021;	
    // (𖬰) PAHAWH HMONG MARK CIM TUB	[0261 | 00F5 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B30, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F5, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_271)
{
    // 16B31 0021;	
    // (𖬱) PAHAWH HMONG MARK CIM SO	[0261 | 00F6 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B31, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F6, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_272)
{
    // 16B32 0021;	
    // (𖬲) PAHAWH HMONG MARK CIM KES	[0261 | 00F7 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B32, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F7, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_273)
{
    // 16B33 0021;	
    // (𖬳) PAHAWH HMONG MARK CIM KHAV	[0261 | 00F8 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B33, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F8, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_274)
{
    // 16B34 0021;	
    // (𖬴) PAHAWH HMONG MARK CIM SUAM	[0261 | 00F9 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B34, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00F9, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_275)
{
    // 16B35 0021;	
    // (𖬵) PAHAWH HMONG MARK CIM HOM	[0261 | 00FA 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B35, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00FA, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_276)
{
    // 16B36 0021;	
    // (𖬶) PAHAWH HMONG MARK CIM TAUM	[0261 | 00FB 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B36, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00FB, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_277)
{
    // 302A 0021;	
    // (〪) IDEOGRAPHIC LEVEL TONE MARK	[0261 | 00FC 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302A, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00FC, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_278)
{
    // 302B 0021;	
    // (〫) IDEOGRAPHIC RISING TONE MARK	[0261 | 00FD 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302B, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00FD, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_279)
{
    // 302C 0021;	
    // (〬) IDEOGRAPHIC DEPARTING TONE MARK	[0261 | 00FE 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302C, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00FE, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_280)
{
    // 302D 0021;	
    // (〭) IDEOGRAPHIC ENTERING TONE MARK	[0261 | 00FF 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302D, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x00FF, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_281)
{
    // 302E 0021;	
    // (〮) HANGUL SINGLE DOT TONE MARK	[0261 | 0100 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302E, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0100, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_282)
{
    // 302F 0021;	
    // (〯) HANGUL DOUBLE DOT TONE MARK	[0261 | 0101 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x302F, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0101, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_283)
{
    // 20D0 0021;	
    // (⃐) COMBINING LEFT HARPOON ABOVE	[0261 | 0102 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D0, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0102, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_284)
{
    // 20D1 0021;	
    // (⃑) COMBINING RIGHT HARPOON ABOVE	[0261 | 0103 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D1, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0103, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_285)
{
    // 20D2 0021;	
    // (⃒) COMBINING LONG VERTICAL LINE OVERLAY	[0261 | 0104 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D2, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0104, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_286)
{
    // 20D3 0021;	
    // (⃓) COMBINING SHORT VERTICAL LINE OVERLAY	[0261 | 0104 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D3, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0104, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_287)
{
    // 20D4 0021;	
    // (⃔) COMBINING ANTICLOCKWISE ARROW ABOVE	[0261 | 0105 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D4, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0105, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_288)
{
    // 20D5 0021;	
    // (⃕) COMBINING CLOCKWISE ARROW ABOVE	[0261 | 0106 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D5, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0106, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_289)
{
    // 20D6 0021;	
    // (⃖) COMBINING LEFT ARROW ABOVE	[0261 | 0107 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D6, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0107, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_290)
{
    // 20D7 0021;	
    // (⃗) COMBINING RIGHT ARROW ABOVE	[0261 | 0108 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D7, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0108, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_291)
{
    // 20DB 0021;	
    // (⃛) COMBINING THREE DOTS ABOVE	[0261 | 0109 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DB, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0109, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_292)
{
    // 20DC 0021;	
    // (⃜) COMBINING FOUR DOTS ABOVE	[0261 | 010A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DC, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x010A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_293)
{
    // 20E1 0021;	
    // (⃡) COMBINING LEFT RIGHT ARROW ABOVE	[0261 | 010B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E1, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x010B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_294)
{
    // 20E6 0021;	
    // (⃦) COMBINING DOUBLE VERTICAL STROKE OVERLAY	[0261 | 010C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E6, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x010C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_295)
{
    // 20E7 0021;	
    // (⃧) COMBINING ANNUITY SYMBOL	[0261 | 010D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E7, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x010D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_296)
{
    // 20E8 0021;	
    // (⃨) COMBINING TRIPLE UNDERDOT	[0261 | 010E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E8, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x010E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_297)
{
    // 20E9 0021;	
    // (⃩) COMBINING WIDE BRIDGE ABOVE	[0261 | 010F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E9, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x010F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_298)
{
    // 101FD 0021;	
    // (𐇽) PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE	[0261 | 0110 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x101FD, 0x0021 };
    uint32_t const ces[8] = { 0x0261, 0x0000, 0x0110, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_299)
{
    // 0021 0021;	
    // ('!') EXCLAMATION MARK	[0261 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0021, 0x0021 };
    uint32_t const ces[9] = { 0x0261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_300)
{
    // FF01 0021;	
    // (！) FULLWIDTH EXCLAMATION MARK	[0261 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF01, 0x0021 };
    uint32_t const ces[9] = { 0x0261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_301)
{
    // FE57 0021;	
    // (﹗) SMALL EXCLAMATION MARK	[0261 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE57, 0x0021 };
    uint32_t const ces[9] = { 0x0261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_302)
{
    // FE15 0021;	
    // (︕) PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK	[0261 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE15, 0x0021 };
    uint32_t const ces[9] = { 0x0261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_303)
{
    // 203C 0021;	
    // (‼) DOUBLE EXCLAMATION MARK	[0261 0261 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x203C, 0x0021 };
    uint32_t const ces[12] = { 0x0261, 0x0261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_304)
{
    // 203C 003F;	
    // (‼) DOUBLE EXCLAMATION MARK	[0261 0261 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x203C, 0x003F };
    uint32_t const ces[12] = { 0x0261, 0x0261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_305)
{
    // 203C 0061;	
    // (‼) DOUBLE EXCLAMATION MARK	[0261 0261 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x203C, 0x0061 };
    uint32_t const ces[12] = { 0x0261, 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_306)
{
    // 203C 0041;	
    // (‼) DOUBLE EXCLAMATION MARK	[0261 0261 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x203C, 0x0041 };
    uint32_t const ces[12] = { 0x0261, 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_307)
{
    // 203C 0062;	
    // (‼) DOUBLE EXCLAMATION MARK	[0261 0261 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x203C, 0x0062 };
    uint32_t const ces[12] = { 0x0261, 0x0261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_308)
{
    // 0021 003F;	
    // ('!') EXCLAMATION MARK	[0261 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0021, 0x003F };
    uint32_t const ces[9] = { 0x0261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_309)
{
    // FF01 003F;	
    // (！) FULLWIDTH EXCLAMATION MARK	[0261 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF01, 0x003F };
    uint32_t const ces[9] = { 0x0261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_310)
{
    // FE57 003F;	
    // (﹗) SMALL EXCLAMATION MARK	[0261 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE57, 0x003F };
    uint32_t const ces[9] = { 0x0261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_311)
{
    // FE15 003F;	
    // (︕) PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK	[0261 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE15, 0x003F };
    uint32_t const ces[9] = { 0x0261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_312)
{
    // 2049 0021;	
    // (⁉) EXCLAMATION QUESTION MARK	[0261 0267 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2049, 0x0021 };
    uint32_t const ces[12] = { 0x0261, 0x0267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_313)
{
    // 2049 003F;	
    // (⁉) EXCLAMATION QUESTION MARK	[0261 0267 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2049, 0x003F };
    uint32_t const ces[12] = { 0x0261, 0x0267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_314)
{
    // 2049 0061;	
    // (⁉) EXCLAMATION QUESTION MARK	[0261 0267 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2049, 0x0061 };
    uint32_t const ces[12] = { 0x0261, 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_315)
{
    // 2049 0041;	
    // (⁉) EXCLAMATION QUESTION MARK	[0261 0267 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2049, 0x0041 };
    uint32_t const ces[12] = { 0x0261, 0x0267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_316)
{
    // 2049 0062;	
    // (⁉) EXCLAMATION QUESTION MARK	[0261 0267 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2049, 0x0062 };
    uint32_t const ces[12] = { 0x0261, 0x0267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_317)
{
    // 0021 0061;	
    // ('!') EXCLAMATION MARK	[0261 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0021, 0x0061 };
    uint32_t const ces[9] = { 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_318)
{
    // 0021 0041;	
    // ('!') EXCLAMATION MARK	[0261 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0021, 0x0041 };
    uint32_t const ces[9] = { 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_319)
{
    // FF01 0061;	
    // (！) FULLWIDTH EXCLAMATION MARK	[0261 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF01, 0x0061 };
    uint32_t const ces[9] = { 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_320)
{
    // FF01 0041;	
    // (！) FULLWIDTH EXCLAMATION MARK	[0261 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF01, 0x0041 };
    uint32_t const ces[9] = { 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_321)
{
    // FE57 0061;	
    // (﹗) SMALL EXCLAMATION MARK	[0261 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE57, 0x0061 };
    uint32_t const ces[9] = { 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_322)
{
    // FE57 0041;	
    // (﹗) SMALL EXCLAMATION MARK	[0261 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE57, 0x0041 };
    uint32_t const ces[9] = { 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_323)
{
    // FE15 0061;	
    // (︕) PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK	[0261 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE15, 0x0061 };
    uint32_t const ces[9] = { 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_324)
{
    // FE15 0041;	
    // (︕) PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK	[0261 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE15, 0x0041 };
    uint32_t const ces[9] = { 0x0261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_325)
{
    // 0021 0062;	
    // ('!') EXCLAMATION MARK	[0261 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0021, 0x0062 };
    uint32_t const ces[9] = { 0x0261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_326)
{
    // FF01 0062;	
    // (！) FULLWIDTH EXCLAMATION MARK	[0261 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF01, 0x0062 };
    uint32_t const ces[9] = { 0x0261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_327)
{
    // FE57 0062;	
    // (﹗) SMALL EXCLAMATION MARK	[0261 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE57, 0x0062 };
    uint32_t const ces[9] = { 0x0261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_328)
{
    // FE15 0062;	
    // (︕) PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK	[0261 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE15, 0x0062 };
    uint32_t const ces[9] = { 0x0261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_329)
{
    // 00A1 0021;	
    // (¡) INVERTED EXCLAMATION MARK	[0262 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A1, 0x0021 };
    uint32_t const ces[9] = { 0x0262, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_330)
{
    // 00A1 003F;	
    // (¡) INVERTED EXCLAMATION MARK	[0262 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A1, 0x003F };
    uint32_t const ces[9] = { 0x0262, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_331)
{
    // 00A1 0061;	
    // (¡) INVERTED EXCLAMATION MARK	[0262 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A1, 0x0061 };
    uint32_t const ces[9] = { 0x0262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_332)
{
    // 00A1 0041;	
    // (¡) INVERTED EXCLAMATION MARK	[0262 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00A1, 0x0041 };
    uint32_t const ces[9] = { 0x0262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_333)
{
    // 00A1 0062;	
    // (¡) INVERTED EXCLAMATION MARK	[0262 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A1, 0x0062 };
    uint32_t const ces[9] = { 0x0262, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_334)
{
    // 055C 0021;	
    // (՜) ARMENIAN EXCLAMATION MARK	[0263 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055C, 0x0021 };
    uint32_t const ces[9] = { 0x0263, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_335)
{
    // 055C 003F;	
    // (՜) ARMENIAN EXCLAMATION MARK	[0263 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055C, 0x003F };
    uint32_t const ces[9] = { 0x0263, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_336)
{
    // 055C 0061;	
    // (՜) ARMENIAN EXCLAMATION MARK	[0263 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055C, 0x0061 };
    uint32_t const ces[9] = { 0x0263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_337)
{
    // 055C 0041;	
    // (՜) ARMENIAN EXCLAMATION MARK	[0263 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x055C, 0x0041 };
    uint32_t const ces[9] = { 0x0263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_338)
{
    // 055C 0062;	
    // (՜) ARMENIAN EXCLAMATION MARK	[0263 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x055C, 0x0062 };
    uint32_t const ces[9] = { 0x0263, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_339)
{
    // 07F9 0021;	
    // (߹) NKO EXCLAMATION MARK	[0264 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F9, 0x0021 };
    uint32_t const ces[9] = { 0x0264, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_340)
{
    // 07F9 003F;	
    // (߹) NKO EXCLAMATION MARK	[0264 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F9, 0x003F };
    uint32_t const ces[9] = { 0x0264, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_341)
{
    // 07F9 0061;	
    // (߹) NKO EXCLAMATION MARK	[0264 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F9, 0x0061 };
    uint32_t const ces[9] = { 0x0264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_342)
{
    // 07F9 0041;	
    // (߹) NKO EXCLAMATION MARK	[0264 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x07F9, 0x0041 };
    uint32_t const ces[9] = { 0x0264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_343)
{
    // 07F9 0062;	
    // (߹) NKO EXCLAMATION MARK	[0264 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07F9, 0x0062 };
    uint32_t const ces[9] = { 0x0264, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_344)
{
    // 1944 0021;	
    // (᥄) LIMBU EXCLAMATION MARK	[0265 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1944, 0x0021 };
    uint32_t const ces[9] = { 0x0265, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_345)
{
    // 1944 003F;	
    // (᥄) LIMBU EXCLAMATION MARK	[0265 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1944, 0x003F };
    uint32_t const ces[9] = { 0x0265, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_346)
{
    // 1944 0061;	
    // (᥄) LIMBU EXCLAMATION MARK	[0265 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1944, 0x0061 };
    uint32_t const ces[9] = { 0x0265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_347)
{
    // 1944 0041;	
    // (᥄) LIMBU EXCLAMATION MARK	[0265 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1944, 0x0041 };
    uint32_t const ces[9] = { 0x0265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_348)
{
    // 1944 0062;	
    // (᥄) LIMBU EXCLAMATION MARK	[0265 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1944, 0x0062 };
    uint32_t const ces[9] = { 0x0265, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_349)
{
    // 1E95E 0021;	
    // (‎‎𞥞‎‎) ADLAM INITIAL EXCLAMATION MARK	[0266 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E95E, 0x0021 };
    uint32_t const ces[9] = { 0x0266, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_350)
{
    // 1E95E 003F;	
    // (‎‎𞥞‎‎) ADLAM INITIAL EXCLAMATION MARK	[0266 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E95E, 0x003F };
    uint32_t const ces[9] = { 0x0266, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_351)
{
    // 1E95E 0061;	
    // (‎‎𞥞‎‎) ADLAM INITIAL EXCLAMATION MARK	[0266 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E95E, 0x0061 };
    uint32_t const ces[9] = { 0x0266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_352)
{
    // 1E95E 0041;	
    // (‎‎𞥞‎‎) ADLAM INITIAL EXCLAMATION MARK	[0266 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E95E, 0x0041 };
    uint32_t const ces[9] = { 0x0266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_353)
{
    // 1E95E 0062;	
    // (‎‎𞥞‎‎) ADLAM INITIAL EXCLAMATION MARK	[0266 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E95E, 0x0062 };
    uint32_t const ces[9] = { 0x0266, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_354)
{
    // 0000 003F;	
    // ('\u0000') <NULL>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0000, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_355)
{
    // 0001 003F;	
    // ('\u0001') <START OF HEADING>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0001, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_356)
{
    // 0002 003F;	
    // ('\u0002') <START OF TEXT>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0002, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_357)
{
    // 0003 003F;	
    // ('\u0003') <END OF TEXT>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0003, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_358)
{
    // 0004 003F;	
    // ('\u0004') <END OF TRANSMISSION>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0004, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_359)
{
    // 0005 003F;	
    // ('\u0005') <ENQUIRY>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0005, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_360)
{
    // 0006 003F;	
    // ('\u0006') <ACKNOWLEDGE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0006, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_361)
{
    // 0007 003F;	
    // ('\u0007') <BELL>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0007, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_362)
{
    // 0008 003F;	
    // ('\u0008') <BACKSPACE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0008, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_363)
{
    // 000E 003F;	
    // ('\u000E') <SHIFT OUT>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x000E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_364)
{
    // 000F 003F;	
    // ('\u000F') <SHIFT IN>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x000F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_365)
{
    // 0010 003F;	
    // ('\u0010') <DATA LINK ESCAPE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0010, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_366)
{
    // 0011 003F;	
    // ('\u0011') <DEVICE CONTROL ONE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0011, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_367)
{
    // 0012 003F;	
    // ('\u0012') <DEVICE CONTROL TWO>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0012, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_368)
{
    // 0013 003F;	
    // ('\u0013') <DEVICE CONTROL THREE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0013, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_369)
{
    // 0014 003F;	
    // ('\u0014') <DEVICE CONTROL FOUR>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0014, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_370)
{
    // 0015 003F;	
    // ('\u0015') <NEGATIVE ACKNOWLEDGE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0015, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_371)
{
    // 0016 003F;	
    // ('\u0016') <SYNCHRONOUS IDLE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0016, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_372)
{
    // 0017 003F;	
    // ('\u0017') <END OF TRANSMISSION BLOCK>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0017, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_373)
{
    // 0018 003F;	
    // ('\u0018') <CANCEL>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0018, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_374)
{
    // 0019 003F;	
    // ('\u0019') <END OF MEDIUM>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0019, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_375)
{
    // 001A 003F;	
    // ('\u001A') <SUBSTITUTE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_376)
{
    // 001B 003F;	
    // ('\u001B') <ESCAPE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_377)
{
    // 001C 003F;	
    // ('\u001C') <INFORMATION SEPARATOR FOUR>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_378)
{
    // 001D 003F;	
    // ('\u001D') <INFORMATION SEPARATOR THREE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_379)
{
    // 001E 003F;	
    // ('\u001E') <INFORMATION SEPARATOR TWO>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_380)
{
    // 001F 003F;	
    // ('\u001F') <INFORMATION SEPARATOR ONE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x001F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_381)
{
    // 007F 003F;	
    // ('\u007F') <DELETE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x007F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_382)
{
    // 0080 003F;	
    // ('\u0080') <control>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0080, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_383)
{
    // 0081 003F;	
    // ('\u0081') <control>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0081, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_384)
{
    // 0082 003F;	
    // ('\u0082') <BREAK PERMITTED HERE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0082, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_385)
{
    // 0083 003F;	
    // ('\u0083') <NO BREAK HERE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0083, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_386)
{
    // 0084 003F;	
    // ('\u0084') <control>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0084, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_387)
{
    // 0086 003F;	
    // ('\u0086') <START OF SELECTED AREA>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0086, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_388)
{
    // 0087 003F;	
    // ('\u0087') <END OF SELECTED AREA>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0087, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_389)
{
    // 0088 003F;	
    // ('\u0088') <CHARACTER TABULATION SET>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0088, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_390)
{
    // 0089 003F;	
    // ('\u0089') <CHARACTER TABULATION WITH JUSTIFICATION>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0089, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_391)
{
    // 008A 003F;	
    // ('\u008A') <LINE TABULATION SET>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_392)
{
    // 008B 003F;	
    // ('\u008B') <PARTIAL LINE FORWARD>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_393)
{
    // 008C 003F;	
    // ('\u008C') <PARTIAL LINE BACKWARD>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_394)
{
    // 008D 003F;	
    // ('\u008D') <REVERSE LINE FEED>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_395)
{
    // 008E 003F;	
    // ('\u008E') <SINGLE SHIFT TWO>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_396)
{
    // 008F 003F;	
    // ('\u008F') <SINGLE SHIFT THREE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x008F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_397)
{
    // 0090 003F;	
    // ('\u0090') <DEVICE CONTROL STRING>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0090, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_398)
{
    // 0091 003F;	
    // ('\u0091') <PRIVATE USE ONE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0091, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_399)
{
    // 0092 003F;	
    // ('\u0092') <PRIVATE USE TWO>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0092, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_400)
{
    // 0093 003F;	
    // ('\u0093') <SET TRANSMIT STATE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0093, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_401)
{
    // 0094 003F;	
    // ('\u0094') <CANCEL CHARACTER>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0094, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_402)
{
    // 0095 003F;	
    // ('\u0095') <MESSAGE WAITING>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0095, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_403)
{
    // 0096 003F;	
    // ('\u0096') <START OF GUARDED AREA>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0096, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_404)
{
    // 0097 003F;	
    // ('\u0097') <END OF GUARDED AREA>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0097, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_405)
{
    // 0098 003F;	
    // ('\u0098') <START OF STRING>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0098, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_406)
{
    // 0099 003F;	
    // ('\u0099') <control>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0099, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_407)
{
    // 009A 003F;	
    // ('\u009A') <SINGLE CHARACTER INTRODUCER>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_408)
{
    // 009B 003F;	
    // ('\u009B') <CONTROL SEQUENCE INTRODUCER>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_409)
{
    // 009C 003F;	
    // ('\u009C') <STRING TERMINATOR>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_410)
{
    // 009D 003F;	
    // ('\u009D') <OPERATING SYSTEM COMMAND>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_411)
{
    // 009E 003F;	
    // ('\u009E') <PRIVACY MESSAGE>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_412)
{
    // 009F 003F;	
    // ('\u009F') <APPLICATION PROGRAM COMMAND>	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x009F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_413)
{
    // 00AD 003F;	
    // ('\u00AD') SOFT HYPHEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x00AD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_414)
{
    // 034F 003F;	
    // (͏) COMBINING GRAPHEME JOINER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x034F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_415)
{
    // 0488 003F;	
    // (҈) COMBINING CYRILLIC HUNDRED THOUSANDS SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0488, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_416)
{
    // 0489 003F;	
    // (҉) COMBINING CYRILLIC MILLIONS SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0489, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_417)
{
    // 0591 003F;	
    // (֑) HEBREW ACCENT ETNAHTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0591, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_418)
{
    // 0592 003F;	
    // (֒) HEBREW ACCENT SEGOL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0592, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_419)
{
    // 0593 003F;	
    // (֓) HEBREW ACCENT SHALSHELET	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0593, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_420)
{
    // 0594 003F;	
    // (֔) HEBREW ACCENT ZAQEF QATAN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0594, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_421)
{
    // 0595 003F;	
    // (֕) HEBREW ACCENT ZAQEF GADOL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0595, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_422)
{
    // 0596 003F;	
    // (֖) HEBREW ACCENT TIPEHA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0596, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_423)
{
    // 0597 003F;	
    // (֗) HEBREW ACCENT REVIA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0597, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_424)
{
    // 0598 003F;	
    // (֘) HEBREW ACCENT ZARQA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0598, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_425)
{
    // 0599 003F;	
    // (֙) HEBREW ACCENT PASHTA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0599, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_426)
{
    // 059A 003F;	
    // (֚) HEBREW ACCENT YETIV	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_427)
{
    // 059B 003F;	
    // (֛) HEBREW ACCENT TEVIR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_428)
{
    // 059C 003F;	
    // (֜) HEBREW ACCENT GERESH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_429)
{
    // 059D 003F;	
    // (֝) HEBREW ACCENT GERESH MUQDAM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_430)
{
    // 059E 003F;	
    // (֞) HEBREW ACCENT GERSHAYIM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_431)
{
    // 059F 003F;	
    // (֟) HEBREW ACCENT QARNEY PARA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x059F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_432)
{
    // 05A0 003F;	
    // (֠) HEBREW ACCENT TELISHA GEDOLA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_433)
{
    // 05A1 003F;	
    // (֡) HEBREW ACCENT PAZER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_434)
{
    // 05A2 003F;	
    // (֢) HEBREW ACCENT ATNAH HAFUKH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_435)
{
    // 05A3 003F;	
    // (֣) HEBREW ACCENT MUNAH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_436)
{
    // 05A4 003F;	
    // (֤) HEBREW ACCENT MAHAPAKH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_437)
{
    // 05A5 003F;	
    // (֥) HEBREW ACCENT MERKHA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_438)
{
    // 05A6 003F;	
    // (֦) HEBREW ACCENT MERKHA KEFULA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_439)
{
    // 05A7 003F;	
    // (֧) HEBREW ACCENT DARGA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_440)
{
    // 05A8 003F;	
    // (֨) HEBREW ACCENT QADMA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_441)
{
    // 05A9 003F;	
    // (֩) HEBREW ACCENT TELISHA QETANA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05A9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_442)
{
    // 05AA 003F;	
    // (֪) HEBREW ACCENT YERAH BEN YOMO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_443)
{
    // 05AB 003F;	
    // (֫) HEBREW ACCENT OLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_444)
{
    // 05AC 003F;	
    // (֬) HEBREW ACCENT ILUY	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_445)
{
    // 05AD 003F;	
    // (֭) HEBREW ACCENT DEHI	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_446)
{
    // 05AE 003F;	
    // (֮) HEBREW ACCENT ZINOR	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_447)
{
    // 05AF 003F;	
    // (֯) HEBREW MARK MASORA CIRCLE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05AF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_448)
{
    // 05BD 003F;	
    // (ֽ) HEBREW POINT METEG	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05BD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_449)
{
    // 05C4 003F;	
    // (ׄ) HEBREW MARK UPPER DOT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05C4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_450)
{
    // 05C5 003F;	
    // (ׅ) HEBREW MARK LOWER DOT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x05C5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_451)
{
    // 0600 003F;	
    // ('\u0600') ARABIC NUMBER SIGN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0600, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_452)
{
    // 0601 003F;	
    // ('\u0601') ARABIC SIGN SANAH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0601, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_453)
{
    // 0602 003F;	
    // ('\u0602') ARABIC FOOTNOTE MARKER	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0602, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_454)
{
    // 0603 003F;	
    // ('\u0603') ARABIC SIGN SAFHA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0603, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_455)
{
    // 0604 003F;	
    // ('\u0604') ARABIC SIGN SAMVAT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0604, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_456)
{
    // 0605 003F;	
    // ('\u0605') ARABIC NUMBER MARK ABOVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0605, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_457)
{
    // 0610 003F;	
    // (ؐ) ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0610, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_458)
{
    // 0611 003F;	
    // (ؑ) ARABIC SIGN ALAYHE ASSALLAM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0611, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_459)
{
    // 0612 003F;	
    // (ؒ) ARABIC SIGN RAHMATULLAH ALAYHE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0612, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_460)
{
    // 0613 003F;	
    // (ؓ) ARABIC SIGN RADI ALLAHOU ANHU	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0613, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_461)
{
    // 0614 003F;	
    // (ؔ) ARABIC SIGN TAKHALLUS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0614, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_462)
{
    // 0615 003F;	
    // (ؕ) ARABIC SMALL HIGH TAH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0615, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_463)
{
    // 0616 003F;	
    // (ؖ) ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0616, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_464)
{
    // 0617 003F;	
    // (ؗ) ARABIC SMALL HIGH ZAIN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0617, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_465)
{
    // 0618 003F;	
    // (ؘ) ARABIC SMALL FATHA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0618, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_466)
{
    // 0619 003F;	
    // (ؙ) ARABIC SMALL DAMMA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0619, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_467)
{
    // 061A 003F;	
    // (ؚ) ARABIC SMALL KASRA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x061A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_468)
{
    // 061C 003F;	
    // ('\u061C') ARABIC LETTER MARK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x061C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_469)
{
    // 0640 003F;	
    // (‎‎ـ‎‎) ARABIC TATWEEL	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0640, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_470)
{
    // 06D6 003F;	
    // (ۖ) ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06D6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_471)
{
    // 06D7 003F;	
    // (ۗ) ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06D7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_472)
{
    // 06D8 003F;	
    // (ۘ) ARABIC SMALL HIGH MEEM INITIAL FORM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06D8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_473)
{
    // 06D9 003F;	
    // (ۙ) ARABIC SMALL HIGH LAM ALEF	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06D9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_474)
{
    // 06DA 003F;	
    // (ۚ) ARABIC SMALL HIGH JEEM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06DA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_475)
{
    // 06DB 003F;	
    // (ۛ) ARABIC SMALL HIGH THREE DOTS	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06DB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_476)
{
    // 06DC 003F;	
    // (ۜ) ARABIC SMALL HIGH SEEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06DC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_477)
{
    // 06DD 003F;	
    // ('\u06DD') ARABIC END OF AYAH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06DD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_478)
{
    // 06DF 003F;	
    // (۟) ARABIC SMALL HIGH ROUNDED ZERO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06DF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_479)
{
    // 06E0 003F;	
    // (۠) ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06E0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_480)
{
    // 06E1 003F;	
    // (ۡ) ARABIC SMALL HIGH DOTLESS HEAD OF KHAH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06E1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_481)
{
    // 06E2 003F;	
    // (ۢ) ARABIC SMALL HIGH MEEM ISOLATED FORM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06E2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_482)
{
    // 06E3 003F;	
    // (ۣ) ARABIC SMALL LOW SEEN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06E3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_483)
{
    // 06E4 003F;	
    // (ۤ) ARABIC SMALL HIGH MADDA	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06E4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_484)
{
    // 06E7 003F;	
    // (ۧ) ARABIC SMALL HIGH YEH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06E7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_485)
{
    // 06E8 003F;	
    // (ۨ) ARABIC SMALL HIGH NOON	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06E8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_486)
{
    // 06EA 003F;	
    // (۪) ARABIC EMPTY CENTRE LOW STOP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06EA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_487)
{
    // 06EB 003F;	
    // (۫) ARABIC EMPTY CENTRE HIGH STOP	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06EB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_488)
{
    // 06EC 003F;	
    // (۬) ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06EC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_489)
{
    // 06ED 003F;	
    // (ۭ) ARABIC SMALL LOW MEEM	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x06ED, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_490)
{
    // 070F 003F;	
    // ('\u070F') SYRIAC ABBREVIATION MARK	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x070F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_491)
{
    // 0740 003F;	
    // (݀) SYRIAC FEMININE DOT	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0740, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_492)
{
    // 0743 003F;	
    // (݃) SYRIAC TWO VERTICAL DOTS ABOVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0743, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_493)
{
    // 0744 003F;	
    // (݄) SYRIAC TWO VERTICAL DOTS BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0744, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_494)
{
    // 0747 003F;	
    // (݇) SYRIAC OBLIQUE LINE ABOVE	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0747, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_495)
{
    // 0748 003F;	
    // (݈) SYRIAC OBLIQUE LINE BELOW	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0748, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_496)
{
    // 0749 003F;	
    // (݉) SYRIAC MUSIC	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x0749, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_497)
{
    // 074A 003F;	
    // (݊) SYRIAC BARREKH	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x074A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_498)
{
    // 07FA 003F;	
    // (‎‎ߺ‎‎) NKO LAJANYALAN	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x07FA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_006_499)
{
    // 08D4 003F;	
    // (ࣔ) ARABIC SMALL HIGH WORD AR-RUB	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0x08D4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

