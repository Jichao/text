// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_145_000)
{
    // 12152 ; [.4D3E.0020.0002] 
    // CUNEIFORM SIGN IM SQUARED

    uint32_t const cps[1] = { 0x12152 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_001)
{
    // 12153 ; [.4D3F.0020.0002] 
    // CUNEIFORM SIGN IMIN

    uint32_t const cps[1] = { 0x12153 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_002)
{
    // 12154 ; [.4D40.0020.0002] 
    // CUNEIFORM SIGN IN

    uint32_t const cps[1] = { 0x12154 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_003)
{
    // 12155 ; [.4D41.0020.0002] 
    // CUNEIFORM SIGN IR

    uint32_t const cps[1] = { 0x12155 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_004)
{
    // 12156 ; [.4D42.0020.0002] 
    // CUNEIFORM SIGN ISH

    uint32_t const cps[1] = { 0x12156 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_005)
{
    // 12157 ; [.4D43.0020.0002] 
    // CUNEIFORM SIGN KA

    uint32_t const cps[1] = { 0x12157 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_006)
{
    // 12158 ; [.4D44.0020.0002] 
    // CUNEIFORM SIGN KA TIMES A

    uint32_t const cps[1] = { 0x12158 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_007)
{
    // 12159 ; [.4D45.0020.0002] 
    // CUNEIFORM SIGN KA TIMES AD

    uint32_t const cps[1] = { 0x12159 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_008)
{
    // 1215A ; [.4D46.0020.0002] 
    // CUNEIFORM SIGN KA TIMES AD PLUS KU3

    uint32_t const cps[1] = { 0x1215a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_009)
{
    // 1215B ; [.4D47.0020.0002] 
    // CUNEIFORM SIGN KA TIMES ASH2

    uint32_t const cps[1] = { 0x1215b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_010)
{
    // 1215C ; [.4D48.0020.0002] 
    // CUNEIFORM SIGN KA TIMES BAD

    uint32_t const cps[1] = { 0x1215c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_011)
{
    // 1215D ; [.4D49.0020.0002] 
    // CUNEIFORM SIGN KA TIMES BALAG

    uint32_t const cps[1] = { 0x1215d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_012)
{
    // 1215E ; [.4D4A.0020.0002] 
    // CUNEIFORM SIGN KA TIMES BAR

    uint32_t const cps[1] = { 0x1215e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_013)
{
    // 1215F ; [.4D4B.0020.0002] 
    // CUNEIFORM SIGN KA TIMES BI

    uint32_t const cps[1] = { 0x1215f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_014)
{
    // 12160 ; [.4D4C.0020.0002] 
    // CUNEIFORM SIGN KA TIMES ERIN2

    uint32_t const cps[1] = { 0x12160 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_015)
{
    // 12161 ; [.4D4D.0020.0002] 
    // CUNEIFORM SIGN KA TIMES ESH2

    uint32_t const cps[1] = { 0x12161 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_016)
{
    // 12162 ; [.4D4E.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GA

    uint32_t const cps[1] = { 0x12162 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_017)
{
    // 12163 ; [.4D4F.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GAL

    uint32_t const cps[1] = { 0x12163 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_018)
{
    // 12164 ; [.4D50.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GAN2 TENU

    uint32_t const cps[1] = { 0x12164 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_019)
{
    // 12165 ; [.4D51.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GAR

    uint32_t const cps[1] = { 0x12165 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_020)
{
    // 12166 ; [.4D52.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GAR PLUS SHA3 PLUS A

    uint32_t const cps[1] = { 0x12166 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_021)
{
    // 12167 ; [.4D53.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GI

    uint32_t const cps[1] = { 0x12167 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_022)
{
    // 12168 ; [.4D54.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GIR2

    uint32_t const cps[1] = { 0x12168 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_023)
{
    // 12169 ; [.4D55.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GISH PLUS SAR

    uint32_t const cps[1] = { 0x12169 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_024)
{
    // 1216A ; [.4D56.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GISH CROSSING GISH

    uint32_t const cps[1] = { 0x1216a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_025)
{
    // 1216B ; [.4D57.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GU

    uint32_t const cps[1] = { 0x1216b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_026)
{
    // 1216C ; [.4D58.0020.0002] 
    // CUNEIFORM SIGN KA TIMES GUR7

    uint32_t const cps[1] = { 0x1216c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_027)
{
    // 1216D ; [.4D59.0020.0002] 
    // CUNEIFORM SIGN KA TIMES IGI

    uint32_t const cps[1] = { 0x1216d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_028)
{
    // 1216E ; [.4D5A.0020.0002] 
    // CUNEIFORM SIGN KA TIMES IM

    uint32_t const cps[1] = { 0x1216e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_029)
{
    // 1216F ; [.4D5B.0020.0002] 
    // CUNEIFORM SIGN KA TIMES KAK

    uint32_t const cps[1] = { 0x1216f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_030)
{
    // 12170 ; [.4D5C.0020.0002] 
    // CUNEIFORM SIGN KA TIMES KI

    uint32_t const cps[1] = { 0x12170 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_031)
{
    // 12171 ; [.4D5D.0020.0002] 
    // CUNEIFORM SIGN KA TIMES KID

    uint32_t const cps[1] = { 0x12171 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_032)
{
    // 12172 ; [.4D5E.0020.0002] 
    // CUNEIFORM SIGN KA TIMES LI

    uint32_t const cps[1] = { 0x12172 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_033)
{
    // 12173 ; [.4D5F.0020.0002] 
    // CUNEIFORM SIGN KA TIMES LU

    uint32_t const cps[1] = { 0x12173 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_034)
{
    // 12174 ; [.4D60.0020.0002] 
    // CUNEIFORM SIGN KA TIMES ME

    uint32_t const cps[1] = { 0x12174 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_035)
{
    // 12175 ; [.4D61.0020.0002] 
    // CUNEIFORM SIGN KA TIMES ME PLUS DU

    uint32_t const cps[1] = { 0x12175 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_036)
{
    // 12176 ; [.4D62.0020.0002] 
    // CUNEIFORM SIGN KA TIMES ME PLUS GI

    uint32_t const cps[1] = { 0x12176 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_037)
{
    // 12177 ; [.4D63.0020.0002] 
    // CUNEIFORM SIGN KA TIMES ME PLUS TE

    uint32_t const cps[1] = { 0x12177 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_038)
{
    // 12178 ; [.4D64.0020.0002] 
    // CUNEIFORM SIGN KA TIMES MI

    uint32_t const cps[1] = { 0x12178 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_039)
{
    // 12179 ; [.4D65.0020.0002] 
    // CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ

    uint32_t const cps[1] = { 0x12179 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_040)
{
    // 1217A ; [.4D66.0020.0002] 
    // CUNEIFORM SIGN KA TIMES NE

    uint32_t const cps[1] = { 0x1217a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_041)
{
    // 1217B ; [.4D67.0020.0002] 
    // CUNEIFORM SIGN KA TIMES NUN

    uint32_t const cps[1] = { 0x1217b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_042)
{
    // 1217C ; [.4D68.0020.0002] 
    // CUNEIFORM SIGN KA TIMES PI

    uint32_t const cps[1] = { 0x1217c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_043)
{
    // 1217D ; [.4D69.0020.0002] 
    // CUNEIFORM SIGN KA TIMES RU

    uint32_t const cps[1] = { 0x1217d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_044)
{
    // 1217E ; [.4D6A.0020.0002] 
    // CUNEIFORM SIGN KA TIMES SA

    uint32_t const cps[1] = { 0x1217e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_045)
{
    // 1217F ; [.4D6B.0020.0002] 
    // CUNEIFORM SIGN KA TIMES SAR

    uint32_t const cps[1] = { 0x1217f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_046)
{
    // 12180 ; [.4D6C.0020.0002] 
    // CUNEIFORM SIGN KA TIMES SHA

    uint32_t const cps[1] = { 0x12180 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_047)
{
    // 12181 ; [.4D6D.0020.0002] 
    // CUNEIFORM SIGN KA TIMES SHE

    uint32_t const cps[1] = { 0x12181 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_048)
{
    // 12182 ; [.4D6E.0020.0002] 
    // CUNEIFORM SIGN KA TIMES SHID

    uint32_t const cps[1] = { 0x12182 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_049)
{
    // 12183 ; [.4D6F.0020.0002] 
    // CUNEIFORM SIGN KA TIMES SHU

    uint32_t const cps[1] = { 0x12183 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_050)
{
    // 12184 ; [.4D70.0020.0002] 
    // CUNEIFORM SIGN KA TIMES SIG

    uint32_t const cps[1] = { 0x12184 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_051)
{
    // 12185 ; [.4D71.0020.0002] 
    // CUNEIFORM SIGN KA TIMES SUHUR

    uint32_t const cps[1] = { 0x12185 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_052)
{
    // 12186 ; [.4D72.0020.0002] 
    // CUNEIFORM SIGN KA TIMES TAR

    uint32_t const cps[1] = { 0x12186 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_053)
{
    // 12187 ; [.4D73.0020.0002] 
    // CUNEIFORM SIGN KA TIMES U

    uint32_t const cps[1] = { 0x12187 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_054)
{
    // 12188 ; [.4D74.0020.0002] 
    // CUNEIFORM SIGN KA TIMES U2

    uint32_t const cps[1] = { 0x12188 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_055)
{
    // 12189 ; [.4D75.0020.0002] 
    // CUNEIFORM SIGN KA TIMES UD

    uint32_t const cps[1] = { 0x12189 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_056)
{
    // 1218A ; [.4D76.0020.0002] 
    // CUNEIFORM SIGN KA TIMES UMUM TIMES PA

    uint32_t const cps[1] = { 0x1218a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_057)
{
    // 1218B ; [.4D77.0020.0002] 
    // CUNEIFORM SIGN KA TIMES USH

    uint32_t const cps[1] = { 0x1218b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_058)
{
    // 1218C ; [.4D78.0020.0002] 
    // CUNEIFORM SIGN KA TIMES ZI

    uint32_t const cps[1] = { 0x1218c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_059)
{
    // 1218D ; [.4D79.0020.0002] 
    // CUNEIFORM SIGN KA2

    uint32_t const cps[1] = { 0x1218d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_060)
{
    // 1218E ; [.4D7A.0020.0002] 
    // CUNEIFORM SIGN KA2 CROSSING KA2

    uint32_t const cps[1] = { 0x1218e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_061)
{
    // 1218F ; [.4D7B.0020.0002] 
    // CUNEIFORM SIGN KAB

    uint32_t const cps[1] = { 0x1218f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_062)
{
    // 12190 ; [.4D7C.0020.0002] 
    // CUNEIFORM SIGN KAD2

    uint32_t const cps[1] = { 0x12190 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_063)
{
    // 12191 ; [.4D7D.0020.0002] 
    // CUNEIFORM SIGN KAD3

    uint32_t const cps[1] = { 0x12191 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_064)
{
    // 12192 ; [.4D7E.0020.0002] 
    // CUNEIFORM SIGN KAD4

    uint32_t const cps[1] = { 0x12192 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_065)
{
    // 12193 ; [.4D7F.0020.0002] 
    // CUNEIFORM SIGN KAD5

    uint32_t const cps[1] = { 0x12193 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_066)
{
    // 12194 ; [.4D80.0020.0002] 
    // CUNEIFORM SIGN KAD5 OVER KAD5

    uint32_t const cps[1] = { 0x12194 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_067)
{
    // 12195 ; [.4D81.0020.0002] 
    // CUNEIFORM SIGN KAK

    uint32_t const cps[1] = { 0x12195 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_068)
{
    // 12196 ; [.4D82.0020.0002] 
    // CUNEIFORM SIGN KAK TIMES IGI GUNU

    uint32_t const cps[1] = { 0x12196 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_069)
{
    // 12197 ; [.4D83.0020.0002] 
    // CUNEIFORM SIGN KAL

    uint32_t const cps[1] = { 0x12197 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_070)
{
    // 12198 ; [.4D84.0020.0002] 
    // CUNEIFORM SIGN KAL TIMES BAD

    uint32_t const cps[1] = { 0x12198 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_071)
{
    // 12199 ; [.4D85.0020.0002] 
    // CUNEIFORM SIGN KAL CROSSING KAL

    uint32_t const cps[1] = { 0x12199 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_072)
{
    // 1219A ; [.4D86.0020.0002] 
    // CUNEIFORM SIGN KAM2

    uint32_t const cps[1] = { 0x1219a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_073)
{
    // 1219B ; [.4D87.0020.0002] 
    // CUNEIFORM SIGN KAM4

    uint32_t const cps[1] = { 0x1219b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_074)
{
    // 1219C ; [.4D88.0020.0002] 
    // CUNEIFORM SIGN KASKAL

    uint32_t const cps[1] = { 0x1219c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_075)
{
    // 1219D ; [.4D89.0020.0002] 
    // CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U

    uint32_t const cps[1] = { 0x1219d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_076)
{
    // 1219E ; [.4D8A.0020.0002] 
    // CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U

    uint32_t const cps[1] = { 0x1219e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_077)
{
    // 1219F ; [.4D8B.0020.0002] 
    // CUNEIFORM SIGN KESH2

    uint32_t const cps[1] = { 0x1219f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_078)
{
    // 121A0 ; [.4D8C.0020.0002] 
    // CUNEIFORM SIGN KI

    uint32_t const cps[1] = { 0x121a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_079)
{
    // 121A1 ; [.4D8D.0020.0002] 
    // CUNEIFORM SIGN KI TIMES BAD

    uint32_t const cps[1] = { 0x121a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_080)
{
    // 121A2 ; [.4D8E.0020.0002] 
    // CUNEIFORM SIGN KI TIMES U

    uint32_t const cps[1] = { 0x121a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_081)
{
    // 121A3 ; [.4D8F.0020.0002] 
    // CUNEIFORM SIGN KI TIMES UD

    uint32_t const cps[1] = { 0x121a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_082)
{
    // 121A4 ; [.4D90.0020.0002] 
    // CUNEIFORM SIGN KID

    uint32_t const cps[1] = { 0x121a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_083)
{
    // 121A5 ; [.4D91.0020.0002] 
    // CUNEIFORM SIGN KIN

    uint32_t const cps[1] = { 0x121a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_084)
{
    // 121A6 ; [.4D92.0020.0002] 
    // CUNEIFORM SIGN KISAL

    uint32_t const cps[1] = { 0x121a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_085)
{
    // 121A7 ; [.4D93.0020.0002] 
    // CUNEIFORM SIGN KISH

    uint32_t const cps[1] = { 0x121a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_086)
{
    // 121A8 ; [.4D94.0020.0002] 
    // CUNEIFORM SIGN KISIM5

    uint32_t const cps[1] = { 0x121a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_087)
{
    // 121A9 ; [.4D95.0020.0002] 
    // CUNEIFORM SIGN KISIM5 OVER KISIM5

    uint32_t const cps[1] = { 0x121a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_088)
{
    // 121AA ; [.4D96.0020.0002] 
    // CUNEIFORM SIGN KU

    uint32_t const cps[1] = { 0x121aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_089)
{
    // 121AB ; [.4D97.0020.0002] 
    // CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2

    uint32_t const cps[1] = { 0x121ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_090)
{
    // 121AC ; [.4D98.0020.0002] 
    // CUNEIFORM SIGN KU3

    uint32_t const cps[1] = { 0x121ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_091)
{
    // 121AD ; [.4D99.0020.0002] 
    // CUNEIFORM SIGN KU4

    uint32_t const cps[1] = { 0x121ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_092)
{
    // 121AE ; [.4D9A.0020.0002] 
    // CUNEIFORM SIGN KU4 VARIANT FORM

    uint32_t const cps[1] = { 0x121ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_093)
{
    // 121AF ; [.4D9B.0020.0002] 
    // CUNEIFORM SIGN KU7

    uint32_t const cps[1] = { 0x121af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_094)
{
    // 121B0 ; [.4D9C.0020.0002] 
    // CUNEIFORM SIGN KUL

    uint32_t const cps[1] = { 0x121b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_095)
{
    // 121B1 ; [.4D9D.0020.0002] 
    // CUNEIFORM SIGN KUL GUNU

    uint32_t const cps[1] = { 0x121b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_096)
{
    // 121B2 ; [.4D9E.0020.0002] 
    // CUNEIFORM SIGN KUN

    uint32_t const cps[1] = { 0x121b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_097)
{
    // 121B3 ; [.4D9F.0020.0002] 
    // CUNEIFORM SIGN KUR

    uint32_t const cps[1] = { 0x121b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4d9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_098)
{
    // 121B4 ; [.4DA0.0020.0002] 
    // CUNEIFORM SIGN KUR OPPOSING KUR

    uint32_t const cps[1] = { 0x121b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_099)
{
    // 121B5 ; [.4DA1.0020.0002] 
    // CUNEIFORM SIGN KUSHU2

    uint32_t const cps[1] = { 0x121b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_100)
{
    // 121B6 ; [.4DA2.0020.0002] 
    // CUNEIFORM SIGN KWU318

    uint32_t const cps[1] = { 0x121b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_101)
{
    // 121B7 ; [.4DA3.0020.0002] 
    // CUNEIFORM SIGN LA

    uint32_t const cps[1] = { 0x121b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_102)
{
    // 121B8 ; [.4DA4.0020.0002] 
    // CUNEIFORM SIGN LAGAB

    uint32_t const cps[1] = { 0x121b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_103)
{
    // 121B9 ; [.4DA5.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES A

    uint32_t const cps[1] = { 0x121b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_104)
{
    // 121BA ; [.4DA6.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA

    uint32_t const cps[1] = { 0x121ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_105)
{
    // 121BB ; [.4DA7.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES A PLUS GAR

    uint32_t const cps[1] = { 0x121bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_106)
{
    // 121BC ; [.4DA8.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES A PLUS LAL

    uint32_t const cps[1] = { 0x121bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_107)
{
    // 121BD ; [.4DA9.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES AL

    uint32_t const cps[1] = { 0x121bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4da9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_108)
{
    // 121BE ; [.4DAA.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES AN

    uint32_t const cps[1] = { 0x121be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4daa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_109)
{
    // 121BF ; [.4DAB.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU

    uint32_t const cps[1] = { 0x121bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_110)
{
    // 121C0 ; [.4DAC.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES BAD

    uint32_t const cps[1] = { 0x121c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_111)
{
    // 121C1 ; [.4DAD.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES BI

    uint32_t const cps[1] = { 0x121c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_112)
{
    // 121C2 ; [.4DAE.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES DAR

    uint32_t const cps[1] = { 0x121c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_113)
{
    // 121C3 ; [.4DAF.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES EN

    uint32_t const cps[1] = { 0x121c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4daf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_114)
{
    // 121C4 ; [.4DB0.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES GA

    uint32_t const cps[1] = { 0x121c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_115)
{
    // 121C5 ; [.4DB1.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES GAR

    uint32_t const cps[1] = { 0x121c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_116)
{
    // 121C6 ; [.4DB2.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES GUD

    uint32_t const cps[1] = { 0x121c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_117)
{
    // 121C7 ; [.4DB3.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD

    uint32_t const cps[1] = { 0x121c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_118)
{
    // 121C8 ; [.4DB4.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES HA

    uint32_t const cps[1] = { 0x121c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_119)
{
    // 121C9 ; [.4DB5.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES HAL

    uint32_t const cps[1] = { 0x121c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_120)
{
    // 121CA ; [.4DB6.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN

    uint32_t const cps[1] = { 0x121ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_121)
{
    // 121CB ; [.4DB7.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES IGI GUNU

    uint32_t const cps[1] = { 0x121cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_122)
{
    // 121CC ; [.4DB8.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES IM

    uint32_t const cps[1] = { 0x121cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_123)
{
    // 121CD ; [.4DB9.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES IM PLUS HA

    uint32_t const cps[1] = { 0x121cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4db9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_124)
{
    // 121CE ; [.4DBA.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES IM PLUS LU

    uint32_t const cps[1] = { 0x121ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_125)
{
    // 121CF ; [.4DBB.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES KI

    uint32_t const cps[1] = { 0x121cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dbb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_126)
{
    // 121D0 ; [.4DBC.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES KIN

    uint32_t const cps[1] = { 0x121d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dbc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_127)
{
    // 121D1 ; [.4DBD.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES KU3

    uint32_t const cps[1] = { 0x121d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dbd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_128)
{
    // 121D2 ; [.4DBE.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES KUL

    uint32_t const cps[1] = { 0x121d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dbe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_129)
{
    // 121D3 ; [.4DBF.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES KUL PLUS HI PLUS A

    uint32_t const cps[1] = { 0x121d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dbf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_130)
{
    // 121D4 ; [.4DC0.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES LAGAB

    uint32_t const cps[1] = { 0x121d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_131)
{
    // 121D5 ; [.4DC1.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES LISH

    uint32_t const cps[1] = { 0x121d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_132)
{
    // 121D6 ; [.4DC2.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES LU

    uint32_t const cps[1] = { 0x121d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_133)
{
    // 121D7 ; [.4DC3.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES LUL

    uint32_t const cps[1] = { 0x121d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_134)
{
    // 121D8 ; [.4DC4.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES ME

    uint32_t const cps[1] = { 0x121d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_135)
{
    // 121D9 ; [.4DC5.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES ME PLUS EN

    uint32_t const cps[1] = { 0x121d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_136)
{
    // 121DA ; [.4DC6.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES MUSH

    uint32_t const cps[1] = { 0x121da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_137)
{
    // 121DB ; [.4DC7.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES NE

    uint32_t const cps[1] = { 0x121db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_138)
{
    // 121DC ; [.4DC8.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES SHE PLUS SUM

    uint32_t const cps[1] = { 0x121dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_139)
{
    // 121DD ; [.4DC9.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH PLUS ERIN2

    uint32_t const cps[1] = { 0x121dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dc9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_140)
{
    // 121DE ; [.4DCA.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH TENU

    uint32_t const cps[1] = { 0x121de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_141)
{
    // 121DF ; [.4DCB.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES SHU2

    uint32_t const cps[1] = { 0x121df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dcb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_142)
{
    // 121E0 ; [.4DCC.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES SHU2 PLUS SHU2

    uint32_t const cps[1] = { 0x121e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dcc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_143)
{
    // 121E1 ; [.4DCD.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES SUM

    uint32_t const cps[1] = { 0x121e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dcd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_144)
{
    // 121E2 ; [.4DCE.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES TAG

    uint32_t const cps[1] = { 0x121e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_145)
{
    // 121E3 ; [.4DCF.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES TAK4

    uint32_t const cps[1] = { 0x121e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dcf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_146)
{
    // 121E4 ; [.4DD0.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES TE PLUS A PLUS SU PLUS NA

    uint32_t const cps[1] = { 0x121e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dd0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_147)
{
    // 121E5 ; [.4DD1.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES U

    uint32_t const cps[1] = { 0x121e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_148)
{
    // 121E6 ; [.4DD2.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES U PLUS A

    uint32_t const cps[1] = { 0x121e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_145_149)
{
    // 121E7 ; [.4DD3.0020.0002] 
    // CUNEIFORM SIGN LAGAB TIMES U PLUS U PLUS U

    uint32_t const cps[1] = { 0x121e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4dd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

