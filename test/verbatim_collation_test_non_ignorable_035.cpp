// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_035_000)
{
    // 27F6 0041;	
    // (⟶) LONG RIGHTWARDS ARROW	[0AF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F6, 0x0041 };
    uint32_t const ces[9] = { 0x0AF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_001)
{
    // 27F6 0062;	
    // (⟶) LONG RIGHTWARDS ARROW	[0AF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F6, 0x0062 };
    uint32_t const ces[9] = { 0x0AF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_002)
{
    // 27F7 0021;	
    // (⟷) LONG LEFT RIGHT ARROW	[0AF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F7, 0x0021 };
    uint32_t const ces[9] = { 0x0AF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_003)
{
    // 27F7 003F;	
    // (⟷) LONG LEFT RIGHT ARROW	[0AF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F7, 0x003F };
    uint32_t const ces[9] = { 0x0AF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_004)
{
    // 27F7 0061;	
    // (⟷) LONG LEFT RIGHT ARROW	[0AF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F7, 0x0061 };
    uint32_t const ces[9] = { 0x0AF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_005)
{
    // 27F7 0041;	
    // (⟷) LONG LEFT RIGHT ARROW	[0AF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F7, 0x0041 };
    uint32_t const ces[9] = { 0x0AF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_006)
{
    // 27F7 0062;	
    // (⟷) LONG LEFT RIGHT ARROW	[0AF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F7, 0x0062 };
    uint32_t const ces[9] = { 0x0AF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_007)
{
    // 27F8 0021;	
    // (⟸) LONG LEFTWARDS DOUBLE ARROW	[0AF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F8, 0x0021 };
    uint32_t const ces[9] = { 0x0AF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_008)
{
    // 27F8 003F;	
    // (⟸) LONG LEFTWARDS DOUBLE ARROW	[0AF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F8, 0x003F };
    uint32_t const ces[9] = { 0x0AF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_009)
{
    // 27F8 0061;	
    // (⟸) LONG LEFTWARDS DOUBLE ARROW	[0AF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F8, 0x0061 };
    uint32_t const ces[9] = { 0x0AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_010)
{
    // 27F8 0041;	
    // (⟸) LONG LEFTWARDS DOUBLE ARROW	[0AF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F8, 0x0041 };
    uint32_t const ces[9] = { 0x0AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_011)
{
    // 27F8 0062;	
    // (⟸) LONG LEFTWARDS DOUBLE ARROW	[0AF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F8, 0x0062 };
    uint32_t const ces[9] = { 0x0AF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_012)
{
    // 27F9 0021;	
    // (⟹) LONG RIGHTWARDS DOUBLE ARROW	[0AF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F9, 0x0021 };
    uint32_t const ces[9] = { 0x0AF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_013)
{
    // 27F9 003F;	
    // (⟹) LONG RIGHTWARDS DOUBLE ARROW	[0AF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F9, 0x003F };
    uint32_t const ces[9] = { 0x0AF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_014)
{
    // 27F9 0061;	
    // (⟹) LONG RIGHTWARDS DOUBLE ARROW	[0AF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F9, 0x0061 };
    uint32_t const ces[9] = { 0x0AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_015)
{
    // 27F9 0041;	
    // (⟹) LONG RIGHTWARDS DOUBLE ARROW	[0AF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27F9, 0x0041 };
    uint32_t const ces[9] = { 0x0AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_016)
{
    // 27F9 0062;	
    // (⟹) LONG RIGHTWARDS DOUBLE ARROW	[0AF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27F9, 0x0062 };
    uint32_t const ces[9] = { 0x0AF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_017)
{
    // 27FA 0021;	
    // (⟺) LONG LEFT RIGHT DOUBLE ARROW	[0AFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FA, 0x0021 };
    uint32_t const ces[9] = { 0x0AFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_018)
{
    // 27FA 003F;	
    // (⟺) LONG LEFT RIGHT DOUBLE ARROW	[0AFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FA, 0x003F };
    uint32_t const ces[9] = { 0x0AFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_019)
{
    // 27FA 0061;	
    // (⟺) LONG LEFT RIGHT DOUBLE ARROW	[0AFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FA, 0x0061 };
    uint32_t const ces[9] = { 0x0AFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_020)
{
    // 27FA 0041;	
    // (⟺) LONG LEFT RIGHT DOUBLE ARROW	[0AFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27FA, 0x0041 };
    uint32_t const ces[9] = { 0x0AFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_021)
{
    // 27FA 0062;	
    // (⟺) LONG LEFT RIGHT DOUBLE ARROW	[0AFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FA, 0x0062 };
    uint32_t const ces[9] = { 0x0AFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_022)
{
    // 27FB 0021;	
    // (⟻) LONG LEFTWARDS ARROW FROM BAR	[0AFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FB, 0x0021 };
    uint32_t const ces[9] = { 0x0AFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_023)
{
    // 27FB 003F;	
    // (⟻) LONG LEFTWARDS ARROW FROM BAR	[0AFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FB, 0x003F };
    uint32_t const ces[9] = { 0x0AFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_024)
{
    // 27FB 0061;	
    // (⟻) LONG LEFTWARDS ARROW FROM BAR	[0AFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FB, 0x0061 };
    uint32_t const ces[9] = { 0x0AFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_025)
{
    // 27FB 0041;	
    // (⟻) LONG LEFTWARDS ARROW FROM BAR	[0AFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27FB, 0x0041 };
    uint32_t const ces[9] = { 0x0AFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_026)
{
    // 27FB 0062;	
    // (⟻) LONG LEFTWARDS ARROW FROM BAR	[0AFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FB, 0x0062 };
    uint32_t const ces[9] = { 0x0AFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_027)
{
    // 27FC 0021;	
    // (⟼) LONG RIGHTWARDS ARROW FROM BAR	[0AFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FC, 0x0021 };
    uint32_t const ces[9] = { 0x0AFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_028)
{
    // 27FC 003F;	
    // (⟼) LONG RIGHTWARDS ARROW FROM BAR	[0AFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FC, 0x003F };
    uint32_t const ces[9] = { 0x0AFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_029)
{
    // 27FC 0061;	
    // (⟼) LONG RIGHTWARDS ARROW FROM BAR	[0AFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FC, 0x0061 };
    uint32_t const ces[9] = { 0x0AFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_030)
{
    // 27FC 0041;	
    // (⟼) LONG RIGHTWARDS ARROW FROM BAR	[0AFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27FC, 0x0041 };
    uint32_t const ces[9] = { 0x0AFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_031)
{
    // 27FC 0062;	
    // (⟼) LONG RIGHTWARDS ARROW FROM BAR	[0AFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FC, 0x0062 };
    uint32_t const ces[9] = { 0x0AFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_032)
{
    // 27FD 0021;	
    // (⟽) LONG LEFTWARDS DOUBLE ARROW FROM BAR	[0AFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FD, 0x0021 };
    uint32_t const ces[9] = { 0x0AFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_033)
{
    // 27FD 003F;	
    // (⟽) LONG LEFTWARDS DOUBLE ARROW FROM BAR	[0AFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FD, 0x003F };
    uint32_t const ces[9] = { 0x0AFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_034)
{
    // 27FD 0061;	
    // (⟽) LONG LEFTWARDS DOUBLE ARROW FROM BAR	[0AFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FD, 0x0061 };
    uint32_t const ces[9] = { 0x0AFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_035)
{
    // 27FD 0041;	
    // (⟽) LONG LEFTWARDS DOUBLE ARROW FROM BAR	[0AFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27FD, 0x0041 };
    uint32_t const ces[9] = { 0x0AFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_036)
{
    // 27FD 0062;	
    // (⟽) LONG LEFTWARDS DOUBLE ARROW FROM BAR	[0AFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FD, 0x0062 };
    uint32_t const ces[9] = { 0x0AFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_037)
{
    // 27FE 0021;	
    // (⟾) LONG RIGHTWARDS DOUBLE ARROW FROM BAR	[0AFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FE, 0x0021 };
    uint32_t const ces[9] = { 0x0AFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_038)
{
    // 27FE 003F;	
    // (⟾) LONG RIGHTWARDS DOUBLE ARROW FROM BAR	[0AFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FE, 0x003F };
    uint32_t const ces[9] = { 0x0AFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_039)
{
    // 27FE 0061;	
    // (⟾) LONG RIGHTWARDS DOUBLE ARROW FROM BAR	[0AFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FE, 0x0061 };
    uint32_t const ces[9] = { 0x0AFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_040)
{
    // 27FE 0041;	
    // (⟾) LONG RIGHTWARDS DOUBLE ARROW FROM BAR	[0AFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27FE, 0x0041 };
    uint32_t const ces[9] = { 0x0AFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_041)
{
    // 27FE 0062;	
    // (⟾) LONG RIGHTWARDS DOUBLE ARROW FROM BAR	[0AFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FE, 0x0062 };
    uint32_t const ces[9] = { 0x0AFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_042)
{
    // 27FF 0021;	
    // (⟿) LONG RIGHTWARDS SQUIGGLE ARROW	[0AFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FF, 0x0021 };
    uint32_t const ces[9] = { 0x0AFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_043)
{
    // 27FF 003F;	
    // (⟿) LONG RIGHTWARDS SQUIGGLE ARROW	[0AFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FF, 0x003F };
    uint32_t const ces[9] = { 0x0AFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_044)
{
    // 27FF 0061;	
    // (⟿) LONG RIGHTWARDS SQUIGGLE ARROW	[0AFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FF, 0x0061 };
    uint32_t const ces[9] = { 0x0AFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_045)
{
    // 27FF 0041;	
    // (⟿) LONG RIGHTWARDS SQUIGGLE ARROW	[0AFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27FF, 0x0041 };
    uint32_t const ces[9] = { 0x0AFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_046)
{
    // 27FF 0062;	
    // (⟿) LONG RIGHTWARDS SQUIGGLE ARROW	[0AFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27FF, 0x0062 };
    uint32_t const ces[9] = { 0x0AFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_047)
{
    // 2900 0021;	
    // (⤀) RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0B00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2900, 0x0021 };
    uint32_t const ces[9] = { 0x0B00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_048)
{
    // 2900 003F;	
    // (⤀) RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0B00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2900, 0x003F };
    uint32_t const ces[9] = { 0x0B00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_049)
{
    // 2900 0061;	
    // (⤀) RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0B00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2900, 0x0061 };
    uint32_t const ces[9] = { 0x0B00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_050)
{
    // 2900 0041;	
    // (⤀) RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0B00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2900, 0x0041 };
    uint32_t const ces[9] = { 0x0B00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_051)
{
    // 2900 0062;	
    // (⤀) RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE	[0B00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2900, 0x0062 };
    uint32_t const ces[9] = { 0x0B00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_052)
{
    // 2901 0021;	
    // (⤁) RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0B01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2901, 0x0021 };
    uint32_t const ces[9] = { 0x0B01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_053)
{
    // 2901 003F;	
    // (⤁) RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0B01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2901, 0x003F };
    uint32_t const ces[9] = { 0x0B01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_054)
{
    // 2901 0061;	
    // (⤁) RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0B01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2901, 0x0061 };
    uint32_t const ces[9] = { 0x0B01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_055)
{
    // 2901 0041;	
    // (⤁) RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0B01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2901, 0x0041 };
    uint32_t const ces[9] = { 0x0B01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_056)
{
    // 2901 0062;	
    // (⤁) RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE	[0B01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2901, 0x0062 };
    uint32_t const ces[9] = { 0x0B01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_057)
{
    // 2902 0021;	
    // (⤂) LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2902, 0x0021 };
    uint32_t const ces[9] = { 0x0B02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_058)
{
    // 2902 003F;	
    // (⤂) LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2902, 0x003F };
    uint32_t const ces[9] = { 0x0B02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_059)
{
    // 2902 0061;	
    // (⤂) LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2902, 0x0061 };
    uint32_t const ces[9] = { 0x0B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_060)
{
    // 2902 0041;	
    // (⤂) LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2902, 0x0041 };
    uint32_t const ces[9] = { 0x0B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_061)
{
    // 2902 0062;	
    // (⤂) LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2902, 0x0062 };
    uint32_t const ces[9] = { 0x0B02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_062)
{
    // 2903 0021;	
    // (⤃) RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2903, 0x0021 };
    uint32_t const ces[9] = { 0x0B03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_063)
{
    // 2903 003F;	
    // (⤃) RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2903, 0x003F };
    uint32_t const ces[9] = { 0x0B03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_064)
{
    // 2903 0061;	
    // (⤃) RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2903, 0x0061 };
    uint32_t const ces[9] = { 0x0B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_065)
{
    // 2903 0041;	
    // (⤃) RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2903, 0x0041 };
    uint32_t const ces[9] = { 0x0B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_066)
{
    // 2903 0062;	
    // (⤃) RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE	[0B03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2903, 0x0062 };
    uint32_t const ces[9] = { 0x0B03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_067)
{
    // 2904 0021;	
    // (⤄) LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE	[0B04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2904, 0x0021 };
    uint32_t const ces[9] = { 0x0B04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_068)
{
    // 2904 003F;	
    // (⤄) LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE	[0B04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2904, 0x003F };
    uint32_t const ces[9] = { 0x0B04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_069)
{
    // 2904 0061;	
    // (⤄) LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE	[0B04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2904, 0x0061 };
    uint32_t const ces[9] = { 0x0B04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_070)
{
    // 2904 0041;	
    // (⤄) LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE	[0B04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2904, 0x0041 };
    uint32_t const ces[9] = { 0x0B04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_071)
{
    // 2904 0062;	
    // (⤄) LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE	[0B04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2904, 0x0062 };
    uint32_t const ces[9] = { 0x0B04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_072)
{
    // 2905 0021;	
    // (⤅) RIGHTWARDS TWO-HEADED ARROW FROM BAR	[0B05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2905, 0x0021 };
    uint32_t const ces[9] = { 0x0B05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_073)
{
    // 2905 003F;	
    // (⤅) RIGHTWARDS TWO-HEADED ARROW FROM BAR	[0B05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2905, 0x003F };
    uint32_t const ces[9] = { 0x0B05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_074)
{
    // 2905 0061;	
    // (⤅) RIGHTWARDS TWO-HEADED ARROW FROM BAR	[0B05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2905, 0x0061 };
    uint32_t const ces[9] = { 0x0B05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_075)
{
    // 2905 0041;	
    // (⤅) RIGHTWARDS TWO-HEADED ARROW FROM BAR	[0B05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2905, 0x0041 };
    uint32_t const ces[9] = { 0x0B05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_076)
{
    // 2905 0062;	
    // (⤅) RIGHTWARDS TWO-HEADED ARROW FROM BAR	[0B05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2905, 0x0062 };
    uint32_t const ces[9] = { 0x0B05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_077)
{
    // 2906 0021;	
    // (⤆) LEFTWARDS DOUBLE ARROW FROM BAR	[0B06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2906, 0x0021 };
    uint32_t const ces[9] = { 0x0B06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_078)
{
    // 2906 003F;	
    // (⤆) LEFTWARDS DOUBLE ARROW FROM BAR	[0B06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2906, 0x003F };
    uint32_t const ces[9] = { 0x0B06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_079)
{
    // 2906 0061;	
    // (⤆) LEFTWARDS DOUBLE ARROW FROM BAR	[0B06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2906, 0x0061 };
    uint32_t const ces[9] = { 0x0B06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_080)
{
    // 2906 0041;	
    // (⤆) LEFTWARDS DOUBLE ARROW FROM BAR	[0B06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2906, 0x0041 };
    uint32_t const ces[9] = { 0x0B06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_081)
{
    // 2906 0062;	
    // (⤆) LEFTWARDS DOUBLE ARROW FROM BAR	[0B06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2906, 0x0062 };
    uint32_t const ces[9] = { 0x0B06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_082)
{
    // 2907 0021;	
    // (⤇) RIGHTWARDS DOUBLE ARROW FROM BAR	[0B07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2907, 0x0021 };
    uint32_t const ces[9] = { 0x0B07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_083)
{
    // 2907 003F;	
    // (⤇) RIGHTWARDS DOUBLE ARROW FROM BAR	[0B07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2907, 0x003F };
    uint32_t const ces[9] = { 0x0B07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_084)
{
    // 2907 0061;	
    // (⤇) RIGHTWARDS DOUBLE ARROW FROM BAR	[0B07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2907, 0x0061 };
    uint32_t const ces[9] = { 0x0B07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_085)
{
    // 2907 0041;	
    // (⤇) RIGHTWARDS DOUBLE ARROW FROM BAR	[0B07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2907, 0x0041 };
    uint32_t const ces[9] = { 0x0B07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_086)
{
    // 2907 0062;	
    // (⤇) RIGHTWARDS DOUBLE ARROW FROM BAR	[0B07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2907, 0x0062 };
    uint32_t const ces[9] = { 0x0B07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_087)
{
    // 2908 0021;	
    // (⤈) DOWNWARDS ARROW WITH HORIZONTAL STROKE	[0B08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2908, 0x0021 };
    uint32_t const ces[9] = { 0x0B08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_088)
{
    // 2908 003F;	
    // (⤈) DOWNWARDS ARROW WITH HORIZONTAL STROKE	[0B08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2908, 0x003F };
    uint32_t const ces[9] = { 0x0B08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_089)
{
    // 2908 0061;	
    // (⤈) DOWNWARDS ARROW WITH HORIZONTAL STROKE	[0B08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2908, 0x0061 };
    uint32_t const ces[9] = { 0x0B08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_090)
{
    // 2908 0041;	
    // (⤈) DOWNWARDS ARROW WITH HORIZONTAL STROKE	[0B08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2908, 0x0041 };
    uint32_t const ces[9] = { 0x0B08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_091)
{
    // 2908 0062;	
    // (⤈) DOWNWARDS ARROW WITH HORIZONTAL STROKE	[0B08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2908, 0x0062 };
    uint32_t const ces[9] = { 0x0B08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_092)
{
    // 2909 0021;	
    // (⤉) UPWARDS ARROW WITH HORIZONTAL STROKE	[0B09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2909, 0x0021 };
    uint32_t const ces[9] = { 0x0B09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_093)
{
    // 2909 003F;	
    // (⤉) UPWARDS ARROW WITH HORIZONTAL STROKE	[0B09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2909, 0x003F };
    uint32_t const ces[9] = { 0x0B09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_094)
{
    // 2909 0061;	
    // (⤉) UPWARDS ARROW WITH HORIZONTAL STROKE	[0B09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2909, 0x0061 };
    uint32_t const ces[9] = { 0x0B09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_095)
{
    // 2909 0041;	
    // (⤉) UPWARDS ARROW WITH HORIZONTAL STROKE	[0B09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2909, 0x0041 };
    uint32_t const ces[9] = { 0x0B09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_096)
{
    // 2909 0062;	
    // (⤉) UPWARDS ARROW WITH HORIZONTAL STROKE	[0B09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2909, 0x0062 };
    uint32_t const ces[9] = { 0x0B09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_097)
{
    // 290A 0021;	
    // (⤊) UPWARDS TRIPLE ARROW	[0B0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290A, 0x0021 };
    uint32_t const ces[9] = { 0x0B0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_098)
{
    // 290A 003F;	
    // (⤊) UPWARDS TRIPLE ARROW	[0B0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290A, 0x003F };
    uint32_t const ces[9] = { 0x0B0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_099)
{
    // 290A 0061;	
    // (⤊) UPWARDS TRIPLE ARROW	[0B0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290A, 0x0061 };
    uint32_t const ces[9] = { 0x0B0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_100)
{
    // 290A 0041;	
    // (⤊) UPWARDS TRIPLE ARROW	[0B0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x290A, 0x0041 };
    uint32_t const ces[9] = { 0x0B0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_101)
{
    // 290A 0062;	
    // (⤊) UPWARDS TRIPLE ARROW	[0B0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290A, 0x0062 };
    uint32_t const ces[9] = { 0x0B0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_102)
{
    // 290B 0021;	
    // (⤋) DOWNWARDS TRIPLE ARROW	[0B0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290B, 0x0021 };
    uint32_t const ces[9] = { 0x0B0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_103)
{
    // 290B 003F;	
    // (⤋) DOWNWARDS TRIPLE ARROW	[0B0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290B, 0x003F };
    uint32_t const ces[9] = { 0x0B0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_104)
{
    // 290B 0061;	
    // (⤋) DOWNWARDS TRIPLE ARROW	[0B0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290B, 0x0061 };
    uint32_t const ces[9] = { 0x0B0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_105)
{
    // 290B 0041;	
    // (⤋) DOWNWARDS TRIPLE ARROW	[0B0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x290B, 0x0041 };
    uint32_t const ces[9] = { 0x0B0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_106)
{
    // 290B 0062;	
    // (⤋) DOWNWARDS TRIPLE ARROW	[0B0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290B, 0x0062 };
    uint32_t const ces[9] = { 0x0B0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_107)
{
    // 290C 0021;	
    // (⤌) LEFTWARDS DOUBLE DASH ARROW	[0B0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290C, 0x0021 };
    uint32_t const ces[9] = { 0x0B0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_108)
{
    // 290C 003F;	
    // (⤌) LEFTWARDS DOUBLE DASH ARROW	[0B0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290C, 0x003F };
    uint32_t const ces[9] = { 0x0B0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_109)
{
    // 290C 0061;	
    // (⤌) LEFTWARDS DOUBLE DASH ARROW	[0B0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290C, 0x0061 };
    uint32_t const ces[9] = { 0x0B0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_110)
{
    // 290C 0041;	
    // (⤌) LEFTWARDS DOUBLE DASH ARROW	[0B0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x290C, 0x0041 };
    uint32_t const ces[9] = { 0x0B0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_111)
{
    // 290C 0062;	
    // (⤌) LEFTWARDS DOUBLE DASH ARROW	[0B0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290C, 0x0062 };
    uint32_t const ces[9] = { 0x0B0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_112)
{
    // 290D 0021;	
    // (⤍) RIGHTWARDS DOUBLE DASH ARROW	[0B0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290D, 0x0021 };
    uint32_t const ces[9] = { 0x0B0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_113)
{
    // 290D 003F;	
    // (⤍) RIGHTWARDS DOUBLE DASH ARROW	[0B0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290D, 0x003F };
    uint32_t const ces[9] = { 0x0B0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_114)
{
    // 290D 0061;	
    // (⤍) RIGHTWARDS DOUBLE DASH ARROW	[0B0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290D, 0x0061 };
    uint32_t const ces[9] = { 0x0B0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_115)
{
    // 290D 0041;	
    // (⤍) RIGHTWARDS DOUBLE DASH ARROW	[0B0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x290D, 0x0041 };
    uint32_t const ces[9] = { 0x0B0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_116)
{
    // 290D 0062;	
    // (⤍) RIGHTWARDS DOUBLE DASH ARROW	[0B0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290D, 0x0062 };
    uint32_t const ces[9] = { 0x0B0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_117)
{
    // 290E 0021;	
    // (⤎) LEFTWARDS TRIPLE DASH ARROW	[0B0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290E, 0x0021 };
    uint32_t const ces[9] = { 0x0B0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_118)
{
    // 290E 003F;	
    // (⤎) LEFTWARDS TRIPLE DASH ARROW	[0B0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290E, 0x003F };
    uint32_t const ces[9] = { 0x0B0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_119)
{
    // 290E 0061;	
    // (⤎) LEFTWARDS TRIPLE DASH ARROW	[0B0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290E, 0x0061 };
    uint32_t const ces[9] = { 0x0B0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_120)
{
    // 290E 0041;	
    // (⤎) LEFTWARDS TRIPLE DASH ARROW	[0B0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x290E, 0x0041 };
    uint32_t const ces[9] = { 0x0B0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_121)
{
    // 290E 0062;	
    // (⤎) LEFTWARDS TRIPLE DASH ARROW	[0B0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290E, 0x0062 };
    uint32_t const ces[9] = { 0x0B0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_122)
{
    // 290F 0021;	
    // (⤏) RIGHTWARDS TRIPLE DASH ARROW	[0B0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290F, 0x0021 };
    uint32_t const ces[9] = { 0x0B0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_123)
{
    // 290F 003F;	
    // (⤏) RIGHTWARDS TRIPLE DASH ARROW	[0B0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290F, 0x003F };
    uint32_t const ces[9] = { 0x0B0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_124)
{
    // 290F 0061;	
    // (⤏) RIGHTWARDS TRIPLE DASH ARROW	[0B0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290F, 0x0061 };
    uint32_t const ces[9] = { 0x0B0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_125)
{
    // 290F 0041;	
    // (⤏) RIGHTWARDS TRIPLE DASH ARROW	[0B0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x290F, 0x0041 };
    uint32_t const ces[9] = { 0x0B0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_126)
{
    // 290F 0062;	
    // (⤏) RIGHTWARDS TRIPLE DASH ARROW	[0B0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x290F, 0x0062 };
    uint32_t const ces[9] = { 0x0B0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_127)
{
    // 2910 0021;	
    // (⤐) RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW	[0B10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2910, 0x0021 };
    uint32_t const ces[9] = { 0x0B10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_128)
{
    // 2910 003F;	
    // (⤐) RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW	[0B10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2910, 0x003F };
    uint32_t const ces[9] = { 0x0B10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_129)
{
    // 2910 0061;	
    // (⤐) RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW	[0B10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2910, 0x0061 };
    uint32_t const ces[9] = { 0x0B10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_130)
{
    // 2910 0041;	
    // (⤐) RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW	[0B10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2910, 0x0041 };
    uint32_t const ces[9] = { 0x0B10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_131)
{
    // 2910 0062;	
    // (⤐) RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW	[0B10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2910, 0x0062 };
    uint32_t const ces[9] = { 0x0B10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_132)
{
    // 2911 0021;	
    // (⤑) RIGHTWARDS ARROW WITH DOTTED STEM	[0B11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2911, 0x0021 };
    uint32_t const ces[9] = { 0x0B11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_133)
{
    // 2911 003F;	
    // (⤑) RIGHTWARDS ARROW WITH DOTTED STEM	[0B11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2911, 0x003F };
    uint32_t const ces[9] = { 0x0B11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_134)
{
    // 2911 0061;	
    // (⤑) RIGHTWARDS ARROW WITH DOTTED STEM	[0B11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2911, 0x0061 };
    uint32_t const ces[9] = { 0x0B11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_135)
{
    // 2911 0041;	
    // (⤑) RIGHTWARDS ARROW WITH DOTTED STEM	[0B11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2911, 0x0041 };
    uint32_t const ces[9] = { 0x0B11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_136)
{
    // 2911 0062;	
    // (⤑) RIGHTWARDS ARROW WITH DOTTED STEM	[0B11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2911, 0x0062 };
    uint32_t const ces[9] = { 0x0B11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_137)
{
    // 2912 0021;	
    // (⤒) UPWARDS ARROW TO BAR	[0B12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2912, 0x0021 };
    uint32_t const ces[9] = { 0x0B12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_138)
{
    // 2912 003F;	
    // (⤒) UPWARDS ARROW TO BAR	[0B12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2912, 0x003F };
    uint32_t const ces[9] = { 0x0B12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_139)
{
    // 2912 0061;	
    // (⤒) UPWARDS ARROW TO BAR	[0B12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2912, 0x0061 };
    uint32_t const ces[9] = { 0x0B12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_140)
{
    // 2912 0041;	
    // (⤒) UPWARDS ARROW TO BAR	[0B12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2912, 0x0041 };
    uint32_t const ces[9] = { 0x0B12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_141)
{
    // 2912 0062;	
    // (⤒) UPWARDS ARROW TO BAR	[0B12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2912, 0x0062 };
    uint32_t const ces[9] = { 0x0B12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_142)
{
    // 2913 0021;	
    // (⤓) DOWNWARDS ARROW TO BAR	[0B13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2913, 0x0021 };
    uint32_t const ces[9] = { 0x0B13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_143)
{
    // 2913 003F;	
    // (⤓) DOWNWARDS ARROW TO BAR	[0B13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2913, 0x003F };
    uint32_t const ces[9] = { 0x0B13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_144)
{
    // 2913 0061;	
    // (⤓) DOWNWARDS ARROW TO BAR	[0B13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2913, 0x0061 };
    uint32_t const ces[9] = { 0x0B13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_145)
{
    // 2913 0041;	
    // (⤓) DOWNWARDS ARROW TO BAR	[0B13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2913, 0x0041 };
    uint32_t const ces[9] = { 0x0B13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_146)
{
    // 2913 0062;	
    // (⤓) DOWNWARDS ARROW TO BAR	[0B13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2913, 0x0062 };
    uint32_t const ces[9] = { 0x0B13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_147)
{
    // 2914 0021;	
    // (⤔) RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0B14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2914, 0x0021 };
    uint32_t const ces[9] = { 0x0B14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_148)
{
    // 2914 003F;	
    // (⤔) RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0B14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2914, 0x003F };
    uint32_t const ces[9] = { 0x0B14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_149)
{
    // 2914 0061;	
    // (⤔) RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0B14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2914, 0x0061 };
    uint32_t const ces[9] = { 0x0B14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_150)
{
    // 2914 0041;	
    // (⤔) RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0B14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2914, 0x0041 };
    uint32_t const ces[9] = { 0x0B14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_151)
{
    // 2914 0062;	
    // (⤔) RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE	[0B14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2914, 0x0062 };
    uint32_t const ces[9] = { 0x0B14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_152)
{
    // 2915 0021;	
    // (⤕) RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2915, 0x0021 };
    uint32_t const ces[9] = { 0x0B15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_153)
{
    // 2915 003F;	
    // (⤕) RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2915, 0x003F };
    uint32_t const ces[9] = { 0x0B15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_154)
{
    // 2915 0061;	
    // (⤕) RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2915, 0x0061 };
    uint32_t const ces[9] = { 0x0B15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_155)
{
    // 2915 0041;	
    // (⤕) RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2915, 0x0041 };
    uint32_t const ces[9] = { 0x0B15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_156)
{
    // 2915 0062;	
    // (⤕) RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2915, 0x0062 };
    uint32_t const ces[9] = { 0x0B15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_157)
{
    // 2916 0021;	
    // (⤖) RIGHTWARDS TWO-HEADED ARROW WITH TAIL	[0B16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2916, 0x0021 };
    uint32_t const ces[9] = { 0x0B16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_158)
{
    // 2916 003F;	
    // (⤖) RIGHTWARDS TWO-HEADED ARROW WITH TAIL	[0B16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2916, 0x003F };
    uint32_t const ces[9] = { 0x0B16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_159)
{
    // 2916 0061;	
    // (⤖) RIGHTWARDS TWO-HEADED ARROW WITH TAIL	[0B16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2916, 0x0061 };
    uint32_t const ces[9] = { 0x0B16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_160)
{
    // 2916 0041;	
    // (⤖) RIGHTWARDS TWO-HEADED ARROW WITH TAIL	[0B16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2916, 0x0041 };
    uint32_t const ces[9] = { 0x0B16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_161)
{
    // 2916 0062;	
    // (⤖) RIGHTWARDS TWO-HEADED ARROW WITH TAIL	[0B16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2916, 0x0062 };
    uint32_t const ces[9] = { 0x0B16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_162)
{
    // 2917 0021;	
    // (⤗) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0B17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2917, 0x0021 };
    uint32_t const ces[9] = { 0x0B17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_163)
{
    // 2917 003F;	
    // (⤗) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0B17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2917, 0x003F };
    uint32_t const ces[9] = { 0x0B17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_164)
{
    // 2917 0061;	
    // (⤗) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0B17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2917, 0x0061 };
    uint32_t const ces[9] = { 0x0B17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_165)
{
    // 2917 0041;	
    // (⤗) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0B17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2917, 0x0041 };
    uint32_t const ces[9] = { 0x0B17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_166)
{
    // 2917 0062;	
    // (⤗) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE	[0B17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2917, 0x0062 };
    uint32_t const ces[9] = { 0x0B17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_167)
{
    // 2918 0021;	
    // (⤘) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2918, 0x0021 };
    uint32_t const ces[9] = { 0x0B18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_168)
{
    // 2918 003F;	
    // (⤘) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2918, 0x003F };
    uint32_t const ces[9] = { 0x0B18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_169)
{
    // 2918 0061;	
    // (⤘) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2918, 0x0061 };
    uint32_t const ces[9] = { 0x0B18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_170)
{
    // 2918 0041;	
    // (⤘) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2918, 0x0041 };
    uint32_t const ces[9] = { 0x0B18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_171)
{
    // 2918 0062;	
    // (⤘) RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE	[0B18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2918, 0x0062 };
    uint32_t const ces[9] = { 0x0B18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_172)
{
    // 2919 0021;	
    // (⤙) LEFTWARDS ARROW-TAIL	[0B19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2919, 0x0021 };
    uint32_t const ces[9] = { 0x0B19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_173)
{
    // 2919 003F;	
    // (⤙) LEFTWARDS ARROW-TAIL	[0B19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2919, 0x003F };
    uint32_t const ces[9] = { 0x0B19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_174)
{
    // 2919 0061;	
    // (⤙) LEFTWARDS ARROW-TAIL	[0B19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2919, 0x0061 };
    uint32_t const ces[9] = { 0x0B19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_175)
{
    // 2919 0041;	
    // (⤙) LEFTWARDS ARROW-TAIL	[0B19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2919, 0x0041 };
    uint32_t const ces[9] = { 0x0B19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_176)
{
    // 2919 0062;	
    // (⤙) LEFTWARDS ARROW-TAIL	[0B19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2919, 0x0062 };
    uint32_t const ces[9] = { 0x0B19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_177)
{
    // 291A 0021;	
    // (⤚) RIGHTWARDS ARROW-TAIL	[0B1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291A, 0x0021 };
    uint32_t const ces[9] = { 0x0B1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_178)
{
    // 291A 003F;	
    // (⤚) RIGHTWARDS ARROW-TAIL	[0B1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291A, 0x003F };
    uint32_t const ces[9] = { 0x0B1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_179)
{
    // 291A 0061;	
    // (⤚) RIGHTWARDS ARROW-TAIL	[0B1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291A, 0x0061 };
    uint32_t const ces[9] = { 0x0B1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_180)
{
    // 291A 0041;	
    // (⤚) RIGHTWARDS ARROW-TAIL	[0B1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x291A, 0x0041 };
    uint32_t const ces[9] = { 0x0B1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_181)
{
    // 291A 0062;	
    // (⤚) RIGHTWARDS ARROW-TAIL	[0B1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291A, 0x0062 };
    uint32_t const ces[9] = { 0x0B1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_182)
{
    // 291B 0021;	
    // (⤛) LEFTWARDS DOUBLE ARROW-TAIL	[0B1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291B, 0x0021 };
    uint32_t const ces[9] = { 0x0B1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_183)
{
    // 291B 003F;	
    // (⤛) LEFTWARDS DOUBLE ARROW-TAIL	[0B1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291B, 0x003F };
    uint32_t const ces[9] = { 0x0B1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_184)
{
    // 291B 0061;	
    // (⤛) LEFTWARDS DOUBLE ARROW-TAIL	[0B1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291B, 0x0061 };
    uint32_t const ces[9] = { 0x0B1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_185)
{
    // 291B 0041;	
    // (⤛) LEFTWARDS DOUBLE ARROW-TAIL	[0B1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x291B, 0x0041 };
    uint32_t const ces[9] = { 0x0B1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_186)
{
    // 291B 0062;	
    // (⤛) LEFTWARDS DOUBLE ARROW-TAIL	[0B1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291B, 0x0062 };
    uint32_t const ces[9] = { 0x0B1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_187)
{
    // 291C 0021;	
    // (⤜) RIGHTWARDS DOUBLE ARROW-TAIL	[0B1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291C, 0x0021 };
    uint32_t const ces[9] = { 0x0B1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_188)
{
    // 291C 003F;	
    // (⤜) RIGHTWARDS DOUBLE ARROW-TAIL	[0B1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291C, 0x003F };
    uint32_t const ces[9] = { 0x0B1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_189)
{
    // 291C 0061;	
    // (⤜) RIGHTWARDS DOUBLE ARROW-TAIL	[0B1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291C, 0x0061 };
    uint32_t const ces[9] = { 0x0B1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_190)
{
    // 291C 0041;	
    // (⤜) RIGHTWARDS DOUBLE ARROW-TAIL	[0B1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x291C, 0x0041 };
    uint32_t const ces[9] = { 0x0B1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_191)
{
    // 291C 0062;	
    // (⤜) RIGHTWARDS DOUBLE ARROW-TAIL	[0B1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291C, 0x0062 };
    uint32_t const ces[9] = { 0x0B1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_192)
{
    // 291D 0021;	
    // (⤝) LEFTWARDS ARROW TO BLACK DIAMOND	[0B1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291D, 0x0021 };
    uint32_t const ces[9] = { 0x0B1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_193)
{
    // 291D 003F;	
    // (⤝) LEFTWARDS ARROW TO BLACK DIAMOND	[0B1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291D, 0x003F };
    uint32_t const ces[9] = { 0x0B1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_194)
{
    // 291D 0061;	
    // (⤝) LEFTWARDS ARROW TO BLACK DIAMOND	[0B1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291D, 0x0061 };
    uint32_t const ces[9] = { 0x0B1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_195)
{
    // 291D 0041;	
    // (⤝) LEFTWARDS ARROW TO BLACK DIAMOND	[0B1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x291D, 0x0041 };
    uint32_t const ces[9] = { 0x0B1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_196)
{
    // 291D 0062;	
    // (⤝) LEFTWARDS ARROW TO BLACK DIAMOND	[0B1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291D, 0x0062 };
    uint32_t const ces[9] = { 0x0B1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_197)
{
    // 291E 0021;	
    // (⤞) RIGHTWARDS ARROW TO BLACK DIAMOND	[0B1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291E, 0x0021 };
    uint32_t const ces[9] = { 0x0B1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_198)
{
    // 291E 003F;	
    // (⤞) RIGHTWARDS ARROW TO BLACK DIAMOND	[0B1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291E, 0x003F };
    uint32_t const ces[9] = { 0x0B1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_199)
{
    // 291E 0061;	
    // (⤞) RIGHTWARDS ARROW TO BLACK DIAMOND	[0B1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291E, 0x0061 };
    uint32_t const ces[9] = { 0x0B1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_200)
{
    // 291E 0041;	
    // (⤞) RIGHTWARDS ARROW TO BLACK DIAMOND	[0B1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x291E, 0x0041 };
    uint32_t const ces[9] = { 0x0B1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_201)
{
    // 291E 0062;	
    // (⤞) RIGHTWARDS ARROW TO BLACK DIAMOND	[0B1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291E, 0x0062 };
    uint32_t const ces[9] = { 0x0B1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_202)
{
    // 291F 0021;	
    // (⤟) LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291F, 0x0021 };
    uint32_t const ces[9] = { 0x0B1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_203)
{
    // 291F 003F;	
    // (⤟) LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291F, 0x003F };
    uint32_t const ces[9] = { 0x0B1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_204)
{
    // 291F 0061;	
    // (⤟) LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291F, 0x0061 };
    uint32_t const ces[9] = { 0x0B1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_205)
{
    // 291F 0041;	
    // (⤟) LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x291F, 0x0041 };
    uint32_t const ces[9] = { 0x0B1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_206)
{
    // 291F 0062;	
    // (⤟) LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x291F, 0x0062 };
    uint32_t const ces[9] = { 0x0B1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_207)
{
    // 2920 0021;	
    // (⤠) RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2920, 0x0021 };
    uint32_t const ces[9] = { 0x0B20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_208)
{
    // 2920 003F;	
    // (⤠) RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2920, 0x003F };
    uint32_t const ces[9] = { 0x0B20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_209)
{
    // 2920 0061;	
    // (⤠) RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2920, 0x0061 };
    uint32_t const ces[9] = { 0x0B20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_210)
{
    // 2920 0041;	
    // (⤠) RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2920, 0x0041 };
    uint32_t const ces[9] = { 0x0B20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_211)
{
    // 2920 0062;	
    // (⤠) RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND	[0B20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2920, 0x0062 };
    uint32_t const ces[9] = { 0x0B20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_212)
{
    // 2921 0021;	
    // (⤡) NORTH WEST AND SOUTH EAST ARROW	[0B21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2921, 0x0021 };
    uint32_t const ces[9] = { 0x0B21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_213)
{
    // 2921 003F;	
    // (⤡) NORTH WEST AND SOUTH EAST ARROW	[0B21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2921, 0x003F };
    uint32_t const ces[9] = { 0x0B21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_214)
{
    // 2921 0061;	
    // (⤡) NORTH WEST AND SOUTH EAST ARROW	[0B21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2921, 0x0061 };
    uint32_t const ces[9] = { 0x0B21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_215)
{
    // 2921 0041;	
    // (⤡) NORTH WEST AND SOUTH EAST ARROW	[0B21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2921, 0x0041 };
    uint32_t const ces[9] = { 0x0B21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_216)
{
    // 2921 0062;	
    // (⤡) NORTH WEST AND SOUTH EAST ARROW	[0B21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2921, 0x0062 };
    uint32_t const ces[9] = { 0x0B21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_217)
{
    // 2922 0021;	
    // (⤢) NORTH EAST AND SOUTH WEST ARROW	[0B22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2922, 0x0021 };
    uint32_t const ces[9] = { 0x0B22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_218)
{
    // 2922 003F;	
    // (⤢) NORTH EAST AND SOUTH WEST ARROW	[0B22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2922, 0x003F };
    uint32_t const ces[9] = { 0x0B22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_219)
{
    // 2922 0061;	
    // (⤢) NORTH EAST AND SOUTH WEST ARROW	[0B22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2922, 0x0061 };
    uint32_t const ces[9] = { 0x0B22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_220)
{
    // 2922 0041;	
    // (⤢) NORTH EAST AND SOUTH WEST ARROW	[0B22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2922, 0x0041 };
    uint32_t const ces[9] = { 0x0B22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_221)
{
    // 2922 0062;	
    // (⤢) NORTH EAST AND SOUTH WEST ARROW	[0B22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2922, 0x0062 };
    uint32_t const ces[9] = { 0x0B22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_222)
{
    // 2923 0021;	
    // (⤣) NORTH WEST ARROW WITH HOOK	[0B23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2923, 0x0021 };
    uint32_t const ces[9] = { 0x0B23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_223)
{
    // 2923 003F;	
    // (⤣) NORTH WEST ARROW WITH HOOK	[0B23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2923, 0x003F };
    uint32_t const ces[9] = { 0x0B23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_224)
{
    // 2923 0061;	
    // (⤣) NORTH WEST ARROW WITH HOOK	[0B23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2923, 0x0061 };
    uint32_t const ces[9] = { 0x0B23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_225)
{
    // 2923 0041;	
    // (⤣) NORTH WEST ARROW WITH HOOK	[0B23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2923, 0x0041 };
    uint32_t const ces[9] = { 0x0B23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_226)
{
    // 2923 0062;	
    // (⤣) NORTH WEST ARROW WITH HOOK	[0B23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2923, 0x0062 };
    uint32_t const ces[9] = { 0x0B23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_227)
{
    // 2924 0021;	
    // (⤤) NORTH EAST ARROW WITH HOOK	[0B24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2924, 0x0021 };
    uint32_t const ces[9] = { 0x0B24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_228)
{
    // 2924 003F;	
    // (⤤) NORTH EAST ARROW WITH HOOK	[0B24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2924, 0x003F };
    uint32_t const ces[9] = { 0x0B24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_229)
{
    // 2924 0061;	
    // (⤤) NORTH EAST ARROW WITH HOOK	[0B24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2924, 0x0061 };
    uint32_t const ces[9] = { 0x0B24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_230)
{
    // 2924 0041;	
    // (⤤) NORTH EAST ARROW WITH HOOK	[0B24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2924, 0x0041 };
    uint32_t const ces[9] = { 0x0B24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_231)
{
    // 2924 0062;	
    // (⤤) NORTH EAST ARROW WITH HOOK	[0B24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2924, 0x0062 };
    uint32_t const ces[9] = { 0x0B24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_232)
{
    // 2925 0021;	
    // (⤥) SOUTH EAST ARROW WITH HOOK	[0B25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2925, 0x0021 };
    uint32_t const ces[9] = { 0x0B25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_233)
{
    // 2925 003F;	
    // (⤥) SOUTH EAST ARROW WITH HOOK	[0B25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2925, 0x003F };
    uint32_t const ces[9] = { 0x0B25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_234)
{
    // 2925 0061;	
    // (⤥) SOUTH EAST ARROW WITH HOOK	[0B25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2925, 0x0061 };
    uint32_t const ces[9] = { 0x0B25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_235)
{
    // 2925 0041;	
    // (⤥) SOUTH EAST ARROW WITH HOOK	[0B25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2925, 0x0041 };
    uint32_t const ces[9] = { 0x0B25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_236)
{
    // 2925 0062;	
    // (⤥) SOUTH EAST ARROW WITH HOOK	[0B25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2925, 0x0062 };
    uint32_t const ces[9] = { 0x0B25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_237)
{
    // 2926 0021;	
    // (⤦) SOUTH WEST ARROW WITH HOOK	[0B26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2926, 0x0021 };
    uint32_t const ces[9] = { 0x0B26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_238)
{
    // 2926 003F;	
    // (⤦) SOUTH WEST ARROW WITH HOOK	[0B26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2926, 0x003F };
    uint32_t const ces[9] = { 0x0B26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_239)
{
    // 2926 0061;	
    // (⤦) SOUTH WEST ARROW WITH HOOK	[0B26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2926, 0x0061 };
    uint32_t const ces[9] = { 0x0B26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_240)
{
    // 2926 0041;	
    // (⤦) SOUTH WEST ARROW WITH HOOK	[0B26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2926, 0x0041 };
    uint32_t const ces[9] = { 0x0B26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_241)
{
    // 2926 0062;	
    // (⤦) SOUTH WEST ARROW WITH HOOK	[0B26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2926, 0x0062 };
    uint32_t const ces[9] = { 0x0B26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_242)
{
    // 2927 0021;	
    // (⤧) NORTH WEST ARROW AND NORTH EAST ARROW	[0B27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2927, 0x0021 };
    uint32_t const ces[9] = { 0x0B27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_243)
{
    // 2927 003F;	
    // (⤧) NORTH WEST ARROW AND NORTH EAST ARROW	[0B27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2927, 0x003F };
    uint32_t const ces[9] = { 0x0B27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_244)
{
    // 2927 0061;	
    // (⤧) NORTH WEST ARROW AND NORTH EAST ARROW	[0B27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2927, 0x0061 };
    uint32_t const ces[9] = { 0x0B27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_245)
{
    // 2927 0041;	
    // (⤧) NORTH WEST ARROW AND NORTH EAST ARROW	[0B27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2927, 0x0041 };
    uint32_t const ces[9] = { 0x0B27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_246)
{
    // 2927 0062;	
    // (⤧) NORTH WEST ARROW AND NORTH EAST ARROW	[0B27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2927, 0x0062 };
    uint32_t const ces[9] = { 0x0B27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_247)
{
    // 2928 0021;	
    // (⤨) NORTH EAST ARROW AND SOUTH EAST ARROW	[0B28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2928, 0x0021 };
    uint32_t const ces[9] = { 0x0B28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_248)
{
    // 2928 003F;	
    // (⤨) NORTH EAST ARROW AND SOUTH EAST ARROW	[0B28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2928, 0x003F };
    uint32_t const ces[9] = { 0x0B28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_249)
{
    // 2928 0061;	
    // (⤨) NORTH EAST ARROW AND SOUTH EAST ARROW	[0B28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2928, 0x0061 };
    uint32_t const ces[9] = { 0x0B28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_250)
{
    // 2928 0041;	
    // (⤨) NORTH EAST ARROW AND SOUTH EAST ARROW	[0B28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2928, 0x0041 };
    uint32_t const ces[9] = { 0x0B28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_251)
{
    // 2928 0062;	
    // (⤨) NORTH EAST ARROW AND SOUTH EAST ARROW	[0B28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2928, 0x0062 };
    uint32_t const ces[9] = { 0x0B28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_252)
{
    // 2929 0021;	
    // (⤩) SOUTH EAST ARROW AND SOUTH WEST ARROW	[0B29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2929, 0x0021 };
    uint32_t const ces[9] = { 0x0B29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_253)
{
    // 2929 003F;	
    // (⤩) SOUTH EAST ARROW AND SOUTH WEST ARROW	[0B29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2929, 0x003F };
    uint32_t const ces[9] = { 0x0B29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_254)
{
    // 2929 0061;	
    // (⤩) SOUTH EAST ARROW AND SOUTH WEST ARROW	[0B29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2929, 0x0061 };
    uint32_t const ces[9] = { 0x0B29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_255)
{
    // 2929 0041;	
    // (⤩) SOUTH EAST ARROW AND SOUTH WEST ARROW	[0B29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2929, 0x0041 };
    uint32_t const ces[9] = { 0x0B29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_256)
{
    // 2929 0062;	
    // (⤩) SOUTH EAST ARROW AND SOUTH WEST ARROW	[0B29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2929, 0x0062 };
    uint32_t const ces[9] = { 0x0B29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_257)
{
    // 292A 0021;	
    // (⤪) SOUTH WEST ARROW AND NORTH WEST ARROW	[0B2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292A, 0x0021 };
    uint32_t const ces[9] = { 0x0B2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_258)
{
    // 292A 003F;	
    // (⤪) SOUTH WEST ARROW AND NORTH WEST ARROW	[0B2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292A, 0x003F };
    uint32_t const ces[9] = { 0x0B2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_259)
{
    // 292A 0061;	
    // (⤪) SOUTH WEST ARROW AND NORTH WEST ARROW	[0B2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292A, 0x0061 };
    uint32_t const ces[9] = { 0x0B2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_260)
{
    // 292A 0041;	
    // (⤪) SOUTH WEST ARROW AND NORTH WEST ARROW	[0B2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x292A, 0x0041 };
    uint32_t const ces[9] = { 0x0B2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_261)
{
    // 292A 0062;	
    // (⤪) SOUTH WEST ARROW AND NORTH WEST ARROW	[0B2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292A, 0x0062 };
    uint32_t const ces[9] = { 0x0B2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_262)
{
    // 292B 0021;	
    // (⤫) RISING DIAGONAL CROSSING FALLING DIAGONAL	[0B2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292B, 0x0021 };
    uint32_t const ces[9] = { 0x0B2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_263)
{
    // 292B 003F;	
    // (⤫) RISING DIAGONAL CROSSING FALLING DIAGONAL	[0B2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292B, 0x003F };
    uint32_t const ces[9] = { 0x0B2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_264)
{
    // 292B 0061;	
    // (⤫) RISING DIAGONAL CROSSING FALLING DIAGONAL	[0B2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292B, 0x0061 };
    uint32_t const ces[9] = { 0x0B2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_265)
{
    // 292B 0041;	
    // (⤫) RISING DIAGONAL CROSSING FALLING DIAGONAL	[0B2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x292B, 0x0041 };
    uint32_t const ces[9] = { 0x0B2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_266)
{
    // 292B 0062;	
    // (⤫) RISING DIAGONAL CROSSING FALLING DIAGONAL	[0B2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292B, 0x0062 };
    uint32_t const ces[9] = { 0x0B2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_267)
{
    // 292C 0021;	
    // (⤬) FALLING DIAGONAL CROSSING RISING DIAGONAL	[0B2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292C, 0x0021 };
    uint32_t const ces[9] = { 0x0B2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_268)
{
    // 292C 003F;	
    // (⤬) FALLING DIAGONAL CROSSING RISING DIAGONAL	[0B2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292C, 0x003F };
    uint32_t const ces[9] = { 0x0B2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_269)
{
    // 292C 0061;	
    // (⤬) FALLING DIAGONAL CROSSING RISING DIAGONAL	[0B2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292C, 0x0061 };
    uint32_t const ces[9] = { 0x0B2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_270)
{
    // 292C 0041;	
    // (⤬) FALLING DIAGONAL CROSSING RISING DIAGONAL	[0B2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x292C, 0x0041 };
    uint32_t const ces[9] = { 0x0B2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_271)
{
    // 292C 0062;	
    // (⤬) FALLING DIAGONAL CROSSING RISING DIAGONAL	[0B2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292C, 0x0062 };
    uint32_t const ces[9] = { 0x0B2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_272)
{
    // 292D 0021;	
    // (⤭) SOUTH EAST ARROW CROSSING NORTH EAST ARROW	[0B2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292D, 0x0021 };
    uint32_t const ces[9] = { 0x0B2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_273)
{
    // 292D 003F;	
    // (⤭) SOUTH EAST ARROW CROSSING NORTH EAST ARROW	[0B2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292D, 0x003F };
    uint32_t const ces[9] = { 0x0B2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_274)
{
    // 292D 0061;	
    // (⤭) SOUTH EAST ARROW CROSSING NORTH EAST ARROW	[0B2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292D, 0x0061 };
    uint32_t const ces[9] = { 0x0B2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_275)
{
    // 292D 0041;	
    // (⤭) SOUTH EAST ARROW CROSSING NORTH EAST ARROW	[0B2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x292D, 0x0041 };
    uint32_t const ces[9] = { 0x0B2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_276)
{
    // 292D 0062;	
    // (⤭) SOUTH EAST ARROW CROSSING NORTH EAST ARROW	[0B2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292D, 0x0062 };
    uint32_t const ces[9] = { 0x0B2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_277)
{
    // 292E 0021;	
    // (⤮) NORTH EAST ARROW CROSSING SOUTH EAST ARROW	[0B2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292E, 0x0021 };
    uint32_t const ces[9] = { 0x0B2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_278)
{
    // 292E 003F;	
    // (⤮) NORTH EAST ARROW CROSSING SOUTH EAST ARROW	[0B2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292E, 0x003F };
    uint32_t const ces[9] = { 0x0B2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_279)
{
    // 292E 0061;	
    // (⤮) NORTH EAST ARROW CROSSING SOUTH EAST ARROW	[0B2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292E, 0x0061 };
    uint32_t const ces[9] = { 0x0B2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_280)
{
    // 292E 0041;	
    // (⤮) NORTH EAST ARROW CROSSING SOUTH EAST ARROW	[0B2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x292E, 0x0041 };
    uint32_t const ces[9] = { 0x0B2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_281)
{
    // 292E 0062;	
    // (⤮) NORTH EAST ARROW CROSSING SOUTH EAST ARROW	[0B2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292E, 0x0062 };
    uint32_t const ces[9] = { 0x0B2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_282)
{
    // 292F 0021;	
    // (⤯) FALLING DIAGONAL CROSSING NORTH EAST ARROW	[0B2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292F, 0x0021 };
    uint32_t const ces[9] = { 0x0B2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_283)
{
    // 292F 003F;	
    // (⤯) FALLING DIAGONAL CROSSING NORTH EAST ARROW	[0B2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292F, 0x003F };
    uint32_t const ces[9] = { 0x0B2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_284)
{
    // 292F 0061;	
    // (⤯) FALLING DIAGONAL CROSSING NORTH EAST ARROW	[0B2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292F, 0x0061 };
    uint32_t const ces[9] = { 0x0B2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_285)
{
    // 292F 0041;	
    // (⤯) FALLING DIAGONAL CROSSING NORTH EAST ARROW	[0B2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x292F, 0x0041 };
    uint32_t const ces[9] = { 0x0B2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_286)
{
    // 292F 0062;	
    // (⤯) FALLING DIAGONAL CROSSING NORTH EAST ARROW	[0B2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x292F, 0x0062 };
    uint32_t const ces[9] = { 0x0B2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_287)
{
    // 2930 0021;	
    // (⤰) RISING DIAGONAL CROSSING SOUTH EAST ARROW	[0B30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2930, 0x0021 };
    uint32_t const ces[9] = { 0x0B30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_288)
{
    // 2930 003F;	
    // (⤰) RISING DIAGONAL CROSSING SOUTH EAST ARROW	[0B30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2930, 0x003F };
    uint32_t const ces[9] = { 0x0B30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_289)
{
    // 2930 0061;	
    // (⤰) RISING DIAGONAL CROSSING SOUTH EAST ARROW	[0B30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2930, 0x0061 };
    uint32_t const ces[9] = { 0x0B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_290)
{
    // 2930 0041;	
    // (⤰) RISING DIAGONAL CROSSING SOUTH EAST ARROW	[0B30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2930, 0x0041 };
    uint32_t const ces[9] = { 0x0B30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_291)
{
    // 2930 0062;	
    // (⤰) RISING DIAGONAL CROSSING SOUTH EAST ARROW	[0B30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2930, 0x0062 };
    uint32_t const ces[9] = { 0x0B30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_292)
{
    // 2931 0021;	
    // (⤱) NORTH EAST ARROW CROSSING NORTH WEST ARROW	[0B31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2931, 0x0021 };
    uint32_t const ces[9] = { 0x0B31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_293)
{
    // 2931 003F;	
    // (⤱) NORTH EAST ARROW CROSSING NORTH WEST ARROW	[0B31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2931, 0x003F };
    uint32_t const ces[9] = { 0x0B31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_294)
{
    // 2931 0061;	
    // (⤱) NORTH EAST ARROW CROSSING NORTH WEST ARROW	[0B31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2931, 0x0061 };
    uint32_t const ces[9] = { 0x0B31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_295)
{
    // 2931 0041;	
    // (⤱) NORTH EAST ARROW CROSSING NORTH WEST ARROW	[0B31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2931, 0x0041 };
    uint32_t const ces[9] = { 0x0B31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_296)
{
    // 2931 0062;	
    // (⤱) NORTH EAST ARROW CROSSING NORTH WEST ARROW	[0B31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2931, 0x0062 };
    uint32_t const ces[9] = { 0x0B31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_297)
{
    // 2932 0021;	
    // (⤲) NORTH WEST ARROW CROSSING NORTH EAST ARROW	[0B32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2932, 0x0021 };
    uint32_t const ces[9] = { 0x0B32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_298)
{
    // 2932 003F;	
    // (⤲) NORTH WEST ARROW CROSSING NORTH EAST ARROW	[0B32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2932, 0x003F };
    uint32_t const ces[9] = { 0x0B32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_299)
{
    // 2932 0061;	
    // (⤲) NORTH WEST ARROW CROSSING NORTH EAST ARROW	[0B32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2932, 0x0061 };
    uint32_t const ces[9] = { 0x0B32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_300)
{
    // 2932 0041;	
    // (⤲) NORTH WEST ARROW CROSSING NORTH EAST ARROW	[0B32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2932, 0x0041 };
    uint32_t const ces[9] = { 0x0B32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_301)
{
    // 2932 0062;	
    // (⤲) NORTH WEST ARROW CROSSING NORTH EAST ARROW	[0B32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2932, 0x0062 };
    uint32_t const ces[9] = { 0x0B32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_302)
{
    // 2933 0021;	
    // (⤳) WAVE ARROW POINTING DIRECTLY RIGHT	[0B33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2933, 0x0021 };
    uint32_t const ces[9] = { 0x0B33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_303)
{
    // 2933 003F;	
    // (⤳) WAVE ARROW POINTING DIRECTLY RIGHT	[0B33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2933, 0x003F };
    uint32_t const ces[9] = { 0x0B33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_304)
{
    // 2933 0061;	
    // (⤳) WAVE ARROW POINTING DIRECTLY RIGHT	[0B33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2933, 0x0061 };
    uint32_t const ces[9] = { 0x0B33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_305)
{
    // 2933 0041;	
    // (⤳) WAVE ARROW POINTING DIRECTLY RIGHT	[0B33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2933, 0x0041 };
    uint32_t const ces[9] = { 0x0B33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_306)
{
    // 2933 0062;	
    // (⤳) WAVE ARROW POINTING DIRECTLY RIGHT	[0B33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2933, 0x0062 };
    uint32_t const ces[9] = { 0x0B33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_307)
{
    // 2934 0021;	
    // (⤴) ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS	[0B34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2934, 0x0021 };
    uint32_t const ces[9] = { 0x0B34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_308)
{
    // 2934 003F;	
    // (⤴) ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS	[0B34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2934, 0x003F };
    uint32_t const ces[9] = { 0x0B34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_309)
{
    // 2934 0061;	
    // (⤴) ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS	[0B34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2934, 0x0061 };
    uint32_t const ces[9] = { 0x0B34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_310)
{
    // 2934 0041;	
    // (⤴) ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS	[0B34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2934, 0x0041 };
    uint32_t const ces[9] = { 0x0B34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_311)
{
    // 2934 0062;	
    // (⤴) ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS	[0B34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2934, 0x0062 };
    uint32_t const ces[9] = { 0x0B34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_312)
{
    // 2935 0021;	
    // (⤵) ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS	[0B35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2935, 0x0021 };
    uint32_t const ces[9] = { 0x0B35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_313)
{
    // 2935 003F;	
    // (⤵) ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS	[0B35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2935, 0x003F };
    uint32_t const ces[9] = { 0x0B35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_314)
{
    // 2935 0061;	
    // (⤵) ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS	[0B35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2935, 0x0061 };
    uint32_t const ces[9] = { 0x0B35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_315)
{
    // 2935 0041;	
    // (⤵) ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS	[0B35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2935, 0x0041 };
    uint32_t const ces[9] = { 0x0B35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_316)
{
    // 2935 0062;	
    // (⤵) ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS	[0B35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2935, 0x0062 };
    uint32_t const ces[9] = { 0x0B35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_317)
{
    // 2936 0021;	
    // (⤶) ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS	[0B36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2936, 0x0021 };
    uint32_t const ces[9] = { 0x0B36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_318)
{
    // 2936 003F;	
    // (⤶) ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS	[0B36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2936, 0x003F };
    uint32_t const ces[9] = { 0x0B36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_319)
{
    // 2936 0061;	
    // (⤶) ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS	[0B36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2936, 0x0061 };
    uint32_t const ces[9] = { 0x0B36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_320)
{
    // 2936 0041;	
    // (⤶) ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS	[0B36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2936, 0x0041 };
    uint32_t const ces[9] = { 0x0B36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_321)
{
    // 2936 0062;	
    // (⤶) ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS	[0B36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2936, 0x0062 };
    uint32_t const ces[9] = { 0x0B36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_322)
{
    // 2937 0021;	
    // (⤷) ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS	[0B37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2937, 0x0021 };
    uint32_t const ces[9] = { 0x0B37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_323)
{
    // 2937 003F;	
    // (⤷) ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS	[0B37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2937, 0x003F };
    uint32_t const ces[9] = { 0x0B37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_324)
{
    // 2937 0061;	
    // (⤷) ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS	[0B37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2937, 0x0061 };
    uint32_t const ces[9] = { 0x0B37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_325)
{
    // 2937 0041;	
    // (⤷) ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS	[0B37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2937, 0x0041 };
    uint32_t const ces[9] = { 0x0B37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_326)
{
    // 2937 0062;	
    // (⤷) ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS	[0B37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2937, 0x0062 };
    uint32_t const ces[9] = { 0x0B37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_327)
{
    // 2938 0021;	
    // (⤸) RIGHT-SIDE ARC CLOCKWISE ARROW	[0B38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2938, 0x0021 };
    uint32_t const ces[9] = { 0x0B38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_328)
{
    // 2938 003F;	
    // (⤸) RIGHT-SIDE ARC CLOCKWISE ARROW	[0B38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2938, 0x003F };
    uint32_t const ces[9] = { 0x0B38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_329)
{
    // 2938 0061;	
    // (⤸) RIGHT-SIDE ARC CLOCKWISE ARROW	[0B38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2938, 0x0061 };
    uint32_t const ces[9] = { 0x0B38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_330)
{
    // 2938 0041;	
    // (⤸) RIGHT-SIDE ARC CLOCKWISE ARROW	[0B38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2938, 0x0041 };
    uint32_t const ces[9] = { 0x0B38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_331)
{
    // 2938 0062;	
    // (⤸) RIGHT-SIDE ARC CLOCKWISE ARROW	[0B38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2938, 0x0062 };
    uint32_t const ces[9] = { 0x0B38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_332)
{
    // 2939 0021;	
    // (⤹) LEFT-SIDE ARC ANTICLOCKWISE ARROW	[0B39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2939, 0x0021 };
    uint32_t const ces[9] = { 0x0B39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_333)
{
    // 2939 003F;	
    // (⤹) LEFT-SIDE ARC ANTICLOCKWISE ARROW	[0B39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2939, 0x003F };
    uint32_t const ces[9] = { 0x0B39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_334)
{
    // 2939 0061;	
    // (⤹) LEFT-SIDE ARC ANTICLOCKWISE ARROW	[0B39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2939, 0x0061 };
    uint32_t const ces[9] = { 0x0B39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_335)
{
    // 2939 0041;	
    // (⤹) LEFT-SIDE ARC ANTICLOCKWISE ARROW	[0B39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2939, 0x0041 };
    uint32_t const ces[9] = { 0x0B39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_336)
{
    // 2939 0062;	
    // (⤹) LEFT-SIDE ARC ANTICLOCKWISE ARROW	[0B39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2939, 0x0062 };
    uint32_t const ces[9] = { 0x0B39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_337)
{
    // 293A 0021;	
    // (⤺) TOP ARC ANTICLOCKWISE ARROW	[0B3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293A, 0x0021 };
    uint32_t const ces[9] = { 0x0B3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_338)
{
    // 293A 003F;	
    // (⤺) TOP ARC ANTICLOCKWISE ARROW	[0B3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293A, 0x003F };
    uint32_t const ces[9] = { 0x0B3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_339)
{
    // 293A 0061;	
    // (⤺) TOP ARC ANTICLOCKWISE ARROW	[0B3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293A, 0x0061 };
    uint32_t const ces[9] = { 0x0B3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_340)
{
    // 293A 0041;	
    // (⤺) TOP ARC ANTICLOCKWISE ARROW	[0B3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x293A, 0x0041 };
    uint32_t const ces[9] = { 0x0B3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_341)
{
    // 293A 0062;	
    // (⤺) TOP ARC ANTICLOCKWISE ARROW	[0B3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293A, 0x0062 };
    uint32_t const ces[9] = { 0x0B3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_342)
{
    // 293B 0021;	
    // (⤻) BOTTOM ARC ANTICLOCKWISE ARROW	[0B3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293B, 0x0021 };
    uint32_t const ces[9] = { 0x0B3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_343)
{
    // 293B 003F;	
    // (⤻) BOTTOM ARC ANTICLOCKWISE ARROW	[0B3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293B, 0x003F };
    uint32_t const ces[9] = { 0x0B3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_344)
{
    // 293B 0061;	
    // (⤻) BOTTOM ARC ANTICLOCKWISE ARROW	[0B3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293B, 0x0061 };
    uint32_t const ces[9] = { 0x0B3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_345)
{
    // 293B 0041;	
    // (⤻) BOTTOM ARC ANTICLOCKWISE ARROW	[0B3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x293B, 0x0041 };
    uint32_t const ces[9] = { 0x0B3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_346)
{
    // 293B 0062;	
    // (⤻) BOTTOM ARC ANTICLOCKWISE ARROW	[0B3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293B, 0x0062 };
    uint32_t const ces[9] = { 0x0B3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_347)
{
    // 293C 0021;	
    // (⤼) TOP ARC CLOCKWISE ARROW WITH MINUS	[0B3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293C, 0x0021 };
    uint32_t const ces[9] = { 0x0B3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_348)
{
    // 293C 003F;	
    // (⤼) TOP ARC CLOCKWISE ARROW WITH MINUS	[0B3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293C, 0x003F };
    uint32_t const ces[9] = { 0x0B3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_349)
{
    // 293C 0061;	
    // (⤼) TOP ARC CLOCKWISE ARROW WITH MINUS	[0B3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293C, 0x0061 };
    uint32_t const ces[9] = { 0x0B3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_350)
{
    // 293C 0041;	
    // (⤼) TOP ARC CLOCKWISE ARROW WITH MINUS	[0B3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x293C, 0x0041 };
    uint32_t const ces[9] = { 0x0B3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_351)
{
    // 293C 0062;	
    // (⤼) TOP ARC CLOCKWISE ARROW WITH MINUS	[0B3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293C, 0x0062 };
    uint32_t const ces[9] = { 0x0B3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_352)
{
    // 293D 0021;	
    // (⤽) TOP ARC ANTICLOCKWISE ARROW WITH PLUS	[0B3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293D, 0x0021 };
    uint32_t const ces[9] = { 0x0B3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_353)
{
    // 293D 003F;	
    // (⤽) TOP ARC ANTICLOCKWISE ARROW WITH PLUS	[0B3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293D, 0x003F };
    uint32_t const ces[9] = { 0x0B3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_354)
{
    // 293D 0061;	
    // (⤽) TOP ARC ANTICLOCKWISE ARROW WITH PLUS	[0B3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293D, 0x0061 };
    uint32_t const ces[9] = { 0x0B3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_355)
{
    // 293D 0041;	
    // (⤽) TOP ARC ANTICLOCKWISE ARROW WITH PLUS	[0B3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x293D, 0x0041 };
    uint32_t const ces[9] = { 0x0B3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_356)
{
    // 293D 0062;	
    // (⤽) TOP ARC ANTICLOCKWISE ARROW WITH PLUS	[0B3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293D, 0x0062 };
    uint32_t const ces[9] = { 0x0B3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_357)
{
    // 293E 0021;	
    // (⤾) LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW	[0B3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293E, 0x0021 };
    uint32_t const ces[9] = { 0x0B3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_358)
{
    // 293E 003F;	
    // (⤾) LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW	[0B3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293E, 0x003F };
    uint32_t const ces[9] = { 0x0B3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_359)
{
    // 293E 0061;	
    // (⤾) LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW	[0B3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293E, 0x0061 };
    uint32_t const ces[9] = { 0x0B3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_360)
{
    // 293E 0041;	
    // (⤾) LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW	[0B3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x293E, 0x0041 };
    uint32_t const ces[9] = { 0x0B3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_361)
{
    // 293E 0062;	
    // (⤾) LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW	[0B3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293E, 0x0062 };
    uint32_t const ces[9] = { 0x0B3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_362)
{
    // 293F 0021;	
    // (⤿) LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW	[0B3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293F, 0x0021 };
    uint32_t const ces[9] = { 0x0B3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_363)
{
    // 293F 003F;	
    // (⤿) LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW	[0B3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293F, 0x003F };
    uint32_t const ces[9] = { 0x0B3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_364)
{
    // 293F 0061;	
    // (⤿) LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW	[0B3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293F, 0x0061 };
    uint32_t const ces[9] = { 0x0B3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_365)
{
    // 293F 0041;	
    // (⤿) LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW	[0B3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x293F, 0x0041 };
    uint32_t const ces[9] = { 0x0B3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_366)
{
    // 293F 0062;	
    // (⤿) LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW	[0B3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x293F, 0x0062 };
    uint32_t const ces[9] = { 0x0B3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_367)
{
    // 2940 0021;	
    // (⥀) ANTICLOCKWISE CLOSED CIRCLE ARROW	[0B40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2940, 0x0021 };
    uint32_t const ces[9] = { 0x0B40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_368)
{
    // 2940 003F;	
    // (⥀) ANTICLOCKWISE CLOSED CIRCLE ARROW	[0B40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2940, 0x003F };
    uint32_t const ces[9] = { 0x0B40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_369)
{
    // 2940 0061;	
    // (⥀) ANTICLOCKWISE CLOSED CIRCLE ARROW	[0B40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2940, 0x0061 };
    uint32_t const ces[9] = { 0x0B40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_370)
{
    // 2940 0041;	
    // (⥀) ANTICLOCKWISE CLOSED CIRCLE ARROW	[0B40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2940, 0x0041 };
    uint32_t const ces[9] = { 0x0B40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_371)
{
    // 2940 0062;	
    // (⥀) ANTICLOCKWISE CLOSED CIRCLE ARROW	[0B40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2940, 0x0062 };
    uint32_t const ces[9] = { 0x0B40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_372)
{
    // 2941 0021;	
    // (⥁) CLOCKWISE CLOSED CIRCLE ARROW	[0B41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2941, 0x0021 };
    uint32_t const ces[9] = { 0x0B41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_373)
{
    // 2941 003F;	
    // (⥁) CLOCKWISE CLOSED CIRCLE ARROW	[0B41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2941, 0x003F };
    uint32_t const ces[9] = { 0x0B41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_374)
{
    // 2941 0061;	
    // (⥁) CLOCKWISE CLOSED CIRCLE ARROW	[0B41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2941, 0x0061 };
    uint32_t const ces[9] = { 0x0B41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_375)
{
    // 2941 0041;	
    // (⥁) CLOCKWISE CLOSED CIRCLE ARROW	[0B41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2941, 0x0041 };
    uint32_t const ces[9] = { 0x0B41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_376)
{
    // 2941 0062;	
    // (⥁) CLOCKWISE CLOSED CIRCLE ARROW	[0B41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2941, 0x0062 };
    uint32_t const ces[9] = { 0x0B41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_377)
{
    // 2942 0021;	
    // (⥂) RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW	[0B42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2942, 0x0021 };
    uint32_t const ces[9] = { 0x0B42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_378)
{
    // 2942 003F;	
    // (⥂) RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW	[0B42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2942, 0x003F };
    uint32_t const ces[9] = { 0x0B42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_379)
{
    // 2942 0061;	
    // (⥂) RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW	[0B42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2942, 0x0061 };
    uint32_t const ces[9] = { 0x0B42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_380)
{
    // 2942 0041;	
    // (⥂) RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW	[0B42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2942, 0x0041 };
    uint32_t const ces[9] = { 0x0B42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_381)
{
    // 2942 0062;	
    // (⥂) RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW	[0B42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2942, 0x0062 };
    uint32_t const ces[9] = { 0x0B42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_382)
{
    // 2943 0021;	
    // (⥃) LEFTWARDS ARROW ABOVE SHORT RIGHTWARDS ARROW	[0B43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2943, 0x0021 };
    uint32_t const ces[9] = { 0x0B43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_383)
{
    // 2943 003F;	
    // (⥃) LEFTWARDS ARROW ABOVE SHORT RIGHTWARDS ARROW	[0B43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2943, 0x003F };
    uint32_t const ces[9] = { 0x0B43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_384)
{
    // 2943 0061;	
    // (⥃) LEFTWARDS ARROW ABOVE SHORT RIGHTWARDS ARROW	[0B43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2943, 0x0061 };
    uint32_t const ces[9] = { 0x0B43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_385)
{
    // 2943 0041;	
    // (⥃) LEFTWARDS ARROW ABOVE SHORT RIGHTWARDS ARROW	[0B43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2943, 0x0041 };
    uint32_t const ces[9] = { 0x0B43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_386)
{
    // 2943 0062;	
    // (⥃) LEFTWARDS ARROW ABOVE SHORT RIGHTWARDS ARROW	[0B43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2943, 0x0062 };
    uint32_t const ces[9] = { 0x0B43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_387)
{
    // 2944 0021;	
    // (⥄) SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW	[0B44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2944, 0x0021 };
    uint32_t const ces[9] = { 0x0B44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_388)
{
    // 2944 003F;	
    // (⥄) SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW	[0B44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2944, 0x003F };
    uint32_t const ces[9] = { 0x0B44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_389)
{
    // 2944 0061;	
    // (⥄) SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW	[0B44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2944, 0x0061 };
    uint32_t const ces[9] = { 0x0B44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_390)
{
    // 2944 0041;	
    // (⥄) SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW	[0B44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2944, 0x0041 };
    uint32_t const ces[9] = { 0x0B44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_391)
{
    // 2944 0062;	
    // (⥄) SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW	[0B44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2944, 0x0062 };
    uint32_t const ces[9] = { 0x0B44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_392)
{
    // 2945 0021;	
    // (⥅) RIGHTWARDS ARROW WITH PLUS BELOW	[0B45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2945, 0x0021 };
    uint32_t const ces[9] = { 0x0B45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_393)
{
    // 2945 003F;	
    // (⥅) RIGHTWARDS ARROW WITH PLUS BELOW	[0B45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2945, 0x003F };
    uint32_t const ces[9] = { 0x0B45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_394)
{
    // 2945 0061;	
    // (⥅) RIGHTWARDS ARROW WITH PLUS BELOW	[0B45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2945, 0x0061 };
    uint32_t const ces[9] = { 0x0B45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_395)
{
    // 2945 0041;	
    // (⥅) RIGHTWARDS ARROW WITH PLUS BELOW	[0B45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2945, 0x0041 };
    uint32_t const ces[9] = { 0x0B45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_396)
{
    // 2945 0062;	
    // (⥅) RIGHTWARDS ARROW WITH PLUS BELOW	[0B45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2945, 0x0062 };
    uint32_t const ces[9] = { 0x0B45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_397)
{
    // 2946 0021;	
    // (⥆) LEFTWARDS ARROW WITH PLUS BELOW	[0B46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2946, 0x0021 };
    uint32_t const ces[9] = { 0x0B46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_398)
{
    // 2946 003F;	
    // (⥆) LEFTWARDS ARROW WITH PLUS BELOW	[0B46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2946, 0x003F };
    uint32_t const ces[9] = { 0x0B46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_399)
{
    // 2946 0061;	
    // (⥆) LEFTWARDS ARROW WITH PLUS BELOW	[0B46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2946, 0x0061 };
    uint32_t const ces[9] = { 0x0B46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_400)
{
    // 2946 0041;	
    // (⥆) LEFTWARDS ARROW WITH PLUS BELOW	[0B46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2946, 0x0041 };
    uint32_t const ces[9] = { 0x0B46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_401)
{
    // 2946 0062;	
    // (⥆) LEFTWARDS ARROW WITH PLUS BELOW	[0B46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2946, 0x0062 };
    uint32_t const ces[9] = { 0x0B46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_402)
{
    // 2947 0021;	
    // (⥇) RIGHTWARDS ARROW THROUGH X	[0B47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2947, 0x0021 };
    uint32_t const ces[9] = { 0x0B47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_403)
{
    // 2947 003F;	
    // (⥇) RIGHTWARDS ARROW THROUGH X	[0B47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2947, 0x003F };
    uint32_t const ces[9] = { 0x0B47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_404)
{
    // 2947 0061;	
    // (⥇) RIGHTWARDS ARROW THROUGH X	[0B47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2947, 0x0061 };
    uint32_t const ces[9] = { 0x0B47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_405)
{
    // 2947 0041;	
    // (⥇) RIGHTWARDS ARROW THROUGH X	[0B47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2947, 0x0041 };
    uint32_t const ces[9] = { 0x0B47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_406)
{
    // 2947 0062;	
    // (⥇) RIGHTWARDS ARROW THROUGH X	[0B47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2947, 0x0062 };
    uint32_t const ces[9] = { 0x0B47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_407)
{
    // 2948 0021;	
    // (⥈) LEFT RIGHT ARROW THROUGH SMALL CIRCLE	[0B48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2948, 0x0021 };
    uint32_t const ces[9] = { 0x0B48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_408)
{
    // 2948 003F;	
    // (⥈) LEFT RIGHT ARROW THROUGH SMALL CIRCLE	[0B48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2948, 0x003F };
    uint32_t const ces[9] = { 0x0B48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_409)
{
    // 2948 0061;	
    // (⥈) LEFT RIGHT ARROW THROUGH SMALL CIRCLE	[0B48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2948, 0x0061 };
    uint32_t const ces[9] = { 0x0B48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_410)
{
    // 2948 0041;	
    // (⥈) LEFT RIGHT ARROW THROUGH SMALL CIRCLE	[0B48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2948, 0x0041 };
    uint32_t const ces[9] = { 0x0B48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_411)
{
    // 2948 0062;	
    // (⥈) LEFT RIGHT ARROW THROUGH SMALL CIRCLE	[0B48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2948, 0x0062 };
    uint32_t const ces[9] = { 0x0B48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_412)
{
    // 2949 0021;	
    // (⥉) UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE	[0B49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2949, 0x0021 };
    uint32_t const ces[9] = { 0x0B49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_413)
{
    // 2949 003F;	
    // (⥉) UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE	[0B49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2949, 0x003F };
    uint32_t const ces[9] = { 0x0B49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_414)
{
    // 2949 0061;	
    // (⥉) UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE	[0B49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2949, 0x0061 };
    uint32_t const ces[9] = { 0x0B49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_415)
{
    // 2949 0041;	
    // (⥉) UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE	[0B49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2949, 0x0041 };
    uint32_t const ces[9] = { 0x0B49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_416)
{
    // 2949 0062;	
    // (⥉) UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE	[0B49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2949, 0x0062 };
    uint32_t const ces[9] = { 0x0B49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_417)
{
    // 294A 0021;	
    // (⥊) LEFT BARB UP RIGHT BARB DOWN HARPOON	[0B4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294A, 0x0021 };
    uint32_t const ces[9] = { 0x0B4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_418)
{
    // 294A 003F;	
    // (⥊) LEFT BARB UP RIGHT BARB DOWN HARPOON	[0B4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294A, 0x003F };
    uint32_t const ces[9] = { 0x0B4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_419)
{
    // 294A 0061;	
    // (⥊) LEFT BARB UP RIGHT BARB DOWN HARPOON	[0B4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294A, 0x0061 };
    uint32_t const ces[9] = { 0x0B4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_420)
{
    // 294A 0041;	
    // (⥊) LEFT BARB UP RIGHT BARB DOWN HARPOON	[0B4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x294A, 0x0041 };
    uint32_t const ces[9] = { 0x0B4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_421)
{
    // 294A 0062;	
    // (⥊) LEFT BARB UP RIGHT BARB DOWN HARPOON	[0B4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294A, 0x0062 };
    uint32_t const ces[9] = { 0x0B4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_422)
{
    // 294B 0021;	
    // (⥋) LEFT BARB DOWN RIGHT BARB UP HARPOON	[0B4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294B, 0x0021 };
    uint32_t const ces[9] = { 0x0B4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_423)
{
    // 294B 003F;	
    // (⥋) LEFT BARB DOWN RIGHT BARB UP HARPOON	[0B4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294B, 0x003F };
    uint32_t const ces[9] = { 0x0B4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_424)
{
    // 294B 0061;	
    // (⥋) LEFT BARB DOWN RIGHT BARB UP HARPOON	[0B4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294B, 0x0061 };
    uint32_t const ces[9] = { 0x0B4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_425)
{
    // 294B 0041;	
    // (⥋) LEFT BARB DOWN RIGHT BARB UP HARPOON	[0B4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x294B, 0x0041 };
    uint32_t const ces[9] = { 0x0B4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_426)
{
    // 294B 0062;	
    // (⥋) LEFT BARB DOWN RIGHT BARB UP HARPOON	[0B4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294B, 0x0062 };
    uint32_t const ces[9] = { 0x0B4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_427)
{
    // 294C 0021;	
    // (⥌) UP BARB RIGHT DOWN BARB LEFT HARPOON	[0B4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294C, 0x0021 };
    uint32_t const ces[9] = { 0x0B4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_428)
{
    // 294C 003F;	
    // (⥌) UP BARB RIGHT DOWN BARB LEFT HARPOON	[0B4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294C, 0x003F };
    uint32_t const ces[9] = { 0x0B4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_429)
{
    // 294C 0061;	
    // (⥌) UP BARB RIGHT DOWN BARB LEFT HARPOON	[0B4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294C, 0x0061 };
    uint32_t const ces[9] = { 0x0B4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_430)
{
    // 294C 0041;	
    // (⥌) UP BARB RIGHT DOWN BARB LEFT HARPOON	[0B4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x294C, 0x0041 };
    uint32_t const ces[9] = { 0x0B4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_431)
{
    // 294C 0062;	
    // (⥌) UP BARB RIGHT DOWN BARB LEFT HARPOON	[0B4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294C, 0x0062 };
    uint32_t const ces[9] = { 0x0B4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_432)
{
    // 294D 0021;	
    // (⥍) UP BARB LEFT DOWN BARB RIGHT HARPOON	[0B4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294D, 0x0021 };
    uint32_t const ces[9] = { 0x0B4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_433)
{
    // 294D 003F;	
    // (⥍) UP BARB LEFT DOWN BARB RIGHT HARPOON	[0B4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294D, 0x003F };
    uint32_t const ces[9] = { 0x0B4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_434)
{
    // 294D 0061;	
    // (⥍) UP BARB LEFT DOWN BARB RIGHT HARPOON	[0B4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294D, 0x0061 };
    uint32_t const ces[9] = { 0x0B4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_435)
{
    // 294D 0041;	
    // (⥍) UP BARB LEFT DOWN BARB RIGHT HARPOON	[0B4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x294D, 0x0041 };
    uint32_t const ces[9] = { 0x0B4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_436)
{
    // 294D 0062;	
    // (⥍) UP BARB LEFT DOWN BARB RIGHT HARPOON	[0B4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294D, 0x0062 };
    uint32_t const ces[9] = { 0x0B4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_437)
{
    // 294E 0021;	
    // (⥎) LEFT BARB UP RIGHT BARB UP HARPOON	[0B4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294E, 0x0021 };
    uint32_t const ces[9] = { 0x0B4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_438)
{
    // 294E 003F;	
    // (⥎) LEFT BARB UP RIGHT BARB UP HARPOON	[0B4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294E, 0x003F };
    uint32_t const ces[9] = { 0x0B4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_439)
{
    // 294E 0061;	
    // (⥎) LEFT BARB UP RIGHT BARB UP HARPOON	[0B4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294E, 0x0061 };
    uint32_t const ces[9] = { 0x0B4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_440)
{
    // 294E 0041;	
    // (⥎) LEFT BARB UP RIGHT BARB UP HARPOON	[0B4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x294E, 0x0041 };
    uint32_t const ces[9] = { 0x0B4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_441)
{
    // 294E 0062;	
    // (⥎) LEFT BARB UP RIGHT BARB UP HARPOON	[0B4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294E, 0x0062 };
    uint32_t const ces[9] = { 0x0B4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_442)
{
    // 294F 0021;	
    // (⥏) UP BARB RIGHT DOWN BARB RIGHT HARPOON	[0B4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294F, 0x0021 };
    uint32_t const ces[9] = { 0x0B4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_443)
{
    // 294F 003F;	
    // (⥏) UP BARB RIGHT DOWN BARB RIGHT HARPOON	[0B4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294F, 0x003F };
    uint32_t const ces[9] = { 0x0B4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_444)
{
    // 294F 0061;	
    // (⥏) UP BARB RIGHT DOWN BARB RIGHT HARPOON	[0B4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294F, 0x0061 };
    uint32_t const ces[9] = { 0x0B4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_445)
{
    // 294F 0041;	
    // (⥏) UP BARB RIGHT DOWN BARB RIGHT HARPOON	[0B4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x294F, 0x0041 };
    uint32_t const ces[9] = { 0x0B4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_446)
{
    // 294F 0062;	
    // (⥏) UP BARB RIGHT DOWN BARB RIGHT HARPOON	[0B4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x294F, 0x0062 };
    uint32_t const ces[9] = { 0x0B4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_447)
{
    // 2950 0021;	
    // (⥐) LEFT BARB DOWN RIGHT BARB DOWN HARPOON	[0B50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2950, 0x0021 };
    uint32_t const ces[9] = { 0x0B50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_448)
{
    // 2950 003F;	
    // (⥐) LEFT BARB DOWN RIGHT BARB DOWN HARPOON	[0B50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2950, 0x003F };
    uint32_t const ces[9] = { 0x0B50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_449)
{
    // 2950 0061;	
    // (⥐) LEFT BARB DOWN RIGHT BARB DOWN HARPOON	[0B50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2950, 0x0061 };
    uint32_t const ces[9] = { 0x0B50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_450)
{
    // 2950 0041;	
    // (⥐) LEFT BARB DOWN RIGHT BARB DOWN HARPOON	[0B50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2950, 0x0041 };
    uint32_t const ces[9] = { 0x0B50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_451)
{
    // 2950 0062;	
    // (⥐) LEFT BARB DOWN RIGHT BARB DOWN HARPOON	[0B50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2950, 0x0062 };
    uint32_t const ces[9] = { 0x0B50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_452)
{
    // 2951 0021;	
    // (⥑) UP BARB LEFT DOWN BARB LEFT HARPOON	[0B51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2951, 0x0021 };
    uint32_t const ces[9] = { 0x0B51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_453)
{
    // 2951 003F;	
    // (⥑) UP BARB LEFT DOWN BARB LEFT HARPOON	[0B51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2951, 0x003F };
    uint32_t const ces[9] = { 0x0B51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_454)
{
    // 2951 0061;	
    // (⥑) UP BARB LEFT DOWN BARB LEFT HARPOON	[0B51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2951, 0x0061 };
    uint32_t const ces[9] = { 0x0B51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_455)
{
    // 2951 0041;	
    // (⥑) UP BARB LEFT DOWN BARB LEFT HARPOON	[0B51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2951, 0x0041 };
    uint32_t const ces[9] = { 0x0B51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_456)
{
    // 2951 0062;	
    // (⥑) UP BARB LEFT DOWN BARB LEFT HARPOON	[0B51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2951, 0x0062 };
    uint32_t const ces[9] = { 0x0B51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_457)
{
    // 2952 0021;	
    // (⥒) LEFTWARDS HARPOON WITH BARB UP TO BAR	[0B52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2952, 0x0021 };
    uint32_t const ces[9] = { 0x0B52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_458)
{
    // 2952 003F;	
    // (⥒) LEFTWARDS HARPOON WITH BARB UP TO BAR	[0B52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2952, 0x003F };
    uint32_t const ces[9] = { 0x0B52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_459)
{
    // 2952 0061;	
    // (⥒) LEFTWARDS HARPOON WITH BARB UP TO BAR	[0B52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2952, 0x0061 };
    uint32_t const ces[9] = { 0x0B52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_460)
{
    // 2952 0041;	
    // (⥒) LEFTWARDS HARPOON WITH BARB UP TO BAR	[0B52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2952, 0x0041 };
    uint32_t const ces[9] = { 0x0B52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_461)
{
    // 2952 0062;	
    // (⥒) LEFTWARDS HARPOON WITH BARB UP TO BAR	[0B52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2952, 0x0062 };
    uint32_t const ces[9] = { 0x0B52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_462)
{
    // 2953 0021;	
    // (⥓) RIGHTWARDS HARPOON WITH BARB UP TO BAR	[0B53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2953, 0x0021 };
    uint32_t const ces[9] = { 0x0B53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_463)
{
    // 2953 003F;	
    // (⥓) RIGHTWARDS HARPOON WITH BARB UP TO BAR	[0B53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2953, 0x003F };
    uint32_t const ces[9] = { 0x0B53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_464)
{
    // 2953 0061;	
    // (⥓) RIGHTWARDS HARPOON WITH BARB UP TO BAR	[0B53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2953, 0x0061 };
    uint32_t const ces[9] = { 0x0B53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_465)
{
    // 2953 0041;	
    // (⥓) RIGHTWARDS HARPOON WITH BARB UP TO BAR	[0B53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2953, 0x0041 };
    uint32_t const ces[9] = { 0x0B53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_466)
{
    // 2953 0062;	
    // (⥓) RIGHTWARDS HARPOON WITH BARB UP TO BAR	[0B53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2953, 0x0062 };
    uint32_t const ces[9] = { 0x0B53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_467)
{
    // 2954 0021;	
    // (⥔) UPWARDS HARPOON WITH BARB RIGHT TO BAR	[0B54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2954, 0x0021 };
    uint32_t const ces[9] = { 0x0B54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_468)
{
    // 2954 003F;	
    // (⥔) UPWARDS HARPOON WITH BARB RIGHT TO BAR	[0B54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2954, 0x003F };
    uint32_t const ces[9] = { 0x0B54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_469)
{
    // 2954 0061;	
    // (⥔) UPWARDS HARPOON WITH BARB RIGHT TO BAR	[0B54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2954, 0x0061 };
    uint32_t const ces[9] = { 0x0B54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_470)
{
    // 2954 0041;	
    // (⥔) UPWARDS HARPOON WITH BARB RIGHT TO BAR	[0B54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2954, 0x0041 };
    uint32_t const ces[9] = { 0x0B54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_471)
{
    // 2954 0062;	
    // (⥔) UPWARDS HARPOON WITH BARB RIGHT TO BAR	[0B54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2954, 0x0062 };
    uint32_t const ces[9] = { 0x0B54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_472)
{
    // 2955 0021;	
    // (⥕) DOWNWARDS HARPOON WITH BARB RIGHT TO BAR	[0B55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2955, 0x0021 };
    uint32_t const ces[9] = { 0x0B55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_473)
{
    // 2955 003F;	
    // (⥕) DOWNWARDS HARPOON WITH BARB RIGHT TO BAR	[0B55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2955, 0x003F };
    uint32_t const ces[9] = { 0x0B55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_474)
{
    // 2955 0061;	
    // (⥕) DOWNWARDS HARPOON WITH BARB RIGHT TO BAR	[0B55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2955, 0x0061 };
    uint32_t const ces[9] = { 0x0B55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_475)
{
    // 2955 0041;	
    // (⥕) DOWNWARDS HARPOON WITH BARB RIGHT TO BAR	[0B55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2955, 0x0041 };
    uint32_t const ces[9] = { 0x0B55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_476)
{
    // 2955 0062;	
    // (⥕) DOWNWARDS HARPOON WITH BARB RIGHT TO BAR	[0B55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2955, 0x0062 };
    uint32_t const ces[9] = { 0x0B55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_477)
{
    // 2956 0021;	
    // (⥖) LEFTWARDS HARPOON WITH BARB DOWN TO BAR	[0B56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2956, 0x0021 };
    uint32_t const ces[9] = { 0x0B56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_478)
{
    // 2956 003F;	
    // (⥖) LEFTWARDS HARPOON WITH BARB DOWN TO BAR	[0B56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2956, 0x003F };
    uint32_t const ces[9] = { 0x0B56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_479)
{
    // 2956 0061;	
    // (⥖) LEFTWARDS HARPOON WITH BARB DOWN TO BAR	[0B56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2956, 0x0061 };
    uint32_t const ces[9] = { 0x0B56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_480)
{
    // 2956 0041;	
    // (⥖) LEFTWARDS HARPOON WITH BARB DOWN TO BAR	[0B56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2956, 0x0041 };
    uint32_t const ces[9] = { 0x0B56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_481)
{
    // 2956 0062;	
    // (⥖) LEFTWARDS HARPOON WITH BARB DOWN TO BAR	[0B56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2956, 0x0062 };
    uint32_t const ces[9] = { 0x0B56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_482)
{
    // 2957 0021;	
    // (⥗) RIGHTWARDS HARPOON WITH BARB DOWN TO BAR	[0B57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2957, 0x0021 };
    uint32_t const ces[9] = { 0x0B57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_483)
{
    // 2957 003F;	
    // (⥗) RIGHTWARDS HARPOON WITH BARB DOWN TO BAR	[0B57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2957, 0x003F };
    uint32_t const ces[9] = { 0x0B57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_484)
{
    // 2957 0061;	
    // (⥗) RIGHTWARDS HARPOON WITH BARB DOWN TO BAR	[0B57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2957, 0x0061 };
    uint32_t const ces[9] = { 0x0B57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_485)
{
    // 2957 0041;	
    // (⥗) RIGHTWARDS HARPOON WITH BARB DOWN TO BAR	[0B57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2957, 0x0041 };
    uint32_t const ces[9] = { 0x0B57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_486)
{
    // 2957 0062;	
    // (⥗) RIGHTWARDS HARPOON WITH BARB DOWN TO BAR	[0B57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2957, 0x0062 };
    uint32_t const ces[9] = { 0x0B57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_487)
{
    // 2958 0021;	
    // (⥘) UPWARDS HARPOON WITH BARB LEFT TO BAR	[0B58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2958, 0x0021 };
    uint32_t const ces[9] = { 0x0B58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_488)
{
    // 2958 003F;	
    // (⥘) UPWARDS HARPOON WITH BARB LEFT TO BAR	[0B58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2958, 0x003F };
    uint32_t const ces[9] = { 0x0B58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_489)
{
    // 2958 0061;	
    // (⥘) UPWARDS HARPOON WITH BARB LEFT TO BAR	[0B58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2958, 0x0061 };
    uint32_t const ces[9] = { 0x0B58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_490)
{
    // 2958 0041;	
    // (⥘) UPWARDS HARPOON WITH BARB LEFT TO BAR	[0B58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2958, 0x0041 };
    uint32_t const ces[9] = { 0x0B58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_491)
{
    // 2958 0062;	
    // (⥘) UPWARDS HARPOON WITH BARB LEFT TO BAR	[0B58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2958, 0x0062 };
    uint32_t const ces[9] = { 0x0B58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_492)
{
    // 2959 0021;	
    // (⥙) DOWNWARDS HARPOON WITH BARB LEFT TO BAR	[0B59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2959, 0x0021 };
    uint32_t const ces[9] = { 0x0B59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_493)
{
    // 2959 003F;	
    // (⥙) DOWNWARDS HARPOON WITH BARB LEFT TO BAR	[0B59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2959, 0x003F };
    uint32_t const ces[9] = { 0x0B59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_494)
{
    // 2959 0061;	
    // (⥙) DOWNWARDS HARPOON WITH BARB LEFT TO BAR	[0B59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2959, 0x0061 };
    uint32_t const ces[9] = { 0x0B59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_495)
{
    // 2959 0041;	
    // (⥙) DOWNWARDS HARPOON WITH BARB LEFT TO BAR	[0B59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2959, 0x0041 };
    uint32_t const ces[9] = { 0x0B59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_496)
{
    // 2959 0062;	
    // (⥙) DOWNWARDS HARPOON WITH BARB LEFT TO BAR	[0B59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2959, 0x0062 };
    uint32_t const ces[9] = { 0x0B59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_497)
{
    // 295A 0021;	
    // (⥚) LEFTWARDS HARPOON WITH BARB UP FROM BAR	[0B5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295A, 0x0021 };
    uint32_t const ces[9] = { 0x0B5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_498)
{
    // 295A 003F;	
    // (⥚) LEFTWARDS HARPOON WITH BARB UP FROM BAR	[0B5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295A, 0x003F };
    uint32_t const ces[9] = { 0x0B5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_035_499)
{
    // 295A 0061;	
    // (⥚) LEFTWARDS HARPOON WITH BARB UP FROM BAR	[0B5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x295A, 0x0061 };
    uint32_t const ces[9] = { 0x0B5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

