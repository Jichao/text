// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_057_000)
{
    // 2315  ; [*0714.0020.0002] 
    // TELEPHONE RECORDER

    uint32_t const cps[1] = { 0x2315 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x714), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_001)
{
    // 2316  ; [*0715.0020.0002] 
    // POSITION INDICATOR

    uint32_t const cps[1] = { 0x2316 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x715), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_002)
{
    // 2317  ; [*0716.0020.0002] 
    // VIEWDATA SQUARE

    uint32_t const cps[1] = { 0x2317 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x716), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_003)
{
    // 2318  ; [*0717.0020.0002] 
    // PLACE OF INTEREST SIGN

    uint32_t const cps[1] = { 0x2318 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x717), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_004)
{
    // 2319  ; [*0718.0020.0002] 
    // TURNED NOT SIGN

    uint32_t const cps[1] = { 0x2319 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x718), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_005)
{
    // 231A  ; [*0719.0020.0002] 
    // WATCH

    uint32_t const cps[1] = { 0x231a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x719), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_006)
{
    // 231B  ; [*071A.0020.0002] 
    // HOURGLASS

    uint32_t const cps[1] = { 0x231b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x71a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_007)
{
    // 231C  ; [*071B.0020.0002] 
    // TOP LEFT CORNER

    uint32_t const cps[1] = { 0x231c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x71b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_008)
{
    // 231D  ; [*071C.0020.0002] 
    // TOP RIGHT CORNER

    uint32_t const cps[1] = { 0x231d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x71c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_009)
{
    // 231E  ; [*071D.0020.0002] 
    // BOTTOM LEFT CORNER

    uint32_t const cps[1] = { 0x231e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x71d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_010)
{
    // 231F  ; [*071E.0020.0002] 
    // BOTTOM RIGHT CORNER

    uint32_t const cps[1] = { 0x231f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x71e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_011)
{
    // 2320  ; [*071F.0020.0002] 
    // TOP HALF INTEGRAL

    uint32_t const cps[1] = { 0x2320 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x71f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_012)
{
    // 2321  ; [*0720.0020.0002] 
    // BOTTOM HALF INTEGRAL

    uint32_t const cps[1] = { 0x2321 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x720), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_013)
{
    // 2322  ; [*0721.0020.0002] 
    // FROWN

    uint32_t const cps[1] = { 0x2322 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x721), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_014)
{
    // 2323  ; [*0722.0020.0002] 
    // SMILE

    uint32_t const cps[1] = { 0x2323 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x722), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_015)
{
    // 2324  ; [*0723.0020.0002] 
    // UP ARROWHEAD BETWEEN TWO HORIZONTAL BARS

    uint32_t const cps[1] = { 0x2324 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x723), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_016)
{
    // 2325  ; [*0724.0020.0002] 
    // OPTION KEY

    uint32_t const cps[1] = { 0x2325 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x724), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_017)
{
    // 2326  ; [*0725.0020.0002] 
    // ERASE TO THE RIGHT

    uint32_t const cps[1] = { 0x2326 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x725), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_018)
{
    // 2327  ; [*0726.0020.0002] 
    // X IN A RECTANGLE BOX

    uint32_t const cps[1] = { 0x2327 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x726), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_019)
{
    // 2328  ; [*0727.0020.0002] 
    // KEYBOARD

    uint32_t const cps[1] = { 0x2328 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x727), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_020)
{
    // 2329  ; [*0370.0020.0002] 
    // LEFT-POINTING ANGLE BRACKET

    uint32_t const cps[1] = { 0x2329 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x370), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_021)
{
    // 232A  ; [*0371.0020.0002] 
    // RIGHT-POINTING ANGLE BRACKET

    uint32_t const cps[1] = { 0x232a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x371), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_022)
{
    // 232B  ; [*0728.0020.0002] 
    // ERASE TO THE LEFT

    uint32_t const cps[1] = { 0x232b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x728), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_023)
{
    // 232C  ; [*0729.0020.0002] 
    // BENZENE RING

    uint32_t const cps[1] = { 0x232c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x729), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_024)
{
    // 232D  ; [*072A.0020.0002] 
    // CYLINDRICITY

    uint32_t const cps[1] = { 0x232d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x72a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_025)
{
    // 232E  ; [*072B.0020.0002] 
    // ALL AROUND-PROFILE

    uint32_t const cps[1] = { 0x232e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x72b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_026)
{
    // 232F  ; [*072C.0020.0002] 
    // SYMMETRY

    uint32_t const cps[1] = { 0x232f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x72c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_027)
{
    // 2330  ; [*072D.0020.0002] 
    // TOTAL RUNOUT

    uint32_t const cps[1] = { 0x2330 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x72d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_028)
{
    // 2331  ; [*072E.0020.0002] 
    // DIMENSION ORIGIN

    uint32_t const cps[1] = { 0x2331 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x72e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_029)
{
    // 2332  ; [*072F.0020.0002] 
    // CONICAL TAPER

    uint32_t const cps[1] = { 0x2332 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x72f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_030)
{
    // 2333  ; [*0730.0020.0002] 
    // SLOPE

    uint32_t const cps[1] = { 0x2333 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x730), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_031)
{
    // 2334  ; [*0731.0020.0002] 
    // COUNTERBORE

    uint32_t const cps[1] = { 0x2334 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x731), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_032)
{
    // 2335  ; [*0732.0020.0002] 
    // COUNTERSINK

    uint32_t const cps[1] = { 0x2335 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x732), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_033)
{
    // 2336  ; [*0733.0020.0002] 
    // APL FUNCTIONAL SYMBOL I-BEAM

    uint32_t const cps[1] = { 0x2336 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x733), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_034)
{
    // 2337  ; [*0734.0020.0002] 
    // APL FUNCTIONAL SYMBOL SQUISH QUAD

    uint32_t const cps[1] = { 0x2337 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x734), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_035)
{
    // 2338  ; [*0735.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD EQUAL

    uint32_t const cps[1] = { 0x2338 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x735), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_036)
{
    // 2339  ; [*0736.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD DIVIDE

    uint32_t const cps[1] = { 0x2339 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x736), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_037)
{
    // 233A  ; [*0737.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD DIAMOND

    uint32_t const cps[1] = { 0x233a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x737), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_038)
{
    // 233B  ; [*0738.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD JOT

    uint32_t const cps[1] = { 0x233b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x738), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_039)
{
    // 233C  ; [*0739.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD CIRCLE

    uint32_t const cps[1] = { 0x233c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x739), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_040)
{
    // 233D  ; [*073A.0020.0002] 
    // APL FUNCTIONAL SYMBOL CIRCLE STILE

    uint32_t const cps[1] = { 0x233d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x73a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_041)
{
    // 233E  ; [*073B.0020.0002] 
    // APL FUNCTIONAL SYMBOL CIRCLE JOT

    uint32_t const cps[1] = { 0x233e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x73b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_042)
{
    // 233F  ; [*073C.0020.0002] 
    // APL FUNCTIONAL SYMBOL SLASH BAR

    uint32_t const cps[1] = { 0x233f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x73c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_043)
{
    // 2340  ; [*073D.0020.0002] 
    // APL FUNCTIONAL SYMBOL BACKSLASH BAR

    uint32_t const cps[1] = { 0x2340 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x73d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_044)
{
    // 2341  ; [*073E.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD SLASH

    uint32_t const cps[1] = { 0x2341 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x73e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_045)
{
    // 2342  ; [*073F.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD BACKSLASH

    uint32_t const cps[1] = { 0x2342 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x73f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_046)
{
    // 2343  ; [*0740.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD LESS-THAN

    uint32_t const cps[1] = { 0x2343 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x740), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_047)
{
    // 2344  ; [*0741.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD GREATER-THAN

    uint32_t const cps[1] = { 0x2344 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x741), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_048)
{
    // 2345  ; [*0742.0020.0002] 
    // APL FUNCTIONAL SYMBOL LEFTWARDS VANE

    uint32_t const cps[1] = { 0x2345 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x742), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_049)
{
    // 2346  ; [*0743.0020.0002] 
    // APL FUNCTIONAL SYMBOL RIGHTWARDS VANE

    uint32_t const cps[1] = { 0x2346 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x743), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_050)
{
    // 2347  ; [*0744.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD LEFTWARDS ARROW

    uint32_t const cps[1] = { 0x2347 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x744), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_051)
{
    // 2348  ; [*0745.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD RIGHTWARDS ARROW

    uint32_t const cps[1] = { 0x2348 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x745), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_052)
{
    // 2349  ; [*0746.0020.0002] 
    // APL FUNCTIONAL SYMBOL CIRCLE BACKSLASH

    uint32_t const cps[1] = { 0x2349 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x746), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_053)
{
    // 234A  ; [*0747.0020.0002] 
    // APL FUNCTIONAL SYMBOL DOWN TACK UNDERBAR

    uint32_t const cps[1] = { 0x234a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x747), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_054)
{
    // 234B  ; [*0748.0020.0002] 
    // APL FUNCTIONAL SYMBOL DELTA STILE

    uint32_t const cps[1] = { 0x234b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x748), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_055)
{
    // 234C  ; [*0749.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD DOWN CARET

    uint32_t const cps[1] = { 0x234c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x749), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_056)
{
    // 234D  ; [*074A.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD DELTA

    uint32_t const cps[1] = { 0x234d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x74a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_057)
{
    // 234E  ; [*074B.0020.0002] 
    // APL FUNCTIONAL SYMBOL DOWN TACK JOT

    uint32_t const cps[1] = { 0x234e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x74b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_058)
{
    // 234F  ; [*074C.0020.0002] 
    // APL FUNCTIONAL SYMBOL UPWARDS VANE

    uint32_t const cps[1] = { 0x234f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x74c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_059)
{
    // 2350  ; [*074D.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD UPWARDS ARROW

    uint32_t const cps[1] = { 0x2350 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x74d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_060)
{
    // 2351  ; [*074E.0020.0002] 
    // APL FUNCTIONAL SYMBOL UP TACK OVERBAR

    uint32_t const cps[1] = { 0x2351 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x74e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_061)
{
    // 2352  ; [*074F.0020.0002] 
    // APL FUNCTIONAL SYMBOL DEL STILE

    uint32_t const cps[1] = { 0x2352 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x74f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_062)
{
    // 2353  ; [*0750.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD UP CARET

    uint32_t const cps[1] = { 0x2353 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x750), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_063)
{
    // 2354  ; [*0751.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD DEL

    uint32_t const cps[1] = { 0x2354 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x751), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_064)
{
    // 2355  ; [*0752.0020.0002] 
    // APL FUNCTIONAL SYMBOL UP TACK JOT

    uint32_t const cps[1] = { 0x2355 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x752), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_065)
{
    // 2356  ; [*0753.0020.0002] 
    // APL FUNCTIONAL SYMBOL DOWNWARDS VANE

    uint32_t const cps[1] = { 0x2356 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x753), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_066)
{
    // 2357  ; [*0754.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD DOWNWARDS ARROW

    uint32_t const cps[1] = { 0x2357 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x754), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_067)
{
    // 2358  ; [*0755.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUOTE UNDERBAR

    uint32_t const cps[1] = { 0x2358 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x755), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_068)
{
    // 2359  ; [*0756.0020.0002] 
    // APL FUNCTIONAL SYMBOL DELTA UNDERBAR

    uint32_t const cps[1] = { 0x2359 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x756), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_069)
{
    // 235A  ; [*0757.0020.0002] 
    // APL FUNCTIONAL SYMBOL DIAMOND UNDERBAR

    uint32_t const cps[1] = { 0x235a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x757), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_070)
{
    // 235B  ; [*0758.0020.0002] 
    // APL FUNCTIONAL SYMBOL JOT UNDERBAR

    uint32_t const cps[1] = { 0x235b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x758), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_071)
{
    // 235C  ; [*0759.0020.0002] 
    // APL FUNCTIONAL SYMBOL CIRCLE UNDERBAR

    uint32_t const cps[1] = { 0x235c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x759), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_072)
{
    // 235D  ; [*075A.0020.0002] 
    // APL FUNCTIONAL SYMBOL UP SHOE JOT

    uint32_t const cps[1] = { 0x235d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x75a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_073)
{
    // 235E  ; [*075B.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUOTE QUAD

    uint32_t const cps[1] = { 0x235e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x75b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_074)
{
    // 235F  ; [*075C.0020.0002] 
    // APL FUNCTIONAL SYMBOL CIRCLE STAR

    uint32_t const cps[1] = { 0x235f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x75c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_075)
{
    // 2360  ; [*075D.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD COLON

    uint32_t const cps[1] = { 0x2360 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x75d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_076)
{
    // 2361  ; [*075E.0020.0002] 
    // APL FUNCTIONAL SYMBOL UP TACK DIAERESIS

    uint32_t const cps[1] = { 0x2361 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x75e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_077)
{
    // 2362  ; [*075F.0020.0002] 
    // APL FUNCTIONAL SYMBOL DEL DIAERESIS

    uint32_t const cps[1] = { 0x2362 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x75f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_078)
{
    // 2363  ; [*0760.0020.0002] 
    // APL FUNCTIONAL SYMBOL STAR DIAERESIS

    uint32_t const cps[1] = { 0x2363 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x760), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_079)
{
    // 2364  ; [*0761.0020.0002] 
    // APL FUNCTIONAL SYMBOL JOT DIAERESIS

    uint32_t const cps[1] = { 0x2364 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x761), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_080)
{
    // 2365  ; [*0762.0020.0002] 
    // APL FUNCTIONAL SYMBOL CIRCLE DIAERESIS

    uint32_t const cps[1] = { 0x2365 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x762), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_081)
{
    // 2366  ; [*0763.0020.0002] 
    // APL FUNCTIONAL SYMBOL DOWN SHOE STILE

    uint32_t const cps[1] = { 0x2366 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x763), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_082)
{
    // 2367  ; [*0764.0020.0002] 
    // APL FUNCTIONAL SYMBOL LEFT SHOE STILE

    uint32_t const cps[1] = { 0x2367 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x764), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_083)
{
    // 2368  ; [*0765.0020.0002] 
    // APL FUNCTIONAL SYMBOL TILDE DIAERESIS

    uint32_t const cps[1] = { 0x2368 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x765), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_084)
{
    // 2369  ; [*0766.0020.0002] 
    // APL FUNCTIONAL SYMBOL GREATER-THAN DIAERESIS

    uint32_t const cps[1] = { 0x2369 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x766), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_085)
{
    // 236A  ; [*0767.0020.0002] 
    // APL FUNCTIONAL SYMBOL COMMA BAR

    uint32_t const cps[1] = { 0x236a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x767), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_086)
{
    // 236B  ; [*0768.0020.0002] 
    // APL FUNCTIONAL SYMBOL DEL TILDE

    uint32_t const cps[1] = { 0x236b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x768), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_087)
{
    // 236C  ; [*0769.0020.0002] 
    // APL FUNCTIONAL SYMBOL ZILDE

    uint32_t const cps[1] = { 0x236c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x769), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_088)
{
    // 236D  ; [*076A.0020.0002] 
    // APL FUNCTIONAL SYMBOL STILE TILDE

    uint32_t const cps[1] = { 0x236d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x76a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_089)
{
    // 236E  ; [*076B.0020.0002] 
    // APL FUNCTIONAL SYMBOL SEMICOLON UNDERBAR

    uint32_t const cps[1] = { 0x236e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x76b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_090)
{
    // 236F  ; [*076C.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD NOT EQUAL

    uint32_t const cps[1] = { 0x236f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x76c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_091)
{
    // 2370  ; [*076D.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD QUESTION

    uint32_t const cps[1] = { 0x2370 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x76d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_092)
{
    // 2371  ; [*076E.0020.0002] 
    // APL FUNCTIONAL SYMBOL DOWN CARET TILDE

    uint32_t const cps[1] = { 0x2371 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x76e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_093)
{
    // 2372  ; [*076F.0020.0002] 
    // APL FUNCTIONAL SYMBOL UP CARET TILDE

    uint32_t const cps[1] = { 0x2372 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x76f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_094)
{
    // 2373  ; [*0770.0020.0002] 
    // APL FUNCTIONAL SYMBOL IOTA

    uint32_t const cps[1] = { 0x2373 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x770), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_095)
{
    // 2374  ; [*0771.0020.0002] 
    // APL FUNCTIONAL SYMBOL RHO

    uint32_t const cps[1] = { 0x2374 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x771), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_096)
{
    // 2375  ; [*0772.0020.0002] 
    // APL FUNCTIONAL SYMBOL OMEGA

    uint32_t const cps[1] = { 0x2375 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x772), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_097)
{
    // 2376  ; [*0773.0020.0002] 
    // APL FUNCTIONAL SYMBOL ALPHA UNDERBAR

    uint32_t const cps[1] = { 0x2376 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x773), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_098)
{
    // 2377  ; [*0774.0020.0002] 
    // APL FUNCTIONAL SYMBOL EPSILON UNDERBAR

    uint32_t const cps[1] = { 0x2377 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x774), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_099)
{
    // 2378  ; [*0775.0020.0002] 
    // APL FUNCTIONAL SYMBOL IOTA UNDERBAR

    uint32_t const cps[1] = { 0x2378 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x775), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_100)
{
    // 2379  ; [*0776.0020.0002] 
    // APL FUNCTIONAL SYMBOL OMEGA UNDERBAR

    uint32_t const cps[1] = { 0x2379 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x776), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_101)
{
    // 237A  ; [*0777.0020.0002] 
    // APL FUNCTIONAL SYMBOL ALPHA

    uint32_t const cps[1] = { 0x237a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x777), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_102)
{
    // 237B  ; [*0778.0020.0002] 
    // NOT CHECK MARK

    uint32_t const cps[1] = { 0x237b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x778), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_103)
{
    // 237C  ; [*0779.0020.0002] 
    // RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW

    uint32_t const cps[1] = { 0x237c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x779), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_104)
{
    // 237D  ; [*077A.0020.0002] 
    // SHOULDERED OPEN BOX

    uint32_t const cps[1] = { 0x237d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x77a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_105)
{
    // 237E  ; [*077B.0020.0002] 
    // BELL SYMBOL

    uint32_t const cps[1] = { 0x237e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x77b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_106)
{
    // 237F  ; [*077C.0020.0002] 
    // VERTICAL LINE WITH MIDDLE DOT

    uint32_t const cps[1] = { 0x237f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x77c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_107)
{
    // 2380  ; [*077D.0020.0002] 
    // INSERTION SYMBOL

    uint32_t const cps[1] = { 0x2380 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x77d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_108)
{
    // 2381  ; [*077E.0020.0002] 
    // CONTINUOUS UNDERLINE SYMBOL

    uint32_t const cps[1] = { 0x2381 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x77e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_109)
{
    // 2382  ; [*077F.0020.0002] 
    // DISCONTINUOUS UNDERLINE SYMBOL

    uint32_t const cps[1] = { 0x2382 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x77f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_110)
{
    // 2383  ; [*0780.0020.0002] 
    // EMPHASIS SYMBOL

    uint32_t const cps[1] = { 0x2383 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x780), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_111)
{
    // 2384  ; [*0781.0020.0002] 
    // COMPOSITION SYMBOL

    uint32_t const cps[1] = { 0x2384 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x781), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_112)
{
    // 2385  ; [*0782.0020.0002] 
    // WHITE SQUARE WITH CENTRE VERTICAL LINE

    uint32_t const cps[1] = { 0x2385 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x782), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_113)
{
    // 2386  ; [*0783.0020.0002] 
    // ENTER SYMBOL

    uint32_t const cps[1] = { 0x2386 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x783), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_114)
{
    // 2387  ; [*0784.0020.0002] 
    // ALTERNATIVE KEY SYMBOL

    uint32_t const cps[1] = { 0x2387 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x784), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_115)
{
    // 2388  ; [*0785.0020.0002] 
    // HELM SYMBOL

    uint32_t const cps[1] = { 0x2388 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x785), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_116)
{
    // 2389  ; [*0786.0020.0002] 
    // CIRCLED HORIZONTAL BAR WITH NOTCH

    uint32_t const cps[1] = { 0x2389 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x786), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_117)
{
    // 238A  ; [*0787.0020.0002] 
    // CIRCLED TRIANGLE DOWN

    uint32_t const cps[1] = { 0x238a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x787), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_118)
{
    // 238B  ; [*0788.0020.0002] 
    // BROKEN CIRCLE WITH NORTHWEST ARROW

    uint32_t const cps[1] = { 0x238b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x788), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_119)
{
    // 238C  ; [*0789.0020.0002] 
    // UNDO SYMBOL

    uint32_t const cps[1] = { 0x238c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x789), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_120)
{
    // 238D  ; [*078A.0020.0002] 
    // MONOSTABLE SYMBOL

    uint32_t const cps[1] = { 0x238d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x78a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_121)
{
    // 238E  ; [*078B.0020.0002] 
    // HYSTERESIS SYMBOL

    uint32_t const cps[1] = { 0x238e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x78b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_122)
{
    // 238F  ; [*078C.0020.0002] 
    // OPEN-CIRCUIT-OUTPUT H-TYPE SYMBOL

    uint32_t const cps[1] = { 0x238f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x78c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_123)
{
    // 2390  ; [*078D.0020.0002] 
    // OPEN-CIRCUIT-OUTPUT L-TYPE SYMBOL

    uint32_t const cps[1] = { 0x2390 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x78d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_124)
{
    // 2391  ; [*078E.0020.0002] 
    // PASSIVE-PULL-DOWN-OUTPUT SYMBOL

    uint32_t const cps[1] = { 0x2391 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x78e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_125)
{
    // 2392  ; [*078F.0020.0002] 
    // PASSIVE-PULL-UP-OUTPUT SYMBOL

    uint32_t const cps[1] = { 0x2392 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x78f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_126)
{
    // 2393  ; [*0790.0020.0002] 
    // DIRECT CURRENT SYMBOL FORM TWO

    uint32_t const cps[1] = { 0x2393 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x790), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_127)
{
    // 2394  ; [*0791.0020.0002] 
    // SOFTWARE-FUNCTION SYMBOL

    uint32_t const cps[1] = { 0x2394 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x791), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_128)
{
    // 2395  ; [*0792.0020.0002] 
    // APL FUNCTIONAL SYMBOL QUAD

    uint32_t const cps[1] = { 0x2395 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x792), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_129)
{
    // 2396  ; [*0793.0020.0002] 
    // DECIMAL SEPARATOR KEY SYMBOL

    uint32_t const cps[1] = { 0x2396 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x793), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_130)
{
    // 2397  ; [*0794.0020.0002] 
    // PREVIOUS PAGE

    uint32_t const cps[1] = { 0x2397 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x794), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_131)
{
    // 2398  ; [*0795.0020.0002] 
    // NEXT PAGE

    uint32_t const cps[1] = { 0x2398 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x795), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_132)
{
    // 2399  ; [*0796.0020.0002] 
    // PRINT SCREEN SYMBOL

    uint32_t const cps[1] = { 0x2399 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x796), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_133)
{
    // 239A  ; [*0797.0020.0002] 
    // CLEAR SCREEN SYMBOL

    uint32_t const cps[1] = { 0x239a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x797), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_134)
{
    // 239B  ; [*0798.0020.0002] 
    // LEFT PARENTHESIS UPPER HOOK

    uint32_t const cps[1] = { 0x239b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x798), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_135)
{
    // 239C  ; [*0799.0020.0002] 
    // LEFT PARENTHESIS EXTENSION

    uint32_t const cps[1] = { 0x239c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x799), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_136)
{
    // 239D  ; [*079A.0020.0002] 
    // LEFT PARENTHESIS LOWER HOOK

    uint32_t const cps[1] = { 0x239d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x79a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_137)
{
    // 239E  ; [*079B.0020.0002] 
    // RIGHT PARENTHESIS UPPER HOOK

    uint32_t const cps[1] = { 0x239e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x79b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_138)
{
    // 239F  ; [*079C.0020.0002] 
    // RIGHT PARENTHESIS EXTENSION

    uint32_t const cps[1] = { 0x239f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x79c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_139)
{
    // 23A0  ; [*079D.0020.0002] 
    // RIGHT PARENTHESIS LOWER HOOK

    uint32_t const cps[1] = { 0x23a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x79d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_140)
{
    // 23A1  ; [*079E.0020.0002] 
    // LEFT SQUARE BRACKET UPPER CORNER

    uint32_t const cps[1] = { 0x23a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x79e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_141)
{
    // 23A2  ; [*079F.0020.0002] 
    // LEFT SQUARE BRACKET EXTENSION

    uint32_t const cps[1] = { 0x23a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x79f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_142)
{
    // 23A3  ; [*07A0.0020.0002] 
    // LEFT SQUARE BRACKET LOWER CORNER

    uint32_t const cps[1] = { 0x23a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x7a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_143)
{
    // 23A4  ; [*07A1.0020.0002] 
    // RIGHT SQUARE BRACKET UPPER CORNER

    uint32_t const cps[1] = { 0x23a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x7a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_144)
{
    // 23A5  ; [*07A2.0020.0002] 
    // RIGHT SQUARE BRACKET EXTENSION

    uint32_t const cps[1] = { 0x23a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x7a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_145)
{
    // 23A6  ; [*07A3.0020.0002] 
    // RIGHT SQUARE BRACKET LOWER CORNER

    uint32_t const cps[1] = { 0x23a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x7a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_146)
{
    // 23A7  ; [*07A4.0020.0002] 
    // LEFT CURLY BRACKET UPPER HOOK

    uint32_t const cps[1] = { 0x23a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x7a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_147)
{
    // 23A8  ; [*07A5.0020.0002] 
    // LEFT CURLY BRACKET MIDDLE PIECE

    uint32_t const cps[1] = { 0x23a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x7a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_148)
{
    // 23A9  ; [*07A6.0020.0002] 
    // LEFT CURLY BRACKET LOWER HOOK

    uint32_t const cps[1] = { 0x23a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x7a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_057_149)
{
    // 23AA  ; [*07A7.0020.0002] 
    // CURLY BRACKET EXTENSION

    uint32_t const cps[1] = { 0x23aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x7a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

