// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_117_000)
{
    // 100A2 ; [.4898.0020.0002] 
    // LINEAR B IDEOGRAM B153

    uint32_t const cps[1] = { 0x100a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4898), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_001)
{
    // 100A3 ; [.4899.0020.0002] 
    // LINEAR B IDEOGRAM B154

    uint32_t const cps[1] = { 0x100a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4899), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_002)
{
    // 100A4 ; [.489A.0020.0002] 
    // LINEAR B MONOGRAM B156 TURO2

    uint32_t const cps[1] = { 0x100a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x489a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_003)
{
    // 100A5 ; [.489B.0020.0002] 
    // LINEAR B IDEOGRAM B157

    uint32_t const cps[1] = { 0x100a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x489b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_004)
{
    // 100A6 ; [.489C.0020.0002] 
    // LINEAR B IDEOGRAM B158

    uint32_t const cps[1] = { 0x100a6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x489c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_005)
{
    // 100A7 ; [.489D.0020.0002] 
    // LINEAR B IDEOGRAM B159 CLOTH

    uint32_t const cps[1] = { 0x100a7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x489d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_006)
{
    // 100A8 ; [.489E.0020.0002] 
    // LINEAR B IDEOGRAM B160

    uint32_t const cps[1] = { 0x100a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x489e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_007)
{
    // 100A9 ; [.489F.0020.0002] 
    // LINEAR B IDEOGRAM B161

    uint32_t const cps[1] = { 0x100a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x489f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_008)
{
    // 100AA ; [.48A0.0020.0002] 
    // LINEAR B IDEOGRAM B162 GARMENT

    uint32_t const cps[1] = { 0x100aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_009)
{
    // 100AB ; [.48A1.0020.0002] 
    // LINEAR B IDEOGRAM B163 ARMOUR

    uint32_t const cps[1] = { 0x100ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_010)
{
    // 100AC ; [.48A2.0020.0002] 
    // LINEAR B IDEOGRAM B164

    uint32_t const cps[1] = { 0x100ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_011)
{
    // 100AD ; [.48A3.0020.0002] 
    // LINEAR B IDEOGRAM B165

    uint32_t const cps[1] = { 0x100ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_012)
{
    // 100AE ; [.48A4.0020.0002] 
    // LINEAR B IDEOGRAM B166

    uint32_t const cps[1] = { 0x100ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_013)
{
    // 100AF ; [.48A5.0020.0002] 
    // LINEAR B IDEOGRAM B167

    uint32_t const cps[1] = { 0x100af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_014)
{
    // 100B0 ; [.48A6.0020.0002] 
    // LINEAR B IDEOGRAM B168

    uint32_t const cps[1] = { 0x100b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_015)
{
    // 100B1 ; [.48A7.0020.0002] 
    // LINEAR B IDEOGRAM B169

    uint32_t const cps[1] = { 0x100b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_016)
{
    // 100B2 ; [.48A8.0020.0002] 
    // LINEAR B IDEOGRAM B170

    uint32_t const cps[1] = { 0x100b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_017)
{
    // 100B3 ; [.48A9.0020.0002] 
    // LINEAR B IDEOGRAM B171

    uint32_t const cps[1] = { 0x100b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_018)
{
    // 100B4 ; [.48AA.0020.0002] 
    // LINEAR B IDEOGRAM B172

    uint32_t const cps[1] = { 0x100b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_019)
{
    // 100B5 ; [.48AB.0020.0002] 
    // LINEAR B IDEOGRAM B173 MONTH

    uint32_t const cps[1] = { 0x100b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_020)
{
    // 100B6 ; [.48AC.0020.0002] 
    // LINEAR B IDEOGRAM B174

    uint32_t const cps[1] = { 0x100b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_021)
{
    // 100B7 ; [.48AD.0020.0002] 
    // LINEAR B IDEOGRAM B176 TREE

    uint32_t const cps[1] = { 0x100b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_022)
{
    // 100B8 ; [.48AE.0020.0002] 
    // LINEAR B IDEOGRAM B177

    uint32_t const cps[1] = { 0x100b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_023)
{
    // 100B9 ; [.48AF.0020.0002] 
    // LINEAR B IDEOGRAM B178

    uint32_t const cps[1] = { 0x100b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48af), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_024)
{
    // 100BA ; [.48B0.0020.0002] 
    // LINEAR B IDEOGRAM B179

    uint32_t const cps[1] = { 0x100ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_025)
{
    // 100BB ; [.48B1.0020.0002] 
    // LINEAR B IDEOGRAM B180

    uint32_t const cps[1] = { 0x100bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_026)
{
    // 100BC ; [.48B2.0020.0002] 
    // LINEAR B IDEOGRAM B181

    uint32_t const cps[1] = { 0x100bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_027)
{
    // 100BD ; [.48B3.0020.0002] 
    // LINEAR B IDEOGRAM B182

    uint32_t const cps[1] = { 0x100bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_028)
{
    // 100BE ; [.48B4.0020.0002] 
    // LINEAR B IDEOGRAM B183

    uint32_t const cps[1] = { 0x100be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_029)
{
    // 100BF ; [.48B5.0020.0002] 
    // LINEAR B IDEOGRAM B184

    uint32_t const cps[1] = { 0x100bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_030)
{
    // 100C0 ; [.48B6.0020.0002] 
    // LINEAR B IDEOGRAM B185

    uint32_t const cps[1] = { 0x100c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_031)
{
    // 100C1 ; [.48B7.0020.0002] 
    // LINEAR B IDEOGRAM B189

    uint32_t const cps[1] = { 0x100c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_032)
{
    // 100C2 ; [.48B8.0020.0002] 
    // LINEAR B IDEOGRAM B190

    uint32_t const cps[1] = { 0x100c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_033)
{
    // 100C3 ; [.48B9.0020.0002] 
    // LINEAR B IDEOGRAM B191 HELMET

    uint32_t const cps[1] = { 0x100c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_034)
{
    // 100C4 ; [.48BA.0020.0002] 
    // LINEAR B IDEOGRAM B220 FOOTSTOOL

    uint32_t const cps[1] = { 0x100c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_035)
{
    // 100C5 ; [.48BB.0020.0002] 
    // LINEAR B IDEOGRAM B225 BATHTUB

    uint32_t const cps[1] = { 0x100c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_036)
{
    // 100C6 ; [.48BC.0020.0002] 
    // LINEAR B IDEOGRAM B230 SPEAR

    uint32_t const cps[1] = { 0x100c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_037)
{
    // 100C7 ; [.48BD.0020.0002] 
    // LINEAR B IDEOGRAM B231 ARROW

    uint32_t const cps[1] = { 0x100c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_038)
{
    // 100C8 ; [.48BE.0020.0002] 
    // LINEAR B IDEOGRAM B232

    uint32_t const cps[1] = { 0x100c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48be), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_039)
{
    // 100C9 ; [.48BF.0020.0002] 
    // LINEAR B IDEOGRAM B233 SWORD

    uint32_t const cps[1] = { 0x100c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_040)
{
    // 100CA ; [.48C0.0020.0002] 
    // LINEAR B IDEOGRAM B234

    uint32_t const cps[1] = { 0x100ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_041)
{
    // 100CB ; [.48C1.0020.0002] 
    // LINEAR B IDEOGRAM B236

    uint32_t const cps[1] = { 0x100cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_042)
{
    // 100CC ; [.48C2.0020.0002] 
    // LINEAR B IDEOGRAM B240 WHEELED CHARIOT

    uint32_t const cps[1] = { 0x100cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_043)
{
    // 100CD ; [.48C3.0020.0002] 
    // LINEAR B IDEOGRAM B241 CHARIOT

    uint32_t const cps[1] = { 0x100cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_044)
{
    // 100CE ; [.48C4.0020.0002] 
    // LINEAR B IDEOGRAM B242 CHARIOT FRAME

    uint32_t const cps[1] = { 0x100ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_045)
{
    // 100CF ; [.48C5.0020.0002] 
    // LINEAR B IDEOGRAM B243 WHEEL

    uint32_t const cps[1] = { 0x100cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_046)
{
    // 100D0 ; [.48C6.0020.0002] 
    // LINEAR B IDEOGRAM B245

    uint32_t const cps[1] = { 0x100d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_047)
{
    // 100D1 ; [.48C7.0020.0002] 
    // LINEAR B IDEOGRAM B246

    uint32_t const cps[1] = { 0x100d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_048)
{
    // 100D2 ; [.48C8.0020.0002] 
    // LINEAR B MONOGRAM B247 DIPTE

    uint32_t const cps[1] = { 0x100d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_049)
{
    // 100D3 ; [.48C9.0020.0002] 
    // LINEAR B IDEOGRAM B248

    uint32_t const cps[1] = { 0x100d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_050)
{
    // 100D4 ; [.48CA.0020.0002] 
    // LINEAR B IDEOGRAM B249

    uint32_t const cps[1] = { 0x100d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_051)
{
    // 100D5 ; [.48CB.0020.0002] 
    // LINEAR B IDEOGRAM B251

    uint32_t const cps[1] = { 0x100d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_052)
{
    // 100D6 ; [.48CC.0020.0002] 
    // LINEAR B IDEOGRAM B252

    uint32_t const cps[1] = { 0x100d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_053)
{
    // 100D7 ; [.48CD.0020.0002] 
    // LINEAR B IDEOGRAM B253

    uint32_t const cps[1] = { 0x100d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_054)
{
    // 100D8 ; [.48CE.0020.0002] 
    // LINEAR B IDEOGRAM B254 DART

    uint32_t const cps[1] = { 0x100d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_055)
{
    // 100D9 ; [.48CF.0020.0002] 
    // LINEAR B IDEOGRAM B255

    uint32_t const cps[1] = { 0x100d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_056)
{
    // 100DA ; [.48D0.0020.0002] 
    // LINEAR B IDEOGRAM B256

    uint32_t const cps[1] = { 0x100da };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_057)
{
    // 100DB ; [.48D1.0020.0002] 
    // LINEAR B IDEOGRAM B257

    uint32_t const cps[1] = { 0x100db };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_058)
{
    // 100DC ; [.48D2.0020.0002] 
    // LINEAR B IDEOGRAM B258

    uint32_t const cps[1] = { 0x100dc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_059)
{
    // 100DD ; [.48D3.0020.0002] 
    // LINEAR B IDEOGRAM B259

    uint32_t const cps[1] = { 0x100dd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_060)
{
    // 100DE ; [.48D4.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B155

    uint32_t const cps[1] = { 0x100de };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_061)
{
    // 100DF ; [.48D5.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B200

    uint32_t const cps[1] = { 0x100df };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_062)
{
    // 100E0 ; [.48D6.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B201

    uint32_t const cps[1] = { 0x100e0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_063)
{
    // 100E1 ; [.48D7.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B202

    uint32_t const cps[1] = { 0x100e1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_064)
{
    // 100E2 ; [.48D8.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B203

    uint32_t const cps[1] = { 0x100e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_065)
{
    // 100E3 ; [.48D9.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B204

    uint32_t const cps[1] = { 0x100e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_066)
{
    // 100E4 ; [.48DA.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B205

    uint32_t const cps[1] = { 0x100e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_067)
{
    // 100E5 ; [.48DB.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B206

    uint32_t const cps[1] = { 0x100e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_068)
{
    // 100E6 ; [.48DC.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B207

    uint32_t const cps[1] = { 0x100e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_069)
{
    // 100E7 ; [.48DD.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B208

    uint32_t const cps[1] = { 0x100e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_070)
{
    // 100E8 ; [.48DE.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B209

    uint32_t const cps[1] = { 0x100e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_071)
{
    // 100E9 ; [.48DF.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B210

    uint32_t const cps[1] = { 0x100e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_072)
{
    // 100EA ; [.48E0.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B211

    uint32_t const cps[1] = { 0x100ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_073)
{
    // 100EB ; [.48E1.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B212

    uint32_t const cps[1] = { 0x100eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_074)
{
    // 100EC ; [.48E2.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B213

    uint32_t const cps[1] = { 0x100ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_075)
{
    // 100ED ; [.48E3.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B214

    uint32_t const cps[1] = { 0x100ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_076)
{
    // 100EE ; [.48E4.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B215

    uint32_t const cps[1] = { 0x100ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_077)
{
    // 100EF ; [.48E5.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B216

    uint32_t const cps[1] = { 0x100ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_078)
{
    // 100F0 ; [.48E6.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B217

    uint32_t const cps[1] = { 0x100f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_079)
{
    // 100F1 ; [.48E7.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B218

    uint32_t const cps[1] = { 0x100f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_080)
{
    // 100F2 ; [.48E8.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B219

    uint32_t const cps[1] = { 0x100f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_081)
{
    // 100F3 ; [.48E9.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B221

    uint32_t const cps[1] = { 0x100f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_082)
{
    // 100F4 ; [.48EA.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B222

    uint32_t const cps[1] = { 0x100f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_083)
{
    // 100F5 ; [.48EB.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B226

    uint32_t const cps[1] = { 0x100f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_084)
{
    // 100F6 ; [.48EC.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B227

    uint32_t const cps[1] = { 0x100f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_085)
{
    // 100F7 ; [.48ED.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B228

    uint32_t const cps[1] = { 0x100f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_086)
{
    // 100F8 ; [.48EE.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B229

    uint32_t const cps[1] = { 0x100f8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_087)
{
    // 100F9 ; [.48EF.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B250

    uint32_t const cps[1] = { 0x100f9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_088)
{
    // 100FA ; [.48F0.0020.0002] 
    // LINEAR B IDEOGRAM VESSEL B305

    uint32_t const cps[1] = { 0x100fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x48f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_089)
{
    // 10100 ; [*02FB.0020.0002] 
    // AEGEAN WORD SEPARATOR LINE

    uint32_t const cps[1] = { 0x10100 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_090)
{
    // 10101 ; [*02FC.0020.0002] 
    // AEGEAN WORD SEPARATOR DOT

    uint32_t const cps[1] = { 0x10101 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_091)
{
    // 10102 ; [*02FD.0020.0002] 
    // AEGEAN CHECK MARK

    uint32_t const cps[1] = { 0x10102 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_092)
{
    // 10107 ; [.1CA4.0020.0002] 
    // AEGEAN NUMBER ONE

    uint32_t const cps[1] = { 0x10107 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_093)
{
    // 10108 ; [.1CA5.0020.0002] 
    // AEGEAN NUMBER TWO

    uint32_t const cps[1] = { 0x10108 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_094)
{
    // 10109 ; [.1CA6.0020.0002] 
    // AEGEAN NUMBER THREE

    uint32_t const cps[1] = { 0x10109 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_095)
{
    // 1010A ; [.1CA7.0020.0002] 
    // AEGEAN NUMBER FOUR

    uint32_t const cps[1] = { 0x1010a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_096)
{
    // 1010B ; [.1CA8.0020.0002] 
    // AEGEAN NUMBER FIVE

    uint32_t const cps[1] = { 0x1010b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_097)
{
    // 1010C ; [.1CA9.0020.0002] 
    // AEGEAN NUMBER SIX

    uint32_t const cps[1] = { 0x1010c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_098)
{
    // 1010D ; [.1CAA.0020.0002] 
    // AEGEAN NUMBER SEVEN

    uint32_t const cps[1] = { 0x1010d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_099)
{
    // 1010E ; [.1CAB.0020.0002] 
    // AEGEAN NUMBER EIGHT

    uint32_t const cps[1] = { 0x1010e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_100)
{
    // 1010F ; [.1CAC.0020.0002] 
    // AEGEAN NUMBER NINE

    uint32_t const cps[1] = { 0x1010f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_101)
{
    // 10110 ; [*1B4D.0020.0002] 
    // AEGEAN NUMBER TEN

    uint32_t const cps[1] = { 0x10110 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_102)
{
    // 10111 ; [*1B4E.0020.0002] 
    // AEGEAN NUMBER TWENTY

    uint32_t const cps[1] = { 0x10111 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_103)
{
    // 10112 ; [*1B4F.0020.0002] 
    // AEGEAN NUMBER THIRTY

    uint32_t const cps[1] = { 0x10112 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_104)
{
    // 10113 ; [*1B50.0020.0002] 
    // AEGEAN NUMBER FORTY

    uint32_t const cps[1] = { 0x10113 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_105)
{
    // 10114 ; [*1B51.0020.0002] 
    // AEGEAN NUMBER FIFTY

    uint32_t const cps[1] = { 0x10114 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_106)
{
    // 10115 ; [*1B52.0020.0002] 
    // AEGEAN NUMBER SIXTY

    uint32_t const cps[1] = { 0x10115 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_107)
{
    // 10116 ; [*1B53.0020.0002] 
    // AEGEAN NUMBER SEVENTY

    uint32_t const cps[1] = { 0x10116 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_108)
{
    // 10117 ; [*1B54.0020.0002] 
    // AEGEAN NUMBER EIGHTY

    uint32_t const cps[1] = { 0x10117 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_109)
{
    // 10118 ; [*1B55.0020.0002] 
    // AEGEAN NUMBER NINETY

    uint32_t const cps[1] = { 0x10118 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_110)
{
    // 10119 ; [*1B56.0020.0002] 
    // AEGEAN NUMBER ONE HUNDRED

    uint32_t const cps[1] = { 0x10119 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_111)
{
    // 1011A ; [*1B57.0020.0002] 
    // AEGEAN NUMBER TWO HUNDRED

    uint32_t const cps[1] = { 0x1011a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_112)
{
    // 1011B ; [*1B58.0020.0002] 
    // AEGEAN NUMBER THREE HUNDRED

    uint32_t const cps[1] = { 0x1011b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_113)
{
    // 1011C ; [*1B59.0020.0002] 
    // AEGEAN NUMBER FOUR HUNDRED

    uint32_t const cps[1] = { 0x1011c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_114)
{
    // 1011D ; [*1B5A.0020.0002] 
    // AEGEAN NUMBER FIVE HUNDRED

    uint32_t const cps[1] = { 0x1011d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_115)
{
    // 1011E ; [*1B5B.0020.0002] 
    // AEGEAN NUMBER SIX HUNDRED

    uint32_t const cps[1] = { 0x1011e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_116)
{
    // 1011F ; [*1B5C.0020.0002] 
    // AEGEAN NUMBER SEVEN HUNDRED

    uint32_t const cps[1] = { 0x1011f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_117)
{
    // 10120 ; [*1B5D.0020.0002] 
    // AEGEAN NUMBER EIGHT HUNDRED

    uint32_t const cps[1] = { 0x10120 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_118)
{
    // 10121 ; [*1B5E.0020.0002] 
    // AEGEAN NUMBER NINE HUNDRED

    uint32_t const cps[1] = { 0x10121 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_119)
{
    // 10122 ; [*1B5F.0020.0002] 
    // AEGEAN NUMBER ONE THOUSAND

    uint32_t const cps[1] = { 0x10122 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_120)
{
    // 10123 ; [*1B60.0020.0002] 
    // AEGEAN NUMBER TWO THOUSAND

    uint32_t const cps[1] = { 0x10123 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_121)
{
    // 10124 ; [*1B61.0020.0002] 
    // AEGEAN NUMBER THREE THOUSAND

    uint32_t const cps[1] = { 0x10124 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_122)
{
    // 10125 ; [*1B62.0020.0002] 
    // AEGEAN NUMBER FOUR THOUSAND

    uint32_t const cps[1] = { 0x10125 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_123)
{
    // 10126 ; [*1B63.0020.0002] 
    // AEGEAN NUMBER FIVE THOUSAND

    uint32_t const cps[1] = { 0x10126 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_124)
{
    // 10127 ; [*1B64.0020.0002] 
    // AEGEAN NUMBER SIX THOUSAND

    uint32_t const cps[1] = { 0x10127 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_125)
{
    // 10128 ; [*1B65.0020.0002] 
    // AEGEAN NUMBER SEVEN THOUSAND

    uint32_t const cps[1] = { 0x10128 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_126)
{
    // 10129 ; [*1B66.0020.0002] 
    // AEGEAN NUMBER EIGHT THOUSAND

    uint32_t const cps[1] = { 0x10129 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_127)
{
    // 1012A ; [*1B67.0020.0002] 
    // AEGEAN NUMBER NINE THOUSAND

    uint32_t const cps[1] = { 0x1012a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_128)
{
    // 1012B ; [*1B68.0020.0002] 
    // AEGEAN NUMBER TEN THOUSAND

    uint32_t const cps[1] = { 0x1012b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_129)
{
    // 1012C ; [*1B69.0020.0002] 
    // AEGEAN NUMBER TWENTY THOUSAND

    uint32_t const cps[1] = { 0x1012c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_130)
{
    // 1012D ; [*1B6A.0020.0002] 
    // AEGEAN NUMBER THIRTY THOUSAND

    uint32_t const cps[1] = { 0x1012d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_131)
{
    // 1012E ; [*1B6B.0020.0002] 
    // AEGEAN NUMBER FORTY THOUSAND

    uint32_t const cps[1] = { 0x1012e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_132)
{
    // 1012F ; [*1B6C.0020.0002] 
    // AEGEAN NUMBER FIFTY THOUSAND

    uint32_t const cps[1] = { 0x1012f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_133)
{
    // 10130 ; [*1B6D.0020.0002] 
    // AEGEAN NUMBER SIXTY THOUSAND

    uint32_t const cps[1] = { 0x10130 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_134)
{
    // 10131 ; [*1B6E.0020.0002] 
    // AEGEAN NUMBER SEVENTY THOUSAND

    uint32_t const cps[1] = { 0x10131 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_135)
{
    // 10132 ; [*1B6F.0020.0002] 
    // AEGEAN NUMBER EIGHTY THOUSAND

    uint32_t const cps[1] = { 0x10132 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_136)
{
    // 10133 ; [*1B70.0020.0002] 
    // AEGEAN NUMBER NINETY THOUSAND

    uint32_t const cps[1] = { 0x10133 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_137)
{
    // 10137 ; [*0F90.0020.0002] 
    // AEGEAN WEIGHT BASE UNIT

    uint32_t const cps[1] = { 0x10137 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_138)
{
    // 10138 ; [*0F91.0020.0002] 
    // AEGEAN WEIGHT FIRST SUBUNIT

    uint32_t const cps[1] = { 0x10138 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_139)
{
    // 10139 ; [*0F92.0020.0002] 
    // AEGEAN WEIGHT SECOND SUBUNIT

    uint32_t const cps[1] = { 0x10139 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_140)
{
    // 1013A ; [*0F93.0020.0002] 
    // AEGEAN WEIGHT THIRD SUBUNIT

    uint32_t const cps[1] = { 0x1013a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_141)
{
    // 1013B ; [*0F94.0020.0002] 
    // AEGEAN WEIGHT FOURTH SUBUNIT

    uint32_t const cps[1] = { 0x1013b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_142)
{
    // 1013C ; [*0F95.0020.0002] 
    // AEGEAN DRY MEASURE FIRST SUBUNIT

    uint32_t const cps[1] = { 0x1013c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_143)
{
    // 1013D ; [*0F96.0020.0002] 
    // AEGEAN LIQUID MEASURE FIRST SUBUNIT

    uint32_t const cps[1] = { 0x1013d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_144)
{
    // 1013E ; [*0F97.0020.0002] 
    // AEGEAN MEASURE SECOND SUBUNIT

    uint32_t const cps[1] = { 0x1013e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_145)
{
    // 1013F ; [*0F98.0020.0002] 
    // AEGEAN MEASURE THIRD SUBUNIT

    uint32_t const cps[1] = { 0x1013f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0xf98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_146)
{
    // 10140 ; [*1B71.0020.0002] 
    // GREEK ACROPHONIC ATTIC ONE QUARTER

    uint32_t const cps[1] = { 0x10140 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_147)
{
    // 10141 ; [*1B72.0020.0002] 
    // GREEK ACROPHONIC ATTIC ONE HALF

    uint32_t const cps[1] = { 0x10141 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_148)
{
    // 10142 ; [.1CA4.0020.0002] 
    // GREEK ACROPHONIC ATTIC ONE DRACHMA

    uint32_t const cps[1] = { 0x10142 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_117_149)
{
    // 10143 ; [.1CA8.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIVE

    uint32_t const cps[1] = { 0x10143 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

