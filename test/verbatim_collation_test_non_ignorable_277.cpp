// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_277_000)
{
    // 100BD 003F;	
    // (êÇΩ) LINEAR B IDEOGRAM B182	[48B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BD, 0x003F };
    uint32_t const ces[9] = { 0x48B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_001)
{
    // 100BD 0061;	
    // (êÇΩ) LINEAR B IDEOGRAM B182	[48B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BD, 0x0061 };
    uint32_t const ces[9] = { 0x48B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_002)
{
    // 100BD 0041;	
    // (êÇΩ) LINEAR B IDEOGRAM B182	[48B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100BD, 0x0041 };
    uint32_t const ces[9] = { 0x48B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_003)
{
    // 100BD 0062;	
    // (êÇΩ) LINEAR B IDEOGRAM B182	[48B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BD, 0x0062 };
    uint32_t const ces[9] = { 0x48B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_004)
{
    // 100BE 0021;	
    // (êÇæ) LINEAR B IDEOGRAM B183	[48B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BE, 0x0021 };
    uint32_t const ces[9] = { 0x48B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_005)
{
    // 100BE 003F;	
    // (êÇæ) LINEAR B IDEOGRAM B183	[48B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BE, 0x003F };
    uint32_t const ces[9] = { 0x48B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_006)
{
    // 100BE 0061;	
    // (êÇæ) LINEAR B IDEOGRAM B183	[48B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BE, 0x0061 };
    uint32_t const ces[9] = { 0x48B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_007)
{
    // 100BE 0041;	
    // (êÇæ) LINEAR B IDEOGRAM B183	[48B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100BE, 0x0041 };
    uint32_t const ces[9] = { 0x48B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_008)
{
    // 100BE 0062;	
    // (êÇæ) LINEAR B IDEOGRAM B183	[48B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BE, 0x0062 };
    uint32_t const ces[9] = { 0x48B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_009)
{
    // 100BF 0021;	
    // (êÇø) LINEAR B IDEOGRAM B184	[48B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BF, 0x0021 };
    uint32_t const ces[9] = { 0x48B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_010)
{
    // 100BF 003F;	
    // (êÇø) LINEAR B IDEOGRAM B184	[48B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BF, 0x003F };
    uint32_t const ces[9] = { 0x48B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_011)
{
    // 100BF 0061;	
    // (êÇø) LINEAR B IDEOGRAM B184	[48B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BF, 0x0061 };
    uint32_t const ces[9] = { 0x48B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_012)
{
    // 100BF 0041;	
    // (êÇø) LINEAR B IDEOGRAM B184	[48B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100BF, 0x0041 };
    uint32_t const ces[9] = { 0x48B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_013)
{
    // 100BF 0062;	
    // (êÇø) LINEAR B IDEOGRAM B184	[48B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100BF, 0x0062 };
    uint32_t const ces[9] = { 0x48B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_014)
{
    // 100C0 0021;	
    // (êÉÄ) LINEAR B IDEOGRAM B185	[48B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C0, 0x0021 };
    uint32_t const ces[9] = { 0x48B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_015)
{
    // 100C0 003F;	
    // (êÉÄ) LINEAR B IDEOGRAM B185	[48B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C0, 0x003F };
    uint32_t const ces[9] = { 0x48B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_016)
{
    // 100C0 0061;	
    // (êÉÄ) LINEAR B IDEOGRAM B185	[48B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C0, 0x0061 };
    uint32_t const ces[9] = { 0x48B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_017)
{
    // 100C0 0041;	
    // (êÉÄ) LINEAR B IDEOGRAM B185	[48B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C0, 0x0041 };
    uint32_t const ces[9] = { 0x48B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_018)
{
    // 100C0 0062;	
    // (êÉÄ) LINEAR B IDEOGRAM B185	[48B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C0, 0x0062 };
    uint32_t const ces[9] = { 0x48B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_019)
{
    // 100C1 0021;	
    // (êÉÅ) LINEAR B IDEOGRAM B189	[48B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C1, 0x0021 };
    uint32_t const ces[9] = { 0x48B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_020)
{
    // 100C1 003F;	
    // (êÉÅ) LINEAR B IDEOGRAM B189	[48B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C1, 0x003F };
    uint32_t const ces[9] = { 0x48B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_021)
{
    // 100C1 0061;	
    // (êÉÅ) LINEAR B IDEOGRAM B189	[48B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C1, 0x0061 };
    uint32_t const ces[9] = { 0x48B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_022)
{
    // 100C1 0041;	
    // (êÉÅ) LINEAR B IDEOGRAM B189	[48B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C1, 0x0041 };
    uint32_t const ces[9] = { 0x48B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_023)
{
    // 100C1 0062;	
    // (êÉÅ) LINEAR B IDEOGRAM B189	[48B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C1, 0x0062 };
    uint32_t const ces[9] = { 0x48B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_024)
{
    // 100C2 0021;	
    // (êÉÇ) LINEAR B IDEOGRAM B190	[48B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C2, 0x0021 };
    uint32_t const ces[9] = { 0x48B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_025)
{
    // 100C2 003F;	
    // (êÉÇ) LINEAR B IDEOGRAM B190	[48B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C2, 0x003F };
    uint32_t const ces[9] = { 0x48B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_026)
{
    // 100C2 0061;	
    // (êÉÇ) LINEAR B IDEOGRAM B190	[48B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C2, 0x0061 };
    uint32_t const ces[9] = { 0x48B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_027)
{
    // 100C2 0041;	
    // (êÉÇ) LINEAR B IDEOGRAM B190	[48B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C2, 0x0041 };
    uint32_t const ces[9] = { 0x48B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_028)
{
    // 100C2 0062;	
    // (êÉÇ) LINEAR B IDEOGRAM B190	[48B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C2, 0x0062 };
    uint32_t const ces[9] = { 0x48B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_029)
{
    // 100C3 0021;	
    // (êÉÉ) LINEAR B IDEOGRAM B191 HELMET	[48B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C3, 0x0021 };
    uint32_t const ces[9] = { 0x48B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_030)
{
    // 100C3 003F;	
    // (êÉÉ) LINEAR B IDEOGRAM B191 HELMET	[48B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C3, 0x003F };
    uint32_t const ces[9] = { 0x48B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_031)
{
    // 100C3 0061;	
    // (êÉÉ) LINEAR B IDEOGRAM B191 HELMET	[48B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C3, 0x0061 };
    uint32_t const ces[9] = { 0x48B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_032)
{
    // 100C3 0041;	
    // (êÉÉ) LINEAR B IDEOGRAM B191 HELMET	[48B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C3, 0x0041 };
    uint32_t const ces[9] = { 0x48B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_033)
{
    // 100C3 0062;	
    // (êÉÉ) LINEAR B IDEOGRAM B191 HELMET	[48B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C3, 0x0062 };
    uint32_t const ces[9] = { 0x48B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_034)
{
    // 100C4 0021;	
    // (êÉÑ) LINEAR B IDEOGRAM B220 FOOTSTOOL	[48BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C4, 0x0021 };
    uint32_t const ces[9] = { 0x48BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_035)
{
    // 100C4 003F;	
    // (êÉÑ) LINEAR B IDEOGRAM B220 FOOTSTOOL	[48BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C4, 0x003F };
    uint32_t const ces[9] = { 0x48BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_036)
{
    // 100C4 0061;	
    // (êÉÑ) LINEAR B IDEOGRAM B220 FOOTSTOOL	[48BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C4, 0x0061 };
    uint32_t const ces[9] = { 0x48BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_037)
{
    // 100C4 0041;	
    // (êÉÑ) LINEAR B IDEOGRAM B220 FOOTSTOOL	[48BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C4, 0x0041 };
    uint32_t const ces[9] = { 0x48BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_038)
{
    // 100C4 0062;	
    // (êÉÑ) LINEAR B IDEOGRAM B220 FOOTSTOOL	[48BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C4, 0x0062 };
    uint32_t const ces[9] = { 0x48BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_039)
{
    // 100C5 0021;	
    // (êÉÖ) LINEAR B IDEOGRAM B225 BATHTUB	[48BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C5, 0x0021 };
    uint32_t const ces[9] = { 0x48BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_040)
{
    // 100C5 003F;	
    // (êÉÖ) LINEAR B IDEOGRAM B225 BATHTUB	[48BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C5, 0x003F };
    uint32_t const ces[9] = { 0x48BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_041)
{
    // 100C5 0061;	
    // (êÉÖ) LINEAR B IDEOGRAM B225 BATHTUB	[48BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C5, 0x0061 };
    uint32_t const ces[9] = { 0x48BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_042)
{
    // 100C5 0041;	
    // (êÉÖ) LINEAR B IDEOGRAM B225 BATHTUB	[48BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C5, 0x0041 };
    uint32_t const ces[9] = { 0x48BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_043)
{
    // 100C5 0062;	
    // (êÉÖ) LINEAR B IDEOGRAM B225 BATHTUB	[48BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C5, 0x0062 };
    uint32_t const ces[9] = { 0x48BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_044)
{
    // 100C6 0021;	
    // (êÉÜ) LINEAR B IDEOGRAM B230 SPEAR	[48BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C6, 0x0021 };
    uint32_t const ces[9] = { 0x48BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_045)
{
    // 100C6 003F;	
    // (êÉÜ) LINEAR B IDEOGRAM B230 SPEAR	[48BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C6, 0x003F };
    uint32_t const ces[9] = { 0x48BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_046)
{
    // 100C6 0061;	
    // (êÉÜ) LINEAR B IDEOGRAM B230 SPEAR	[48BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C6, 0x0061 };
    uint32_t const ces[9] = { 0x48BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_047)
{
    // 100C6 0041;	
    // (êÉÜ) LINEAR B IDEOGRAM B230 SPEAR	[48BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C6, 0x0041 };
    uint32_t const ces[9] = { 0x48BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_048)
{
    // 100C6 0062;	
    // (êÉÜ) LINEAR B IDEOGRAM B230 SPEAR	[48BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C6, 0x0062 };
    uint32_t const ces[9] = { 0x48BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_049)
{
    // 100C7 0021;	
    // (êÉá) LINEAR B IDEOGRAM B231 ARROW	[48BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C7, 0x0021 };
    uint32_t const ces[9] = { 0x48BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_050)
{
    // 100C7 003F;	
    // (êÉá) LINEAR B IDEOGRAM B231 ARROW	[48BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C7, 0x003F };
    uint32_t const ces[9] = { 0x48BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_051)
{
    // 100C7 0061;	
    // (êÉá) LINEAR B IDEOGRAM B231 ARROW	[48BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C7, 0x0061 };
    uint32_t const ces[9] = { 0x48BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_052)
{
    // 100C7 0041;	
    // (êÉá) LINEAR B IDEOGRAM B231 ARROW	[48BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C7, 0x0041 };
    uint32_t const ces[9] = { 0x48BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_053)
{
    // 100C7 0062;	
    // (êÉá) LINEAR B IDEOGRAM B231 ARROW	[48BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C7, 0x0062 };
    uint32_t const ces[9] = { 0x48BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_054)
{
    // 100C8 0021;	
    // (êÉà) LINEAR B IDEOGRAM B232	[48BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C8, 0x0021 };
    uint32_t const ces[9] = { 0x48BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_055)
{
    // 100C8 003F;	
    // (êÉà) LINEAR B IDEOGRAM B232	[48BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C8, 0x003F };
    uint32_t const ces[9] = { 0x48BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_056)
{
    // 100C8 0061;	
    // (êÉà) LINEAR B IDEOGRAM B232	[48BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C8, 0x0061 };
    uint32_t const ces[9] = { 0x48BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_057)
{
    // 100C8 0041;	
    // (êÉà) LINEAR B IDEOGRAM B232	[48BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C8, 0x0041 };
    uint32_t const ces[9] = { 0x48BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_058)
{
    // 100C8 0062;	
    // (êÉà) LINEAR B IDEOGRAM B232	[48BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C8, 0x0062 };
    uint32_t const ces[9] = { 0x48BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_059)
{
    // 100C9 0021;	
    // (êÉâ) LINEAR B IDEOGRAM B233 SWORD	[48BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C9, 0x0021 };
    uint32_t const ces[9] = { 0x48BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_060)
{
    // 100C9 003F;	
    // (êÉâ) LINEAR B IDEOGRAM B233 SWORD	[48BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C9, 0x003F };
    uint32_t const ces[9] = { 0x48BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_061)
{
    // 100C9 0061;	
    // (êÉâ) LINEAR B IDEOGRAM B233 SWORD	[48BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C9, 0x0061 };
    uint32_t const ces[9] = { 0x48BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_062)
{
    // 100C9 0041;	
    // (êÉâ) LINEAR B IDEOGRAM B233 SWORD	[48BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100C9, 0x0041 };
    uint32_t const ces[9] = { 0x48BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_063)
{
    // 100C9 0062;	
    // (êÉâ) LINEAR B IDEOGRAM B233 SWORD	[48BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100C9, 0x0062 };
    uint32_t const ces[9] = { 0x48BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_064)
{
    // 100CA 0021;	
    // (êÉä) LINEAR B IDEOGRAM B234	[48C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CA, 0x0021 };
    uint32_t const ces[9] = { 0x48C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_065)
{
    // 100CA 003F;	
    // (êÉä) LINEAR B IDEOGRAM B234	[48C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CA, 0x003F };
    uint32_t const ces[9] = { 0x48C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_066)
{
    // 100CA 0061;	
    // (êÉä) LINEAR B IDEOGRAM B234	[48C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CA, 0x0061 };
    uint32_t const ces[9] = { 0x48C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_067)
{
    // 100CA 0041;	
    // (êÉä) LINEAR B IDEOGRAM B234	[48C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100CA, 0x0041 };
    uint32_t const ces[9] = { 0x48C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_068)
{
    // 100CA 0062;	
    // (êÉä) LINEAR B IDEOGRAM B234	[48C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CA, 0x0062 };
    uint32_t const ces[9] = { 0x48C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_069)
{
    // 100CB 0021;	
    // (êÉã) LINEAR B IDEOGRAM B236	[48C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CB, 0x0021 };
    uint32_t const ces[9] = { 0x48C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_070)
{
    // 100CB 003F;	
    // (êÉã) LINEAR B IDEOGRAM B236	[48C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CB, 0x003F };
    uint32_t const ces[9] = { 0x48C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_071)
{
    // 100CB 0061;	
    // (êÉã) LINEAR B IDEOGRAM B236	[48C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CB, 0x0061 };
    uint32_t const ces[9] = { 0x48C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_072)
{
    // 100CB 0041;	
    // (êÉã) LINEAR B IDEOGRAM B236	[48C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100CB, 0x0041 };
    uint32_t const ces[9] = { 0x48C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_073)
{
    // 100CB 0062;	
    // (êÉã) LINEAR B IDEOGRAM B236	[48C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CB, 0x0062 };
    uint32_t const ces[9] = { 0x48C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_074)
{
    // 100CC 0021;	
    // (êÉå) LINEAR B IDEOGRAM B240 WHEELED CHARIOT	[48C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CC, 0x0021 };
    uint32_t const ces[9] = { 0x48C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_075)
{
    // 100CC 003F;	
    // (êÉå) LINEAR B IDEOGRAM B240 WHEELED CHARIOT	[48C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CC, 0x003F };
    uint32_t const ces[9] = { 0x48C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_076)
{
    // 100CC 0061;	
    // (êÉå) LINEAR B IDEOGRAM B240 WHEELED CHARIOT	[48C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CC, 0x0061 };
    uint32_t const ces[9] = { 0x48C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_077)
{
    // 100CC 0041;	
    // (êÉå) LINEAR B IDEOGRAM B240 WHEELED CHARIOT	[48C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100CC, 0x0041 };
    uint32_t const ces[9] = { 0x48C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_078)
{
    // 100CC 0062;	
    // (êÉå) LINEAR B IDEOGRAM B240 WHEELED CHARIOT	[48C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CC, 0x0062 };
    uint32_t const ces[9] = { 0x48C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_079)
{
    // 100CD 0021;	
    // (êÉç) LINEAR B IDEOGRAM B241 CHARIOT	[48C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CD, 0x0021 };
    uint32_t const ces[9] = { 0x48C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_080)
{
    // 100CD 003F;	
    // (êÉç) LINEAR B IDEOGRAM B241 CHARIOT	[48C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CD, 0x003F };
    uint32_t const ces[9] = { 0x48C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_081)
{
    // 100CD 0061;	
    // (êÉç) LINEAR B IDEOGRAM B241 CHARIOT	[48C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CD, 0x0061 };
    uint32_t const ces[9] = { 0x48C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_082)
{
    // 100CD 0041;	
    // (êÉç) LINEAR B IDEOGRAM B241 CHARIOT	[48C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100CD, 0x0041 };
    uint32_t const ces[9] = { 0x48C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_083)
{
    // 100CD 0062;	
    // (êÉç) LINEAR B IDEOGRAM B241 CHARIOT	[48C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CD, 0x0062 };
    uint32_t const ces[9] = { 0x48C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_084)
{
    // 100CE 0021;	
    // (êÉé) LINEAR B IDEOGRAM B242 CHARIOT FRAME	[48C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CE, 0x0021 };
    uint32_t const ces[9] = { 0x48C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_085)
{
    // 100CE 003F;	
    // (êÉé) LINEAR B IDEOGRAM B242 CHARIOT FRAME	[48C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CE, 0x003F };
    uint32_t const ces[9] = { 0x48C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_086)
{
    // 100CE 0061;	
    // (êÉé) LINEAR B IDEOGRAM B242 CHARIOT FRAME	[48C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CE, 0x0061 };
    uint32_t const ces[9] = { 0x48C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_087)
{
    // 100CE 0041;	
    // (êÉé) LINEAR B IDEOGRAM B242 CHARIOT FRAME	[48C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100CE, 0x0041 };
    uint32_t const ces[9] = { 0x48C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_088)
{
    // 100CE 0062;	
    // (êÉé) LINEAR B IDEOGRAM B242 CHARIOT FRAME	[48C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CE, 0x0062 };
    uint32_t const ces[9] = { 0x48C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_089)
{
    // 100CF 0021;	
    // (êÉè) LINEAR B IDEOGRAM B243 WHEEL	[48C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CF, 0x0021 };
    uint32_t const ces[9] = { 0x48C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_090)
{
    // 100CF 003F;	
    // (êÉè) LINEAR B IDEOGRAM B243 WHEEL	[48C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CF, 0x003F };
    uint32_t const ces[9] = { 0x48C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_091)
{
    // 100CF 0061;	
    // (êÉè) LINEAR B IDEOGRAM B243 WHEEL	[48C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CF, 0x0061 };
    uint32_t const ces[9] = { 0x48C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_092)
{
    // 100CF 0041;	
    // (êÉè) LINEAR B IDEOGRAM B243 WHEEL	[48C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100CF, 0x0041 };
    uint32_t const ces[9] = { 0x48C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_093)
{
    // 100CF 0062;	
    // (êÉè) LINEAR B IDEOGRAM B243 WHEEL	[48C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100CF, 0x0062 };
    uint32_t const ces[9] = { 0x48C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_094)
{
    // 100D0 0021;	
    // (êÉê) LINEAR B IDEOGRAM B245	[48C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D0, 0x0021 };
    uint32_t const ces[9] = { 0x48C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_095)
{
    // 100D0 003F;	
    // (êÉê) LINEAR B IDEOGRAM B245	[48C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D0, 0x003F };
    uint32_t const ces[9] = { 0x48C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_096)
{
    // 100D0 0061;	
    // (êÉê) LINEAR B IDEOGRAM B245	[48C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D0, 0x0061 };
    uint32_t const ces[9] = { 0x48C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_097)
{
    // 100D0 0041;	
    // (êÉê) LINEAR B IDEOGRAM B245	[48C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D0, 0x0041 };
    uint32_t const ces[9] = { 0x48C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_098)
{
    // 100D0 0062;	
    // (êÉê) LINEAR B IDEOGRAM B245	[48C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D0, 0x0062 };
    uint32_t const ces[9] = { 0x48C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_099)
{
    // 100D1 0021;	
    // (êÉë) LINEAR B IDEOGRAM B246	[48C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D1, 0x0021 };
    uint32_t const ces[9] = { 0x48C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_100)
{
    // 100D1 003F;	
    // (êÉë) LINEAR B IDEOGRAM B246	[48C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D1, 0x003F };
    uint32_t const ces[9] = { 0x48C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_101)
{
    // 100D1 0061;	
    // (êÉë) LINEAR B IDEOGRAM B246	[48C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D1, 0x0061 };
    uint32_t const ces[9] = { 0x48C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_102)
{
    // 100D1 0041;	
    // (êÉë) LINEAR B IDEOGRAM B246	[48C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D1, 0x0041 };
    uint32_t const ces[9] = { 0x48C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_103)
{
    // 100D1 0062;	
    // (êÉë) LINEAR B IDEOGRAM B246	[48C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D1, 0x0062 };
    uint32_t const ces[9] = { 0x48C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_104)
{
    // 100D2 0021;	
    // (êÉí) LINEAR B MONOGRAM B247 DIPTE	[48C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D2, 0x0021 };
    uint32_t const ces[9] = { 0x48C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_105)
{
    // 100D2 003F;	
    // (êÉí) LINEAR B MONOGRAM B247 DIPTE	[48C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D2, 0x003F };
    uint32_t const ces[9] = { 0x48C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_106)
{
    // 100D2 0061;	
    // (êÉí) LINEAR B MONOGRAM B247 DIPTE	[48C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D2, 0x0061 };
    uint32_t const ces[9] = { 0x48C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_107)
{
    // 100D2 0041;	
    // (êÉí) LINEAR B MONOGRAM B247 DIPTE	[48C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D2, 0x0041 };
    uint32_t const ces[9] = { 0x48C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_108)
{
    // 100D2 0062;	
    // (êÉí) LINEAR B MONOGRAM B247 DIPTE	[48C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D2, 0x0062 };
    uint32_t const ces[9] = { 0x48C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_109)
{
    // 100D3 0021;	
    // (êÉì) LINEAR B IDEOGRAM B248	[48C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D3, 0x0021 };
    uint32_t const ces[9] = { 0x48C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_110)
{
    // 100D3 003F;	
    // (êÉì) LINEAR B IDEOGRAM B248	[48C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D3, 0x003F };
    uint32_t const ces[9] = { 0x48C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_111)
{
    // 100D3 0061;	
    // (êÉì) LINEAR B IDEOGRAM B248	[48C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D3, 0x0061 };
    uint32_t const ces[9] = { 0x48C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_112)
{
    // 100D3 0041;	
    // (êÉì) LINEAR B IDEOGRAM B248	[48C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D3, 0x0041 };
    uint32_t const ces[9] = { 0x48C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_113)
{
    // 100D3 0062;	
    // (êÉì) LINEAR B IDEOGRAM B248	[48C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D3, 0x0062 };
    uint32_t const ces[9] = { 0x48C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_114)
{
    // 100D4 0021;	
    // (êÉî) LINEAR B IDEOGRAM B249	[48CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D4, 0x0021 };
    uint32_t const ces[9] = { 0x48CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_115)
{
    // 100D4 003F;	
    // (êÉî) LINEAR B IDEOGRAM B249	[48CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D4, 0x003F };
    uint32_t const ces[9] = { 0x48CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_116)
{
    // 100D4 0061;	
    // (êÉî) LINEAR B IDEOGRAM B249	[48CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D4, 0x0061 };
    uint32_t const ces[9] = { 0x48CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_117)
{
    // 100D4 0041;	
    // (êÉî) LINEAR B IDEOGRAM B249	[48CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D4, 0x0041 };
    uint32_t const ces[9] = { 0x48CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_118)
{
    // 100D4 0062;	
    // (êÉî) LINEAR B IDEOGRAM B249	[48CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D4, 0x0062 };
    uint32_t const ces[9] = { 0x48CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_119)
{
    // 100D5 0021;	
    // (êÉï) LINEAR B IDEOGRAM B251	[48CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D5, 0x0021 };
    uint32_t const ces[9] = { 0x48CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_120)
{
    // 100D5 003F;	
    // (êÉï) LINEAR B IDEOGRAM B251	[48CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D5, 0x003F };
    uint32_t const ces[9] = { 0x48CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_121)
{
    // 100D5 0061;	
    // (êÉï) LINEAR B IDEOGRAM B251	[48CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D5, 0x0061 };
    uint32_t const ces[9] = { 0x48CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_122)
{
    // 100D5 0041;	
    // (êÉï) LINEAR B IDEOGRAM B251	[48CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D5, 0x0041 };
    uint32_t const ces[9] = { 0x48CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_123)
{
    // 100D5 0062;	
    // (êÉï) LINEAR B IDEOGRAM B251	[48CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D5, 0x0062 };
    uint32_t const ces[9] = { 0x48CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_124)
{
    // 100D6 0021;	
    // (êÉñ) LINEAR B IDEOGRAM B252	[48CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D6, 0x0021 };
    uint32_t const ces[9] = { 0x48CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_125)
{
    // 100D6 003F;	
    // (êÉñ) LINEAR B IDEOGRAM B252	[48CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D6, 0x003F };
    uint32_t const ces[9] = { 0x48CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_126)
{
    // 100D6 0061;	
    // (êÉñ) LINEAR B IDEOGRAM B252	[48CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D6, 0x0061 };
    uint32_t const ces[9] = { 0x48CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_127)
{
    // 100D6 0041;	
    // (êÉñ) LINEAR B IDEOGRAM B252	[48CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D6, 0x0041 };
    uint32_t const ces[9] = { 0x48CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_128)
{
    // 100D6 0062;	
    // (êÉñ) LINEAR B IDEOGRAM B252	[48CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D6, 0x0062 };
    uint32_t const ces[9] = { 0x48CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_129)
{
    // 100D7 0021;	
    // (êÉó) LINEAR B IDEOGRAM B253	[48CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D7, 0x0021 };
    uint32_t const ces[9] = { 0x48CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_130)
{
    // 100D7 003F;	
    // (êÉó) LINEAR B IDEOGRAM B253	[48CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D7, 0x003F };
    uint32_t const ces[9] = { 0x48CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_131)
{
    // 100D7 0061;	
    // (êÉó) LINEAR B IDEOGRAM B253	[48CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D7, 0x0061 };
    uint32_t const ces[9] = { 0x48CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_132)
{
    // 100D7 0041;	
    // (êÉó) LINEAR B IDEOGRAM B253	[48CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D7, 0x0041 };
    uint32_t const ces[9] = { 0x48CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_133)
{
    // 100D7 0062;	
    // (êÉó) LINEAR B IDEOGRAM B253	[48CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D7, 0x0062 };
    uint32_t const ces[9] = { 0x48CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_134)
{
    // 100D8 0021;	
    // (êÉò) LINEAR B IDEOGRAM B254 DART	[48CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D8, 0x0021 };
    uint32_t const ces[9] = { 0x48CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_135)
{
    // 100D8 003F;	
    // (êÉò) LINEAR B IDEOGRAM B254 DART	[48CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D8, 0x003F };
    uint32_t const ces[9] = { 0x48CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_136)
{
    // 100D8 0061;	
    // (êÉò) LINEAR B IDEOGRAM B254 DART	[48CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D8, 0x0061 };
    uint32_t const ces[9] = { 0x48CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_137)
{
    // 100D8 0041;	
    // (êÉò) LINEAR B IDEOGRAM B254 DART	[48CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D8, 0x0041 };
    uint32_t const ces[9] = { 0x48CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_138)
{
    // 100D8 0062;	
    // (êÉò) LINEAR B IDEOGRAM B254 DART	[48CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D8, 0x0062 };
    uint32_t const ces[9] = { 0x48CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_139)
{
    // 100D9 0021;	
    // (êÉô) LINEAR B IDEOGRAM B255	[48CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D9, 0x0021 };
    uint32_t const ces[9] = { 0x48CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_140)
{
    // 100D9 003F;	
    // (êÉô) LINEAR B IDEOGRAM B255	[48CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D9, 0x003F };
    uint32_t const ces[9] = { 0x48CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_141)
{
    // 100D9 0061;	
    // (êÉô) LINEAR B IDEOGRAM B255	[48CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D9, 0x0061 };
    uint32_t const ces[9] = { 0x48CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_142)
{
    // 100D9 0041;	
    // (êÉô) LINEAR B IDEOGRAM B255	[48CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100D9, 0x0041 };
    uint32_t const ces[9] = { 0x48CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_143)
{
    // 100D9 0062;	
    // (êÉô) LINEAR B IDEOGRAM B255	[48CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100D9, 0x0062 };
    uint32_t const ces[9] = { 0x48CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_144)
{
    // 100DA 0021;	
    // (êÉö) LINEAR B IDEOGRAM B256	[48D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DA, 0x0021 };
    uint32_t const ces[9] = { 0x48D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_145)
{
    // 100DA 003F;	
    // (êÉö) LINEAR B IDEOGRAM B256	[48D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DA, 0x003F };
    uint32_t const ces[9] = { 0x48D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_146)
{
    // 100DA 0061;	
    // (êÉö) LINEAR B IDEOGRAM B256	[48D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DA, 0x0061 };
    uint32_t const ces[9] = { 0x48D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_147)
{
    // 100DA 0041;	
    // (êÉö) LINEAR B IDEOGRAM B256	[48D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100DA, 0x0041 };
    uint32_t const ces[9] = { 0x48D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_148)
{
    // 100DA 0062;	
    // (êÉö) LINEAR B IDEOGRAM B256	[48D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DA, 0x0062 };
    uint32_t const ces[9] = { 0x48D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_149)
{
    // 100DB 0021;	
    // (êÉõ) LINEAR B IDEOGRAM B257	[48D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DB, 0x0021 };
    uint32_t const ces[9] = { 0x48D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_150)
{
    // 100DB 003F;	
    // (êÉõ) LINEAR B IDEOGRAM B257	[48D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DB, 0x003F };
    uint32_t const ces[9] = { 0x48D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_151)
{
    // 100DB 0061;	
    // (êÉõ) LINEAR B IDEOGRAM B257	[48D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DB, 0x0061 };
    uint32_t const ces[9] = { 0x48D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_152)
{
    // 100DB 0041;	
    // (êÉõ) LINEAR B IDEOGRAM B257	[48D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100DB, 0x0041 };
    uint32_t const ces[9] = { 0x48D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_153)
{
    // 100DB 0062;	
    // (êÉõ) LINEAR B IDEOGRAM B257	[48D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DB, 0x0062 };
    uint32_t const ces[9] = { 0x48D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_154)
{
    // 100DC 0021;	
    // (êÉú) LINEAR B IDEOGRAM B258	[48D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DC, 0x0021 };
    uint32_t const ces[9] = { 0x48D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_155)
{
    // 100DC 003F;	
    // (êÉú) LINEAR B IDEOGRAM B258	[48D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DC, 0x003F };
    uint32_t const ces[9] = { 0x48D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_156)
{
    // 100DC 0061;	
    // (êÉú) LINEAR B IDEOGRAM B258	[48D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DC, 0x0061 };
    uint32_t const ces[9] = { 0x48D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_157)
{
    // 100DC 0041;	
    // (êÉú) LINEAR B IDEOGRAM B258	[48D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100DC, 0x0041 };
    uint32_t const ces[9] = { 0x48D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_158)
{
    // 100DC 0062;	
    // (êÉú) LINEAR B IDEOGRAM B258	[48D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DC, 0x0062 };
    uint32_t const ces[9] = { 0x48D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_159)
{
    // 100DD 0021;	
    // (êÉù) LINEAR B IDEOGRAM B259	[48D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DD, 0x0021 };
    uint32_t const ces[9] = { 0x48D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_160)
{
    // 100DD 003F;	
    // (êÉù) LINEAR B IDEOGRAM B259	[48D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DD, 0x003F };
    uint32_t const ces[9] = { 0x48D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_161)
{
    // 100DD 0061;	
    // (êÉù) LINEAR B IDEOGRAM B259	[48D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DD, 0x0061 };
    uint32_t const ces[9] = { 0x48D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_162)
{
    // 100DD 0041;	
    // (êÉù) LINEAR B IDEOGRAM B259	[48D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100DD, 0x0041 };
    uint32_t const ces[9] = { 0x48D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_163)
{
    // 100DD 0062;	
    // (êÉù) LINEAR B IDEOGRAM B259	[48D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DD, 0x0062 };
    uint32_t const ces[9] = { 0x48D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_164)
{
    // 100DE 0021;	
    // (êÉû) LINEAR B IDEOGRAM VESSEL B155	[48D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DE, 0x0021 };
    uint32_t const ces[9] = { 0x48D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_165)
{
    // 100DE 003F;	
    // (êÉû) LINEAR B IDEOGRAM VESSEL B155	[48D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DE, 0x003F };
    uint32_t const ces[9] = { 0x48D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_166)
{
    // 100DE 0061;	
    // (êÉû) LINEAR B IDEOGRAM VESSEL B155	[48D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DE, 0x0061 };
    uint32_t const ces[9] = { 0x48D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_167)
{
    // 100DE 0041;	
    // (êÉû) LINEAR B IDEOGRAM VESSEL B155	[48D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100DE, 0x0041 };
    uint32_t const ces[9] = { 0x48D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_168)
{
    // 100DE 0062;	
    // (êÉû) LINEAR B IDEOGRAM VESSEL B155	[48D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DE, 0x0062 };
    uint32_t const ces[9] = { 0x48D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_169)
{
    // 100DF 0021;	
    // (êÉü) LINEAR B IDEOGRAM VESSEL B200	[48D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DF, 0x0021 };
    uint32_t const ces[9] = { 0x48D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_170)
{
    // 100DF 003F;	
    // (êÉü) LINEAR B IDEOGRAM VESSEL B200	[48D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DF, 0x003F };
    uint32_t const ces[9] = { 0x48D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_171)
{
    // 100DF 0061;	
    // (êÉü) LINEAR B IDEOGRAM VESSEL B200	[48D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DF, 0x0061 };
    uint32_t const ces[9] = { 0x48D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_172)
{
    // 100DF 0041;	
    // (êÉü) LINEAR B IDEOGRAM VESSEL B200	[48D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100DF, 0x0041 };
    uint32_t const ces[9] = { 0x48D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_173)
{
    // 100DF 0062;	
    // (êÉü) LINEAR B IDEOGRAM VESSEL B200	[48D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100DF, 0x0062 };
    uint32_t const ces[9] = { 0x48D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_174)
{
    // 100E0 0021;	
    // (êÉ†) LINEAR B IDEOGRAM VESSEL B201	[48D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E0, 0x0021 };
    uint32_t const ces[9] = { 0x48D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_175)
{
    // 100E0 003F;	
    // (êÉ†) LINEAR B IDEOGRAM VESSEL B201	[48D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E0, 0x003F };
    uint32_t const ces[9] = { 0x48D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_176)
{
    // 100E0 0061;	
    // (êÉ†) LINEAR B IDEOGRAM VESSEL B201	[48D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E0, 0x0061 };
    uint32_t const ces[9] = { 0x48D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_177)
{
    // 100E0 0041;	
    // (êÉ†) LINEAR B IDEOGRAM VESSEL B201	[48D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E0, 0x0041 };
    uint32_t const ces[9] = { 0x48D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_178)
{
    // 100E0 0062;	
    // (êÉ†) LINEAR B IDEOGRAM VESSEL B201	[48D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E0, 0x0062 };
    uint32_t const ces[9] = { 0x48D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_179)
{
    // 100E1 0021;	
    // (êÉ°) LINEAR B IDEOGRAM VESSEL B202	[48D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E1, 0x0021 };
    uint32_t const ces[9] = { 0x48D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_180)
{
    // 100E1 003F;	
    // (êÉ°) LINEAR B IDEOGRAM VESSEL B202	[48D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E1, 0x003F };
    uint32_t const ces[9] = { 0x48D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_181)
{
    // 100E1 0061;	
    // (êÉ°) LINEAR B IDEOGRAM VESSEL B202	[48D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E1, 0x0061 };
    uint32_t const ces[9] = { 0x48D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_182)
{
    // 100E1 0041;	
    // (êÉ°) LINEAR B IDEOGRAM VESSEL B202	[48D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E1, 0x0041 };
    uint32_t const ces[9] = { 0x48D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_183)
{
    // 100E1 0062;	
    // (êÉ°) LINEAR B IDEOGRAM VESSEL B202	[48D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E1, 0x0062 };
    uint32_t const ces[9] = { 0x48D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_184)
{
    // 100E2 0021;	
    // (êÉ¢) LINEAR B IDEOGRAM VESSEL B203	[48D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E2, 0x0021 };
    uint32_t const ces[9] = { 0x48D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_185)
{
    // 100E2 003F;	
    // (êÉ¢) LINEAR B IDEOGRAM VESSEL B203	[48D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E2, 0x003F };
    uint32_t const ces[9] = { 0x48D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_186)
{
    // 100E2 0061;	
    // (êÉ¢) LINEAR B IDEOGRAM VESSEL B203	[48D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E2, 0x0061 };
    uint32_t const ces[9] = { 0x48D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_187)
{
    // 100E2 0041;	
    // (êÉ¢) LINEAR B IDEOGRAM VESSEL B203	[48D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E2, 0x0041 };
    uint32_t const ces[9] = { 0x48D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_188)
{
    // 100E2 0062;	
    // (êÉ¢) LINEAR B IDEOGRAM VESSEL B203	[48D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E2, 0x0062 };
    uint32_t const ces[9] = { 0x48D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_189)
{
    // 100E3 0021;	
    // (êÉ£) LINEAR B IDEOGRAM VESSEL B204	[48D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E3, 0x0021 };
    uint32_t const ces[9] = { 0x48D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_190)
{
    // 100E3 003F;	
    // (êÉ£) LINEAR B IDEOGRAM VESSEL B204	[48D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E3, 0x003F };
    uint32_t const ces[9] = { 0x48D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_191)
{
    // 100E3 0061;	
    // (êÉ£) LINEAR B IDEOGRAM VESSEL B204	[48D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E3, 0x0061 };
    uint32_t const ces[9] = { 0x48D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_192)
{
    // 100E3 0041;	
    // (êÉ£) LINEAR B IDEOGRAM VESSEL B204	[48D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E3, 0x0041 };
    uint32_t const ces[9] = { 0x48D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_193)
{
    // 100E3 0062;	
    // (êÉ£) LINEAR B IDEOGRAM VESSEL B204	[48D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E3, 0x0062 };
    uint32_t const ces[9] = { 0x48D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_194)
{
    // 100E4 0021;	
    // (êÉ§) LINEAR B IDEOGRAM VESSEL B205	[48DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E4, 0x0021 };
    uint32_t const ces[9] = { 0x48DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_195)
{
    // 100E4 003F;	
    // (êÉ§) LINEAR B IDEOGRAM VESSEL B205	[48DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E4, 0x003F };
    uint32_t const ces[9] = { 0x48DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_196)
{
    // 100E4 0061;	
    // (êÉ§) LINEAR B IDEOGRAM VESSEL B205	[48DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E4, 0x0061 };
    uint32_t const ces[9] = { 0x48DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_197)
{
    // 100E4 0041;	
    // (êÉ§) LINEAR B IDEOGRAM VESSEL B205	[48DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E4, 0x0041 };
    uint32_t const ces[9] = { 0x48DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_198)
{
    // 100E4 0062;	
    // (êÉ§) LINEAR B IDEOGRAM VESSEL B205	[48DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E4, 0x0062 };
    uint32_t const ces[9] = { 0x48DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_199)
{
    // 100E5 0021;	
    // (êÉ•) LINEAR B IDEOGRAM VESSEL B206	[48DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E5, 0x0021 };
    uint32_t const ces[9] = { 0x48DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_200)
{
    // 100E5 003F;	
    // (êÉ•) LINEAR B IDEOGRAM VESSEL B206	[48DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E5, 0x003F };
    uint32_t const ces[9] = { 0x48DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_201)
{
    // 100E5 0061;	
    // (êÉ•) LINEAR B IDEOGRAM VESSEL B206	[48DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E5, 0x0061 };
    uint32_t const ces[9] = { 0x48DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_202)
{
    // 100E5 0041;	
    // (êÉ•) LINEAR B IDEOGRAM VESSEL B206	[48DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E5, 0x0041 };
    uint32_t const ces[9] = { 0x48DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_203)
{
    // 100E5 0062;	
    // (êÉ•) LINEAR B IDEOGRAM VESSEL B206	[48DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E5, 0x0062 };
    uint32_t const ces[9] = { 0x48DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_204)
{
    // 100E6 0021;	
    // (êÉ¶) LINEAR B IDEOGRAM VESSEL B207	[48DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E6, 0x0021 };
    uint32_t const ces[9] = { 0x48DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_205)
{
    // 100E6 003F;	
    // (êÉ¶) LINEAR B IDEOGRAM VESSEL B207	[48DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E6, 0x003F };
    uint32_t const ces[9] = { 0x48DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_206)
{
    // 100E6 0061;	
    // (êÉ¶) LINEAR B IDEOGRAM VESSEL B207	[48DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E6, 0x0061 };
    uint32_t const ces[9] = { 0x48DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_207)
{
    // 100E6 0041;	
    // (êÉ¶) LINEAR B IDEOGRAM VESSEL B207	[48DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E6, 0x0041 };
    uint32_t const ces[9] = { 0x48DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_208)
{
    // 100E6 0062;	
    // (êÉ¶) LINEAR B IDEOGRAM VESSEL B207	[48DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E6, 0x0062 };
    uint32_t const ces[9] = { 0x48DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_209)
{
    // 100E7 0021;	
    // (êÉß) LINEAR B IDEOGRAM VESSEL B208	[48DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E7, 0x0021 };
    uint32_t const ces[9] = { 0x48DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_210)
{
    // 100E7 003F;	
    // (êÉß) LINEAR B IDEOGRAM VESSEL B208	[48DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E7, 0x003F };
    uint32_t const ces[9] = { 0x48DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_211)
{
    // 100E7 0061;	
    // (êÉß) LINEAR B IDEOGRAM VESSEL B208	[48DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E7, 0x0061 };
    uint32_t const ces[9] = { 0x48DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_212)
{
    // 100E7 0041;	
    // (êÉß) LINEAR B IDEOGRAM VESSEL B208	[48DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E7, 0x0041 };
    uint32_t const ces[9] = { 0x48DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_213)
{
    // 100E7 0062;	
    // (êÉß) LINEAR B IDEOGRAM VESSEL B208	[48DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E7, 0x0062 };
    uint32_t const ces[9] = { 0x48DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_214)
{
    // 100E8 0021;	
    // (êÉ®) LINEAR B IDEOGRAM VESSEL B209	[48DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E8, 0x0021 };
    uint32_t const ces[9] = { 0x48DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_215)
{
    // 100E8 003F;	
    // (êÉ®) LINEAR B IDEOGRAM VESSEL B209	[48DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E8, 0x003F };
    uint32_t const ces[9] = { 0x48DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_216)
{
    // 100E8 0061;	
    // (êÉ®) LINEAR B IDEOGRAM VESSEL B209	[48DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E8, 0x0061 };
    uint32_t const ces[9] = { 0x48DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_217)
{
    // 100E8 0041;	
    // (êÉ®) LINEAR B IDEOGRAM VESSEL B209	[48DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E8, 0x0041 };
    uint32_t const ces[9] = { 0x48DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_218)
{
    // 100E8 0062;	
    // (êÉ®) LINEAR B IDEOGRAM VESSEL B209	[48DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E8, 0x0062 };
    uint32_t const ces[9] = { 0x48DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_219)
{
    // 100E9 0021;	
    // (êÉ©) LINEAR B IDEOGRAM VESSEL B210	[48DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E9, 0x0021 };
    uint32_t const ces[9] = { 0x48DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_220)
{
    // 100E9 003F;	
    // (êÉ©) LINEAR B IDEOGRAM VESSEL B210	[48DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E9, 0x003F };
    uint32_t const ces[9] = { 0x48DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_221)
{
    // 100E9 0061;	
    // (êÉ©) LINEAR B IDEOGRAM VESSEL B210	[48DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E9, 0x0061 };
    uint32_t const ces[9] = { 0x48DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_222)
{
    // 100E9 0041;	
    // (êÉ©) LINEAR B IDEOGRAM VESSEL B210	[48DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100E9, 0x0041 };
    uint32_t const ces[9] = { 0x48DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_223)
{
    // 100E9 0062;	
    // (êÉ©) LINEAR B IDEOGRAM VESSEL B210	[48DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100E9, 0x0062 };
    uint32_t const ces[9] = { 0x48DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_224)
{
    // 100EA 0021;	
    // (êÉ™) LINEAR B IDEOGRAM VESSEL B211	[48E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EA, 0x0021 };
    uint32_t const ces[9] = { 0x48E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_225)
{
    // 100EA 003F;	
    // (êÉ™) LINEAR B IDEOGRAM VESSEL B211	[48E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EA, 0x003F };
    uint32_t const ces[9] = { 0x48E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_226)
{
    // 100EA 0061;	
    // (êÉ™) LINEAR B IDEOGRAM VESSEL B211	[48E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EA, 0x0061 };
    uint32_t const ces[9] = { 0x48E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_227)
{
    // 100EA 0041;	
    // (êÉ™) LINEAR B IDEOGRAM VESSEL B211	[48E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100EA, 0x0041 };
    uint32_t const ces[9] = { 0x48E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_228)
{
    // 100EA 0062;	
    // (êÉ™) LINEAR B IDEOGRAM VESSEL B211	[48E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EA, 0x0062 };
    uint32_t const ces[9] = { 0x48E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_229)
{
    // 100EB 0021;	
    // (êÉ´) LINEAR B IDEOGRAM VESSEL B212	[48E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EB, 0x0021 };
    uint32_t const ces[9] = { 0x48E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_230)
{
    // 100EB 003F;	
    // (êÉ´) LINEAR B IDEOGRAM VESSEL B212	[48E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EB, 0x003F };
    uint32_t const ces[9] = { 0x48E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_231)
{
    // 100EB 0061;	
    // (êÉ´) LINEAR B IDEOGRAM VESSEL B212	[48E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EB, 0x0061 };
    uint32_t const ces[9] = { 0x48E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_232)
{
    // 100EB 0041;	
    // (êÉ´) LINEAR B IDEOGRAM VESSEL B212	[48E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100EB, 0x0041 };
    uint32_t const ces[9] = { 0x48E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_233)
{
    // 100EB 0062;	
    // (êÉ´) LINEAR B IDEOGRAM VESSEL B212	[48E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EB, 0x0062 };
    uint32_t const ces[9] = { 0x48E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_234)
{
    // 100EC 0021;	
    // (êÉ¨) LINEAR B IDEOGRAM VESSEL B213	[48E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EC, 0x0021 };
    uint32_t const ces[9] = { 0x48E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_235)
{
    // 100EC 003F;	
    // (êÉ¨) LINEAR B IDEOGRAM VESSEL B213	[48E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EC, 0x003F };
    uint32_t const ces[9] = { 0x48E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_236)
{
    // 100EC 0061;	
    // (êÉ¨) LINEAR B IDEOGRAM VESSEL B213	[48E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EC, 0x0061 };
    uint32_t const ces[9] = { 0x48E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_237)
{
    // 100EC 0041;	
    // (êÉ¨) LINEAR B IDEOGRAM VESSEL B213	[48E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100EC, 0x0041 };
    uint32_t const ces[9] = { 0x48E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_238)
{
    // 100EC 0062;	
    // (êÉ¨) LINEAR B IDEOGRAM VESSEL B213	[48E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EC, 0x0062 };
    uint32_t const ces[9] = { 0x48E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_239)
{
    // 100ED 0021;	
    // (êÉ≠) LINEAR B IDEOGRAM VESSEL B214	[48E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100ED, 0x0021 };
    uint32_t const ces[9] = { 0x48E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_240)
{
    // 100ED 003F;	
    // (êÉ≠) LINEAR B IDEOGRAM VESSEL B214	[48E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100ED, 0x003F };
    uint32_t const ces[9] = { 0x48E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_241)
{
    // 100ED 0061;	
    // (êÉ≠) LINEAR B IDEOGRAM VESSEL B214	[48E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100ED, 0x0061 };
    uint32_t const ces[9] = { 0x48E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_242)
{
    // 100ED 0041;	
    // (êÉ≠) LINEAR B IDEOGRAM VESSEL B214	[48E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100ED, 0x0041 };
    uint32_t const ces[9] = { 0x48E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_243)
{
    // 100ED 0062;	
    // (êÉ≠) LINEAR B IDEOGRAM VESSEL B214	[48E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100ED, 0x0062 };
    uint32_t const ces[9] = { 0x48E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_244)
{
    // 100EE 0021;	
    // (êÉÆ) LINEAR B IDEOGRAM VESSEL B215	[48E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EE, 0x0021 };
    uint32_t const ces[9] = { 0x48E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_245)
{
    // 100EE 003F;	
    // (êÉÆ) LINEAR B IDEOGRAM VESSEL B215	[48E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EE, 0x003F };
    uint32_t const ces[9] = { 0x48E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_246)
{
    // 100EE 0061;	
    // (êÉÆ) LINEAR B IDEOGRAM VESSEL B215	[48E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EE, 0x0061 };
    uint32_t const ces[9] = { 0x48E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_247)
{
    // 100EE 0041;	
    // (êÉÆ) LINEAR B IDEOGRAM VESSEL B215	[48E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100EE, 0x0041 };
    uint32_t const ces[9] = { 0x48E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_248)
{
    // 100EE 0062;	
    // (êÉÆ) LINEAR B IDEOGRAM VESSEL B215	[48E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EE, 0x0062 };
    uint32_t const ces[9] = { 0x48E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_249)
{
    // 100EF 0021;	
    // (êÉØ) LINEAR B IDEOGRAM VESSEL B216	[48E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EF, 0x0021 };
    uint32_t const ces[9] = { 0x48E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_250)
{
    // 100EF 003F;	
    // (êÉØ) LINEAR B IDEOGRAM VESSEL B216	[48E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EF, 0x003F };
    uint32_t const ces[9] = { 0x48E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_251)
{
    // 100EF 0061;	
    // (êÉØ) LINEAR B IDEOGRAM VESSEL B216	[48E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EF, 0x0061 };
    uint32_t const ces[9] = { 0x48E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_252)
{
    // 100EF 0041;	
    // (êÉØ) LINEAR B IDEOGRAM VESSEL B216	[48E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100EF, 0x0041 };
    uint32_t const ces[9] = { 0x48E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_253)
{
    // 100EF 0062;	
    // (êÉØ) LINEAR B IDEOGRAM VESSEL B216	[48E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100EF, 0x0062 };
    uint32_t const ces[9] = { 0x48E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_254)
{
    // 100F0 0021;	
    // (êÉ∞) LINEAR B IDEOGRAM VESSEL B217	[48E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F0, 0x0021 };
    uint32_t const ces[9] = { 0x48E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_255)
{
    // 100F0 003F;	
    // (êÉ∞) LINEAR B IDEOGRAM VESSEL B217	[48E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F0, 0x003F };
    uint32_t const ces[9] = { 0x48E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_256)
{
    // 100F0 0061;	
    // (êÉ∞) LINEAR B IDEOGRAM VESSEL B217	[48E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F0, 0x0061 };
    uint32_t const ces[9] = { 0x48E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_257)
{
    // 100F0 0041;	
    // (êÉ∞) LINEAR B IDEOGRAM VESSEL B217	[48E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F0, 0x0041 };
    uint32_t const ces[9] = { 0x48E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_258)
{
    // 100F0 0062;	
    // (êÉ∞) LINEAR B IDEOGRAM VESSEL B217	[48E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F0, 0x0062 };
    uint32_t const ces[9] = { 0x48E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_259)
{
    // 100F1 0021;	
    // (êÉ±) LINEAR B IDEOGRAM VESSEL B218	[48E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F1, 0x0021 };
    uint32_t const ces[9] = { 0x48E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_260)
{
    // 100F1 003F;	
    // (êÉ±) LINEAR B IDEOGRAM VESSEL B218	[48E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F1, 0x003F };
    uint32_t const ces[9] = { 0x48E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_261)
{
    // 100F1 0061;	
    // (êÉ±) LINEAR B IDEOGRAM VESSEL B218	[48E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F1, 0x0061 };
    uint32_t const ces[9] = { 0x48E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_262)
{
    // 100F1 0041;	
    // (êÉ±) LINEAR B IDEOGRAM VESSEL B218	[48E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F1, 0x0041 };
    uint32_t const ces[9] = { 0x48E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_263)
{
    // 100F1 0062;	
    // (êÉ±) LINEAR B IDEOGRAM VESSEL B218	[48E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F1, 0x0062 };
    uint32_t const ces[9] = { 0x48E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_264)
{
    // 100F2 0021;	
    // (êÉ≤) LINEAR B IDEOGRAM VESSEL B219	[48E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F2, 0x0021 };
    uint32_t const ces[9] = { 0x48E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_265)
{
    // 100F2 003F;	
    // (êÉ≤) LINEAR B IDEOGRAM VESSEL B219	[48E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F2, 0x003F };
    uint32_t const ces[9] = { 0x48E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_266)
{
    // 100F2 0061;	
    // (êÉ≤) LINEAR B IDEOGRAM VESSEL B219	[48E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F2, 0x0061 };
    uint32_t const ces[9] = { 0x48E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_267)
{
    // 100F2 0041;	
    // (êÉ≤) LINEAR B IDEOGRAM VESSEL B219	[48E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F2, 0x0041 };
    uint32_t const ces[9] = { 0x48E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_268)
{
    // 100F2 0062;	
    // (êÉ≤) LINEAR B IDEOGRAM VESSEL B219	[48E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F2, 0x0062 };
    uint32_t const ces[9] = { 0x48E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_269)
{
    // 100F3 0021;	
    // (êÉ≥) LINEAR B IDEOGRAM VESSEL B221	[48E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F3, 0x0021 };
    uint32_t const ces[9] = { 0x48E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_270)
{
    // 100F3 003F;	
    // (êÉ≥) LINEAR B IDEOGRAM VESSEL B221	[48E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F3, 0x003F };
    uint32_t const ces[9] = { 0x48E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_271)
{
    // 100F3 0061;	
    // (êÉ≥) LINEAR B IDEOGRAM VESSEL B221	[48E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F3, 0x0061 };
    uint32_t const ces[9] = { 0x48E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_272)
{
    // 100F3 0041;	
    // (êÉ≥) LINEAR B IDEOGRAM VESSEL B221	[48E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F3, 0x0041 };
    uint32_t const ces[9] = { 0x48E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_273)
{
    // 100F3 0062;	
    // (êÉ≥) LINEAR B IDEOGRAM VESSEL B221	[48E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F3, 0x0062 };
    uint32_t const ces[9] = { 0x48E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_274)
{
    // 100F4 0021;	
    // (êÉ¥) LINEAR B IDEOGRAM VESSEL B222	[48EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F4, 0x0021 };
    uint32_t const ces[9] = { 0x48EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_275)
{
    // 100F4 003F;	
    // (êÉ¥) LINEAR B IDEOGRAM VESSEL B222	[48EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F4, 0x003F };
    uint32_t const ces[9] = { 0x48EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_276)
{
    // 100F4 0061;	
    // (êÉ¥) LINEAR B IDEOGRAM VESSEL B222	[48EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F4, 0x0061 };
    uint32_t const ces[9] = { 0x48EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_277)
{
    // 100F4 0041;	
    // (êÉ¥) LINEAR B IDEOGRAM VESSEL B222	[48EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F4, 0x0041 };
    uint32_t const ces[9] = { 0x48EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_278)
{
    // 100F4 0062;	
    // (êÉ¥) LINEAR B IDEOGRAM VESSEL B222	[48EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F4, 0x0062 };
    uint32_t const ces[9] = { 0x48EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_279)
{
    // 100F5 0021;	
    // (êÉµ) LINEAR B IDEOGRAM VESSEL B226	[48EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F5, 0x0021 };
    uint32_t const ces[9] = { 0x48EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_280)
{
    // 100F5 003F;	
    // (êÉµ) LINEAR B IDEOGRAM VESSEL B226	[48EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F5, 0x003F };
    uint32_t const ces[9] = { 0x48EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_281)
{
    // 100F5 0061;	
    // (êÉµ) LINEAR B IDEOGRAM VESSEL B226	[48EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F5, 0x0061 };
    uint32_t const ces[9] = { 0x48EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_282)
{
    // 100F5 0041;	
    // (êÉµ) LINEAR B IDEOGRAM VESSEL B226	[48EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F5, 0x0041 };
    uint32_t const ces[9] = { 0x48EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_283)
{
    // 100F5 0062;	
    // (êÉµ) LINEAR B IDEOGRAM VESSEL B226	[48EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F5, 0x0062 };
    uint32_t const ces[9] = { 0x48EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_284)
{
    // 100F6 0021;	
    // (êÉ∂) LINEAR B IDEOGRAM VESSEL B227	[48EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F6, 0x0021 };
    uint32_t const ces[9] = { 0x48EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_285)
{
    // 100F6 003F;	
    // (êÉ∂) LINEAR B IDEOGRAM VESSEL B227	[48EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F6, 0x003F };
    uint32_t const ces[9] = { 0x48EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_286)
{
    // 100F6 0061;	
    // (êÉ∂) LINEAR B IDEOGRAM VESSEL B227	[48EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F6, 0x0061 };
    uint32_t const ces[9] = { 0x48EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_287)
{
    // 100F6 0041;	
    // (êÉ∂) LINEAR B IDEOGRAM VESSEL B227	[48EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F6, 0x0041 };
    uint32_t const ces[9] = { 0x48EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_288)
{
    // 100F6 0062;	
    // (êÉ∂) LINEAR B IDEOGRAM VESSEL B227	[48EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F6, 0x0062 };
    uint32_t const ces[9] = { 0x48EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_289)
{
    // 100F7 0021;	
    // (êÉ∑) LINEAR B IDEOGRAM VESSEL B228	[48ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F7, 0x0021 };
    uint32_t const ces[9] = { 0x48ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_290)
{
    // 100F7 003F;	
    // (êÉ∑) LINEAR B IDEOGRAM VESSEL B228	[48ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F7, 0x003F };
    uint32_t const ces[9] = { 0x48ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_291)
{
    // 100F7 0061;	
    // (êÉ∑) LINEAR B IDEOGRAM VESSEL B228	[48ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F7, 0x0061 };
    uint32_t const ces[9] = { 0x48ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_292)
{
    // 100F7 0041;	
    // (êÉ∑) LINEAR B IDEOGRAM VESSEL B228	[48ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F7, 0x0041 };
    uint32_t const ces[9] = { 0x48ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_293)
{
    // 100F7 0062;	
    // (êÉ∑) LINEAR B IDEOGRAM VESSEL B228	[48ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F7, 0x0062 };
    uint32_t const ces[9] = { 0x48ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_294)
{
    // 100F8 0021;	
    // (êÉ∏) LINEAR B IDEOGRAM VESSEL B229	[48EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F8, 0x0021 };
    uint32_t const ces[9] = { 0x48EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_295)
{
    // 100F8 003F;	
    // (êÉ∏) LINEAR B IDEOGRAM VESSEL B229	[48EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F8, 0x003F };
    uint32_t const ces[9] = { 0x48EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_296)
{
    // 100F8 0061;	
    // (êÉ∏) LINEAR B IDEOGRAM VESSEL B229	[48EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F8, 0x0061 };
    uint32_t const ces[9] = { 0x48EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_297)
{
    // 100F8 0041;	
    // (êÉ∏) LINEAR B IDEOGRAM VESSEL B229	[48EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F8, 0x0041 };
    uint32_t const ces[9] = { 0x48EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_298)
{
    // 100F8 0062;	
    // (êÉ∏) LINEAR B IDEOGRAM VESSEL B229	[48EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F8, 0x0062 };
    uint32_t const ces[9] = { 0x48EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_299)
{
    // 100F9 0021;	
    // (êÉπ) LINEAR B IDEOGRAM VESSEL B250	[48EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F9, 0x0021 };
    uint32_t const ces[9] = { 0x48EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_300)
{
    // 100F9 003F;	
    // (êÉπ) LINEAR B IDEOGRAM VESSEL B250	[48EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F9, 0x003F };
    uint32_t const ces[9] = { 0x48EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_301)
{
    // 100F9 0061;	
    // (êÉπ) LINEAR B IDEOGRAM VESSEL B250	[48EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F9, 0x0061 };
    uint32_t const ces[9] = { 0x48EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_302)
{
    // 100F9 0041;	
    // (êÉπ) LINEAR B IDEOGRAM VESSEL B250	[48EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100F9, 0x0041 };
    uint32_t const ces[9] = { 0x48EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_303)
{
    // 100F9 0062;	
    // (êÉπ) LINEAR B IDEOGRAM VESSEL B250	[48EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100F9, 0x0062 };
    uint32_t const ces[9] = { 0x48EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_304)
{
    // 100FA 0021;	
    // (êÉ∫) LINEAR B IDEOGRAM VESSEL B305	[48F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100FA, 0x0021 };
    uint32_t const ces[9] = { 0x48F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_305)
{
    // 100FA 003F;	
    // (êÉ∫) LINEAR B IDEOGRAM VESSEL B305	[48F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100FA, 0x003F };
    uint32_t const ces[9] = { 0x48F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_306)
{
    // 100FA 0061;	
    // (êÉ∫) LINEAR B IDEOGRAM VESSEL B305	[48F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100FA, 0x0061 };
    uint32_t const ces[9] = { 0x48F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_307)
{
    // 100FA 0041;	
    // (êÉ∫) LINEAR B IDEOGRAM VESSEL B305	[48F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100FA, 0x0041 };
    uint32_t const ces[9] = { 0x48F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_308)
{
    // 100FA 0062;	
    // (êÉ∫) LINEAR B IDEOGRAM VESSEL B305	[48F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100FA, 0x0062 };
    uint32_t const ces[9] = { 0x48F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_309)
{
    // 10600 0021;	
    // (êòÄ) LINEAR A SIGN AB001	[48F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10600, 0x0021 };
    uint32_t const ces[9] = { 0x48F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_310)
{
    // 10600 003F;	
    // (êòÄ) LINEAR A SIGN AB001	[48F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10600, 0x003F };
    uint32_t const ces[9] = { 0x48F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_311)
{
    // 10600 0061;	
    // (êòÄ) LINEAR A SIGN AB001	[48F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10600, 0x0061 };
    uint32_t const ces[9] = { 0x48F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_312)
{
    // 10600 0041;	
    // (êòÄ) LINEAR A SIGN AB001	[48F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10600, 0x0041 };
    uint32_t const ces[9] = { 0x48F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_313)
{
    // 10600 0062;	
    // (êòÄ) LINEAR A SIGN AB001	[48F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10600, 0x0062 };
    uint32_t const ces[9] = { 0x48F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_314)
{
    // 10601 0021;	
    // (êòÅ) LINEAR A SIGN AB002	[48F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10601, 0x0021 };
    uint32_t const ces[9] = { 0x48F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_315)
{
    // 10601 003F;	
    // (êòÅ) LINEAR A SIGN AB002	[48F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10601, 0x003F };
    uint32_t const ces[9] = { 0x48F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_316)
{
    // 10601 0061;	
    // (êòÅ) LINEAR A SIGN AB002	[48F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10601, 0x0061 };
    uint32_t const ces[9] = { 0x48F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_317)
{
    // 10601 0041;	
    // (êòÅ) LINEAR A SIGN AB002	[48F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10601, 0x0041 };
    uint32_t const ces[9] = { 0x48F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_318)
{
    // 10601 0062;	
    // (êòÅ) LINEAR A SIGN AB002	[48F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10601, 0x0062 };
    uint32_t const ces[9] = { 0x48F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_319)
{
    // 10602 0021;	
    // (êòÇ) LINEAR A SIGN AB003	[48F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10602, 0x0021 };
    uint32_t const ces[9] = { 0x48F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_320)
{
    // 10602 003F;	
    // (êòÇ) LINEAR A SIGN AB003	[48F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10602, 0x003F };
    uint32_t const ces[9] = { 0x48F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_321)
{
    // 10602 0061;	
    // (êòÇ) LINEAR A SIGN AB003	[48F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10602, 0x0061 };
    uint32_t const ces[9] = { 0x48F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_322)
{
    // 10602 0041;	
    // (êòÇ) LINEAR A SIGN AB003	[48F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10602, 0x0041 };
    uint32_t const ces[9] = { 0x48F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_323)
{
    // 10602 0062;	
    // (êòÇ) LINEAR A SIGN AB003	[48F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10602, 0x0062 };
    uint32_t const ces[9] = { 0x48F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_324)
{
    // 10603 0021;	
    // (êòÉ) LINEAR A SIGN AB004	[48F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10603, 0x0021 };
    uint32_t const ces[9] = { 0x48F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_325)
{
    // 10603 003F;	
    // (êòÉ) LINEAR A SIGN AB004	[48F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10603, 0x003F };
    uint32_t const ces[9] = { 0x48F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_326)
{
    // 10603 0061;	
    // (êòÉ) LINEAR A SIGN AB004	[48F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10603, 0x0061 };
    uint32_t const ces[9] = { 0x48F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_327)
{
    // 10603 0041;	
    // (êòÉ) LINEAR A SIGN AB004	[48F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10603, 0x0041 };
    uint32_t const ces[9] = { 0x48F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_328)
{
    // 10603 0062;	
    // (êòÉ) LINEAR A SIGN AB004	[48F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10603, 0x0062 };
    uint32_t const ces[9] = { 0x48F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_329)
{
    // 10604 0021;	
    // (êòÑ) LINEAR A SIGN AB005	[48F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10604, 0x0021 };
    uint32_t const ces[9] = { 0x48F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_330)
{
    // 10604 003F;	
    // (êòÑ) LINEAR A SIGN AB005	[48F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10604, 0x003F };
    uint32_t const ces[9] = { 0x48F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_331)
{
    // 10604 0061;	
    // (êòÑ) LINEAR A SIGN AB005	[48F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10604, 0x0061 };
    uint32_t const ces[9] = { 0x48F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_332)
{
    // 10604 0041;	
    // (êòÑ) LINEAR A SIGN AB005	[48F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10604, 0x0041 };
    uint32_t const ces[9] = { 0x48F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_333)
{
    // 10604 0062;	
    // (êòÑ) LINEAR A SIGN AB005	[48F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10604, 0x0062 };
    uint32_t const ces[9] = { 0x48F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_334)
{
    // 10605 0021;	
    // (êòÖ) LINEAR A SIGN AB006	[48F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10605, 0x0021 };
    uint32_t const ces[9] = { 0x48F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_335)
{
    // 10605 003F;	
    // (êòÖ) LINEAR A SIGN AB006	[48F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10605, 0x003F };
    uint32_t const ces[9] = { 0x48F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_336)
{
    // 10605 0061;	
    // (êòÖ) LINEAR A SIGN AB006	[48F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10605, 0x0061 };
    uint32_t const ces[9] = { 0x48F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_337)
{
    // 10605 0041;	
    // (êòÖ) LINEAR A SIGN AB006	[48F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10605, 0x0041 };
    uint32_t const ces[9] = { 0x48F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_338)
{
    // 10605 0062;	
    // (êòÖ) LINEAR A SIGN AB006	[48F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10605, 0x0062 };
    uint32_t const ces[9] = { 0x48F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_339)
{
    // 10606 0021;	
    // (êòÜ) LINEAR A SIGN AB007	[48F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10606, 0x0021 };
    uint32_t const ces[9] = { 0x48F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_340)
{
    // 10606 003F;	
    // (êòÜ) LINEAR A SIGN AB007	[48F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10606, 0x003F };
    uint32_t const ces[9] = { 0x48F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_341)
{
    // 10606 0061;	
    // (êòÜ) LINEAR A SIGN AB007	[48F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10606, 0x0061 };
    uint32_t const ces[9] = { 0x48F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_342)
{
    // 10606 0041;	
    // (êòÜ) LINEAR A SIGN AB007	[48F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10606, 0x0041 };
    uint32_t const ces[9] = { 0x48F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_343)
{
    // 10606 0062;	
    // (êòÜ) LINEAR A SIGN AB007	[48F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10606, 0x0062 };
    uint32_t const ces[9] = { 0x48F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_344)
{
    // 10607 0021;	
    // (êòá) LINEAR A SIGN AB008	[48F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10607, 0x0021 };
    uint32_t const ces[9] = { 0x48F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_345)
{
    // 10607 003F;	
    // (êòá) LINEAR A SIGN AB008	[48F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10607, 0x003F };
    uint32_t const ces[9] = { 0x48F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_346)
{
    // 10607 0061;	
    // (êòá) LINEAR A SIGN AB008	[48F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10607, 0x0061 };
    uint32_t const ces[9] = { 0x48F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_347)
{
    // 10607 0041;	
    // (êòá) LINEAR A SIGN AB008	[48F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10607, 0x0041 };
    uint32_t const ces[9] = { 0x48F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_348)
{
    // 10607 0062;	
    // (êòá) LINEAR A SIGN AB008	[48F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10607, 0x0062 };
    uint32_t const ces[9] = { 0x48F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_349)
{
    // 10608 0021;	
    // (êòà) LINEAR A SIGN AB009	[48F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10608, 0x0021 };
    uint32_t const ces[9] = { 0x48F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_350)
{
    // 10608 003F;	
    // (êòà) LINEAR A SIGN AB009	[48F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10608, 0x003F };
    uint32_t const ces[9] = { 0x48F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_351)
{
    // 10608 0061;	
    // (êòà) LINEAR A SIGN AB009	[48F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10608, 0x0061 };
    uint32_t const ces[9] = { 0x48F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_352)
{
    // 10608 0041;	
    // (êòà) LINEAR A SIGN AB009	[48F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10608, 0x0041 };
    uint32_t const ces[9] = { 0x48F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_353)
{
    // 10608 0062;	
    // (êòà) LINEAR A SIGN AB009	[48F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10608, 0x0062 };
    uint32_t const ces[9] = { 0x48F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_354)
{
    // 10609 0021;	
    // (êòâ) LINEAR A SIGN AB010	[48FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10609, 0x0021 };
    uint32_t const ces[9] = { 0x48FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_355)
{
    // 10609 003F;	
    // (êòâ) LINEAR A SIGN AB010	[48FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10609, 0x003F };
    uint32_t const ces[9] = { 0x48FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_356)
{
    // 10609 0061;	
    // (êòâ) LINEAR A SIGN AB010	[48FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10609, 0x0061 };
    uint32_t const ces[9] = { 0x48FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_357)
{
    // 10609 0041;	
    // (êòâ) LINEAR A SIGN AB010	[48FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10609, 0x0041 };
    uint32_t const ces[9] = { 0x48FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_358)
{
    // 10609 0062;	
    // (êòâ) LINEAR A SIGN AB010	[48FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10609, 0x0062 };
    uint32_t const ces[9] = { 0x48FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_359)
{
    // 1060A 0021;	
    // (êòä) LINEAR A SIGN AB011	[48FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060A, 0x0021 };
    uint32_t const ces[9] = { 0x48FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_360)
{
    // 1060A 003F;	
    // (êòä) LINEAR A SIGN AB011	[48FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060A, 0x003F };
    uint32_t const ces[9] = { 0x48FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_361)
{
    // 1060A 0061;	
    // (êòä) LINEAR A SIGN AB011	[48FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060A, 0x0061 };
    uint32_t const ces[9] = { 0x48FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_362)
{
    // 1060A 0041;	
    // (êòä) LINEAR A SIGN AB011	[48FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1060A, 0x0041 };
    uint32_t const ces[9] = { 0x48FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_363)
{
    // 1060A 0062;	
    // (êòä) LINEAR A SIGN AB011	[48FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060A, 0x0062 };
    uint32_t const ces[9] = { 0x48FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_364)
{
    // 1060B 0021;	
    // (êòã) LINEAR A SIGN AB013	[48FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060B, 0x0021 };
    uint32_t const ces[9] = { 0x48FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_365)
{
    // 1060B 003F;	
    // (êòã) LINEAR A SIGN AB013	[48FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060B, 0x003F };
    uint32_t const ces[9] = { 0x48FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_366)
{
    // 1060B 0061;	
    // (êòã) LINEAR A SIGN AB013	[48FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060B, 0x0061 };
    uint32_t const ces[9] = { 0x48FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_367)
{
    // 1060B 0041;	
    // (êòã) LINEAR A SIGN AB013	[48FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1060B, 0x0041 };
    uint32_t const ces[9] = { 0x48FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_368)
{
    // 1060B 0062;	
    // (êòã) LINEAR A SIGN AB013	[48FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060B, 0x0062 };
    uint32_t const ces[9] = { 0x48FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_369)
{
    // 1060C 0021;	
    // (êòå) LINEAR A SIGN AB016	[48FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060C, 0x0021 };
    uint32_t const ces[9] = { 0x48FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_370)
{
    // 1060C 003F;	
    // (êòå) LINEAR A SIGN AB016	[48FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060C, 0x003F };
    uint32_t const ces[9] = { 0x48FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_371)
{
    // 1060C 0061;	
    // (êòå) LINEAR A SIGN AB016	[48FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060C, 0x0061 };
    uint32_t const ces[9] = { 0x48FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_372)
{
    // 1060C 0041;	
    // (êòå) LINEAR A SIGN AB016	[48FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1060C, 0x0041 };
    uint32_t const ces[9] = { 0x48FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_373)
{
    // 1060C 0062;	
    // (êòå) LINEAR A SIGN AB016	[48FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060C, 0x0062 };
    uint32_t const ces[9] = { 0x48FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_374)
{
    // 1060D 0021;	
    // (êòç) LINEAR A SIGN AB017	[48FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060D, 0x0021 };
    uint32_t const ces[9] = { 0x48FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_375)
{
    // 1060D 003F;	
    // (êòç) LINEAR A SIGN AB017	[48FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060D, 0x003F };
    uint32_t const ces[9] = { 0x48FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_376)
{
    // 1060D 0061;	
    // (êòç) LINEAR A SIGN AB017	[48FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060D, 0x0061 };
    uint32_t const ces[9] = { 0x48FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_377)
{
    // 1060D 0041;	
    // (êòç) LINEAR A SIGN AB017	[48FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1060D, 0x0041 };
    uint32_t const ces[9] = { 0x48FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_378)
{
    // 1060D 0062;	
    // (êòç) LINEAR A SIGN AB017	[48FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060D, 0x0062 };
    uint32_t const ces[9] = { 0x48FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_379)
{
    // 1060E 0021;	
    // (êòé) LINEAR A SIGN AB020	[48FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060E, 0x0021 };
    uint32_t const ces[9] = { 0x48FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_380)
{
    // 1060E 003F;	
    // (êòé) LINEAR A SIGN AB020	[48FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060E, 0x003F };
    uint32_t const ces[9] = { 0x48FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_381)
{
    // 1060E 0061;	
    // (êòé) LINEAR A SIGN AB020	[48FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060E, 0x0061 };
    uint32_t const ces[9] = { 0x48FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_382)
{
    // 1060E 0041;	
    // (êòé) LINEAR A SIGN AB020	[48FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1060E, 0x0041 };
    uint32_t const ces[9] = { 0x48FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_383)
{
    // 1060E 0062;	
    // (êòé) LINEAR A SIGN AB020	[48FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060E, 0x0062 };
    uint32_t const ces[9] = { 0x48FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_384)
{
    // 1060F 0021;	
    // (êòè) LINEAR A SIGN AB021	[4900 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060F, 0x0021 };
    uint32_t const ces[9] = { 0x4900, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_385)
{
    // 1060F 003F;	
    // (êòè) LINEAR A SIGN AB021	[4900 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060F, 0x003F };
    uint32_t const ces[9] = { 0x4900, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_386)
{
    // 1060F 0061;	
    // (êòè) LINEAR A SIGN AB021	[4900 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060F, 0x0061 };
    uint32_t const ces[9] = { 0x4900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_387)
{
    // 1060F 0041;	
    // (êòè) LINEAR A SIGN AB021	[4900 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1060F, 0x0041 };
    uint32_t const ces[9] = { 0x4900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_388)
{
    // 1060F 0062;	
    // (êòè) LINEAR A SIGN AB021	[4900 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1060F, 0x0062 };
    uint32_t const ces[9] = { 0x4900, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_389)
{
    // 10610 0021;	
    // (êòê) LINEAR A SIGN AB021F	[4901 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10610, 0x0021 };
    uint32_t const ces[9] = { 0x4901, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_390)
{
    // 10610 003F;	
    // (êòê) LINEAR A SIGN AB021F	[4901 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10610, 0x003F };
    uint32_t const ces[9] = { 0x4901, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_391)
{
    // 10610 0061;	
    // (êòê) LINEAR A SIGN AB021F	[4901 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10610, 0x0061 };
    uint32_t const ces[9] = { 0x4901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_392)
{
    // 10610 0041;	
    // (êòê) LINEAR A SIGN AB021F	[4901 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10610, 0x0041 };
    uint32_t const ces[9] = { 0x4901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_393)
{
    // 10610 0062;	
    // (êòê) LINEAR A SIGN AB021F	[4901 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10610, 0x0062 };
    uint32_t const ces[9] = { 0x4901, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_394)
{
    // 10611 0021;	
    // (êòë) LINEAR A SIGN AB021M	[4902 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10611, 0x0021 };
    uint32_t const ces[9] = { 0x4902, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_395)
{
    // 10611 003F;	
    // (êòë) LINEAR A SIGN AB021M	[4902 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10611, 0x003F };
    uint32_t const ces[9] = { 0x4902, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_396)
{
    // 10611 0061;	
    // (êòë) LINEAR A SIGN AB021M	[4902 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10611, 0x0061 };
    uint32_t const ces[9] = { 0x4902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_397)
{
    // 10611 0041;	
    // (êòë) LINEAR A SIGN AB021M	[4902 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10611, 0x0041 };
    uint32_t const ces[9] = { 0x4902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_398)
{
    // 10611 0062;	
    // (êòë) LINEAR A SIGN AB021M	[4902 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10611, 0x0062 };
    uint32_t const ces[9] = { 0x4902, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_399)
{
    // 10612 0021;	
    // (êòí) LINEAR A SIGN AB022	[4903 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10612, 0x0021 };
    uint32_t const ces[9] = { 0x4903, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_400)
{
    // 10612 003F;	
    // (êòí) LINEAR A SIGN AB022	[4903 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10612, 0x003F };
    uint32_t const ces[9] = { 0x4903, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_401)
{
    // 10612 0061;	
    // (êòí) LINEAR A SIGN AB022	[4903 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10612, 0x0061 };
    uint32_t const ces[9] = { 0x4903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_402)
{
    // 10612 0041;	
    // (êòí) LINEAR A SIGN AB022	[4903 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10612, 0x0041 };
    uint32_t const ces[9] = { 0x4903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_403)
{
    // 10612 0062;	
    // (êòí) LINEAR A SIGN AB022	[4903 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10612, 0x0062 };
    uint32_t const ces[9] = { 0x4903, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_404)
{
    // 10613 0021;	
    // (êòì) LINEAR A SIGN AB022F	[4904 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10613, 0x0021 };
    uint32_t const ces[9] = { 0x4904, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_405)
{
    // 10613 003F;	
    // (êòì) LINEAR A SIGN AB022F	[4904 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10613, 0x003F };
    uint32_t const ces[9] = { 0x4904, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_406)
{
    // 10613 0061;	
    // (êòì) LINEAR A SIGN AB022F	[4904 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10613, 0x0061 };
    uint32_t const ces[9] = { 0x4904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_407)
{
    // 10613 0041;	
    // (êòì) LINEAR A SIGN AB022F	[4904 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10613, 0x0041 };
    uint32_t const ces[9] = { 0x4904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_408)
{
    // 10613 0062;	
    // (êòì) LINEAR A SIGN AB022F	[4904 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10613, 0x0062 };
    uint32_t const ces[9] = { 0x4904, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_409)
{
    // 10614 0021;	
    // (êòî) LINEAR A SIGN AB022M	[4905 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10614, 0x0021 };
    uint32_t const ces[9] = { 0x4905, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_410)
{
    // 10614 003F;	
    // (êòî) LINEAR A SIGN AB022M	[4905 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10614, 0x003F };
    uint32_t const ces[9] = { 0x4905, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_411)
{
    // 10614 0061;	
    // (êòî) LINEAR A SIGN AB022M	[4905 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10614, 0x0061 };
    uint32_t const ces[9] = { 0x4905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_412)
{
    // 10614 0041;	
    // (êòî) LINEAR A SIGN AB022M	[4905 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10614, 0x0041 };
    uint32_t const ces[9] = { 0x4905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_413)
{
    // 10614 0062;	
    // (êòî) LINEAR A SIGN AB022M	[4905 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10614, 0x0062 };
    uint32_t const ces[9] = { 0x4905, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_414)
{
    // 10615 0021;	
    // (êòï) LINEAR A SIGN AB023	[4906 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10615, 0x0021 };
    uint32_t const ces[9] = { 0x4906, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_415)
{
    // 10615 003F;	
    // (êòï) LINEAR A SIGN AB023	[4906 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10615, 0x003F };
    uint32_t const ces[9] = { 0x4906, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_416)
{
    // 10615 0061;	
    // (êòï) LINEAR A SIGN AB023	[4906 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10615, 0x0061 };
    uint32_t const ces[9] = { 0x4906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_417)
{
    // 10615 0041;	
    // (êòï) LINEAR A SIGN AB023	[4906 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10615, 0x0041 };
    uint32_t const ces[9] = { 0x4906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_418)
{
    // 10615 0062;	
    // (êòï) LINEAR A SIGN AB023	[4906 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10615, 0x0062 };
    uint32_t const ces[9] = { 0x4906, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_419)
{
    // 10616 0021;	
    // (êòñ) LINEAR A SIGN AB023M	[4907 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10616, 0x0021 };
    uint32_t const ces[9] = { 0x4907, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_420)
{
    // 10616 003F;	
    // (êòñ) LINEAR A SIGN AB023M	[4907 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10616, 0x003F };
    uint32_t const ces[9] = { 0x4907, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_421)
{
    // 10616 0061;	
    // (êòñ) LINEAR A SIGN AB023M	[4907 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10616, 0x0061 };
    uint32_t const ces[9] = { 0x4907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_422)
{
    // 10616 0041;	
    // (êòñ) LINEAR A SIGN AB023M	[4907 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10616, 0x0041 };
    uint32_t const ces[9] = { 0x4907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_423)
{
    // 10616 0062;	
    // (êòñ) LINEAR A SIGN AB023M	[4907 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10616, 0x0062 };
    uint32_t const ces[9] = { 0x4907, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_424)
{
    // 10617 0021;	
    // (êòó) LINEAR A SIGN AB024	[4908 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10617, 0x0021 };
    uint32_t const ces[9] = { 0x4908, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_425)
{
    // 10617 003F;	
    // (êòó) LINEAR A SIGN AB024	[4908 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10617, 0x003F };
    uint32_t const ces[9] = { 0x4908, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_426)
{
    // 10617 0061;	
    // (êòó) LINEAR A SIGN AB024	[4908 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10617, 0x0061 };
    uint32_t const ces[9] = { 0x4908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_427)
{
    // 10617 0041;	
    // (êòó) LINEAR A SIGN AB024	[4908 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10617, 0x0041 };
    uint32_t const ces[9] = { 0x4908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_428)
{
    // 10617 0062;	
    // (êòó) LINEAR A SIGN AB024	[4908 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10617, 0x0062 };
    uint32_t const ces[9] = { 0x4908, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_429)
{
    // 10618 0021;	
    // (êòò) LINEAR A SIGN AB026	[4909 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10618, 0x0021 };
    uint32_t const ces[9] = { 0x4909, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_430)
{
    // 10618 003F;	
    // (êòò) LINEAR A SIGN AB026	[4909 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10618, 0x003F };
    uint32_t const ces[9] = { 0x4909, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_431)
{
    // 10618 0061;	
    // (êòò) LINEAR A SIGN AB026	[4909 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10618, 0x0061 };
    uint32_t const ces[9] = { 0x4909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_432)
{
    // 10618 0041;	
    // (êòò) LINEAR A SIGN AB026	[4909 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10618, 0x0041 };
    uint32_t const ces[9] = { 0x4909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_433)
{
    // 10618 0062;	
    // (êòò) LINEAR A SIGN AB026	[4909 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10618, 0x0062 };
    uint32_t const ces[9] = { 0x4909, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_434)
{
    // 10619 0021;	
    // (êòô) LINEAR A SIGN AB027	[490A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10619, 0x0021 };
    uint32_t const ces[9] = { 0x490A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_435)
{
    // 10619 003F;	
    // (êòô) LINEAR A SIGN AB027	[490A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10619, 0x003F };
    uint32_t const ces[9] = { 0x490A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_436)
{
    // 10619 0061;	
    // (êòô) LINEAR A SIGN AB027	[490A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10619, 0x0061 };
    uint32_t const ces[9] = { 0x490A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_437)
{
    // 10619 0041;	
    // (êòô) LINEAR A SIGN AB027	[490A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10619, 0x0041 };
    uint32_t const ces[9] = { 0x490A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_438)
{
    // 10619 0062;	
    // (êòô) LINEAR A SIGN AB027	[490A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10619, 0x0062 };
    uint32_t const ces[9] = { 0x490A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_439)
{
    // 1061A 0021;	
    // (êòö) LINEAR A SIGN AB028	[490B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061A, 0x0021 };
    uint32_t const ces[9] = { 0x490B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_440)
{
    // 1061A 003F;	
    // (êòö) LINEAR A SIGN AB028	[490B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061A, 0x003F };
    uint32_t const ces[9] = { 0x490B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_441)
{
    // 1061A 0061;	
    // (êòö) LINEAR A SIGN AB028	[490B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061A, 0x0061 };
    uint32_t const ces[9] = { 0x490B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_442)
{
    // 1061A 0041;	
    // (êòö) LINEAR A SIGN AB028	[490B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1061A, 0x0041 };
    uint32_t const ces[9] = { 0x490B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_443)
{
    // 1061A 0062;	
    // (êòö) LINEAR A SIGN AB028	[490B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061A, 0x0062 };
    uint32_t const ces[9] = { 0x490B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_444)
{
    // 1061B 0021;	
    // (êòõ) LINEAR A SIGN A028B	[490C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061B, 0x0021 };
    uint32_t const ces[9] = { 0x490C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_445)
{
    // 1061B 003F;	
    // (êòõ) LINEAR A SIGN A028B	[490C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061B, 0x003F };
    uint32_t const ces[9] = { 0x490C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_446)
{
    // 1061B 0061;	
    // (êòõ) LINEAR A SIGN A028B	[490C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061B, 0x0061 };
    uint32_t const ces[9] = { 0x490C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_447)
{
    // 1061B 0041;	
    // (êòõ) LINEAR A SIGN A028B	[490C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1061B, 0x0041 };
    uint32_t const ces[9] = { 0x490C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_448)
{
    // 1061B 0062;	
    // (êòõ) LINEAR A SIGN A028B	[490C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061B, 0x0062 };
    uint32_t const ces[9] = { 0x490C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_449)
{
    // 1061C 0021;	
    // (êòú) LINEAR A SIGN AB029	[490D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061C, 0x0021 };
    uint32_t const ces[9] = { 0x490D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_450)
{
    // 1061C 003F;	
    // (êòú) LINEAR A SIGN AB029	[490D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061C, 0x003F };
    uint32_t const ces[9] = { 0x490D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_451)
{
    // 1061C 0061;	
    // (êòú) LINEAR A SIGN AB029	[490D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061C, 0x0061 };
    uint32_t const ces[9] = { 0x490D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_452)
{
    // 1061C 0041;	
    // (êòú) LINEAR A SIGN AB029	[490D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1061C, 0x0041 };
    uint32_t const ces[9] = { 0x490D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_453)
{
    // 1061C 0062;	
    // (êòú) LINEAR A SIGN AB029	[490D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061C, 0x0062 };
    uint32_t const ces[9] = { 0x490D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_454)
{
    // 1061D 0021;	
    // (êòù) LINEAR A SIGN AB030	[490E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061D, 0x0021 };
    uint32_t const ces[9] = { 0x490E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_455)
{
    // 1061D 003F;	
    // (êòù) LINEAR A SIGN AB030	[490E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061D, 0x003F };
    uint32_t const ces[9] = { 0x490E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_456)
{
    // 1061D 0061;	
    // (êòù) LINEAR A SIGN AB030	[490E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061D, 0x0061 };
    uint32_t const ces[9] = { 0x490E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_457)
{
    // 1061D 0041;	
    // (êòù) LINEAR A SIGN AB030	[490E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1061D, 0x0041 };
    uint32_t const ces[9] = { 0x490E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_458)
{
    // 1061D 0062;	
    // (êòù) LINEAR A SIGN AB030	[490E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061D, 0x0062 };
    uint32_t const ces[9] = { 0x490E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_459)
{
    // 1061E 0021;	
    // (êòû) LINEAR A SIGN AB031	[490F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061E, 0x0021 };
    uint32_t const ces[9] = { 0x490F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_460)
{
    // 1061E 003F;	
    // (êòû) LINEAR A SIGN AB031	[490F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061E, 0x003F };
    uint32_t const ces[9] = { 0x490F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_461)
{
    // 1061E 0061;	
    // (êòû) LINEAR A SIGN AB031	[490F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061E, 0x0061 };
    uint32_t const ces[9] = { 0x490F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_462)
{
    // 1061E 0041;	
    // (êòû) LINEAR A SIGN AB031	[490F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1061E, 0x0041 };
    uint32_t const ces[9] = { 0x490F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_463)
{
    // 1061E 0062;	
    // (êòû) LINEAR A SIGN AB031	[490F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061E, 0x0062 };
    uint32_t const ces[9] = { 0x490F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_464)
{
    // 1061F 0021;	
    // (êòü) LINEAR A SIGN AB034	[4910 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061F, 0x0021 };
    uint32_t const ces[9] = { 0x4910, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_465)
{
    // 1061F 003F;	
    // (êòü) LINEAR A SIGN AB034	[4910 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061F, 0x003F };
    uint32_t const ces[9] = { 0x4910, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_466)
{
    // 1061F 0061;	
    // (êòü) LINEAR A SIGN AB034	[4910 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061F, 0x0061 };
    uint32_t const ces[9] = { 0x4910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_467)
{
    // 1061F 0041;	
    // (êòü) LINEAR A SIGN AB034	[4910 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1061F, 0x0041 };
    uint32_t const ces[9] = { 0x4910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_468)
{
    // 1061F 0062;	
    // (êòü) LINEAR A SIGN AB034	[4910 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1061F, 0x0062 };
    uint32_t const ces[9] = { 0x4910, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_469)
{
    // 10620 0021;	
    // (êò†) LINEAR A SIGN AB037	[4911 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10620, 0x0021 };
    uint32_t const ces[9] = { 0x4911, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_470)
{
    // 10620 003F;	
    // (êò†) LINEAR A SIGN AB037	[4911 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10620, 0x003F };
    uint32_t const ces[9] = { 0x4911, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_471)
{
    // 10620 0061;	
    // (êò†) LINEAR A SIGN AB037	[4911 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10620, 0x0061 };
    uint32_t const ces[9] = { 0x4911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_472)
{
    // 10620 0041;	
    // (êò†) LINEAR A SIGN AB037	[4911 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10620, 0x0041 };
    uint32_t const ces[9] = { 0x4911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_473)
{
    // 10620 0062;	
    // (êò†) LINEAR A SIGN AB037	[4911 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10620, 0x0062 };
    uint32_t const ces[9] = { 0x4911, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_474)
{
    // 10621 0021;	
    // (êò°) LINEAR A SIGN AB038	[4912 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10621, 0x0021 };
    uint32_t const ces[9] = { 0x4912, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_475)
{
    // 10621 003F;	
    // (êò°) LINEAR A SIGN AB038	[4912 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10621, 0x003F };
    uint32_t const ces[9] = { 0x4912, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_476)
{
    // 10621 0061;	
    // (êò°) LINEAR A SIGN AB038	[4912 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10621, 0x0061 };
    uint32_t const ces[9] = { 0x4912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_477)
{
    // 10621 0041;	
    // (êò°) LINEAR A SIGN AB038	[4912 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10621, 0x0041 };
    uint32_t const ces[9] = { 0x4912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_478)
{
    // 10621 0062;	
    // (êò°) LINEAR A SIGN AB038	[4912 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10621, 0x0062 };
    uint32_t const ces[9] = { 0x4912, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_479)
{
    // 10622 0021;	
    // (êò¢) LINEAR A SIGN AB039	[4913 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10622, 0x0021 };
    uint32_t const ces[9] = { 0x4913, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_480)
{
    // 10622 003F;	
    // (êò¢) LINEAR A SIGN AB039	[4913 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10622, 0x003F };
    uint32_t const ces[9] = { 0x4913, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_481)
{
    // 10622 0061;	
    // (êò¢) LINEAR A SIGN AB039	[4913 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10622, 0x0061 };
    uint32_t const ces[9] = { 0x4913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_482)
{
    // 10622 0041;	
    // (êò¢) LINEAR A SIGN AB039	[4913 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10622, 0x0041 };
    uint32_t const ces[9] = { 0x4913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_483)
{
    // 10622 0062;	
    // (êò¢) LINEAR A SIGN AB039	[4913 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10622, 0x0062 };
    uint32_t const ces[9] = { 0x4913, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_484)
{
    // 10623 0021;	
    // (êò£) LINEAR A SIGN AB040	[4914 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10623, 0x0021 };
    uint32_t const ces[9] = { 0x4914, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_485)
{
    // 10623 003F;	
    // (êò£) LINEAR A SIGN AB040	[4914 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10623, 0x003F };
    uint32_t const ces[9] = { 0x4914, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_486)
{
    // 10623 0061;	
    // (êò£) LINEAR A SIGN AB040	[4914 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10623, 0x0061 };
    uint32_t const ces[9] = { 0x4914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_487)
{
    // 10623 0041;	
    // (êò£) LINEAR A SIGN AB040	[4914 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10623, 0x0041 };
    uint32_t const ces[9] = { 0x4914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_488)
{
    // 10623 0062;	
    // (êò£) LINEAR A SIGN AB040	[4914 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10623, 0x0062 };
    uint32_t const ces[9] = { 0x4914, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_489)
{
    // 10624 0021;	
    // (êò§) LINEAR A SIGN AB041	[4915 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10624, 0x0021 };
    uint32_t const ces[9] = { 0x4915, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_490)
{
    // 10624 003F;	
    // (êò§) LINEAR A SIGN AB041	[4915 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10624, 0x003F };
    uint32_t const ces[9] = { 0x4915, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_491)
{
    // 10624 0061;	
    // (êò§) LINEAR A SIGN AB041	[4915 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10624, 0x0061 };
    uint32_t const ces[9] = { 0x4915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_492)
{
    // 10624 0041;	
    // (êò§) LINEAR A SIGN AB041	[4915 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10624, 0x0041 };
    uint32_t const ces[9] = { 0x4915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_493)
{
    // 10624 0062;	
    // (êò§) LINEAR A SIGN AB041	[4915 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10624, 0x0062 };
    uint32_t const ces[9] = { 0x4915, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_494)
{
    // 10625 0021;	
    // (êò•) LINEAR A SIGN AB044	[4916 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10625, 0x0021 };
    uint32_t const ces[9] = { 0x4916, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_495)
{
    // 10625 003F;	
    // (êò•) LINEAR A SIGN AB044	[4916 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10625, 0x003F };
    uint32_t const ces[9] = { 0x4916, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_496)
{
    // 10625 0061;	
    // (êò•) LINEAR A SIGN AB044	[4916 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10625, 0x0061 };
    uint32_t const ces[9] = { 0x4916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_497)
{
    // 10625 0041;	
    // (êò•) LINEAR A SIGN AB044	[4916 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10625, 0x0041 };
    uint32_t const ces[9] = { 0x4916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_498)
{
    // 10625 0062;	
    // (êò•) LINEAR A SIGN AB044	[4916 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10625, 0x0062 };
    uint32_t const ces[9] = { 0x4916, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_277_499)
{
    // 10626 0021;	
    // (êò¶) LINEAR A SIGN AB045	[4917 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10626, 0x0021 };
    uint32_t const ces[9] = { 0x4917, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

