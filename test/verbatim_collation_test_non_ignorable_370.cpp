// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_370_000)
{
    // 44B5 003F;	
    // (䒵) CJK UNIFIED IDEOGRAPH-44B5	[FB80 C4B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_001)
{
    // 44B5 0061;	
    // (䒵) CJK UNIFIED IDEOGRAPH-44B5	[FB80 C4B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_002)
{
    // 44B5 0041;	
    // (䒵) CJK UNIFIED IDEOGRAPH-44B5	[FB80 C4B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_003)
{
    // 44B5 0062;	
    // (䒵) CJK UNIFIED IDEOGRAPH-44B5	[FB80 C4B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_004)
{
    // 44B6 0021;	
    // (䒶) CJK UNIFIED IDEOGRAPH-44B6	[FB80 C4B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_005)
{
    // 44B6 003F;	
    // (䒶) CJK UNIFIED IDEOGRAPH-44B6	[FB80 C4B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_006)
{
    // 44B6 0061;	
    // (䒶) CJK UNIFIED IDEOGRAPH-44B6	[FB80 C4B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_007)
{
    // 44B6 0041;	
    // (䒶) CJK UNIFIED IDEOGRAPH-44B6	[FB80 C4B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_008)
{
    // 44B6 0062;	
    // (䒶) CJK UNIFIED IDEOGRAPH-44B6	[FB80 C4B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_009)
{
    // 44B7 0021;	
    // (䒷) CJK UNIFIED IDEOGRAPH-44B7	[FB80 C4B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_010)
{
    // 44B7 003F;	
    // (䒷) CJK UNIFIED IDEOGRAPH-44B7	[FB80 C4B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_011)
{
    // 44B7 0061;	
    // (䒷) CJK UNIFIED IDEOGRAPH-44B7	[FB80 C4B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_012)
{
    // 44B7 0041;	
    // (䒷) CJK UNIFIED IDEOGRAPH-44B7	[FB80 C4B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_013)
{
    // 44B7 0062;	
    // (䒷) CJK UNIFIED IDEOGRAPH-44B7	[FB80 C4B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_014)
{
    // 44B8 0021;	
    // (䒸) CJK UNIFIED IDEOGRAPH-44B8	[FB80 C4B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_015)
{
    // 44B8 003F;	
    // (䒸) CJK UNIFIED IDEOGRAPH-44B8	[FB80 C4B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_016)
{
    // 44B8 0061;	
    // (䒸) CJK UNIFIED IDEOGRAPH-44B8	[FB80 C4B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_017)
{
    // 44B8 0041;	
    // (䒸) CJK UNIFIED IDEOGRAPH-44B8	[FB80 C4B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_018)
{
    // 44B8 0062;	
    // (䒸) CJK UNIFIED IDEOGRAPH-44B8	[FB80 C4B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_019)
{
    // 44B9 0021;	
    // (䒹) CJK UNIFIED IDEOGRAPH-44B9	[FB80 C4B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_020)
{
    // 44B9 003F;	
    // (䒹) CJK UNIFIED IDEOGRAPH-44B9	[FB80 C4B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_021)
{
    // 44B9 0061;	
    // (䒹) CJK UNIFIED IDEOGRAPH-44B9	[FB80 C4B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_022)
{
    // 44B9 0041;	
    // (䒹) CJK UNIFIED IDEOGRAPH-44B9	[FB80 C4B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_023)
{
    // 44B9 0062;	
    // (䒹) CJK UNIFIED IDEOGRAPH-44B9	[FB80 C4B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_024)
{
    // 44BA 0021;	
    // (䒺) CJK UNIFIED IDEOGRAPH-44BA	[FB80 C4BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_025)
{
    // 44BA 003F;	
    // (䒺) CJK UNIFIED IDEOGRAPH-44BA	[FB80 C4BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_026)
{
    // 44BA 0061;	
    // (䒺) CJK UNIFIED IDEOGRAPH-44BA	[FB80 C4BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_027)
{
    // 44BA 0041;	
    // (䒺) CJK UNIFIED IDEOGRAPH-44BA	[FB80 C4BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_028)
{
    // 44BA 0062;	
    // (䒺) CJK UNIFIED IDEOGRAPH-44BA	[FB80 C4BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_029)
{
    // 44BB 0021;	
    // (䒻) CJK UNIFIED IDEOGRAPH-44BB	[FB80 C4BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_030)
{
    // 44BB 003F;	
    // (䒻) CJK UNIFIED IDEOGRAPH-44BB	[FB80 C4BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_031)
{
    // 44BB 0061;	
    // (䒻) CJK UNIFIED IDEOGRAPH-44BB	[FB80 C4BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_032)
{
    // 44BB 0041;	
    // (䒻) CJK UNIFIED IDEOGRAPH-44BB	[FB80 C4BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_033)
{
    // 44BB 0062;	
    // (䒻) CJK UNIFIED IDEOGRAPH-44BB	[FB80 C4BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_034)
{
    // 44BC 0021;	
    // (䒼) CJK UNIFIED IDEOGRAPH-44BC	[FB80 C4BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_035)
{
    // 44BC 003F;	
    // (䒼) CJK UNIFIED IDEOGRAPH-44BC	[FB80 C4BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_036)
{
    // 44BC 0061;	
    // (䒼) CJK UNIFIED IDEOGRAPH-44BC	[FB80 C4BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_037)
{
    // 44BC 0041;	
    // (䒼) CJK UNIFIED IDEOGRAPH-44BC	[FB80 C4BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_038)
{
    // 44BC 0062;	
    // (䒼) CJK UNIFIED IDEOGRAPH-44BC	[FB80 C4BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_039)
{
    // 44BD 0021;	
    // (䒽) CJK UNIFIED IDEOGRAPH-44BD	[FB80 C4BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_040)
{
    // 44BD 003F;	
    // (䒽) CJK UNIFIED IDEOGRAPH-44BD	[FB80 C4BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_041)
{
    // 44BD 0061;	
    // (䒽) CJK UNIFIED IDEOGRAPH-44BD	[FB80 C4BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_042)
{
    // 44BD 0041;	
    // (䒽) CJK UNIFIED IDEOGRAPH-44BD	[FB80 C4BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_043)
{
    // 44BD 0062;	
    // (䒽) CJK UNIFIED IDEOGRAPH-44BD	[FB80 C4BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_044)
{
    // 44BE 0021;	
    // (䒾) CJK UNIFIED IDEOGRAPH-44BE	[FB80 C4BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_045)
{
    // 44BE 003F;	
    // (䒾) CJK UNIFIED IDEOGRAPH-44BE	[FB80 C4BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_046)
{
    // 44BE 0061;	
    // (䒾) CJK UNIFIED IDEOGRAPH-44BE	[FB80 C4BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_047)
{
    // 44BE 0041;	
    // (䒾) CJK UNIFIED IDEOGRAPH-44BE	[FB80 C4BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_048)
{
    // 44BE 0062;	
    // (䒾) CJK UNIFIED IDEOGRAPH-44BE	[FB80 C4BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_049)
{
    // 44BF 0021;	
    // (䒿) CJK UNIFIED IDEOGRAPH-44BF	[FB80 C4BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_050)
{
    // 44BF 003F;	
    // (䒿) CJK UNIFIED IDEOGRAPH-44BF	[FB80 C4BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_051)
{
    // 44BF 0061;	
    // (䒿) CJK UNIFIED IDEOGRAPH-44BF	[FB80 C4BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_052)
{
    // 44BF 0041;	
    // (䒿) CJK UNIFIED IDEOGRAPH-44BF	[FB80 C4BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_053)
{
    // 44BF 0062;	
    // (䒿) CJK UNIFIED IDEOGRAPH-44BF	[FB80 C4BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_054)
{
    // 44C0 0021;	
    // (䓀) CJK UNIFIED IDEOGRAPH-44C0	[FB80 C4C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_055)
{
    // 44C0 003F;	
    // (䓀) CJK UNIFIED IDEOGRAPH-44C0	[FB80 C4C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_056)
{
    // 44C0 0061;	
    // (䓀) CJK UNIFIED IDEOGRAPH-44C0	[FB80 C4C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_057)
{
    // 44C0 0041;	
    // (䓀) CJK UNIFIED IDEOGRAPH-44C0	[FB80 C4C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_058)
{
    // 44C0 0062;	
    // (䓀) CJK UNIFIED IDEOGRAPH-44C0	[FB80 C4C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_059)
{
    // 44C1 0021;	
    // (䓁) CJK UNIFIED IDEOGRAPH-44C1	[FB80 C4C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_060)
{
    // 44C1 003F;	
    // (䓁) CJK UNIFIED IDEOGRAPH-44C1	[FB80 C4C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_061)
{
    // 44C1 0061;	
    // (䓁) CJK UNIFIED IDEOGRAPH-44C1	[FB80 C4C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_062)
{
    // 44C1 0041;	
    // (䓁) CJK UNIFIED IDEOGRAPH-44C1	[FB80 C4C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_063)
{
    // 44C1 0062;	
    // (䓁) CJK UNIFIED IDEOGRAPH-44C1	[FB80 C4C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_064)
{
    // 44C2 0021;	
    // (䓂) CJK UNIFIED IDEOGRAPH-44C2	[FB80 C4C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_065)
{
    // 44C2 003F;	
    // (䓂) CJK UNIFIED IDEOGRAPH-44C2	[FB80 C4C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_066)
{
    // 44C2 0061;	
    // (䓂) CJK UNIFIED IDEOGRAPH-44C2	[FB80 C4C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_067)
{
    // 44C2 0041;	
    // (䓂) CJK UNIFIED IDEOGRAPH-44C2	[FB80 C4C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_068)
{
    // 44C2 0062;	
    // (䓂) CJK UNIFIED IDEOGRAPH-44C2	[FB80 C4C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_069)
{
    // 44C3 0021;	
    // (䓃) CJK UNIFIED IDEOGRAPH-44C3	[FB80 C4C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_070)
{
    // 44C3 003F;	
    // (䓃) CJK UNIFIED IDEOGRAPH-44C3	[FB80 C4C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_071)
{
    // 44C3 0061;	
    // (䓃) CJK UNIFIED IDEOGRAPH-44C3	[FB80 C4C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_072)
{
    // 44C3 0041;	
    // (䓃) CJK UNIFIED IDEOGRAPH-44C3	[FB80 C4C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_073)
{
    // 44C3 0062;	
    // (䓃) CJK UNIFIED IDEOGRAPH-44C3	[FB80 C4C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_074)
{
    // 44C4 0021;	
    // (䓄) CJK UNIFIED IDEOGRAPH-44C4	[FB80 C4C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_075)
{
    // 44C4 003F;	
    // (䓄) CJK UNIFIED IDEOGRAPH-44C4	[FB80 C4C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_076)
{
    // 44C4 0061;	
    // (䓄) CJK UNIFIED IDEOGRAPH-44C4	[FB80 C4C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_077)
{
    // 44C4 0041;	
    // (䓄) CJK UNIFIED IDEOGRAPH-44C4	[FB80 C4C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_078)
{
    // 44C4 0062;	
    // (䓄) CJK UNIFIED IDEOGRAPH-44C4	[FB80 C4C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_079)
{
    // 44C5 0021;	
    // (䓅) CJK UNIFIED IDEOGRAPH-44C5	[FB80 C4C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_080)
{
    // 44C5 003F;	
    // (䓅) CJK UNIFIED IDEOGRAPH-44C5	[FB80 C4C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_081)
{
    // 44C5 0061;	
    // (䓅) CJK UNIFIED IDEOGRAPH-44C5	[FB80 C4C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_082)
{
    // 44C5 0041;	
    // (䓅) CJK UNIFIED IDEOGRAPH-44C5	[FB80 C4C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_083)
{
    // 44C5 0062;	
    // (䓅) CJK UNIFIED IDEOGRAPH-44C5	[FB80 C4C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_084)
{
    // 44C6 0021;	
    // (䓆) CJK UNIFIED IDEOGRAPH-44C6	[FB80 C4C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_085)
{
    // 44C6 003F;	
    // (䓆) CJK UNIFIED IDEOGRAPH-44C6	[FB80 C4C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_086)
{
    // 44C6 0061;	
    // (䓆) CJK UNIFIED IDEOGRAPH-44C6	[FB80 C4C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_087)
{
    // 44C6 0041;	
    // (䓆) CJK UNIFIED IDEOGRAPH-44C6	[FB80 C4C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_088)
{
    // 44C6 0062;	
    // (䓆) CJK UNIFIED IDEOGRAPH-44C6	[FB80 C4C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_089)
{
    // 44C7 0021;	
    // (䓇) CJK UNIFIED IDEOGRAPH-44C7	[FB80 C4C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_090)
{
    // 44C7 003F;	
    // (䓇) CJK UNIFIED IDEOGRAPH-44C7	[FB80 C4C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_091)
{
    // 44C7 0061;	
    // (䓇) CJK UNIFIED IDEOGRAPH-44C7	[FB80 C4C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_092)
{
    // 44C7 0041;	
    // (䓇) CJK UNIFIED IDEOGRAPH-44C7	[FB80 C4C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_093)
{
    // 44C7 0062;	
    // (䓇) CJK UNIFIED IDEOGRAPH-44C7	[FB80 C4C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_094)
{
    // 44C8 0021;	
    // (䓈) CJK UNIFIED IDEOGRAPH-44C8	[FB80 C4C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_095)
{
    // 44C8 003F;	
    // (䓈) CJK UNIFIED IDEOGRAPH-44C8	[FB80 C4C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_096)
{
    // 44C8 0061;	
    // (䓈) CJK UNIFIED IDEOGRAPH-44C8	[FB80 C4C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_097)
{
    // 44C8 0041;	
    // (䓈) CJK UNIFIED IDEOGRAPH-44C8	[FB80 C4C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_098)
{
    // 44C8 0062;	
    // (䓈) CJK UNIFIED IDEOGRAPH-44C8	[FB80 C4C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_099)
{
    // 44C9 0021;	
    // (䓉) CJK UNIFIED IDEOGRAPH-44C9	[FB80 C4C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_100)
{
    // 44C9 003F;	
    // (䓉) CJK UNIFIED IDEOGRAPH-44C9	[FB80 C4C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_101)
{
    // 44C9 0061;	
    // (䓉) CJK UNIFIED IDEOGRAPH-44C9	[FB80 C4C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_102)
{
    // 44C9 0041;	
    // (䓉) CJK UNIFIED IDEOGRAPH-44C9	[FB80 C4C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_103)
{
    // 44C9 0062;	
    // (䓉) CJK UNIFIED IDEOGRAPH-44C9	[FB80 C4C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_104)
{
    // 44CA 0021;	
    // (䓊) CJK UNIFIED IDEOGRAPH-44CA	[FB80 C4CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_105)
{
    // 44CA 003F;	
    // (䓊) CJK UNIFIED IDEOGRAPH-44CA	[FB80 C4CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_106)
{
    // 44CA 0061;	
    // (䓊) CJK UNIFIED IDEOGRAPH-44CA	[FB80 C4CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_107)
{
    // 44CA 0041;	
    // (䓊) CJK UNIFIED IDEOGRAPH-44CA	[FB80 C4CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_108)
{
    // 44CA 0062;	
    // (䓊) CJK UNIFIED IDEOGRAPH-44CA	[FB80 C4CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_109)
{
    // 44CB 0021;	
    // (䓋) CJK UNIFIED IDEOGRAPH-44CB	[FB80 C4CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_110)
{
    // 44CB 003F;	
    // (䓋) CJK UNIFIED IDEOGRAPH-44CB	[FB80 C4CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_111)
{
    // 44CB 0061;	
    // (䓋) CJK UNIFIED IDEOGRAPH-44CB	[FB80 C4CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_112)
{
    // 44CB 0041;	
    // (䓋) CJK UNIFIED IDEOGRAPH-44CB	[FB80 C4CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_113)
{
    // 44CB 0062;	
    // (䓋) CJK UNIFIED IDEOGRAPH-44CB	[FB80 C4CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_114)
{
    // 44CC 0021;	
    // (䓌) CJK UNIFIED IDEOGRAPH-44CC	[FB80 C4CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_115)
{
    // 44CC 003F;	
    // (䓌) CJK UNIFIED IDEOGRAPH-44CC	[FB80 C4CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_116)
{
    // 44CC 0061;	
    // (䓌) CJK UNIFIED IDEOGRAPH-44CC	[FB80 C4CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_117)
{
    // 44CC 0041;	
    // (䓌) CJK UNIFIED IDEOGRAPH-44CC	[FB80 C4CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_118)
{
    // 44CC 0062;	
    // (䓌) CJK UNIFIED IDEOGRAPH-44CC	[FB80 C4CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_119)
{
    // 44CD 0021;	
    // (䓍) CJK UNIFIED IDEOGRAPH-44CD	[FB80 C4CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_120)
{
    // 44CD 003F;	
    // (䓍) CJK UNIFIED IDEOGRAPH-44CD	[FB80 C4CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_121)
{
    // 44CD 0061;	
    // (䓍) CJK UNIFIED IDEOGRAPH-44CD	[FB80 C4CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_122)
{
    // 44CD 0041;	
    // (䓍) CJK UNIFIED IDEOGRAPH-44CD	[FB80 C4CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_123)
{
    // 44CD 0062;	
    // (䓍) CJK UNIFIED IDEOGRAPH-44CD	[FB80 C4CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_124)
{
    // 44CE 0021;	
    // (䓎) CJK UNIFIED IDEOGRAPH-44CE	[FB80 C4CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_125)
{
    // 44CE 003F;	
    // (䓎) CJK UNIFIED IDEOGRAPH-44CE	[FB80 C4CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_126)
{
    // 44CE 0061;	
    // (䓎) CJK UNIFIED IDEOGRAPH-44CE	[FB80 C4CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_127)
{
    // 44CE 0041;	
    // (䓎) CJK UNIFIED IDEOGRAPH-44CE	[FB80 C4CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_128)
{
    // 44CE 0062;	
    // (䓎) CJK UNIFIED IDEOGRAPH-44CE	[FB80 C4CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_129)
{
    // 44CF 0021;	
    // (䓏) CJK UNIFIED IDEOGRAPH-44CF	[FB80 C4CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_130)
{
    // 44CF 003F;	
    // (䓏) CJK UNIFIED IDEOGRAPH-44CF	[FB80 C4CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_131)
{
    // 44CF 0061;	
    // (䓏) CJK UNIFIED IDEOGRAPH-44CF	[FB80 C4CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_132)
{
    // 44CF 0041;	
    // (䓏) CJK UNIFIED IDEOGRAPH-44CF	[FB80 C4CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_133)
{
    // 44CF 0062;	
    // (䓏) CJK UNIFIED IDEOGRAPH-44CF	[FB80 C4CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_134)
{
    // 44D0 0021;	
    // (䓐) CJK UNIFIED IDEOGRAPH-44D0	[FB80 C4D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_135)
{
    // 44D0 003F;	
    // (䓐) CJK UNIFIED IDEOGRAPH-44D0	[FB80 C4D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_136)
{
    // 44D0 0061;	
    // (䓐) CJK UNIFIED IDEOGRAPH-44D0	[FB80 C4D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_137)
{
    // 44D0 0041;	
    // (䓐) CJK UNIFIED IDEOGRAPH-44D0	[FB80 C4D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_138)
{
    // 44D0 0062;	
    // (䓐) CJK UNIFIED IDEOGRAPH-44D0	[FB80 C4D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_139)
{
    // 44D1 0021;	
    // (䓑) CJK UNIFIED IDEOGRAPH-44D1	[FB80 C4D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_140)
{
    // 44D1 003F;	
    // (䓑) CJK UNIFIED IDEOGRAPH-44D1	[FB80 C4D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_141)
{
    // 44D1 0061;	
    // (䓑) CJK UNIFIED IDEOGRAPH-44D1	[FB80 C4D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_142)
{
    // 44D1 0041;	
    // (䓑) CJK UNIFIED IDEOGRAPH-44D1	[FB80 C4D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_143)
{
    // 44D1 0062;	
    // (䓑) CJK UNIFIED IDEOGRAPH-44D1	[FB80 C4D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_144)
{
    // 44D2 0021;	
    // (䓒) CJK UNIFIED IDEOGRAPH-44D2	[FB80 C4D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_145)
{
    // 44D2 003F;	
    // (䓒) CJK UNIFIED IDEOGRAPH-44D2	[FB80 C4D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_146)
{
    // 44D2 0061;	
    // (䓒) CJK UNIFIED IDEOGRAPH-44D2	[FB80 C4D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_147)
{
    // 44D2 0041;	
    // (䓒) CJK UNIFIED IDEOGRAPH-44D2	[FB80 C4D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_148)
{
    // 44D2 0062;	
    // (䓒) CJK UNIFIED IDEOGRAPH-44D2	[FB80 C4D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_149)
{
    // 44D3 0021;	
    // (䓓) CJK UNIFIED IDEOGRAPH-44D3	[FB80 C4D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_150)
{
    // 44D3 003F;	
    // (䓓) CJK UNIFIED IDEOGRAPH-44D3	[FB80 C4D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_151)
{
    // 44D3 0061;	
    // (䓓) CJK UNIFIED IDEOGRAPH-44D3	[FB80 C4D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_152)
{
    // 44D3 0041;	
    // (䓓) CJK UNIFIED IDEOGRAPH-44D3	[FB80 C4D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_153)
{
    // 44D3 0062;	
    // (䓓) CJK UNIFIED IDEOGRAPH-44D3	[FB80 C4D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_154)
{
    // 44D4 0021;	
    // (䓔) CJK UNIFIED IDEOGRAPH-44D4	[FB80 C4D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_155)
{
    // 44D4 003F;	
    // (䓔) CJK UNIFIED IDEOGRAPH-44D4	[FB80 C4D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_156)
{
    // 44D4 0061;	
    // (䓔) CJK UNIFIED IDEOGRAPH-44D4	[FB80 C4D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_157)
{
    // 44D4 0041;	
    // (䓔) CJK UNIFIED IDEOGRAPH-44D4	[FB80 C4D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_158)
{
    // 44D4 0062;	
    // (䓔) CJK UNIFIED IDEOGRAPH-44D4	[FB80 C4D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_159)
{
    // 44D5 0021;	
    // (䓕) CJK UNIFIED IDEOGRAPH-44D5	[FB80 C4D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_160)
{
    // 44D5 003F;	
    // (䓕) CJK UNIFIED IDEOGRAPH-44D5	[FB80 C4D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_161)
{
    // 44D5 0061;	
    // (䓕) CJK UNIFIED IDEOGRAPH-44D5	[FB80 C4D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_162)
{
    // 44D5 0041;	
    // (䓕) CJK UNIFIED IDEOGRAPH-44D5	[FB80 C4D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_163)
{
    // 44D5 0062;	
    // (䓕) CJK UNIFIED IDEOGRAPH-44D5	[FB80 C4D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_164)
{
    // 44D6 0021;	
    // (䓖) CJK UNIFIED IDEOGRAPH-44D6	[FB80 C4D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_165)
{
    // 44D6 003F;	
    // (䓖) CJK UNIFIED IDEOGRAPH-44D6	[FB80 C4D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_166)
{
    // 44D6 0061;	
    // (䓖) CJK UNIFIED IDEOGRAPH-44D6	[FB80 C4D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_167)
{
    // 44D6 0041;	
    // (䓖) CJK UNIFIED IDEOGRAPH-44D6	[FB80 C4D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_168)
{
    // 44D6 0062;	
    // (䓖) CJK UNIFIED IDEOGRAPH-44D6	[FB80 C4D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_169)
{
    // 44D7 0021;	
    // (䓗) CJK UNIFIED IDEOGRAPH-44D7	[FB80 C4D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_170)
{
    // 44D7 003F;	
    // (䓗) CJK UNIFIED IDEOGRAPH-44D7	[FB80 C4D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_171)
{
    // 44D7 0061;	
    // (䓗) CJK UNIFIED IDEOGRAPH-44D7	[FB80 C4D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_172)
{
    // 44D7 0041;	
    // (䓗) CJK UNIFIED IDEOGRAPH-44D7	[FB80 C4D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_173)
{
    // 44D7 0062;	
    // (䓗) CJK UNIFIED IDEOGRAPH-44D7	[FB80 C4D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_174)
{
    // 44D8 0021;	
    // (䓘) CJK UNIFIED IDEOGRAPH-44D8	[FB80 C4D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_175)
{
    // 44D8 003F;	
    // (䓘) CJK UNIFIED IDEOGRAPH-44D8	[FB80 C4D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_176)
{
    // 44D8 0061;	
    // (䓘) CJK UNIFIED IDEOGRAPH-44D8	[FB80 C4D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_177)
{
    // 44D8 0041;	
    // (䓘) CJK UNIFIED IDEOGRAPH-44D8	[FB80 C4D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_178)
{
    // 44D8 0062;	
    // (䓘) CJK UNIFIED IDEOGRAPH-44D8	[FB80 C4D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_179)
{
    // 44D9 0021;	
    // (䓙) CJK UNIFIED IDEOGRAPH-44D9	[FB80 C4D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_180)
{
    // 44D9 003F;	
    // (䓙) CJK UNIFIED IDEOGRAPH-44D9	[FB80 C4D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_181)
{
    // 44D9 0061;	
    // (䓙) CJK UNIFIED IDEOGRAPH-44D9	[FB80 C4D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_182)
{
    // 44D9 0041;	
    // (䓙) CJK UNIFIED IDEOGRAPH-44D9	[FB80 C4D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_183)
{
    // 44D9 0062;	
    // (䓙) CJK UNIFIED IDEOGRAPH-44D9	[FB80 C4D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_184)
{
    // 44DA 0021;	
    // (䓚) CJK UNIFIED IDEOGRAPH-44DA	[FB80 C4DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_185)
{
    // 44DA 003F;	
    // (䓚) CJK UNIFIED IDEOGRAPH-44DA	[FB80 C4DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_186)
{
    // 44DA 0061;	
    // (䓚) CJK UNIFIED IDEOGRAPH-44DA	[FB80 C4DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_187)
{
    // 44DA 0041;	
    // (䓚) CJK UNIFIED IDEOGRAPH-44DA	[FB80 C4DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_188)
{
    // 44DA 0062;	
    // (䓚) CJK UNIFIED IDEOGRAPH-44DA	[FB80 C4DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_189)
{
    // 44DB 0021;	
    // (䓛) CJK UNIFIED IDEOGRAPH-44DB	[FB80 C4DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_190)
{
    // 44DB 003F;	
    // (䓛) CJK UNIFIED IDEOGRAPH-44DB	[FB80 C4DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_191)
{
    // 44DB 0061;	
    // (䓛) CJK UNIFIED IDEOGRAPH-44DB	[FB80 C4DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_192)
{
    // 44DB 0041;	
    // (䓛) CJK UNIFIED IDEOGRAPH-44DB	[FB80 C4DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_193)
{
    // 44DB 0062;	
    // (䓛) CJK UNIFIED IDEOGRAPH-44DB	[FB80 C4DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_194)
{
    // 44DC 0021;	
    // (䓜) CJK UNIFIED IDEOGRAPH-44DC	[FB80 C4DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_195)
{
    // 44DC 003F;	
    // (䓜) CJK UNIFIED IDEOGRAPH-44DC	[FB80 C4DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_196)
{
    // 44DC 0061;	
    // (䓜) CJK UNIFIED IDEOGRAPH-44DC	[FB80 C4DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_197)
{
    // 44DC 0041;	
    // (䓜) CJK UNIFIED IDEOGRAPH-44DC	[FB80 C4DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_198)
{
    // 44DC 0062;	
    // (䓜) CJK UNIFIED IDEOGRAPH-44DC	[FB80 C4DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_199)
{
    // 44DD 0021;	
    // (䓝) CJK UNIFIED IDEOGRAPH-44DD	[FB80 C4DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_200)
{
    // 44DD 003F;	
    // (䓝) CJK UNIFIED IDEOGRAPH-44DD	[FB80 C4DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_201)
{
    // 44DD 0061;	
    // (䓝) CJK UNIFIED IDEOGRAPH-44DD	[FB80 C4DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_202)
{
    // 44DD 0041;	
    // (䓝) CJK UNIFIED IDEOGRAPH-44DD	[FB80 C4DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_203)
{
    // 44DD 0062;	
    // (䓝) CJK UNIFIED IDEOGRAPH-44DD	[FB80 C4DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_204)
{
    // 44DE 0021;	
    // (䓞) CJK UNIFIED IDEOGRAPH-44DE	[FB80 C4DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_205)
{
    // 44DE 003F;	
    // (䓞) CJK UNIFIED IDEOGRAPH-44DE	[FB80 C4DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_206)
{
    // 44DE 0061;	
    // (䓞) CJK UNIFIED IDEOGRAPH-44DE	[FB80 C4DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_207)
{
    // 44DE 0041;	
    // (䓞) CJK UNIFIED IDEOGRAPH-44DE	[FB80 C4DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_208)
{
    // 44DE 0062;	
    // (䓞) CJK UNIFIED IDEOGRAPH-44DE	[FB80 C4DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_209)
{
    // 44DF 0021;	
    // (䓟) CJK UNIFIED IDEOGRAPH-44DF	[FB80 C4DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_210)
{
    // 44DF 003F;	
    // (䓟) CJK UNIFIED IDEOGRAPH-44DF	[FB80 C4DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_211)
{
    // 44DF 0061;	
    // (䓟) CJK UNIFIED IDEOGRAPH-44DF	[FB80 C4DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_212)
{
    // 44DF 0041;	
    // (䓟) CJK UNIFIED IDEOGRAPH-44DF	[FB80 C4DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_213)
{
    // 44DF 0062;	
    // (䓟) CJK UNIFIED IDEOGRAPH-44DF	[FB80 C4DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_214)
{
    // 44E0 0021;	
    // (䓠) CJK UNIFIED IDEOGRAPH-44E0	[FB80 C4E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_215)
{
    // 44E0 003F;	
    // (䓠) CJK UNIFIED IDEOGRAPH-44E0	[FB80 C4E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_216)
{
    // 44E0 0061;	
    // (䓠) CJK UNIFIED IDEOGRAPH-44E0	[FB80 C4E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_217)
{
    // 44E0 0041;	
    // (䓠) CJK UNIFIED IDEOGRAPH-44E0	[FB80 C4E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_218)
{
    // 44E0 0062;	
    // (䓠) CJK UNIFIED IDEOGRAPH-44E0	[FB80 C4E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_219)
{
    // 44E1 0021;	
    // (䓡) CJK UNIFIED IDEOGRAPH-44E1	[FB80 C4E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_220)
{
    // 44E1 003F;	
    // (䓡) CJK UNIFIED IDEOGRAPH-44E1	[FB80 C4E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_221)
{
    // 44E1 0061;	
    // (䓡) CJK UNIFIED IDEOGRAPH-44E1	[FB80 C4E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_222)
{
    // 44E1 0041;	
    // (䓡) CJK UNIFIED IDEOGRAPH-44E1	[FB80 C4E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_223)
{
    // 44E1 0062;	
    // (䓡) CJK UNIFIED IDEOGRAPH-44E1	[FB80 C4E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_224)
{
    // 44E2 0021;	
    // (䓢) CJK UNIFIED IDEOGRAPH-44E2	[FB80 C4E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_225)
{
    // 44E2 003F;	
    // (䓢) CJK UNIFIED IDEOGRAPH-44E2	[FB80 C4E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_226)
{
    // 44E2 0061;	
    // (䓢) CJK UNIFIED IDEOGRAPH-44E2	[FB80 C4E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_227)
{
    // 44E2 0041;	
    // (䓢) CJK UNIFIED IDEOGRAPH-44E2	[FB80 C4E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_228)
{
    // 44E2 0062;	
    // (䓢) CJK UNIFIED IDEOGRAPH-44E2	[FB80 C4E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_229)
{
    // 44E3 0021;	
    // (䓣) CJK UNIFIED IDEOGRAPH-44E3	[FB80 C4E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_230)
{
    // 44E3 003F;	
    // (䓣) CJK UNIFIED IDEOGRAPH-44E3	[FB80 C4E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_231)
{
    // 44E3 0061;	
    // (䓣) CJK UNIFIED IDEOGRAPH-44E3	[FB80 C4E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_232)
{
    // 44E3 0041;	
    // (䓣) CJK UNIFIED IDEOGRAPH-44E3	[FB80 C4E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_233)
{
    // 44E3 0062;	
    // (䓣) CJK UNIFIED IDEOGRAPH-44E3	[FB80 C4E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_234)
{
    // 44E4 0021;	
    // (䓤) CJK UNIFIED IDEOGRAPH-44E4	[FB80 C4E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_235)
{
    // 44E4 003F;	
    // (䓤) CJK UNIFIED IDEOGRAPH-44E4	[FB80 C4E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_236)
{
    // 44E4 0061;	
    // (䓤) CJK UNIFIED IDEOGRAPH-44E4	[FB80 C4E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_237)
{
    // 44E4 0041;	
    // (䓤) CJK UNIFIED IDEOGRAPH-44E4	[FB80 C4E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_238)
{
    // 44E4 0062;	
    // (䓤) CJK UNIFIED IDEOGRAPH-44E4	[FB80 C4E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_239)
{
    // 44E5 0021;	
    // (䓥) CJK UNIFIED IDEOGRAPH-44E5	[FB80 C4E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_240)
{
    // 44E5 003F;	
    // (䓥) CJK UNIFIED IDEOGRAPH-44E5	[FB80 C4E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_241)
{
    // 44E5 0061;	
    // (䓥) CJK UNIFIED IDEOGRAPH-44E5	[FB80 C4E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_242)
{
    // 44E5 0041;	
    // (䓥) CJK UNIFIED IDEOGRAPH-44E5	[FB80 C4E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_243)
{
    // 44E5 0062;	
    // (䓥) CJK UNIFIED IDEOGRAPH-44E5	[FB80 C4E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_244)
{
    // 44E6 0021;	
    // (䓦) CJK UNIFIED IDEOGRAPH-44E6	[FB80 C4E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_245)
{
    // 44E6 003F;	
    // (䓦) CJK UNIFIED IDEOGRAPH-44E6	[FB80 C4E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_246)
{
    // 44E6 0061;	
    // (䓦) CJK UNIFIED IDEOGRAPH-44E6	[FB80 C4E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_247)
{
    // 44E6 0041;	
    // (䓦) CJK UNIFIED IDEOGRAPH-44E6	[FB80 C4E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_248)
{
    // 44E6 0062;	
    // (䓦) CJK UNIFIED IDEOGRAPH-44E6	[FB80 C4E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_249)
{
    // 44E7 0021;	
    // (䓧) CJK UNIFIED IDEOGRAPH-44E7	[FB80 C4E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_250)
{
    // 44E7 003F;	
    // (䓧) CJK UNIFIED IDEOGRAPH-44E7	[FB80 C4E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_251)
{
    // 44E7 0061;	
    // (䓧) CJK UNIFIED IDEOGRAPH-44E7	[FB80 C4E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_252)
{
    // 44E7 0041;	
    // (䓧) CJK UNIFIED IDEOGRAPH-44E7	[FB80 C4E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_253)
{
    // 44E7 0062;	
    // (䓧) CJK UNIFIED IDEOGRAPH-44E7	[FB80 C4E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_254)
{
    // 44E8 0021;	
    // (䓨) CJK UNIFIED IDEOGRAPH-44E8	[FB80 C4E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_255)
{
    // 44E8 003F;	
    // (䓨) CJK UNIFIED IDEOGRAPH-44E8	[FB80 C4E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_256)
{
    // 44E8 0061;	
    // (䓨) CJK UNIFIED IDEOGRAPH-44E8	[FB80 C4E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_257)
{
    // 44E8 0041;	
    // (䓨) CJK UNIFIED IDEOGRAPH-44E8	[FB80 C4E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_258)
{
    // 44E8 0062;	
    // (䓨) CJK UNIFIED IDEOGRAPH-44E8	[FB80 C4E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_259)
{
    // 44E9 0021;	
    // (䓩) CJK UNIFIED IDEOGRAPH-44E9	[FB80 C4E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_260)
{
    // 44E9 003F;	
    // (䓩) CJK UNIFIED IDEOGRAPH-44E9	[FB80 C4E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_261)
{
    // 44E9 0061;	
    // (䓩) CJK UNIFIED IDEOGRAPH-44E9	[FB80 C4E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_262)
{
    // 44E9 0041;	
    // (䓩) CJK UNIFIED IDEOGRAPH-44E9	[FB80 C4E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_263)
{
    // 44E9 0062;	
    // (䓩) CJK UNIFIED IDEOGRAPH-44E9	[FB80 C4E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_264)
{
    // 44EA 0021;	
    // (䓪) CJK UNIFIED IDEOGRAPH-44EA	[FB80 C4EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_265)
{
    // 44EA 003F;	
    // (䓪) CJK UNIFIED IDEOGRAPH-44EA	[FB80 C4EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_266)
{
    // 44EA 0061;	
    // (䓪) CJK UNIFIED IDEOGRAPH-44EA	[FB80 C4EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_267)
{
    // 44EA 0041;	
    // (䓪) CJK UNIFIED IDEOGRAPH-44EA	[FB80 C4EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_268)
{
    // 44EA 0062;	
    // (䓪) CJK UNIFIED IDEOGRAPH-44EA	[FB80 C4EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_269)
{
    // 44EB 0021;	
    // (䓫) CJK UNIFIED IDEOGRAPH-44EB	[FB80 C4EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_270)
{
    // 44EB 003F;	
    // (䓫) CJK UNIFIED IDEOGRAPH-44EB	[FB80 C4EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_271)
{
    // 44EB 0061;	
    // (䓫) CJK UNIFIED IDEOGRAPH-44EB	[FB80 C4EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_272)
{
    // 44EB 0041;	
    // (䓫) CJK UNIFIED IDEOGRAPH-44EB	[FB80 C4EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_273)
{
    // 44EB 0062;	
    // (䓫) CJK UNIFIED IDEOGRAPH-44EB	[FB80 C4EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_274)
{
    // 44EC 0021;	
    // (䓬) CJK UNIFIED IDEOGRAPH-44EC	[FB80 C4EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_275)
{
    // 44EC 003F;	
    // (䓬) CJK UNIFIED IDEOGRAPH-44EC	[FB80 C4EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_276)
{
    // 44EC 0061;	
    // (䓬) CJK UNIFIED IDEOGRAPH-44EC	[FB80 C4EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_277)
{
    // 44EC 0041;	
    // (䓬) CJK UNIFIED IDEOGRAPH-44EC	[FB80 C4EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_278)
{
    // 44EC 0062;	
    // (䓬) CJK UNIFIED IDEOGRAPH-44EC	[FB80 C4EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_279)
{
    // 44ED 0021;	
    // (䓭) CJK UNIFIED IDEOGRAPH-44ED	[FB80 C4ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_280)
{
    // 44ED 003F;	
    // (䓭) CJK UNIFIED IDEOGRAPH-44ED	[FB80 C4ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_281)
{
    // 44ED 0061;	
    // (䓭) CJK UNIFIED IDEOGRAPH-44ED	[FB80 C4ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_282)
{
    // 44ED 0041;	
    // (䓭) CJK UNIFIED IDEOGRAPH-44ED	[FB80 C4ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_283)
{
    // 44ED 0062;	
    // (䓭) CJK UNIFIED IDEOGRAPH-44ED	[FB80 C4ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_284)
{
    // 44EE 0021;	
    // (䓮) CJK UNIFIED IDEOGRAPH-44EE	[FB80 C4EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_285)
{
    // 44EE 003F;	
    // (䓮) CJK UNIFIED IDEOGRAPH-44EE	[FB80 C4EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_286)
{
    // 44EE 0061;	
    // (䓮) CJK UNIFIED IDEOGRAPH-44EE	[FB80 C4EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_287)
{
    // 44EE 0041;	
    // (䓮) CJK UNIFIED IDEOGRAPH-44EE	[FB80 C4EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_288)
{
    // 44EE 0062;	
    // (䓮) CJK UNIFIED IDEOGRAPH-44EE	[FB80 C4EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_289)
{
    // 44EF 0021;	
    // (䓯) CJK UNIFIED IDEOGRAPH-44EF	[FB80 C4EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_290)
{
    // 44EF 003F;	
    // (䓯) CJK UNIFIED IDEOGRAPH-44EF	[FB80 C4EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_291)
{
    // 44EF 0061;	
    // (䓯) CJK UNIFIED IDEOGRAPH-44EF	[FB80 C4EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_292)
{
    // 44EF 0041;	
    // (䓯) CJK UNIFIED IDEOGRAPH-44EF	[FB80 C4EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_293)
{
    // 44EF 0062;	
    // (䓯) CJK UNIFIED IDEOGRAPH-44EF	[FB80 C4EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_294)
{
    // 44F0 0021;	
    // (䓰) CJK UNIFIED IDEOGRAPH-44F0	[FB80 C4F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_295)
{
    // 44F0 003F;	
    // (䓰) CJK UNIFIED IDEOGRAPH-44F0	[FB80 C4F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_296)
{
    // 44F0 0061;	
    // (䓰) CJK UNIFIED IDEOGRAPH-44F0	[FB80 C4F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_297)
{
    // 44F0 0041;	
    // (䓰) CJK UNIFIED IDEOGRAPH-44F0	[FB80 C4F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_298)
{
    // 44F0 0062;	
    // (䓰) CJK UNIFIED IDEOGRAPH-44F0	[FB80 C4F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_299)
{
    // 44F1 0021;	
    // (䓱) CJK UNIFIED IDEOGRAPH-44F1	[FB80 C4F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_300)
{
    // 44F1 003F;	
    // (䓱) CJK UNIFIED IDEOGRAPH-44F1	[FB80 C4F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_301)
{
    // 44F1 0061;	
    // (䓱) CJK UNIFIED IDEOGRAPH-44F1	[FB80 C4F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_302)
{
    // 44F1 0041;	
    // (䓱) CJK UNIFIED IDEOGRAPH-44F1	[FB80 C4F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_303)
{
    // 44F1 0062;	
    // (䓱) CJK UNIFIED IDEOGRAPH-44F1	[FB80 C4F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_304)
{
    // 44F2 0021;	
    // (䓲) CJK UNIFIED IDEOGRAPH-44F2	[FB80 C4F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_305)
{
    // 44F2 003F;	
    // (䓲) CJK UNIFIED IDEOGRAPH-44F2	[FB80 C4F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_306)
{
    // 44F2 0061;	
    // (䓲) CJK UNIFIED IDEOGRAPH-44F2	[FB80 C4F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_307)
{
    // 44F2 0041;	
    // (䓲) CJK UNIFIED IDEOGRAPH-44F2	[FB80 C4F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_308)
{
    // 44F2 0062;	
    // (䓲) CJK UNIFIED IDEOGRAPH-44F2	[FB80 C4F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_309)
{
    // 44F3 0021;	
    // (䓳) CJK UNIFIED IDEOGRAPH-44F3	[FB80 C4F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_310)
{
    // 44F3 003F;	
    // (䓳) CJK UNIFIED IDEOGRAPH-44F3	[FB80 C4F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_311)
{
    // 44F3 0061;	
    // (䓳) CJK UNIFIED IDEOGRAPH-44F3	[FB80 C4F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_312)
{
    // 44F3 0041;	
    // (䓳) CJK UNIFIED IDEOGRAPH-44F3	[FB80 C4F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_313)
{
    // 44F3 0062;	
    // (䓳) CJK UNIFIED IDEOGRAPH-44F3	[FB80 C4F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_314)
{
    // 44F4 0021;	
    // (䓴) CJK UNIFIED IDEOGRAPH-44F4	[FB80 C4F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_315)
{
    // 44F4 003F;	
    // (䓴) CJK UNIFIED IDEOGRAPH-44F4	[FB80 C4F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_316)
{
    // 44F4 0061;	
    // (䓴) CJK UNIFIED IDEOGRAPH-44F4	[FB80 C4F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_317)
{
    // 44F4 0041;	
    // (䓴) CJK UNIFIED IDEOGRAPH-44F4	[FB80 C4F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_318)
{
    // 44F4 0062;	
    // (䓴) CJK UNIFIED IDEOGRAPH-44F4	[FB80 C4F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_319)
{
    // 44F5 0021;	
    // (䓵) CJK UNIFIED IDEOGRAPH-44F5	[FB80 C4F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_320)
{
    // 44F5 003F;	
    // (䓵) CJK UNIFIED IDEOGRAPH-44F5	[FB80 C4F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_321)
{
    // 44F5 0061;	
    // (䓵) CJK UNIFIED IDEOGRAPH-44F5	[FB80 C4F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_322)
{
    // 44F5 0041;	
    // (䓵) CJK UNIFIED IDEOGRAPH-44F5	[FB80 C4F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_323)
{
    // 44F5 0062;	
    // (䓵) CJK UNIFIED IDEOGRAPH-44F5	[FB80 C4F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_324)
{
    // 44F6 0021;	
    // (䓶) CJK UNIFIED IDEOGRAPH-44F6	[FB80 C4F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_325)
{
    // 44F6 003F;	
    // (䓶) CJK UNIFIED IDEOGRAPH-44F6	[FB80 C4F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_326)
{
    // 44F6 0061;	
    // (䓶) CJK UNIFIED IDEOGRAPH-44F6	[FB80 C4F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_327)
{
    // 44F6 0041;	
    // (䓶) CJK UNIFIED IDEOGRAPH-44F6	[FB80 C4F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_328)
{
    // 44F6 0062;	
    // (䓶) CJK UNIFIED IDEOGRAPH-44F6	[FB80 C4F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_329)
{
    // 44F7 0021;	
    // (䓷) CJK UNIFIED IDEOGRAPH-44F7	[FB80 C4F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_330)
{
    // 44F7 003F;	
    // (䓷) CJK UNIFIED IDEOGRAPH-44F7	[FB80 C4F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_331)
{
    // 44F7 0061;	
    // (䓷) CJK UNIFIED IDEOGRAPH-44F7	[FB80 C4F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_332)
{
    // 44F7 0041;	
    // (䓷) CJK UNIFIED IDEOGRAPH-44F7	[FB80 C4F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_333)
{
    // 44F7 0062;	
    // (䓷) CJK UNIFIED IDEOGRAPH-44F7	[FB80 C4F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_334)
{
    // 44F8 0021;	
    // (䓸) CJK UNIFIED IDEOGRAPH-44F8	[FB80 C4F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_335)
{
    // 44F8 003F;	
    // (䓸) CJK UNIFIED IDEOGRAPH-44F8	[FB80 C4F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_336)
{
    // 44F8 0061;	
    // (䓸) CJK UNIFIED IDEOGRAPH-44F8	[FB80 C4F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_337)
{
    // 44F8 0041;	
    // (䓸) CJK UNIFIED IDEOGRAPH-44F8	[FB80 C4F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_338)
{
    // 44F8 0062;	
    // (䓸) CJK UNIFIED IDEOGRAPH-44F8	[FB80 C4F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_339)
{
    // 44F9 0021;	
    // (䓹) CJK UNIFIED IDEOGRAPH-44F9	[FB80 C4F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_340)
{
    // 44F9 003F;	
    // (䓹) CJK UNIFIED IDEOGRAPH-44F9	[FB80 C4F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_341)
{
    // 44F9 0061;	
    // (䓹) CJK UNIFIED IDEOGRAPH-44F9	[FB80 C4F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_342)
{
    // 44F9 0041;	
    // (䓹) CJK UNIFIED IDEOGRAPH-44F9	[FB80 C4F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_343)
{
    // 44F9 0062;	
    // (䓹) CJK UNIFIED IDEOGRAPH-44F9	[FB80 C4F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_344)
{
    // 44FA 0021;	
    // (䓺) CJK UNIFIED IDEOGRAPH-44FA	[FB80 C4FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_345)
{
    // 44FA 003F;	
    // (䓺) CJK UNIFIED IDEOGRAPH-44FA	[FB80 C4FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_346)
{
    // 44FA 0061;	
    // (䓺) CJK UNIFIED IDEOGRAPH-44FA	[FB80 C4FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_347)
{
    // 44FA 0041;	
    // (䓺) CJK UNIFIED IDEOGRAPH-44FA	[FB80 C4FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_348)
{
    // 44FA 0062;	
    // (䓺) CJK UNIFIED IDEOGRAPH-44FA	[FB80 C4FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_349)
{
    // 44FB 0021;	
    // (䓻) CJK UNIFIED IDEOGRAPH-44FB	[FB80 C4FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_350)
{
    // 44FB 003F;	
    // (䓻) CJK UNIFIED IDEOGRAPH-44FB	[FB80 C4FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_351)
{
    // 44FB 0061;	
    // (䓻) CJK UNIFIED IDEOGRAPH-44FB	[FB80 C4FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_352)
{
    // 44FB 0041;	
    // (䓻) CJK UNIFIED IDEOGRAPH-44FB	[FB80 C4FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_353)
{
    // 44FB 0062;	
    // (䓻) CJK UNIFIED IDEOGRAPH-44FB	[FB80 C4FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_354)
{
    // 44FC 0021;	
    // (䓼) CJK UNIFIED IDEOGRAPH-44FC	[FB80 C4FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_355)
{
    // 44FC 003F;	
    // (䓼) CJK UNIFIED IDEOGRAPH-44FC	[FB80 C4FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_356)
{
    // 44FC 0061;	
    // (䓼) CJK UNIFIED IDEOGRAPH-44FC	[FB80 C4FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_357)
{
    // 44FC 0041;	
    // (䓼) CJK UNIFIED IDEOGRAPH-44FC	[FB80 C4FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_358)
{
    // 44FC 0062;	
    // (䓼) CJK UNIFIED IDEOGRAPH-44FC	[FB80 C4FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_359)
{
    // 44FD 0021;	
    // (䓽) CJK UNIFIED IDEOGRAPH-44FD	[FB80 C4FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_360)
{
    // 44FD 003F;	
    // (䓽) CJK UNIFIED IDEOGRAPH-44FD	[FB80 C4FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_361)
{
    // 44FD 0061;	
    // (䓽) CJK UNIFIED IDEOGRAPH-44FD	[FB80 C4FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_362)
{
    // 44FD 0041;	
    // (䓽) CJK UNIFIED IDEOGRAPH-44FD	[FB80 C4FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_363)
{
    // 44FD 0062;	
    // (䓽) CJK UNIFIED IDEOGRAPH-44FD	[FB80 C4FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_364)
{
    // 44FE 0021;	
    // (䓾) CJK UNIFIED IDEOGRAPH-44FE	[FB80 C4FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_365)
{
    // 44FE 003F;	
    // (䓾) CJK UNIFIED IDEOGRAPH-44FE	[FB80 C4FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_366)
{
    // 44FE 0061;	
    // (䓾) CJK UNIFIED IDEOGRAPH-44FE	[FB80 C4FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_367)
{
    // 44FE 0041;	
    // (䓾) CJK UNIFIED IDEOGRAPH-44FE	[FB80 C4FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_368)
{
    // 44FE 0062;	
    // (䓾) CJK UNIFIED IDEOGRAPH-44FE	[FB80 C4FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_369)
{
    // 44FF 0021;	
    // (䓿) CJK UNIFIED IDEOGRAPH-44FF	[FB80 C4FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_370)
{
    // 44FF 003F;	
    // (䓿) CJK UNIFIED IDEOGRAPH-44FF	[FB80 C4FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC4FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_371)
{
    // 44FF 0061;	
    // (䓿) CJK UNIFIED IDEOGRAPH-44FF	[FB80 C4FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_372)
{
    // 44FF 0041;	
    // (䓿) CJK UNIFIED IDEOGRAPH-44FF	[FB80 C4FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x44FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_373)
{
    // 44FF 0062;	
    // (䓿) CJK UNIFIED IDEOGRAPH-44FF	[FB80 C4FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x44FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC4FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_374)
{
    // 4500 0021;	
    // (䔀) CJK UNIFIED IDEOGRAPH-4500	[FB80 C500 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4500, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC500, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_375)
{
    // 4500 003F;	
    // (䔀) CJK UNIFIED IDEOGRAPH-4500	[FB80 C500 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4500, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC500, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_376)
{
    // 4500 0061;	
    // (䔀) CJK UNIFIED IDEOGRAPH-4500	[FB80 C500 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4500, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_377)
{
    // 4500 0041;	
    // (䔀) CJK UNIFIED IDEOGRAPH-4500	[FB80 C500 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4500, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_378)
{
    // 4500 0062;	
    // (䔀) CJK UNIFIED IDEOGRAPH-4500	[FB80 C500 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4500, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC500, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_379)
{
    // 4501 0021;	
    // (䔁) CJK UNIFIED IDEOGRAPH-4501	[FB80 C501 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4501, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC501, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_380)
{
    // 4501 003F;	
    // (䔁) CJK UNIFIED IDEOGRAPH-4501	[FB80 C501 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4501, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC501, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_381)
{
    // 4501 0061;	
    // (䔁) CJK UNIFIED IDEOGRAPH-4501	[FB80 C501 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4501, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_382)
{
    // 4501 0041;	
    // (䔁) CJK UNIFIED IDEOGRAPH-4501	[FB80 C501 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4501, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_383)
{
    // 4501 0062;	
    // (䔁) CJK UNIFIED IDEOGRAPH-4501	[FB80 C501 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4501, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC501, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_384)
{
    // 4502 0021;	
    // (䔂) CJK UNIFIED IDEOGRAPH-4502	[FB80 C502 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4502, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC502, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_385)
{
    // 4502 003F;	
    // (䔂) CJK UNIFIED IDEOGRAPH-4502	[FB80 C502 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4502, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC502, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_386)
{
    // 4502 0061;	
    // (䔂) CJK UNIFIED IDEOGRAPH-4502	[FB80 C502 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4502, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_387)
{
    // 4502 0041;	
    // (䔂) CJK UNIFIED IDEOGRAPH-4502	[FB80 C502 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4502, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_388)
{
    // 4502 0062;	
    // (䔂) CJK UNIFIED IDEOGRAPH-4502	[FB80 C502 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4502, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC502, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_389)
{
    // 4503 0021;	
    // (䔃) CJK UNIFIED IDEOGRAPH-4503	[FB80 C503 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4503, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC503, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_390)
{
    // 4503 003F;	
    // (䔃) CJK UNIFIED IDEOGRAPH-4503	[FB80 C503 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4503, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC503, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_391)
{
    // 4503 0061;	
    // (䔃) CJK UNIFIED IDEOGRAPH-4503	[FB80 C503 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4503, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_392)
{
    // 4503 0041;	
    // (䔃) CJK UNIFIED IDEOGRAPH-4503	[FB80 C503 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4503, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_393)
{
    // 4503 0062;	
    // (䔃) CJK UNIFIED IDEOGRAPH-4503	[FB80 C503 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4503, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC503, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_394)
{
    // 4504 0021;	
    // (䔄) CJK UNIFIED IDEOGRAPH-4504	[FB80 C504 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4504, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC504, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_395)
{
    // 4504 003F;	
    // (䔄) CJK UNIFIED IDEOGRAPH-4504	[FB80 C504 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4504, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC504, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_396)
{
    // 4504 0061;	
    // (䔄) CJK UNIFIED IDEOGRAPH-4504	[FB80 C504 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4504, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_397)
{
    // 4504 0041;	
    // (䔄) CJK UNIFIED IDEOGRAPH-4504	[FB80 C504 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4504, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_398)
{
    // 4504 0062;	
    // (䔄) CJK UNIFIED IDEOGRAPH-4504	[FB80 C504 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4504, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC504, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_399)
{
    // 4505 0021;	
    // (䔅) CJK UNIFIED IDEOGRAPH-4505	[FB80 C505 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4505, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC505, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_400)
{
    // 4505 003F;	
    // (䔅) CJK UNIFIED IDEOGRAPH-4505	[FB80 C505 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4505, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC505, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_401)
{
    // 4505 0061;	
    // (䔅) CJK UNIFIED IDEOGRAPH-4505	[FB80 C505 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4505, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_402)
{
    // 4505 0041;	
    // (䔅) CJK UNIFIED IDEOGRAPH-4505	[FB80 C505 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4505, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_403)
{
    // 4505 0062;	
    // (䔅) CJK UNIFIED IDEOGRAPH-4505	[FB80 C505 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4505, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC505, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_404)
{
    // 4506 0021;	
    // (䔆) CJK UNIFIED IDEOGRAPH-4506	[FB80 C506 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4506, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC506, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_405)
{
    // 4506 003F;	
    // (䔆) CJK UNIFIED IDEOGRAPH-4506	[FB80 C506 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4506, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC506, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_406)
{
    // 4506 0061;	
    // (䔆) CJK UNIFIED IDEOGRAPH-4506	[FB80 C506 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4506, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_407)
{
    // 4506 0041;	
    // (䔆) CJK UNIFIED IDEOGRAPH-4506	[FB80 C506 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4506, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_408)
{
    // 4506 0062;	
    // (䔆) CJK UNIFIED IDEOGRAPH-4506	[FB80 C506 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4506, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC506, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_409)
{
    // 4507 0021;	
    // (䔇) CJK UNIFIED IDEOGRAPH-4507	[FB80 C507 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4507, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC507, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_410)
{
    // 4507 003F;	
    // (䔇) CJK UNIFIED IDEOGRAPH-4507	[FB80 C507 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4507, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC507, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_411)
{
    // 4507 0061;	
    // (䔇) CJK UNIFIED IDEOGRAPH-4507	[FB80 C507 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4507, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_412)
{
    // 4507 0041;	
    // (䔇) CJK UNIFIED IDEOGRAPH-4507	[FB80 C507 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4507, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC507, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_413)
{
    // 4507 0062;	
    // (䔇) CJK UNIFIED IDEOGRAPH-4507	[FB80 C507 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4507, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC507, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_414)
{
    // 4508 0021;	
    // (䔈) CJK UNIFIED IDEOGRAPH-4508	[FB80 C508 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4508, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC508, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_415)
{
    // 4508 003F;	
    // (䔈) CJK UNIFIED IDEOGRAPH-4508	[FB80 C508 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4508, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC508, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_416)
{
    // 4508 0061;	
    // (䔈) CJK UNIFIED IDEOGRAPH-4508	[FB80 C508 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4508, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_417)
{
    // 4508 0041;	
    // (䔈) CJK UNIFIED IDEOGRAPH-4508	[FB80 C508 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4508, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_418)
{
    // 4508 0062;	
    // (䔈) CJK UNIFIED IDEOGRAPH-4508	[FB80 C508 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4508, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC508, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_419)
{
    // 4509 0021;	
    // (䔉) CJK UNIFIED IDEOGRAPH-4509	[FB80 C509 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4509, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC509, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_420)
{
    // 4509 003F;	
    // (䔉) CJK UNIFIED IDEOGRAPH-4509	[FB80 C509 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4509, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC509, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_421)
{
    // 4509 0061;	
    // (䔉) CJK UNIFIED IDEOGRAPH-4509	[FB80 C509 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4509, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_422)
{
    // 4509 0041;	
    // (䔉) CJK UNIFIED IDEOGRAPH-4509	[FB80 C509 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4509, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_423)
{
    // 4509 0062;	
    // (䔉) CJK UNIFIED IDEOGRAPH-4509	[FB80 C509 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4509, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC509, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_424)
{
    // 450A 0021;	
    // (䔊) CJK UNIFIED IDEOGRAPH-450A	[FB80 C50A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC50A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_425)
{
    // 450A 003F;	
    // (䔊) CJK UNIFIED IDEOGRAPH-450A	[FB80 C50A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC50A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_426)
{
    // 450A 0061;	
    // (䔊) CJK UNIFIED IDEOGRAPH-450A	[FB80 C50A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC50A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_427)
{
    // 450A 0041;	
    // (䔊) CJK UNIFIED IDEOGRAPH-450A	[FB80 C50A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x450A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC50A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_428)
{
    // 450A 0062;	
    // (䔊) CJK UNIFIED IDEOGRAPH-450A	[FB80 C50A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC50A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_429)
{
    // 450B 0021;	
    // (䔋) CJK UNIFIED IDEOGRAPH-450B	[FB80 C50B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC50B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_430)
{
    // 450B 003F;	
    // (䔋) CJK UNIFIED IDEOGRAPH-450B	[FB80 C50B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC50B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_431)
{
    // 450B 0061;	
    // (䔋) CJK UNIFIED IDEOGRAPH-450B	[FB80 C50B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC50B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_432)
{
    // 450B 0041;	
    // (䔋) CJK UNIFIED IDEOGRAPH-450B	[FB80 C50B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x450B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC50B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_433)
{
    // 450B 0062;	
    // (䔋) CJK UNIFIED IDEOGRAPH-450B	[FB80 C50B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC50B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_434)
{
    // 450C 0021;	
    // (䔌) CJK UNIFIED IDEOGRAPH-450C	[FB80 C50C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC50C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_435)
{
    // 450C 003F;	
    // (䔌) CJK UNIFIED IDEOGRAPH-450C	[FB80 C50C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC50C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_436)
{
    // 450C 0061;	
    // (䔌) CJK UNIFIED IDEOGRAPH-450C	[FB80 C50C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC50C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_437)
{
    // 450C 0041;	
    // (䔌) CJK UNIFIED IDEOGRAPH-450C	[FB80 C50C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x450C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC50C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_438)
{
    // 450C 0062;	
    // (䔌) CJK UNIFIED IDEOGRAPH-450C	[FB80 C50C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC50C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_439)
{
    // 450D 0021;	
    // (䔍) CJK UNIFIED IDEOGRAPH-450D	[FB80 C50D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC50D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_440)
{
    // 450D 003F;	
    // (䔍) CJK UNIFIED IDEOGRAPH-450D	[FB80 C50D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC50D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_441)
{
    // 450D 0061;	
    // (䔍) CJK UNIFIED IDEOGRAPH-450D	[FB80 C50D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC50D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_442)
{
    // 450D 0041;	
    // (䔍) CJK UNIFIED IDEOGRAPH-450D	[FB80 C50D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x450D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC50D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_443)
{
    // 450D 0062;	
    // (䔍) CJK UNIFIED IDEOGRAPH-450D	[FB80 C50D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC50D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_444)
{
    // 450E 0021;	
    // (䔎) CJK UNIFIED IDEOGRAPH-450E	[FB80 C50E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC50E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_445)
{
    // 450E 003F;	
    // (䔎) CJK UNIFIED IDEOGRAPH-450E	[FB80 C50E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC50E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_446)
{
    // 450E 0061;	
    // (䔎) CJK UNIFIED IDEOGRAPH-450E	[FB80 C50E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC50E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_447)
{
    // 450E 0041;	
    // (䔎) CJK UNIFIED IDEOGRAPH-450E	[FB80 C50E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x450E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC50E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_448)
{
    // 450E 0062;	
    // (䔎) CJK UNIFIED IDEOGRAPH-450E	[FB80 C50E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC50E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_449)
{
    // 450F 0021;	
    // (䔏) CJK UNIFIED IDEOGRAPH-450F	[FB80 C50F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC50F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_450)
{
    // 450F 003F;	
    // (䔏) CJK UNIFIED IDEOGRAPH-450F	[FB80 C50F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC50F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_451)
{
    // 450F 0061;	
    // (䔏) CJK UNIFIED IDEOGRAPH-450F	[FB80 C50F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC50F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_452)
{
    // 450F 0041;	
    // (䔏) CJK UNIFIED IDEOGRAPH-450F	[FB80 C50F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x450F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC50F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_453)
{
    // 450F 0062;	
    // (䔏) CJK UNIFIED IDEOGRAPH-450F	[FB80 C50F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x450F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC50F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_454)
{
    // 4510 0021;	
    // (䔐) CJK UNIFIED IDEOGRAPH-4510	[FB80 C510 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4510, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC510, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_455)
{
    // 4510 003F;	
    // (䔐) CJK UNIFIED IDEOGRAPH-4510	[FB80 C510 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4510, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC510, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_456)
{
    // 4510 0061;	
    // (䔐) CJK UNIFIED IDEOGRAPH-4510	[FB80 C510 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4510, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_457)
{
    // 4510 0041;	
    // (䔐) CJK UNIFIED IDEOGRAPH-4510	[FB80 C510 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4510, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_458)
{
    // 4510 0062;	
    // (䔐) CJK UNIFIED IDEOGRAPH-4510	[FB80 C510 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4510, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC510, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_459)
{
    // 4511 0021;	
    // (䔑) CJK UNIFIED IDEOGRAPH-4511	[FB80 C511 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4511, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC511, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_460)
{
    // 4511 003F;	
    // (䔑) CJK UNIFIED IDEOGRAPH-4511	[FB80 C511 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4511, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC511, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_461)
{
    // 4511 0061;	
    // (䔑) CJK UNIFIED IDEOGRAPH-4511	[FB80 C511 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4511, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_462)
{
    // 4511 0041;	
    // (䔑) CJK UNIFIED IDEOGRAPH-4511	[FB80 C511 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4511, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_463)
{
    // 4511 0062;	
    // (䔑) CJK UNIFIED IDEOGRAPH-4511	[FB80 C511 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4511, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC511, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_464)
{
    // 4512 0021;	
    // (䔒) CJK UNIFIED IDEOGRAPH-4512	[FB80 C512 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4512, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC512, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_465)
{
    // 4512 003F;	
    // (䔒) CJK UNIFIED IDEOGRAPH-4512	[FB80 C512 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4512, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC512, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_466)
{
    // 4512 0061;	
    // (䔒) CJK UNIFIED IDEOGRAPH-4512	[FB80 C512 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4512, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_467)
{
    // 4512 0041;	
    // (䔒) CJK UNIFIED IDEOGRAPH-4512	[FB80 C512 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4512, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_468)
{
    // 4512 0062;	
    // (䔒) CJK UNIFIED IDEOGRAPH-4512	[FB80 C512 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4512, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC512, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_469)
{
    // 4513 0021;	
    // (䔓) CJK UNIFIED IDEOGRAPH-4513	[FB80 C513 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4513, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC513, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_470)
{
    // 4513 003F;	
    // (䔓) CJK UNIFIED IDEOGRAPH-4513	[FB80 C513 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4513, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC513, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_471)
{
    // 4513 0061;	
    // (䔓) CJK UNIFIED IDEOGRAPH-4513	[FB80 C513 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4513, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_472)
{
    // 4513 0041;	
    // (䔓) CJK UNIFIED IDEOGRAPH-4513	[FB80 C513 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4513, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_473)
{
    // 4513 0062;	
    // (䔓) CJK UNIFIED IDEOGRAPH-4513	[FB80 C513 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4513, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC513, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_474)
{
    // 4514 0021;	
    // (䔔) CJK UNIFIED IDEOGRAPH-4514	[FB80 C514 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4514, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC514, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_475)
{
    // 4514 003F;	
    // (䔔) CJK UNIFIED IDEOGRAPH-4514	[FB80 C514 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4514, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC514, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_476)
{
    // 4514 0061;	
    // (䔔) CJK UNIFIED IDEOGRAPH-4514	[FB80 C514 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4514, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_477)
{
    // 4514 0041;	
    // (䔔) CJK UNIFIED IDEOGRAPH-4514	[FB80 C514 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4514, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_478)
{
    // 4514 0062;	
    // (䔔) CJK UNIFIED IDEOGRAPH-4514	[FB80 C514 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4514, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC514, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_479)
{
    // 4515 0021;	
    // (䔕) CJK UNIFIED IDEOGRAPH-4515	[FB80 C515 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4515, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC515, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_480)
{
    // 4515 003F;	
    // (䔕) CJK UNIFIED IDEOGRAPH-4515	[FB80 C515 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4515, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC515, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_481)
{
    // 4515 0061;	
    // (䔕) CJK UNIFIED IDEOGRAPH-4515	[FB80 C515 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4515, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_482)
{
    // 4515 0041;	
    // (䔕) CJK UNIFIED IDEOGRAPH-4515	[FB80 C515 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4515, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_483)
{
    // 4515 0062;	
    // (䔕) CJK UNIFIED IDEOGRAPH-4515	[FB80 C515 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4515, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC515, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_484)
{
    // 4516 0021;	
    // (䔖) CJK UNIFIED IDEOGRAPH-4516	[FB80 C516 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4516, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC516, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_485)
{
    // 4516 003F;	
    // (䔖) CJK UNIFIED IDEOGRAPH-4516	[FB80 C516 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4516, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC516, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_486)
{
    // 4516 0061;	
    // (䔖) CJK UNIFIED IDEOGRAPH-4516	[FB80 C516 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4516, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_487)
{
    // 4516 0041;	
    // (䔖) CJK UNIFIED IDEOGRAPH-4516	[FB80 C516 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4516, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_488)
{
    // 4516 0062;	
    // (䔖) CJK UNIFIED IDEOGRAPH-4516	[FB80 C516 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4516, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC516, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_489)
{
    // 4517 0021;	
    // (䔗) CJK UNIFIED IDEOGRAPH-4517	[FB80 C517 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4517, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC517, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_490)
{
    // 4517 003F;	
    // (䔗) CJK UNIFIED IDEOGRAPH-4517	[FB80 C517 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4517, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC517, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_491)
{
    // 4517 0061;	
    // (䔗) CJK UNIFIED IDEOGRAPH-4517	[FB80 C517 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4517, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_492)
{
    // 4517 0041;	
    // (䔗) CJK UNIFIED IDEOGRAPH-4517	[FB80 C517 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4517, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_493)
{
    // 4517 0062;	
    // (䔗) CJK UNIFIED IDEOGRAPH-4517	[FB80 C517 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4517, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC517, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_494)
{
    // 4518 0021;	
    // (䔘) CJK UNIFIED IDEOGRAPH-4518	[FB80 C518 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4518, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC518, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_495)
{
    // 4518 003F;	
    // (䔘) CJK UNIFIED IDEOGRAPH-4518	[FB80 C518 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4518, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC518, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_496)
{
    // 4518 0061;	
    // (䔘) CJK UNIFIED IDEOGRAPH-4518	[FB80 C518 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4518, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_497)
{
    // 4518 0041;	
    // (䔘) CJK UNIFIED IDEOGRAPH-4518	[FB80 C518 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4518, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_498)
{
    // 4518 0062;	
    // (䔘) CJK UNIFIED IDEOGRAPH-4518	[FB80 C518 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4518, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC518, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_370_499)
{
    // 4519 0021;	
    // (䔙) CJK UNIFIED IDEOGRAPH-4519	[FB80 C519 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4519, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC519, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

