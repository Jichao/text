// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_080_000)
{
    // 318E  ; [.3DCA.0020.0004] 
    // HANGUL LETTER ARAEAE

    uint32_t const cps[1] = { 0x318e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3dca), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_001)
{
    // 3190  ; [*1AF6.0020.0002] 
    // IDEOGRAPHIC ANNOTATION LINKING MARK

    uint32_t const cps[1] = { 0x3190 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_002)
{
    // 3191  ; [*1AF7.0020.0002] 
    // IDEOGRAPHIC ANNOTATION REVERSE MARK

    uint32_t const cps[1] = { 0x3191 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1af7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_003)
{
    // 3192  ; [.FB40.0020.0014][.CE00.0000.0000] 
    // IDEOGRAPHIC ANNOTATION ONE MARK

    uint32_t const cps[1] = { 0x3192 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xce00), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_004)
{
    // 3193  ; [.FB40.0020.0014][.CE8C.0000.0000] 
    // IDEOGRAPHIC ANNOTATION TWO MARK

    uint32_t const cps[1] = { 0x3193 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xce8c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_005)
{
    // 3194  ; [.FB40.0020.0014][.CE09.0000.0000] 
    // IDEOGRAPHIC ANNOTATION THREE MARK

    uint32_t const cps[1] = { 0x3194 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xce09), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_006)
{
    // 3195  ; [.FB40.0020.0014][.D6DB.0000.0000] 
    // IDEOGRAPHIC ANNOTATION FOUR MARK

    uint32_t const cps[1] = { 0x3195 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xd6db), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_007)
{
    // 3196  ; [.FB40.0020.0014][.CE0A.0000.0000] 
    // IDEOGRAPHIC ANNOTATION TOP MARK

    uint32_t const cps[1] = { 0x3196 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xce0a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_008)
{
    // 3197  ; [.FB40.0020.0014][.CE2D.0000.0000] 
    // IDEOGRAPHIC ANNOTATION MIDDLE MARK

    uint32_t const cps[1] = { 0x3197 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xce2d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_009)
{
    // 3198  ; [.FB40.0020.0014][.CE0B.0000.0000] 
    // IDEOGRAPHIC ANNOTATION BOTTOM MARK

    uint32_t const cps[1] = { 0x3198 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xce0b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_010)
{
    // 3199  ; [.FB40.0020.0014][.F532.0000.0000] 
    // IDEOGRAPHIC ANNOTATION FIRST MARK

    uint32_t const cps[1] = { 0x3199 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xf532), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_011)
{
    // 319A  ; [.FB40.0020.0014][.CE59.0000.0000] 
    // IDEOGRAPHIC ANNOTATION SECOND MARK

    uint32_t const cps[1] = { 0x319a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xce59), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_012)
{
    // 319B  ; [.FB40.0020.0014][.CE19.0000.0000] 
    // IDEOGRAPHIC ANNOTATION THIRD MARK

    uint32_t const cps[1] = { 0x319b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xce19), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_013)
{
    // 319C  ; [.FB40.0020.0014][.CE01.0000.0000] 
    // IDEOGRAPHIC ANNOTATION FOURTH MARK

    uint32_t const cps[1] = { 0x319c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xce01), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_014)
{
    // 319D  ; [.FB40.0020.0014][.D929.0000.0000] 
    // IDEOGRAPHIC ANNOTATION HEAVEN MARK

    uint32_t const cps[1] = { 0x319d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xd929), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_015)
{
    // 319E  ; [.FB40.0020.0014][.D730.0000.0000] 
    // IDEOGRAPHIC ANNOTATION EARTH MARK

    uint32_t const cps[1] = { 0x319e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xd730), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_016)
{
    // 319F  ; [.FB40.0020.0014][.CEBA.0000.0000] 
    // IDEOGRAPHIC ANNOTATION MAN MARK

    uint32_t const cps[1] = { 0x319f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0xceba), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_017)
{
    // 31A0  ; [.3FC0.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER BU

    uint32_t const cps[1] = { 0x31a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fc0), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_018)
{
    // 31A1  ; [.3FD6.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER ZI

    uint32_t const cps[1] = { 0x31a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fd6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_019)
{
    // 31A2  ; [.3FCE.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER JI

    uint32_t const cps[1] = { 0x31a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fce), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_020)
{
    // 31A3  ; [.3FC9.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER GU

    uint32_t const cps[1] = { 0x31a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fc9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_021)
{
    // 31A4  ; [.3FE1.0020.0002] 
    // BOPOMOFO LETTER EE

    uint32_t const cps[1] = { 0x31a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fe1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_022)
{
    // 31A5  ; [.3FE1.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER ENN

    uint32_t const cps[1] = { 0x31a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fe1), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_023)
{
    // 31A6  ; [.3FDE.0020.0002] 
    // BOPOMOFO LETTER OO

    uint32_t const cps[1] = { 0x31a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_024)
{
    // 31A7  ; [.3FDD.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER ONN

    uint32_t const cps[1] = { 0x31a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fdd), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_025)
{
    // 31A8  ; [.3FF0.0020.0004][.0000.0113.0004] 
    // BOPOMOFO LETTER IR

    uint32_t const cps[1] = { 0x31a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3ff0), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf3), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_026)
{
    // 31A9  ; [.3FDC.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER ANN

    uint32_t const cps[1] = { 0x31a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fdc), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_027)
{
    // 31AA  ; [.3FEF.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER INN

    uint32_t const cps[1] = { 0x31aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fef), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_028)
{
    // 31AB  ; [.3FF0.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER UNN

    uint32_t const cps[1] = { 0x31ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3ff0), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_029)
{
    // 31AC  ; [.3FED.0020.0002] 
    // BOPOMOFO LETTER IM

    uint32_t const cps[1] = { 0x31ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_030)
{
    // 31AD  ; [.3FCC.0020.0002] 
    // BOPOMOFO LETTER NGG

    uint32_t const cps[1] = { 0x31ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fcc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_031)
{
    // 31AE  ; [.3FE2.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER AINN

    uint32_t const cps[1] = { 0x31ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fe2), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_032)
{
    // 31AF  ; [.3FE4.0020.0004][.0000.0112.0004] 
    // BOPOMOFO LETTER AUNN

    uint32_t const cps[1] = { 0x31af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fe4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_033)
{
    // 31B0  ; [.3FEB.0020.0002] 
    // BOPOMOFO LETTER AM

    uint32_t const cps[1] = { 0x31b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3feb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_034)
{
    // 31B1  ; [.3FEC.0020.0002] 
    // BOPOMOFO LETTER OM

    uint32_t const cps[1] = { 0x31b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_035)
{
    // 31B2  ; [.3FE9.0020.0002] 
    // BOPOMOFO LETTER ONG

    uint32_t const cps[1] = { 0x31b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fe9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_036)
{
    // 31B3  ; [.3FEF.0020.0016][.0000.0112.0016] 
    // BOPOMOFO LETTER INNN

    uint32_t const cps[1] = { 0x31b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x3fef), uint8_t(0x0), uint8_t(0x16)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_080_037)
{
    // 31B4  ; [.3FC1.0020.0019] 
    // BOPOMOFO FINAL LETTER P

    uint32_t const cps[1] = { 0x31b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fc1), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_038)
{
    // 31B5  ; [.3FC6.0020.0019] 
    // BOPOMOFO FINAL LETTER T

    uint32_t const cps[1] = { 0x31b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fc6), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_039)
{
    // 31B6  ; [.3FCA.0020.0019] 
    // BOPOMOFO FINAL LETTER K

    uint32_t const cps[1] = { 0x31b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fca), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_040)
{
    // 31B7  ; [.3FCD.0020.0019] 
    // BOPOMOFO FINAL LETTER H

    uint32_t const cps[1] = { 0x31b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fcd), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_041)
{
    // 31B8  ; [.3FD9.0020.0002] 
    // BOPOMOFO LETTER GH

    uint32_t const cps[1] = { 0x31b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fd9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_042)
{
    // 31B9  ; [.3FDA.0020.0002] 
    // BOPOMOFO LETTER LH

    uint32_t const cps[1] = { 0x31b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_043)
{
    // 31BA  ; [.3FDB.0020.0002] 
    // BOPOMOFO LETTER ZY

    uint32_t const cps[1] = { 0x31ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fdb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_044)
{
    // 31C0  ; [*1ACB.0020.0002] 
    // CJK STROKE T

    uint32_t const cps[1] = { 0x31c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1acb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_045)
{
    // 31C1  ; [*1ACC.0020.0002] 
    // CJK STROKE WG

    uint32_t const cps[1] = { 0x31c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1acc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_046)
{
    // 31C2  ; [*1ACD.0020.0002] 
    // CJK STROKE XG

    uint32_t const cps[1] = { 0x31c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1acd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_047)
{
    // 31C3  ; [*1ACE.0020.0002] 
    // CJK STROKE BXG

    uint32_t const cps[1] = { 0x31c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ace), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_048)
{
    // 31C4  ; [*1ACF.0020.0002] 
    // CJK STROKE SW

    uint32_t const cps[1] = { 0x31c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1acf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_049)
{
    // 31C5  ; [*1AD0.0020.0002] 
    // CJK STROKE HZZ

    uint32_t const cps[1] = { 0x31c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_050)
{
    // 31C6  ; [*1AD1.0020.0002] 
    // CJK STROKE HZG

    uint32_t const cps[1] = { 0x31c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_051)
{
    // 31C7  ; [*1AD2.0020.0002] 
    // CJK STROKE HP

    uint32_t const cps[1] = { 0x31c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_052)
{
    // 31C8  ; [*1AD3.0020.0002] 
    // CJK STROKE HZWG

    uint32_t const cps[1] = { 0x31c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_053)
{
    // 31C9  ; [*1AD4.0020.0002] 
    // CJK STROKE SZWG

    uint32_t const cps[1] = { 0x31c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_054)
{
    // 31CA  ; [*1AD5.0020.0002] 
    // CJK STROKE HZT

    uint32_t const cps[1] = { 0x31ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_055)
{
    // 31CB  ; [*1AD6.0020.0002] 
    // CJK STROKE HZZP

    uint32_t const cps[1] = { 0x31cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_056)
{
    // 31CC  ; [*1AD7.0020.0002] 
    // CJK STROKE HPWG

    uint32_t const cps[1] = { 0x31cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_057)
{
    // 31CD  ; [*1AD8.0020.0002] 
    // CJK STROKE HZW

    uint32_t const cps[1] = { 0x31cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_058)
{
    // 31CE  ; [*1AD9.0020.0002] 
    // CJK STROKE HZZZ

    uint32_t const cps[1] = { 0x31ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ad9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_059)
{
    // 31CF  ; [*1ADA.0020.0002] 
    // CJK STROKE N

    uint32_t const cps[1] = { 0x31cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ada), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_060)
{
    // 31D0  ; [*1ADB.0020.0002] 
    // CJK STROKE H

    uint32_t const cps[1] = { 0x31d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1adb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_061)
{
    // 31D1  ; [*1ADC.0020.0002] 
    // CJK STROKE S

    uint32_t const cps[1] = { 0x31d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1adc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_062)
{
    // 31D2  ; [*1ADD.0020.0002] 
    // CJK STROKE P

    uint32_t const cps[1] = { 0x31d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1add), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_063)
{
    // 31D3  ; [*1ADE.0020.0002] 
    // CJK STROKE SP

    uint32_t const cps[1] = { 0x31d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ade), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_064)
{
    // 31D4  ; [*1ADF.0020.0002] 
    // CJK STROKE D

    uint32_t const cps[1] = { 0x31d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1adf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_065)
{
    // 31D5  ; [*1AE0.0020.0002] 
    // CJK STROKE HZ

    uint32_t const cps[1] = { 0x31d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_066)
{
    // 31D6  ; [*1AE1.0020.0002] 
    // CJK STROKE HG

    uint32_t const cps[1] = { 0x31d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_067)
{
    // 31D7  ; [*1AE2.0020.0002] 
    // CJK STROKE SZ

    uint32_t const cps[1] = { 0x31d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_068)
{
    // 31D8  ; [*1AE3.0020.0002] 
    // CJK STROKE SWZ

    uint32_t const cps[1] = { 0x31d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_069)
{
    // 31D9  ; [*1AE4.0020.0002] 
    // CJK STROKE ST

    uint32_t const cps[1] = { 0x31d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_070)
{
    // 31DA  ; [*1AE5.0020.0002] 
    // CJK STROKE SG

    uint32_t const cps[1] = { 0x31da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_071)
{
    // 31DB  ; [*1AE6.0020.0002] 
    // CJK STROKE PD

    uint32_t const cps[1] = { 0x31db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_072)
{
    // 31DC  ; [*1AE7.0020.0002] 
    // CJK STROKE PZ

    uint32_t const cps[1] = { 0x31dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_073)
{
    // 31DD  ; [*1AE8.0020.0002] 
    // CJK STROKE TN

    uint32_t const cps[1] = { 0x31dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_074)
{
    // 31DE  ; [*1AE9.0020.0002] 
    // CJK STROKE SZZ

    uint32_t const cps[1] = { 0x31de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ae9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_075)
{
    // 31DF  ; [*1AEA.0020.0002] 
    // CJK STROKE SWG

    uint32_t const cps[1] = { 0x31df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1aea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_076)
{
    // 31E0  ; [*1AEB.0020.0002] 
    // CJK STROKE HXWG

    uint32_t const cps[1] = { 0x31e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1aeb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_077)
{
    // 31E1  ; [*1AEC.0020.0002] 
    // CJK STROKE HZZZG

    uint32_t const cps[1] = { 0x31e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1aec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_078)
{
    // 31E2  ; [*1AED.0020.0002] 
    // CJK STROKE PG

    uint32_t const cps[1] = { 0x31e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1aed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_079)
{
    // 31E3  ; [*1AEE.0020.0002] 
    // CJK STROKE Q

    uint32_t const cps[1] = { 0x31e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1aee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_080)
{
    // 31F0  ; [.3E79.0020.000F] 
    // KATAKANA LETTER SMALL KU

    uint32_t const cps[1] = { 0x31f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e79), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_081)
{
    // 31F1  ; [.3E7D.0020.000F] 
    // KATAKANA LETTER SMALL SI

    uint32_t const cps[1] = { 0x31f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e7d), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_082)
{
    // 31F2  ; [.3E7E.0020.000F] 
    // KATAKANA LETTER SMALL SU

    uint32_t const cps[1] = { 0x31f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e7e), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_083)
{
    // 31F3  ; [.3E85.0020.000F] 
    // KATAKANA LETTER SMALL TO

    uint32_t const cps[1] = { 0x31f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e85), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_084)
{
    // 31F4  ; [.3E88.0020.000F] 
    // KATAKANA LETTER SMALL NU

    uint32_t const cps[1] = { 0x31f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e88), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_085)
{
    // 31F5  ; [.3E8B.0020.000F] 
    // KATAKANA LETTER SMALL HA

    uint32_t const cps[1] = { 0x31f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e8b), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_086)
{
    // 31F6  ; [.3E8C.0020.000F] 
    // KATAKANA LETTER SMALL HI

    uint32_t const cps[1] = { 0x31f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e8c), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_087)
{
    // 31F7  ; [.3E8D.0020.000F] 
    // KATAKANA LETTER SMALL HU

    uint32_t const cps[1] = { 0x31f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e8d), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_088)
{
    // 31F8  ; [.3E8E.0020.000F] 
    // KATAKANA LETTER SMALL HE

    uint32_t const cps[1] = { 0x31f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e8e), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_089)
{
    // 31F9  ; [.3E8F.0020.000F] 
    // KATAKANA LETTER SMALL HO

    uint32_t const cps[1] = { 0x31f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e8f), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_090)
{
    // 31FA  ; [.3E92.0020.000F] 
    // KATAKANA LETTER SMALL MU

    uint32_t const cps[1] = { 0x31fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e92), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_091)
{
    // 31FB  ; [.3E98.0020.000F] 
    // KATAKANA LETTER SMALL RA

    uint32_t const cps[1] = { 0x31fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e98), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_092)
{
    // 31FC  ; [.3E99.0020.000F] 
    // KATAKANA LETTER SMALL RI

    uint32_t const cps[1] = { 0x31fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e99), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_093)
{
    // 31FD  ; [.3E9A.0020.000F] 
    // KATAKANA LETTER SMALL RU

    uint32_t const cps[1] = { 0x31fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e9a), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_094)
{
    // 31FE  ; [.3E9B.0020.000F] 
    // KATAKANA LETTER SMALL RE

    uint32_t const cps[1] = { 0x31fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e9b), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_095)
{
    // 31FF  ; [.3E9C.0020.000F] 
    // KATAKANA LETTER SMALL RO

    uint32_t const cps[1] = { 0x31ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3e9c), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_080_096)
{
    // 3200  ; [*0318.0020.0004][.3D0C.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL KIYEOK

    uint32_t const cps[1] = { 0x3200 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d0c), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_097)
{
    // 3201  ; [*0318.0020.0004][.3D0E.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL NIEUN

    uint32_t const cps[1] = { 0x3201 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d0e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_098)
{
    // 3202  ; [*0318.0020.0004][.3D0F.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL TIKEUT

    uint32_t const cps[1] = { 0x3202 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d0f), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_099)
{
    // 3203  ; [*0318.0020.0004][.3D11.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL RIEUL

    uint32_t const cps[1] = { 0x3203 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d11), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_100)
{
    // 3204  ; [*0318.0020.0004][.3D12.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL MIEUM

    uint32_t const cps[1] = { 0x3204 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d12), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_101)
{
    // 3205  ; [*0318.0020.0004][.3D13.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL PIEUP

    uint32_t const cps[1] = { 0x3205 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d13), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_102)
{
    // 3206  ; [*0318.0020.0004][.3D15.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL SIOS

    uint32_t const cps[1] = { 0x3206 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d15), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_103)
{
    // 3207  ; [*0318.0020.0004][.3D17.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL IEUNG

    uint32_t const cps[1] = { 0x3207 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d17), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_104)
{
    // 3208  ; [*0318.0020.0004][.3D18.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL CIEUC

    uint32_t const cps[1] = { 0x3208 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d18), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_105)
{
    // 3209  ; [*0318.0020.0004][.3D1A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL CHIEUCH

    uint32_t const cps[1] = { 0x3209 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_106)
{
    // 320A  ; [*0318.0020.0004][.3D1B.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL KHIEUKH

    uint32_t const cps[1] = { 0x320a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_107)
{
    // 320B  ; [*0318.0020.0004][.3D1C.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL THIEUTH

    uint32_t const cps[1] = { 0x320b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1c), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_108)
{
    // 320C  ; [*0318.0020.0004][.3D1D.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL PHIEUPH

    uint32_t const cps[1] = { 0x320c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1d), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_109)
{
    // 320D  ; [*0318.0020.0004][.3D1E.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL HIEUH

    uint32_t const cps[1] = { 0x320d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_080_110)
{
    // 320E  ; [*0318.0020.0004][.3D0C.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL KIYEOK A

    uint32_t const cps[1] = { 0x320e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d0c), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_111)
{
    // 320F  ; [*0318.0020.0004][.3D0E.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL NIEUN A

    uint32_t const cps[1] = { 0x320f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d0e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_112)
{
    // 3210  ; [*0318.0020.0004][.3D0F.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL TIKEUT A

    uint32_t const cps[1] = { 0x3210 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d0f), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_113)
{
    // 3211  ; [*0318.0020.0004][.3D11.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL RIEUL A

    uint32_t const cps[1] = { 0x3211 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d11), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_114)
{
    // 3212  ; [*0318.0020.0004][.3D12.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL MIEUM A

    uint32_t const cps[1] = { 0x3212 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d12), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_115)
{
    // 3213  ; [*0318.0020.0004][.3D13.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL PIEUP A

    uint32_t const cps[1] = { 0x3213 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d13), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_116)
{
    // 3214  ; [*0318.0020.0004][.3D15.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL SIOS A

    uint32_t const cps[1] = { 0x3214 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d15), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_117)
{
    // 3215  ; [*0318.0020.0004][.3D17.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL IEUNG A

    uint32_t const cps[1] = { 0x3215 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d17), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_118)
{
    // 3216  ; [*0318.0020.0004][.3D18.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL CIEUC A

    uint32_t const cps[1] = { 0x3216 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d18), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_119)
{
    // 3217  ; [*0318.0020.0004][.3D1A.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL CHIEUCH A

    uint32_t const cps[1] = { 0x3217 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_120)
{
    // 3218  ; [*0318.0020.0004][.3D1B.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL KHIEUKH A

    uint32_t const cps[1] = { 0x3218 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_121)
{
    // 3219  ; [*0318.0020.0004][.3D1C.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL THIEUTH A

    uint32_t const cps[1] = { 0x3219 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1c), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_122)
{
    // 321A  ; [*0318.0020.0004][.3D1D.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL PHIEUPH A

    uint32_t const cps[1] = { 0x321a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1d), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_123)
{
    // 321B  ; [*0318.0020.0004][.3D1E.0020.0004][.3D8A.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL HIEUH A

    uint32_t const cps[1] = { 0x321b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_124)
{
    // 321C  ; [*0318.0020.0004][.3D18.0020.0004][.3D97.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED HANGUL CIEUC U

    uint32_t const cps[1] = { 0x321c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d18), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d97), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_125)
{
    // 321D  ; [*0318.0020.0004][.3D17.0020.0004][.3D92.0020.0004][.3D18.0020.0004][.3D8E.0020.0004][.3DEB.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED KOREAN CHARACTER OJEON

    uint32_t const cps[1] = { 0x321d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[7] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d17), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d92), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d18), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d8e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3deb), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 7));
}

TEST(collation, table_lookup_080_126)
{
    // 321E  ; [*0318.0020.0004][.3D17.0020.0004][.3D92.0020.0004][.3D1E.0020.0004][.3D97.0020.0004][*0319.0020.0004] 
    // PARENTHESIZED KOREAN CHARACTER O HU

    uint32_t const cps[1] = { 0x321e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[6] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d17), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d92), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d1e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3d97), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_080_127)
{
    // 3220  ; [*0318.0020.0004][.FB40.0020.0004][.CE00.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH ONE

    uint32_t const cps[1] = { 0x3220 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce00), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_128)
{
    // 3221  ; [*0318.0020.0004][.FB40.0020.0004][.CE8C.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH TWO

    uint32_t const cps[1] = { 0x3221 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce8c), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_129)
{
    // 3222  ; [*0318.0020.0004][.FB40.0020.0004][.CE09.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH THREE

    uint32_t const cps[1] = { 0x3222 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce09), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_130)
{
    // 3223  ; [*0318.0020.0004][.FB40.0020.0004][.D6DB.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH FOUR

    uint32_t const cps[1] = { 0x3223 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd6db), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_131)
{
    // 3224  ; [*0318.0020.0004][.FB40.0020.0004][.CE94.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH FIVE

    uint32_t const cps[1] = { 0x3224 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce94), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_132)
{
    // 3225  ; [*0318.0020.0004][.FB40.0020.0004][.D16D.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH SIX

    uint32_t const cps[1] = { 0x3225 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd16d), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_133)
{
    // 3226  ; [*0318.0020.0004][.FB40.0020.0004][.CE03.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH SEVEN

    uint32_t const cps[1] = { 0x3226 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce03), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_134)
{
    // 3227  ; [*0318.0020.0004][.FB40.0020.0004][.D16B.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH EIGHT

    uint32_t const cps[1] = { 0x3227 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd16b), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_135)
{
    // 3228  ; [*0318.0020.0004][.FB40.0020.0004][.CE5D.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH NINE

    uint32_t const cps[1] = { 0x3228 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xce5d), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_136)
{
    // 3229  ; [*0318.0020.0004][.FB40.0020.0004][.D341.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH TEN

    uint32_t const cps[1] = { 0x3229 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd341), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_137)
{
    // 322A  ; [*0318.0020.0004][.FB40.0020.0004][.E708.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH MOON

    uint32_t const cps[1] = { 0x322a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_138)
{
    // 322B  ; [*0318.0020.0004][.FB40.0020.0004][.F06B.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH FIRE

    uint32_t const cps[1] = { 0x322b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf06b), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_139)
{
    // 322C  ; [*0318.0020.0004][.FB40.0020.0004][.EC34.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH WATER

    uint32_t const cps[1] = { 0x322c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xec34), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_140)
{
    // 322D  ; [*0318.0020.0004][.FB40.0020.0004][.E728.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH WOOD

    uint32_t const cps[1] = { 0x322d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe728), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_141)
{
    // 322E  ; [*0318.0020.0004][.FB41.0020.0004][.91D1.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH METAL

    uint32_t const cps[1] = { 0x322e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x91d1), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_142)
{
    // 322F  ; [*0318.0020.0004][.FB40.0020.0004][.D71F.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH EARTH

    uint32_t const cps[1] = { 0x322f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd71f), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_143)
{
    // 3230  ; [*0318.0020.0004][.FB40.0020.0004][.E5E5.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH SUN

    uint32_t const cps[1] = { 0x3230 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_144)
{
    // 3231  ; [*0318.0020.0004][.FB40.0020.0004][.E82A.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH STOCK

    uint32_t const cps[1] = { 0x3231 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe82a), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_145)
{
    // 3232  ; [*0318.0020.0004][.FB40.0020.0004][.E709.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH HAVE

    uint32_t const cps[1] = { 0x3232 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe709), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_146)
{
    // 3233  ; [*0318.0020.0004][.FB40.0020.0004][.F93E.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH SOCIETY

    uint32_t const cps[1] = { 0x3233 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf93e), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_147)
{
    // 3234  ; [*0318.0020.0004][.FB40.0020.0004][.D40D.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH NAME

    uint32_t const cps[1] = { 0x3234 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xd40d), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_148)
{
    // 3235  ; [*0318.0020.0004][.FB40.0020.0004][.F279.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH SPECIAL

    uint32_t const cps[1] = { 0x3235 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf279), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_080_149)
{
    // 3236  ; [*0318.0020.0004][.FB41.0020.0004][.8CA1.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH FINANCIAL

    uint32_t const cps[1] = { 0x3236 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x8ca1), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

