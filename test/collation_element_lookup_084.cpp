// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_084_000)
{
    // 33FA  ; [.1CA5.0020.0004][.1CAA.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-SEVEN

    uint32_t const cps[1] = { 0x33fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_084_001)
{
    // 33FB  ; [.1CA5.0020.0004][.1CAB.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-EIGHT

    uint32_t const cps[1] = { 0x33fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_084_002)
{
    // 33FC  ; [.1CA5.0020.0004][.1CAC.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-NINE

    uint32_t const cps[1] = { 0x33fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_084_003)
{
    // 33FD  ; [.1CA6.0020.0004][.1CA3.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY

    uint32_t const cps[1] = { 0x33fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_084_004)
{
    // 33FE  ; [.1CA6.0020.0004][.1CA4.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY-ONE

    uint32_t const cps[1] = { 0x33fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_084_005)
{
    // 33FF  ; [.1D5A.0020.001C][.1CAD.0020.001C][.1DDD.0020.001C] 
    // SQUARE GAL

    uint32_t const cps[1] = { 0x33ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_084_006)
{
    // 4DC0  ; [*0EC2.0020.0002] 
    // HEXAGRAM FOR THE CREATIVE HEAVEN

    uint32_t const cps[1] = { 0x4dc0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xec2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_007)
{
    // 4DC1  ; [*0EC3.0020.0002] 
    // HEXAGRAM FOR THE RECEPTIVE EARTH

    uint32_t const cps[1] = { 0x4dc1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xec3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_008)
{
    // 4DC2  ; [*0EC4.0020.0002] 
    // HEXAGRAM FOR DIFFICULTY AT THE BEGINNING

    uint32_t const cps[1] = { 0x4dc2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xec4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_009)
{
    // 4DC3  ; [*0EC5.0020.0002] 
    // HEXAGRAM FOR YOUTHFUL FOLLY

    uint32_t const cps[1] = { 0x4dc3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_010)
{
    // 4DC4  ; [*0EC6.0020.0002] 
    // HEXAGRAM FOR WAITING

    uint32_t const cps[1] = { 0x4dc4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_011)
{
    // 4DC5  ; [*0EC7.0020.0002] 
    // HEXAGRAM FOR CONFLICT

    uint32_t const cps[1] = { 0x4dc5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xec7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_012)
{
    // 4DC6  ; [*0EC8.0020.0002] 
    // HEXAGRAM FOR THE ARMY

    uint32_t const cps[1] = { 0x4dc6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xec8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_013)
{
    // 4DC7  ; [*0EC9.0020.0002] 
    // HEXAGRAM FOR HOLDING TOGETHER

    uint32_t const cps[1] = { 0x4dc7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xec9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_014)
{
    // 4DC8  ; [*0ECA.0020.0002] 
    // HEXAGRAM FOR SMALL TAMING

    uint32_t const cps[1] = { 0x4dc8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_015)
{
    // 4DC9  ; [*0ECB.0020.0002] 
    // HEXAGRAM FOR TREADING

    uint32_t const cps[1] = { 0x4dc9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xecb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_016)
{
    // 4DCA  ; [*0ECC.0020.0002] 
    // HEXAGRAM FOR PEACE

    uint32_t const cps[1] = { 0x4dca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xecc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_017)
{
    // 4DCB  ; [*0ECD.0020.0002] 
    // HEXAGRAM FOR STANDSTILL

    uint32_t const cps[1] = { 0x4dcb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xecd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_018)
{
    // 4DCC  ; [*0ECE.0020.0002] 
    // HEXAGRAM FOR FELLOWSHIP

    uint32_t const cps[1] = { 0x4dcc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xece), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_019)
{
    // 4DCD  ; [*0ECF.0020.0002] 
    // HEXAGRAM FOR GREAT POSSESSION

    uint32_t const cps[1] = { 0x4dcd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xecf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_020)
{
    // 4DCE  ; [*0ED0.0020.0002] 
    // HEXAGRAM FOR MODESTY

    uint32_t const cps[1] = { 0x4dce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_021)
{
    // 4DCF  ; [*0ED1.0020.0002] 
    // HEXAGRAM FOR ENTHUSIASM

    uint32_t const cps[1] = { 0x4dcf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_022)
{
    // 4DD0  ; [*0ED2.0020.0002] 
    // HEXAGRAM FOR FOLLOWING

    uint32_t const cps[1] = { 0x4dd0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_023)
{
    // 4DD1  ; [*0ED3.0020.0002] 
    // HEXAGRAM FOR WORK ON THE DECAYED

    uint32_t const cps[1] = { 0x4dd1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_024)
{
    // 4DD2  ; [*0ED4.0020.0002] 
    // HEXAGRAM FOR APPROACH

    uint32_t const cps[1] = { 0x4dd2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_025)
{
    // 4DD3  ; [*0ED5.0020.0002] 
    // HEXAGRAM FOR CONTEMPLATION

    uint32_t const cps[1] = { 0x4dd3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_026)
{
    // 4DD4  ; [*0ED6.0020.0002] 
    // HEXAGRAM FOR BITING THROUGH

    uint32_t const cps[1] = { 0x4dd4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_027)
{
    // 4DD5  ; [*0ED7.0020.0002] 
    // HEXAGRAM FOR GRACE

    uint32_t const cps[1] = { 0x4dd5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_028)
{
    // 4DD6  ; [*0ED8.0020.0002] 
    // HEXAGRAM FOR SPLITTING APART

    uint32_t const cps[1] = { 0x4dd6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_029)
{
    // 4DD7  ; [*0ED9.0020.0002] 
    // HEXAGRAM FOR RETURN

    uint32_t const cps[1] = { 0x4dd7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xed9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_030)
{
    // 4DD8  ; [*0EDA.0020.0002] 
    // HEXAGRAM FOR INNOCENCE

    uint32_t const cps[1] = { 0x4dd8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_031)
{
    // 4DD9  ; [*0EDB.0020.0002] 
    // HEXAGRAM FOR GREAT TAMING

    uint32_t const cps[1] = { 0x4dd9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xedb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_032)
{
    // 4DDA  ; [*0EDC.0020.0002] 
    // HEXAGRAM FOR MOUTH CORNERS

    uint32_t const cps[1] = { 0x4dda };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xedc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_033)
{
    // 4DDB  ; [*0EDD.0020.0002] 
    // HEXAGRAM FOR GREAT PREPONDERANCE

    uint32_t const cps[1] = { 0x4ddb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xedd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_034)
{
    // 4DDC  ; [*0EDE.0020.0002] 
    // HEXAGRAM FOR THE ABYSMAL WATER

    uint32_t const cps[1] = { 0x4ddc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xede), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_035)
{
    // 4DDD  ; [*0EDF.0020.0002] 
    // HEXAGRAM FOR THE CLINGING FIRE

    uint32_t const cps[1] = { 0x4ddd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xedf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_036)
{
    // 4DDE  ; [*0EE0.0020.0002] 
    // HEXAGRAM FOR INFLUENCE

    uint32_t const cps[1] = { 0x4dde };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_037)
{
    // 4DDF  ; [*0EE1.0020.0002] 
    // HEXAGRAM FOR DURATION

    uint32_t const cps[1] = { 0x4ddf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_038)
{
    // 4DE0  ; [*0EE2.0020.0002] 
    // HEXAGRAM FOR RETREAT

    uint32_t const cps[1] = { 0x4de0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_039)
{
    // 4DE1  ; [*0EE3.0020.0002] 
    // HEXAGRAM FOR GREAT POWER

    uint32_t const cps[1] = { 0x4de1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_040)
{
    // 4DE2  ; [*0EE4.0020.0002] 
    // HEXAGRAM FOR PROGRESS

    uint32_t const cps[1] = { 0x4de2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_041)
{
    // 4DE3  ; [*0EE5.0020.0002] 
    // HEXAGRAM FOR DARKENING OF THE LIGHT

    uint32_t const cps[1] = { 0x4de3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_042)
{
    // 4DE4  ; [*0EE6.0020.0002] 
    // HEXAGRAM FOR THE FAMILY

    uint32_t const cps[1] = { 0x4de4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_043)
{
    // 4DE5  ; [*0EE7.0020.0002] 
    // HEXAGRAM FOR OPPOSITION

    uint32_t const cps[1] = { 0x4de5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_044)
{
    // 4DE6  ; [*0EE8.0020.0002] 
    // HEXAGRAM FOR OBSTRUCTION

    uint32_t const cps[1] = { 0x4de6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_045)
{
    // 4DE7  ; [*0EE9.0020.0002] 
    // HEXAGRAM FOR DELIVERANCE

    uint32_t const cps[1] = { 0x4de7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xee9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_046)
{
    // 4DE8  ; [*0EEA.0020.0002] 
    // HEXAGRAM FOR DECREASE

    uint32_t const cps[1] = { 0x4de8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_047)
{
    // 4DE9  ; [*0EEB.0020.0002] 
    // HEXAGRAM FOR INCREASE

    uint32_t const cps[1] = { 0x4de9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeeb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_048)
{
    // 4DEA  ; [*0EEC.0020.0002] 
    // HEXAGRAM FOR BREAKTHROUGH

    uint32_t const cps[1] = { 0x4dea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_049)
{
    // 4DEB  ; [*0EED.0020.0002] 
    // HEXAGRAM FOR COMING TO MEET

    uint32_t const cps[1] = { 0x4deb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_050)
{
    // 4DEC  ; [*0EEE.0020.0002] 
    // HEXAGRAM FOR GATHERING TOGETHER

    uint32_t const cps[1] = { 0x4dec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_051)
{
    // 4DED  ; [*0EEF.0020.0002] 
    // HEXAGRAM FOR PUSHING UPWARD

    uint32_t const cps[1] = { 0x4ded };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_052)
{
    // 4DEE  ; [*0EF0.0020.0002] 
    // HEXAGRAM FOR OPPRESSION

    uint32_t const cps[1] = { 0x4dee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_053)
{
    // 4DEF  ; [*0EF1.0020.0002] 
    // HEXAGRAM FOR THE WELL

    uint32_t const cps[1] = { 0x4def };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_054)
{
    // 4DF0  ; [*0EF2.0020.0002] 
    // HEXAGRAM FOR REVOLUTION

    uint32_t const cps[1] = { 0x4df0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_055)
{
    // 4DF1  ; [*0EF3.0020.0002] 
    // HEXAGRAM FOR THE CAULDRON

    uint32_t const cps[1] = { 0x4df1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_056)
{
    // 4DF2  ; [*0EF4.0020.0002] 
    // HEXAGRAM FOR THE AROUSING THUNDER

    uint32_t const cps[1] = { 0x4df2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_057)
{
    // 4DF3  ; [*0EF5.0020.0002] 
    // HEXAGRAM FOR THE KEEPING STILL MOUNTAIN

    uint32_t const cps[1] = { 0x4df3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_058)
{
    // 4DF4  ; [*0EF6.0020.0002] 
    // HEXAGRAM FOR DEVELOPMENT

    uint32_t const cps[1] = { 0x4df4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_059)
{
    // 4DF5  ; [*0EF7.0020.0002] 
    // HEXAGRAM FOR THE MARRYING MAIDEN

    uint32_t const cps[1] = { 0x4df5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_060)
{
    // 4DF6  ; [*0EF8.0020.0002] 
    // HEXAGRAM FOR ABUNDANCE

    uint32_t const cps[1] = { 0x4df6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_061)
{
    // 4DF7  ; [*0EF9.0020.0002] 
    // HEXAGRAM FOR THE WANDERER

    uint32_t const cps[1] = { 0x4df7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xef9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_062)
{
    // 4DF8  ; [*0EFA.0020.0002] 
    // HEXAGRAM FOR THE GENTLE WIND

    uint32_t const cps[1] = { 0x4df8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xefa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_063)
{
    // 4DF9  ; [*0EFB.0020.0002] 
    // HEXAGRAM FOR THE JOYOUS LAKE

    uint32_t const cps[1] = { 0x4df9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xefb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_064)
{
    // 4DFA  ; [*0EFC.0020.0002] 
    // HEXAGRAM FOR DISPERSION

    uint32_t const cps[1] = { 0x4dfa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xefc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_065)
{
    // 4DFB  ; [*0EFD.0020.0002] 
    // HEXAGRAM FOR LIMITATION

    uint32_t const cps[1] = { 0x4dfb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xefd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_066)
{
    // 4DFC  ; [*0EFE.0020.0002] 
    // HEXAGRAM FOR INNER TRUTH

    uint32_t const cps[1] = { 0x4dfc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xefe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_067)
{
    // 4DFD  ; [*0EFF.0020.0002] 
    // HEXAGRAM FOR SMALL PREPONDERANCE

    uint32_t const cps[1] = { 0x4dfd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xeff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_068)
{
    // 4DFE  ; [*0F00.0020.0002] 
    // HEXAGRAM FOR AFTER COMPLETION

    uint32_t const cps[1] = { 0x4dfe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_069)
{
    // 4DFF  ; [*0F01.0020.0002] 
    // HEXAGRAM FOR BEFORE COMPLETION

    uint32_t const cps[1] = { 0x4dff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_070)
{
    // A000  ; [.3FF3.0020.0002] 
    // YI SYLLABLE IT

    uint32_t const cps[1] = { 0xa000 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ff3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_071)
{
    // A001  ; [.3FF4.0020.0002] 
    // YI SYLLABLE IX

    uint32_t const cps[1] = { 0xa001 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ff4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_072)
{
    // A002  ; [.3FF5.0020.0002] 
    // YI SYLLABLE I

    uint32_t const cps[1] = { 0xa002 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ff5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_073)
{
    // A003  ; [.3FF6.0020.0002] 
    // YI SYLLABLE IP

    uint32_t const cps[1] = { 0xa003 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ff6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_074)
{
    // A004  ; [.3FF7.0020.0002] 
    // YI SYLLABLE IET

    uint32_t const cps[1] = { 0xa004 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ff7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_075)
{
    // A005  ; [.3FF8.0020.0002] 
    // YI SYLLABLE IEX

    uint32_t const cps[1] = { 0xa005 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ff8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_076)
{
    // A006  ; [.3FF9.0020.0002] 
    // YI SYLLABLE IE

    uint32_t const cps[1] = { 0xa006 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ff9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_077)
{
    // A007  ; [.3FFA.0020.0002] 
    // YI SYLLABLE IEP

    uint32_t const cps[1] = { 0xa007 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ffa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_078)
{
    // A008  ; [.3FFB.0020.0002] 
    // YI SYLLABLE AT

    uint32_t const cps[1] = { 0xa008 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ffb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_079)
{
    // A009  ; [.3FFC.0020.0002] 
    // YI SYLLABLE AX

    uint32_t const cps[1] = { 0xa009 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ffc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_080)
{
    // A00A  ; [.3FFD.0020.0002] 
    // YI SYLLABLE A

    uint32_t const cps[1] = { 0xa00a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ffd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_081)
{
    // A00B  ; [.3FFE.0020.0002] 
    // YI SYLLABLE AP

    uint32_t const cps[1] = { 0xa00b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3ffe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_082)
{
    // A00C  ; [.3FFF.0020.0002] 
    // YI SYLLABLE UOX

    uint32_t const cps[1] = { 0xa00c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3fff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_083)
{
    // A00D  ; [.4000.0020.0002] 
    // YI SYLLABLE UO

    uint32_t const cps[1] = { 0xa00d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4000), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_084)
{
    // A00E  ; [.4001.0020.0002] 
    // YI SYLLABLE UOP

    uint32_t const cps[1] = { 0xa00e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4001), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_085)
{
    // A00F  ; [.4002.0020.0002] 
    // YI SYLLABLE OT

    uint32_t const cps[1] = { 0xa00f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4002), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_086)
{
    // A010  ; [.4003.0020.0002] 
    // YI SYLLABLE OX

    uint32_t const cps[1] = { 0xa010 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4003), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_087)
{
    // A011  ; [.4004.0020.0002] 
    // YI SYLLABLE O

    uint32_t const cps[1] = { 0xa011 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4004), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_088)
{
    // A012  ; [.4005.0020.0002] 
    // YI SYLLABLE OP

    uint32_t const cps[1] = { 0xa012 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4005), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_089)
{
    // A013  ; [.4006.0020.0002] 
    // YI SYLLABLE EX

    uint32_t const cps[1] = { 0xa013 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4006), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_090)
{
    // A014  ; [.4007.0020.0002] 
    // YI SYLLABLE E

    uint32_t const cps[1] = { 0xa014 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4007), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_091)
{
    // A015  ; [.4008.0020.0002] 
    // YI SYLLABLE WU

    uint32_t const cps[1] = { 0xa015 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4008), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_092)
{
    // A016  ; [.4009.0020.0002] 
    // YI SYLLABLE BIT

    uint32_t const cps[1] = { 0xa016 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4009), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_093)
{
    // A017  ; [.400A.0020.0002] 
    // YI SYLLABLE BIX

    uint32_t const cps[1] = { 0xa017 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x400a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_094)
{
    // A018  ; [.400B.0020.0002] 
    // YI SYLLABLE BI

    uint32_t const cps[1] = { 0xa018 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x400b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_095)
{
    // A019  ; [.400C.0020.0002] 
    // YI SYLLABLE BIP

    uint32_t const cps[1] = { 0xa019 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x400c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_096)
{
    // A01A  ; [.400D.0020.0002] 
    // YI SYLLABLE BIET

    uint32_t const cps[1] = { 0xa01a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x400d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_097)
{
    // A01B  ; [.400E.0020.0002] 
    // YI SYLLABLE BIEX

    uint32_t const cps[1] = { 0xa01b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x400e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_098)
{
    // A01C  ; [.400F.0020.0002] 
    // YI SYLLABLE BIE

    uint32_t const cps[1] = { 0xa01c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x400f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_099)
{
    // A01D  ; [.4010.0020.0002] 
    // YI SYLLABLE BIEP

    uint32_t const cps[1] = { 0xa01d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4010), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_100)
{
    // A01E  ; [.4011.0020.0002] 
    // YI SYLLABLE BAT

    uint32_t const cps[1] = { 0xa01e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4011), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_101)
{
    // A01F  ; [.4012.0020.0002] 
    // YI SYLLABLE BAX

    uint32_t const cps[1] = { 0xa01f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4012), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_102)
{
    // A020  ; [.4013.0020.0002] 
    // YI SYLLABLE BA

    uint32_t const cps[1] = { 0xa020 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4013), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_103)
{
    // A021  ; [.4014.0020.0002] 
    // YI SYLLABLE BAP

    uint32_t const cps[1] = { 0xa021 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4014), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_104)
{
    // A022  ; [.4015.0020.0002] 
    // YI SYLLABLE BUOX

    uint32_t const cps[1] = { 0xa022 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4015), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_105)
{
    // A023  ; [.4016.0020.0002] 
    // YI SYLLABLE BUO

    uint32_t const cps[1] = { 0xa023 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4016), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_106)
{
    // A024  ; [.4017.0020.0002] 
    // YI SYLLABLE BUOP

    uint32_t const cps[1] = { 0xa024 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4017), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_107)
{
    // A025  ; [.4018.0020.0002] 
    // YI SYLLABLE BOT

    uint32_t const cps[1] = { 0xa025 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4018), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_108)
{
    // A026  ; [.4019.0020.0002] 
    // YI SYLLABLE BOX

    uint32_t const cps[1] = { 0xa026 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4019), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_109)
{
    // A027  ; [.401A.0020.0002] 
    // YI SYLLABLE BO

    uint32_t const cps[1] = { 0xa027 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x401a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_110)
{
    // A028  ; [.401B.0020.0002] 
    // YI SYLLABLE BOP

    uint32_t const cps[1] = { 0xa028 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x401b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_111)
{
    // A029  ; [.401C.0020.0002] 
    // YI SYLLABLE BEX

    uint32_t const cps[1] = { 0xa029 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x401c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_112)
{
    // A02A  ; [.401D.0020.0002] 
    // YI SYLLABLE BE

    uint32_t const cps[1] = { 0xa02a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x401d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_113)
{
    // A02B  ; [.401E.0020.0002] 
    // YI SYLLABLE BEP

    uint32_t const cps[1] = { 0xa02b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x401e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_114)
{
    // A02C  ; [.401F.0020.0002] 
    // YI SYLLABLE BUT

    uint32_t const cps[1] = { 0xa02c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x401f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_115)
{
    // A02D  ; [.4020.0020.0002] 
    // YI SYLLABLE BUX

    uint32_t const cps[1] = { 0xa02d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4020), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_116)
{
    // A02E  ; [.4021.0020.0002] 
    // YI SYLLABLE BU

    uint32_t const cps[1] = { 0xa02e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4021), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_117)
{
    // A02F  ; [.4022.0020.0002] 
    // YI SYLLABLE BUP

    uint32_t const cps[1] = { 0xa02f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4022), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_118)
{
    // A030  ; [.4023.0020.0002] 
    // YI SYLLABLE BURX

    uint32_t const cps[1] = { 0xa030 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4023), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_119)
{
    // A031  ; [.4024.0020.0002] 
    // YI SYLLABLE BUR

    uint32_t const cps[1] = { 0xa031 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4024), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_120)
{
    // A032  ; [.4025.0020.0002] 
    // YI SYLLABLE BYT

    uint32_t const cps[1] = { 0xa032 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4025), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_121)
{
    // A033  ; [.4026.0020.0002] 
    // YI SYLLABLE BYX

    uint32_t const cps[1] = { 0xa033 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4026), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_122)
{
    // A034  ; [.4027.0020.0002] 
    // YI SYLLABLE BY

    uint32_t const cps[1] = { 0xa034 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4027), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_123)
{
    // A035  ; [.4028.0020.0002] 
    // YI SYLLABLE BYP

    uint32_t const cps[1] = { 0xa035 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4028), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_124)
{
    // A036  ; [.4029.0020.0002] 
    // YI SYLLABLE BYRX

    uint32_t const cps[1] = { 0xa036 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4029), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_125)
{
    // A037  ; [.402A.0020.0002] 
    // YI SYLLABLE BYR

    uint32_t const cps[1] = { 0xa037 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x402a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_126)
{
    // A038  ; [.402B.0020.0002] 
    // YI SYLLABLE PIT

    uint32_t const cps[1] = { 0xa038 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x402b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_127)
{
    // A039  ; [.402C.0020.0002] 
    // YI SYLLABLE PIX

    uint32_t const cps[1] = { 0xa039 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x402c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_128)
{
    // A03A  ; [.402D.0020.0002] 
    // YI SYLLABLE PI

    uint32_t const cps[1] = { 0xa03a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x402d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_129)
{
    // A03B  ; [.402E.0020.0002] 
    // YI SYLLABLE PIP

    uint32_t const cps[1] = { 0xa03b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x402e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_130)
{
    // A03C  ; [.402F.0020.0002] 
    // YI SYLLABLE PIEX

    uint32_t const cps[1] = { 0xa03c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x402f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_131)
{
    // A03D  ; [.4030.0020.0002] 
    // YI SYLLABLE PIE

    uint32_t const cps[1] = { 0xa03d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4030), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_132)
{
    // A03E  ; [.4031.0020.0002] 
    // YI SYLLABLE PIEP

    uint32_t const cps[1] = { 0xa03e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4031), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_133)
{
    // A03F  ; [.4032.0020.0002] 
    // YI SYLLABLE PAT

    uint32_t const cps[1] = { 0xa03f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4032), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_134)
{
    // A040  ; [.4033.0020.0002] 
    // YI SYLLABLE PAX

    uint32_t const cps[1] = { 0xa040 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4033), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_135)
{
    // A041  ; [.4034.0020.0002] 
    // YI SYLLABLE PA

    uint32_t const cps[1] = { 0xa041 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4034), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_136)
{
    // A042  ; [.4035.0020.0002] 
    // YI SYLLABLE PAP

    uint32_t const cps[1] = { 0xa042 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4035), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_137)
{
    // A043  ; [.4036.0020.0002] 
    // YI SYLLABLE PUOX

    uint32_t const cps[1] = { 0xa043 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4036), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_138)
{
    // A044  ; [.4037.0020.0002] 
    // YI SYLLABLE PUO

    uint32_t const cps[1] = { 0xa044 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4037), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_139)
{
    // A045  ; [.4038.0020.0002] 
    // YI SYLLABLE PUOP

    uint32_t const cps[1] = { 0xa045 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4038), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_140)
{
    // A046  ; [.4039.0020.0002] 
    // YI SYLLABLE POT

    uint32_t const cps[1] = { 0xa046 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4039), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_141)
{
    // A047  ; [.403A.0020.0002] 
    // YI SYLLABLE POX

    uint32_t const cps[1] = { 0xa047 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x403a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_142)
{
    // A048  ; [.403B.0020.0002] 
    // YI SYLLABLE PO

    uint32_t const cps[1] = { 0xa048 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x403b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_143)
{
    // A049  ; [.403C.0020.0002] 
    // YI SYLLABLE POP

    uint32_t const cps[1] = { 0xa049 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x403c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_144)
{
    // A04A  ; [.403D.0020.0002] 
    // YI SYLLABLE PUT

    uint32_t const cps[1] = { 0xa04a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x403d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_145)
{
    // A04B  ; [.403E.0020.0002] 
    // YI SYLLABLE PUX

    uint32_t const cps[1] = { 0xa04b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x403e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_146)
{
    // A04C  ; [.403F.0020.0002] 
    // YI SYLLABLE PU

    uint32_t const cps[1] = { 0xa04c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x403f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_147)
{
    // A04D  ; [.4040.0020.0002] 
    // YI SYLLABLE PUP

    uint32_t const cps[1] = { 0xa04d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4040), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_148)
{
    // A04E  ; [.4041.0020.0002] 
    // YI SYLLABLE PURX

    uint32_t const cps[1] = { 0xa04e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4041), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_084_149)
{
    // A04F  ; [.4042.0020.0002] 
    // YI SYLLABLE PUR

    uint32_t const cps[1] = { 0xa04f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x4042), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

