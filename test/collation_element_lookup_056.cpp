// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_056_000)
{
    // 227F  ; [*0693.0020.0002] 
    // SUCCEEDS OR EQUIVALENT TO

    uint32_t const cps[1] = { 0x227f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x693), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_001)
{
    // 2280  ; [*068E.0020.0002][.0000.002F.0002] 
    // DOES NOT PRECEDE

    uint32_t const cps[1] = { 0x2280 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x68e), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_002)
{
    // 2281  ; [*068F.0020.0002][.0000.002F.0002] 
    // DOES NOT SUCCEED

    uint32_t const cps[1] = { 0x2281 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x68f), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_003)
{
    // 2282  ; [*0694.0020.0002] 
    // SUBSET OF

    uint32_t const cps[1] = { 0x2282 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x694), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_004)
{
    // 2283  ; [*0695.0020.0002] 
    // SUPERSET OF

    uint32_t const cps[1] = { 0x2283 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x695), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_005)
{
    // 2284  ; [*0694.0020.0002][.0000.002F.0002] 
    // NOT A SUBSET OF

    uint32_t const cps[1] = { 0x2284 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x694), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_006)
{
    // 2285  ; [*0695.0020.0002][.0000.002F.0002] 
    // NOT A SUPERSET OF

    uint32_t const cps[1] = { 0x2285 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x695), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_007)
{
    // 2286  ; [*0696.0020.0002] 
    // SUBSET OF OR EQUAL TO

    uint32_t const cps[1] = { 0x2286 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x696), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_008)
{
    // 2287  ; [*0697.0020.0002] 
    // SUPERSET OF OR EQUAL TO

    uint32_t const cps[1] = { 0x2287 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x697), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_009)
{
    // 2288  ; [*0696.0020.0002][.0000.002F.0002] 
    // NEITHER A SUBSET OF NOR EQUAL TO

    uint32_t const cps[1] = { 0x2288 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x696), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_010)
{
    // 2289  ; [*0697.0020.0002][.0000.002F.0002] 
    // NEITHER A SUPERSET OF NOR EQUAL TO

    uint32_t const cps[1] = { 0x2289 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x697), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_011)
{
    // 228A  ; [*0698.0020.0002] 
    // SUBSET OF WITH NOT EQUAL TO

    uint32_t const cps[1] = { 0x228a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x698), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_012)
{
    // 228B  ; [*0699.0020.0002] 
    // SUPERSET OF WITH NOT EQUAL TO

    uint32_t const cps[1] = { 0x228b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x699), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_013)
{
    // 228C  ; [*069A.0020.0002] 
    // MULTISET

    uint32_t const cps[1] = { 0x228c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x69a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_014)
{
    // 228D  ; [*069B.0020.0002] 
    // MULTISET MULTIPLICATION

    uint32_t const cps[1] = { 0x228d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x69b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_015)
{
    // 228E  ; [*069C.0020.0002] 
    // MULTISET UNION

    uint32_t const cps[1] = { 0x228e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x69c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_016)
{
    // 228F  ; [*069D.0020.0002] 
    // SQUARE IMAGE OF

    uint32_t const cps[1] = { 0x228f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x69d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_017)
{
    // 2290  ; [*069E.0020.0002] 
    // SQUARE ORIGINAL OF

    uint32_t const cps[1] = { 0x2290 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x69e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_018)
{
    // 2291  ; [*069F.0020.0002] 
    // SQUARE IMAGE OF OR EQUAL TO

    uint32_t const cps[1] = { 0x2291 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x69f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_019)
{
    // 2292  ; [*06A0.0020.0002] 
    // SQUARE ORIGINAL OF OR EQUAL TO

    uint32_t const cps[1] = { 0x2292 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_020)
{
    // 2293  ; [*06A1.0020.0002] 
    // SQUARE CAP

    uint32_t const cps[1] = { 0x2293 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_021)
{
    // 2294  ; [*06A2.0020.0002] 
    // SQUARE CUP

    uint32_t const cps[1] = { 0x2294 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_022)
{
    // 2295  ; [*06A3.0020.0002] 
    // CIRCLED PLUS

    uint32_t const cps[1] = { 0x2295 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_023)
{
    // 2296  ; [*06A4.0020.0002] 
    // CIRCLED MINUS

    uint32_t const cps[1] = { 0x2296 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_024)
{
    // 2297  ; [*06A5.0020.0002] 
    // CIRCLED TIMES

    uint32_t const cps[1] = { 0x2297 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_025)
{
    // 2298  ; [*06A6.0020.0002] 
    // CIRCLED DIVISION SLASH

    uint32_t const cps[1] = { 0x2298 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_026)
{
    // 2299  ; [*06A7.0020.0002] 
    // CIRCLED DOT OPERATOR

    uint32_t const cps[1] = { 0x2299 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_027)
{
    // 229A  ; [*06A8.0020.0002] 
    // CIRCLED RING OPERATOR

    uint32_t const cps[1] = { 0x229a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_028)
{
    // 229B  ; [*06A9.0020.0002] 
    // CIRCLED ASTERISK OPERATOR

    uint32_t const cps[1] = { 0x229b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6a9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_029)
{
    // 229C  ; [*06AA.0020.0002] 
    // CIRCLED EQUALS

    uint32_t const cps[1] = { 0x229c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6aa), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_030)
{
    // 229D  ; [*06AB.0020.0002] 
    // CIRCLED DASH

    uint32_t const cps[1] = { 0x229d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ab), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_031)
{
    // 229E  ; [*06AC.0020.0002] 
    // SQUARED PLUS

    uint32_t const cps[1] = { 0x229e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ac), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_032)
{
    // 229F  ; [*06AD.0020.0002] 
    // SQUARED MINUS

    uint32_t const cps[1] = { 0x229f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ad), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_033)
{
    // 22A0  ; [*06AE.0020.0002] 
    // SQUARED TIMES

    uint32_t const cps[1] = { 0x22a0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ae), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_034)
{
    // 22A1  ; [*06AF.0020.0002] 
    // SQUARED DOT OPERATOR

    uint32_t const cps[1] = { 0x22a1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6af), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_035)
{
    // 22A2  ; [*06B0.0020.0002] 
    // RIGHT TACK

    uint32_t const cps[1] = { 0x22a2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_036)
{
    // 22A3  ; [*06B1.0020.0002] 
    // LEFT TACK

    uint32_t const cps[1] = { 0x22a3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_037)
{
    // 22A4  ; [*06B2.0020.0002] 
    // DOWN TACK

    uint32_t const cps[1] = { 0x22a4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_038)
{
    // 22A5  ; [*06B3.0020.0002] 
    // UP TACK

    uint32_t const cps[1] = { 0x22a5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_039)
{
    // 22A6  ; [*06B4.0020.0002] 
    // ASSERTION

    uint32_t const cps[1] = { 0x22a6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_040)
{
    // 22A7  ; [*06B5.0020.0002] 
    // MODELS

    uint32_t const cps[1] = { 0x22a7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_041)
{
    // 22A8  ; [*06B6.0020.0002] 
    // TRUE

    uint32_t const cps[1] = { 0x22a8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_042)
{
    // 22A9  ; [*06B7.0020.0002] 
    // FORCES

    uint32_t const cps[1] = { 0x22a9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_043)
{
    // 22AA  ; [*06B8.0020.0002] 
    // TRIPLE VERTICAL BAR RIGHT TURNSTILE

    uint32_t const cps[1] = { 0x22aa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_044)
{
    // 22AB  ; [*06B9.0020.0002] 
    // DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE

    uint32_t const cps[1] = { 0x22ab };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6b9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_045)
{
    // 22AC  ; [*06B0.0020.0002][.0000.002F.0002] 
    // DOES NOT PROVE

    uint32_t const cps[1] = { 0x22ac };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x6b0), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_046)
{
    // 22AD  ; [*06B6.0020.0002][.0000.002F.0002] 
    // NOT TRUE

    uint32_t const cps[1] = { 0x22ad };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x6b6), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_047)
{
    // 22AE  ; [*06B7.0020.0002][.0000.002F.0002] 
    // DOES NOT FORCE

    uint32_t const cps[1] = { 0x22ae };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x6b7), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_048)
{
    // 22AF  ; [*06B9.0020.0002][.0000.002F.0002] 
    // NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE

    uint32_t const cps[1] = { 0x22af };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x6b9), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_049)
{
    // 22B0  ; [*06BA.0020.0002] 
    // PRECEDES UNDER RELATION

    uint32_t const cps[1] = { 0x22b0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ba), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_050)
{
    // 22B1  ; [*06BB.0020.0002] 
    // SUCCEEDS UNDER RELATION

    uint32_t const cps[1] = { 0x22b1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6bb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_051)
{
    // 22B2  ; [*06BC.0020.0002] 
    // NORMAL SUBGROUP OF

    uint32_t const cps[1] = { 0x22b2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6bc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_052)
{
    // 22B3  ; [*06BD.0020.0002] 
    // CONTAINS AS NORMAL SUBGROUP

    uint32_t const cps[1] = { 0x22b3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6bd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_053)
{
    // 22B4  ; [*06BE.0020.0002] 
    // NORMAL SUBGROUP OF OR EQUAL TO

    uint32_t const cps[1] = { 0x22b4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6be), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_054)
{
    // 22B5  ; [*06BF.0020.0002] 
    // CONTAINS AS NORMAL SUBGROUP OR EQUAL TO

    uint32_t const cps[1] = { 0x22b5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6bf), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_055)
{
    // 22B6  ; [*06C0.0020.0002] 
    // ORIGINAL OF

    uint32_t const cps[1] = { 0x22b6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6c0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_056)
{
    // 22B7  ; [*06C1.0020.0002] 
    // IMAGE OF

    uint32_t const cps[1] = { 0x22b7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6c1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_057)
{
    // 22B8  ; [*06C2.0020.0002] 
    // MULTIMAP

    uint32_t const cps[1] = { 0x22b8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6c2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_058)
{
    // 22B9  ; [*06C3.0020.0002] 
    // HERMITIAN CONJUGATE MATRIX

    uint32_t const cps[1] = { 0x22b9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6c3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_059)
{
    // 22BA  ; [*06C4.0020.0002] 
    // INTERCALATE

    uint32_t const cps[1] = { 0x22ba };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6c4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_060)
{
    // 22BB  ; [*06C5.0020.0002] 
    // XOR

    uint32_t const cps[1] = { 0x22bb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6c5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_061)
{
    // 22BC  ; [*06C6.0020.0002] 
    // NAND

    uint32_t const cps[1] = { 0x22bc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6c6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_062)
{
    // 22BD  ; [*06C8.0020.0002] 
    // NOR

    uint32_t const cps[1] = { 0x22bd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6c8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_063)
{
    // 22BE  ; [*06C9.0020.0002] 
    // RIGHT ANGLE WITH ARC

    uint32_t const cps[1] = { 0x22be };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6c9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_064)
{
    // 22BF  ; [*06CA.0020.0002] 
    // RIGHT TRIANGLE

    uint32_t const cps[1] = { 0x22bf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ca), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_065)
{
    // 22C0  ; [*06CB.0020.0002] 
    // N-ARY LOGICAL AND

    uint32_t const cps[1] = { 0x22c0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6cb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_066)
{
    // 22C1  ; [*06CC.0020.0002] 
    // N-ARY LOGICAL OR

    uint32_t const cps[1] = { 0x22c1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6cc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_067)
{
    // 22C2  ; [*06CD.0020.0002] 
    // N-ARY INTERSECTION

    uint32_t const cps[1] = { 0x22c2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6cd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_068)
{
    // 22C3  ; [*06CE.0020.0002] 
    // N-ARY UNION

    uint32_t const cps[1] = { 0x22c3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ce), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_069)
{
    // 22C4  ; [*06CF.0020.0002] 
    // DIAMOND OPERATOR

    uint32_t const cps[1] = { 0x22c4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6cf), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_070)
{
    // 22C5  ; [*06D0.0020.0002] 
    // DOT OPERATOR

    uint32_t const cps[1] = { 0x22c5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_071)
{
    // 22C6  ; [*06D1.0020.0002] 
    // STAR OPERATOR

    uint32_t const cps[1] = { 0x22c6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_072)
{
    // 22C7  ; [*06D2.0020.0002] 
    // DIVISION TIMES

    uint32_t const cps[1] = { 0x22c7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_073)
{
    // 22C8  ; [*06D3.0020.0002] 
    // BOWTIE

    uint32_t const cps[1] = { 0x22c8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_074)
{
    // 22C9  ; [*06D4.0020.0002] 
    // LEFT NORMAL FACTOR SEMIDIRECT PRODUCT

    uint32_t const cps[1] = { 0x22c9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_075)
{
    // 22CA  ; [*06D5.0020.0002] 
    // RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT

    uint32_t const cps[1] = { 0x22ca };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_076)
{
    // 22CB  ; [*06D6.0020.0002] 
    // LEFT SEMIDIRECT PRODUCT

    uint32_t const cps[1] = { 0x22cb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_077)
{
    // 22CC  ; [*06D7.0020.0002] 
    // RIGHT SEMIDIRECT PRODUCT

    uint32_t const cps[1] = { 0x22cc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_078)
{
    // 22CD  ; [*06D8.0020.0002] 
    // REVERSED TILDE EQUALS

    uint32_t const cps[1] = { 0x22cd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_079)
{
    // 22CE  ; [*06D9.0020.0002] 
    // CURLY LOGICAL OR

    uint32_t const cps[1] = { 0x22ce };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6d9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_080)
{
    // 22CF  ; [*06DA.0020.0002] 
    // CURLY LOGICAL AND

    uint32_t const cps[1] = { 0x22cf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6da), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_081)
{
    // 22D0  ; [*06DB.0020.0002] 
    // DOUBLE SUBSET

    uint32_t const cps[1] = { 0x22d0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6db), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_082)
{
    // 22D1  ; [*06DC.0020.0002] 
    // DOUBLE SUPERSET

    uint32_t const cps[1] = { 0x22d1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6dc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_083)
{
    // 22D2  ; [*06DD.0020.0002] 
    // DOUBLE INTERSECTION

    uint32_t const cps[1] = { 0x22d2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6dd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_084)
{
    // 22D3  ; [*06DE.0020.0002] 
    // DOUBLE UNION

    uint32_t const cps[1] = { 0x22d3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6de), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_085)
{
    // 22D4  ; [*06DF.0020.0002] 
    // PITCHFORK

    uint32_t const cps[1] = { 0x22d4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6df), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_086)
{
    // 22D5  ; [*06E0.0020.0002] 
    // EQUAL AND PARALLEL TO

    uint32_t const cps[1] = { 0x22d5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_087)
{
    // 22D6  ; [*06E1.0020.0002] 
    // LESS-THAN WITH DOT

    uint32_t const cps[1] = { 0x22d6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_088)
{
    // 22D7  ; [*06E2.0020.0002] 
    // GREATER-THAN WITH DOT

    uint32_t const cps[1] = { 0x22d7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_089)
{
    // 22D8  ; [*06E3.0020.0002] 
    // VERY MUCH LESS-THAN

    uint32_t const cps[1] = { 0x22d8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_090)
{
    // 22D9  ; [*06E4.0020.0002] 
    // VERY MUCH GREATER-THAN

    uint32_t const cps[1] = { 0x22d9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_091)
{
    // 22DA  ; [*06E5.0020.0002] 
    // LESS-THAN EQUAL TO OR GREATER-THAN

    uint32_t const cps[1] = { 0x22da };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_092)
{
    // 22DB  ; [*06E6.0020.0002] 
    // GREATER-THAN EQUAL TO OR LESS-THAN

    uint32_t const cps[1] = { 0x22db };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_093)
{
    // 22DC  ; [*06E7.0020.0002] 
    // EQUAL TO OR LESS-THAN

    uint32_t const cps[1] = { 0x22dc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_094)
{
    // 22DD  ; [*06E8.0020.0002] 
    // EQUAL TO OR GREATER-THAN

    uint32_t const cps[1] = { 0x22dd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_095)
{
    // 22DE  ; [*06E9.0020.0002] 
    // EQUAL TO OR PRECEDES

    uint32_t const cps[1] = { 0x22de };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6e9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_096)
{
    // 22DF  ; [*06EA.0020.0002] 
    // EQUAL TO OR SUCCEEDS

    uint32_t const cps[1] = { 0x22df };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ea), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_097)
{
    // 22E0  ; [*0690.0020.0002][.0000.002F.0002] 
    // DOES NOT PRECEDE OR EQUAL

    uint32_t const cps[1] = { 0x22e0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x690), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_098)
{
    // 22E1  ; [*0691.0020.0002][.0000.002F.0002] 
    // DOES NOT SUCCEED OR EQUAL

    uint32_t const cps[1] = { 0x22e1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x691), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_099)
{
    // 22E2  ; [*069F.0020.0002][.0000.002F.0002] 
    // NOT SQUARE IMAGE OF OR EQUAL TO

    uint32_t const cps[1] = { 0x22e2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x69f), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_100)
{
    // 22E3  ; [*06A0.0020.0002][.0000.002F.0002] 
    // NOT SQUARE ORIGINAL OF OR EQUAL TO

    uint32_t const cps[1] = { 0x22e3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x6a0), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_101)
{
    // 22E4  ; [*06EB.0020.0002] 
    // SQUARE IMAGE OF OR NOT EQUAL TO

    uint32_t const cps[1] = { 0x22e4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6eb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_102)
{
    // 22E5  ; [*06EC.0020.0002] 
    // SQUARE ORIGINAL OF OR NOT EQUAL TO

    uint32_t const cps[1] = { 0x22e5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ec), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_103)
{
    // 22E6  ; [*06ED.0020.0002] 
    // LESS-THAN BUT NOT EQUIVALENT TO

    uint32_t const cps[1] = { 0x22e6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ed), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_104)
{
    // 22E7  ; [*06EE.0020.0002] 
    // GREATER-THAN BUT NOT EQUIVALENT TO

    uint32_t const cps[1] = { 0x22e7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ee), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_105)
{
    // 22E8  ; [*06EF.0020.0002] 
    // PRECEDES BUT NOT EQUIVALENT TO

    uint32_t const cps[1] = { 0x22e8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ef), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_106)
{
    // 22E9  ; [*06F0.0020.0002] 
    // SUCCEEDS BUT NOT EQUIVALENT TO

    uint32_t const cps[1] = { 0x22e9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f0), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_107)
{
    // 22EA  ; [*06BC.0020.0002][.0000.002F.0002] 
    // NOT NORMAL SUBGROUP OF

    uint32_t const cps[1] = { 0x22ea };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x6bc), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_108)
{
    // 22EB  ; [*06BD.0020.0002][.0000.002F.0002] 
    // DOES NOT CONTAIN AS NORMAL SUBGROUP

    uint32_t const cps[1] = { 0x22eb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x6bd), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_109)
{
    // 22EC  ; [*06BE.0020.0002][.0000.002F.0002] 
    // NOT NORMAL SUBGROUP OF OR EQUAL TO

    uint32_t const cps[1] = { 0x22ec };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x6be), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_110)
{
    // 22ED  ; [*06BF.0020.0002][.0000.002F.0002] 
    // DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL

    uint32_t const cps[1] = { 0x22ed };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x6bf), uint8_t(0x1), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x10), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_056_111)
{
    // 22EE  ; [*06F1.0020.0002] 
    // VERTICAL ELLIPSIS

    uint32_t const cps[1] = { 0x22ee };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f1), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_112)
{
    // 22EF  ; [*06F2.0020.0002] 
    // MIDLINE HORIZONTAL ELLIPSIS

    uint32_t const cps[1] = { 0x22ef };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f2), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_113)
{
    // 22F0  ; [*06F3.0020.0002] 
    // UP RIGHT DIAGONAL ELLIPSIS

    uint32_t const cps[1] = { 0x22f0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f3), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_114)
{
    // 22F1  ; [*06F4.0020.0002] 
    // DOWN RIGHT DIAGONAL ELLIPSIS

    uint32_t const cps[1] = { 0x22f1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f4), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_115)
{
    // 22F2  ; [*06F5.0020.0002] 
    // ELEMENT OF WITH LONG HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x22f2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f5), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_116)
{
    // 22F3  ; [*06F6.0020.0002] 
    // ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x22f3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f6), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_117)
{
    // 22F4  ; [*06F7.0020.0002] 
    // SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x22f4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f7), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_118)
{
    // 22F5  ; [*06F8.0020.0002] 
    // ELEMENT OF WITH DOT ABOVE

    uint32_t const cps[1] = { 0x22f5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_119)
{
    // 22F6  ; [*06F9.0020.0002] 
    // ELEMENT OF WITH OVERBAR

    uint32_t const cps[1] = { 0x22f6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6f9), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_120)
{
    // 22F7  ; [*06FA.0020.0002] 
    // SMALL ELEMENT OF WITH OVERBAR

    uint32_t const cps[1] = { 0x22f7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6fa), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_121)
{
    // 22F8  ; [*06FB.0020.0002] 
    // ELEMENT OF WITH UNDERBAR

    uint32_t const cps[1] = { 0x22f8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6fb), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_122)
{
    // 22F9  ; [*06FC.0020.0002] 
    // ELEMENT OF WITH TWO HORIZONTAL STROKES

    uint32_t const cps[1] = { 0x22f9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6fc), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_123)
{
    // 22FA  ; [*06FD.0020.0002] 
    // CONTAINS WITH LONG HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x22fa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6fd), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_124)
{
    // 22FB  ; [*06FE.0020.0002] 
    // CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x22fb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6fe), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_125)
{
    // 22FC  ; [*06FF.0020.0002] 
    // SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE

    uint32_t const cps[1] = { 0x22fc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x6ff), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_126)
{
    // 22FD  ; [*0700.0020.0002] 
    // CONTAINS WITH OVERBAR

    uint32_t const cps[1] = { 0x22fd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x700), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_127)
{
    // 22FE  ; [*0701.0020.0002] 
    // SMALL CONTAINS WITH OVERBAR

    uint32_t const cps[1] = { 0x22fe };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x701), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_128)
{
    // 22FF  ; [*0702.0020.0002] 
    // Z NOTATION BAG MEMBERSHIP

    uint32_t const cps[1] = { 0x22ff };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x702), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_129)
{
    // 2300  ; [*0703.0020.0002] 
    // DIAMETER SIGN

    uint32_t const cps[1] = { 0x2300 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x703), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_130)
{
    // 2301  ; [*0704.0020.0002] 
    // ELECTRIC ARROW

    uint32_t const cps[1] = { 0x2301 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x704), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_131)
{
    // 2302  ; [*0705.0020.0002] 
    // HOUSE

    uint32_t const cps[1] = { 0x2302 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x705), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_132)
{
    // 2303  ; [*0706.0020.0002] 
    // UP ARROWHEAD

    uint32_t const cps[1] = { 0x2303 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x706), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_133)
{
    // 2304  ; [*0707.0020.0002] 
    // DOWN ARROWHEAD

    uint32_t const cps[1] = { 0x2304 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x707), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_134)
{
    // 2305  ; [*0708.0020.0002] 
    // PROJECTIVE

    uint32_t const cps[1] = { 0x2305 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x708), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_135)
{
    // 2306  ; [*0709.0020.0002] 
    // PERSPECTIVE

    uint32_t const cps[1] = { 0x2306 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x709), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_136)
{
    // 2307  ; [*070A.0020.0002] 
    // WAVY LINE

    uint32_t const cps[1] = { 0x2307 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x70a), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_137)
{
    // 2308  ; [*0326.0020.0002] 
    // LEFT CEILING

    uint32_t const cps[1] = { 0x2308 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x326), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_138)
{
    // 2309  ; [*0327.0020.0002] 
    // RIGHT CEILING

    uint32_t const cps[1] = { 0x2309 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x327), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_139)
{
    // 230A  ; [*0328.0020.0002] 
    // LEFT FLOOR

    uint32_t const cps[1] = { 0x230a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x328), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_140)
{
    // 230B  ; [*0329.0020.0002] 
    // RIGHT FLOOR

    uint32_t const cps[1] = { 0x230b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x329), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_141)
{
    // 230C  ; [*070B.0020.0002] 
    // BOTTOM RIGHT CROP

    uint32_t const cps[1] = { 0x230c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x70b), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_142)
{
    // 230D  ; [*070C.0020.0002] 
    // BOTTOM LEFT CROP

    uint32_t const cps[1] = { 0x230d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x70c), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_143)
{
    // 230E  ; [*070D.0020.0002] 
    // TOP RIGHT CROP

    uint32_t const cps[1] = { 0x230e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x70d), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_144)
{
    // 230F  ; [*070E.0020.0002] 
    // TOP LEFT CROP

    uint32_t const cps[1] = { 0x230f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x70e), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_145)
{
    // 2310  ; [*070F.0020.0002] 
    // REVERSED NOT SIGN

    uint32_t const cps[1] = { 0x2310 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x70f), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_146)
{
    // 2311  ; [*0710.0020.0002] 
    // SQUARE LOZENGE

    uint32_t const cps[1] = { 0x2311 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x710), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_147)
{
    // 2312  ; [*0711.0020.0002] 
    // ARC

    uint32_t const cps[1] = { 0x2312 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x711), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_148)
{
    // 2313  ; [*0712.0020.0002] 
    // SEGMENT

    uint32_t const cps[1] = { 0x2313 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x712), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_056_149)
{
    // 2314  ; [*0713.0020.0002] 
    // SECTOR

    uint32_t const cps[1] = { 0x2314 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x713), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

