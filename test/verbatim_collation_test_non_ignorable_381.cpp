// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_381_000)
{
    // 48F8 003F;	
    // (䣸) CJK UNIFIED IDEOGRAPH-48F8	[FB80 C8F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_001)
{
    // 48F8 0061;	
    // (䣸) CJK UNIFIED IDEOGRAPH-48F8	[FB80 C8F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_002)
{
    // 48F8 0041;	
    // (䣸) CJK UNIFIED IDEOGRAPH-48F8	[FB80 C8F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_003)
{
    // 48F8 0062;	
    // (䣸) CJK UNIFIED IDEOGRAPH-48F8	[FB80 C8F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_004)
{
    // 48F9 0021;	
    // (䣹) CJK UNIFIED IDEOGRAPH-48F9	[FB80 C8F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_005)
{
    // 48F9 003F;	
    // (䣹) CJK UNIFIED IDEOGRAPH-48F9	[FB80 C8F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_006)
{
    // 48F9 0061;	
    // (䣹) CJK UNIFIED IDEOGRAPH-48F9	[FB80 C8F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_007)
{
    // 48F9 0041;	
    // (䣹) CJK UNIFIED IDEOGRAPH-48F9	[FB80 C8F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_008)
{
    // 48F9 0062;	
    // (䣹) CJK UNIFIED IDEOGRAPH-48F9	[FB80 C8F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_009)
{
    // 48FA 0021;	
    // (䣺) CJK UNIFIED IDEOGRAPH-48FA	[FB80 C8FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_010)
{
    // 48FA 003F;	
    // (䣺) CJK UNIFIED IDEOGRAPH-48FA	[FB80 C8FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_011)
{
    // 48FA 0061;	
    // (䣺) CJK UNIFIED IDEOGRAPH-48FA	[FB80 C8FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_012)
{
    // 48FA 0041;	
    // (䣺) CJK UNIFIED IDEOGRAPH-48FA	[FB80 C8FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_013)
{
    // 48FA 0062;	
    // (䣺) CJK UNIFIED IDEOGRAPH-48FA	[FB80 C8FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_014)
{
    // 48FB 0021;	
    // (䣻) CJK UNIFIED IDEOGRAPH-48FB	[FB80 C8FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_015)
{
    // 48FB 003F;	
    // (䣻) CJK UNIFIED IDEOGRAPH-48FB	[FB80 C8FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_016)
{
    // 48FB 0061;	
    // (䣻) CJK UNIFIED IDEOGRAPH-48FB	[FB80 C8FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_017)
{
    // 48FB 0041;	
    // (䣻) CJK UNIFIED IDEOGRAPH-48FB	[FB80 C8FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_018)
{
    // 48FB 0062;	
    // (䣻) CJK UNIFIED IDEOGRAPH-48FB	[FB80 C8FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_019)
{
    // 48FC 0021;	
    // (䣼) CJK UNIFIED IDEOGRAPH-48FC	[FB80 C8FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_020)
{
    // 48FC 003F;	
    // (䣼) CJK UNIFIED IDEOGRAPH-48FC	[FB80 C8FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_021)
{
    // 48FC 0061;	
    // (䣼) CJK UNIFIED IDEOGRAPH-48FC	[FB80 C8FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_022)
{
    // 48FC 0041;	
    // (䣼) CJK UNIFIED IDEOGRAPH-48FC	[FB80 C8FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_023)
{
    // 48FC 0062;	
    // (䣼) CJK UNIFIED IDEOGRAPH-48FC	[FB80 C8FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_024)
{
    // 48FD 0021;	
    // (䣽) CJK UNIFIED IDEOGRAPH-48FD	[FB80 C8FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_025)
{
    // 48FD 003F;	
    // (䣽) CJK UNIFIED IDEOGRAPH-48FD	[FB80 C8FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_026)
{
    // 48FD 0061;	
    // (䣽) CJK UNIFIED IDEOGRAPH-48FD	[FB80 C8FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_027)
{
    // 48FD 0041;	
    // (䣽) CJK UNIFIED IDEOGRAPH-48FD	[FB80 C8FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_028)
{
    // 48FD 0062;	
    // (䣽) CJK UNIFIED IDEOGRAPH-48FD	[FB80 C8FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_029)
{
    // 48FE 0021;	
    // (䣾) CJK UNIFIED IDEOGRAPH-48FE	[FB80 C8FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_030)
{
    // 48FE 003F;	
    // (䣾) CJK UNIFIED IDEOGRAPH-48FE	[FB80 C8FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_031)
{
    // 48FE 0061;	
    // (䣾) CJK UNIFIED IDEOGRAPH-48FE	[FB80 C8FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_032)
{
    // 48FE 0041;	
    // (䣾) CJK UNIFIED IDEOGRAPH-48FE	[FB80 C8FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_033)
{
    // 48FE 0062;	
    // (䣾) CJK UNIFIED IDEOGRAPH-48FE	[FB80 C8FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_034)
{
    // 48FF 0021;	
    // (䣿) CJK UNIFIED IDEOGRAPH-48FF	[FB80 C8FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_035)
{
    // 48FF 003F;	
    // (䣿) CJK UNIFIED IDEOGRAPH-48FF	[FB80 C8FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC8FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_036)
{
    // 48FF 0061;	
    // (䣿) CJK UNIFIED IDEOGRAPH-48FF	[FB80 C8FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_037)
{
    // 48FF 0041;	
    // (䣿) CJK UNIFIED IDEOGRAPH-48FF	[FB80 C8FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x48FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_038)
{
    // 48FF 0062;	
    // (䣿) CJK UNIFIED IDEOGRAPH-48FF	[FB80 C8FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x48FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC8FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_039)
{
    // 4900 0021;	
    // (䤀) CJK UNIFIED IDEOGRAPH-4900	[FB80 C900 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4900, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC900, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_040)
{
    // 4900 003F;	
    // (䤀) CJK UNIFIED IDEOGRAPH-4900	[FB80 C900 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4900, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC900, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_041)
{
    // 4900 0061;	
    // (䤀) CJK UNIFIED IDEOGRAPH-4900	[FB80 C900 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4900, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_042)
{
    // 4900 0041;	
    // (䤀) CJK UNIFIED IDEOGRAPH-4900	[FB80 C900 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4900, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC900, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_043)
{
    // 4900 0062;	
    // (䤀) CJK UNIFIED IDEOGRAPH-4900	[FB80 C900 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4900, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC900, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_044)
{
    // 4901 0021;	
    // (䤁) CJK UNIFIED IDEOGRAPH-4901	[FB80 C901 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4901, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC901, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_045)
{
    // 4901 003F;	
    // (䤁) CJK UNIFIED IDEOGRAPH-4901	[FB80 C901 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4901, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC901, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_046)
{
    // 4901 0061;	
    // (䤁) CJK UNIFIED IDEOGRAPH-4901	[FB80 C901 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4901, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_047)
{
    // 4901 0041;	
    // (䤁) CJK UNIFIED IDEOGRAPH-4901	[FB80 C901 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4901, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC901, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_048)
{
    // 4901 0062;	
    // (䤁) CJK UNIFIED IDEOGRAPH-4901	[FB80 C901 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4901, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC901, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_049)
{
    // 4902 0021;	
    // (䤂) CJK UNIFIED IDEOGRAPH-4902	[FB80 C902 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4902, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC902, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_050)
{
    // 4902 003F;	
    // (䤂) CJK UNIFIED IDEOGRAPH-4902	[FB80 C902 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4902, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC902, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_051)
{
    // 4902 0061;	
    // (䤂) CJK UNIFIED IDEOGRAPH-4902	[FB80 C902 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4902, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_052)
{
    // 4902 0041;	
    // (䤂) CJK UNIFIED IDEOGRAPH-4902	[FB80 C902 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4902, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC902, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_053)
{
    // 4902 0062;	
    // (䤂) CJK UNIFIED IDEOGRAPH-4902	[FB80 C902 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4902, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC902, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_054)
{
    // 4903 0021;	
    // (䤃) CJK UNIFIED IDEOGRAPH-4903	[FB80 C903 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4903, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC903, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_055)
{
    // 4903 003F;	
    // (䤃) CJK UNIFIED IDEOGRAPH-4903	[FB80 C903 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4903, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC903, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_056)
{
    // 4903 0061;	
    // (䤃) CJK UNIFIED IDEOGRAPH-4903	[FB80 C903 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4903, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_057)
{
    // 4903 0041;	
    // (䤃) CJK UNIFIED IDEOGRAPH-4903	[FB80 C903 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4903, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC903, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_058)
{
    // 4903 0062;	
    // (䤃) CJK UNIFIED IDEOGRAPH-4903	[FB80 C903 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4903, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC903, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_059)
{
    // 4904 0021;	
    // (䤄) CJK UNIFIED IDEOGRAPH-4904	[FB80 C904 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4904, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC904, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_060)
{
    // 4904 003F;	
    // (䤄) CJK UNIFIED IDEOGRAPH-4904	[FB80 C904 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4904, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC904, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_061)
{
    // 4904 0061;	
    // (䤄) CJK UNIFIED IDEOGRAPH-4904	[FB80 C904 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4904, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_062)
{
    // 4904 0041;	
    // (䤄) CJK UNIFIED IDEOGRAPH-4904	[FB80 C904 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4904, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC904, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_063)
{
    // 4904 0062;	
    // (䤄) CJK UNIFIED IDEOGRAPH-4904	[FB80 C904 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4904, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC904, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_064)
{
    // 4905 0021;	
    // (䤅) CJK UNIFIED IDEOGRAPH-4905	[FB80 C905 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4905, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC905, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_065)
{
    // 4905 003F;	
    // (䤅) CJK UNIFIED IDEOGRAPH-4905	[FB80 C905 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4905, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC905, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_066)
{
    // 4905 0061;	
    // (䤅) CJK UNIFIED IDEOGRAPH-4905	[FB80 C905 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4905, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_067)
{
    // 4905 0041;	
    // (䤅) CJK UNIFIED IDEOGRAPH-4905	[FB80 C905 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4905, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC905, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_068)
{
    // 4905 0062;	
    // (䤅) CJK UNIFIED IDEOGRAPH-4905	[FB80 C905 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4905, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC905, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_069)
{
    // 4906 0021;	
    // (䤆) CJK UNIFIED IDEOGRAPH-4906	[FB80 C906 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4906, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC906, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_070)
{
    // 4906 003F;	
    // (䤆) CJK UNIFIED IDEOGRAPH-4906	[FB80 C906 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4906, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC906, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_071)
{
    // 4906 0061;	
    // (䤆) CJK UNIFIED IDEOGRAPH-4906	[FB80 C906 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4906, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_072)
{
    // 4906 0041;	
    // (䤆) CJK UNIFIED IDEOGRAPH-4906	[FB80 C906 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4906, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC906, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_073)
{
    // 4906 0062;	
    // (䤆) CJK UNIFIED IDEOGRAPH-4906	[FB80 C906 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4906, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC906, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_074)
{
    // 4907 0021;	
    // (䤇) CJK UNIFIED IDEOGRAPH-4907	[FB80 C907 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4907, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC907, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_075)
{
    // 4907 003F;	
    // (䤇) CJK UNIFIED IDEOGRAPH-4907	[FB80 C907 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4907, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC907, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_076)
{
    // 4907 0061;	
    // (䤇) CJK UNIFIED IDEOGRAPH-4907	[FB80 C907 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4907, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_077)
{
    // 4907 0041;	
    // (䤇) CJK UNIFIED IDEOGRAPH-4907	[FB80 C907 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4907, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC907, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_078)
{
    // 4907 0062;	
    // (䤇) CJK UNIFIED IDEOGRAPH-4907	[FB80 C907 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4907, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC907, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_079)
{
    // 4908 0021;	
    // (䤈) CJK UNIFIED IDEOGRAPH-4908	[FB80 C908 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4908, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC908, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_080)
{
    // 4908 003F;	
    // (䤈) CJK UNIFIED IDEOGRAPH-4908	[FB80 C908 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4908, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC908, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_081)
{
    // 4908 0061;	
    // (䤈) CJK UNIFIED IDEOGRAPH-4908	[FB80 C908 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4908, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_082)
{
    // 4908 0041;	
    // (䤈) CJK UNIFIED IDEOGRAPH-4908	[FB80 C908 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4908, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC908, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_083)
{
    // 4908 0062;	
    // (䤈) CJK UNIFIED IDEOGRAPH-4908	[FB80 C908 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4908, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC908, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_084)
{
    // 4909 0021;	
    // (䤉) CJK UNIFIED IDEOGRAPH-4909	[FB80 C909 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4909, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC909, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_085)
{
    // 4909 003F;	
    // (䤉) CJK UNIFIED IDEOGRAPH-4909	[FB80 C909 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4909, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC909, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_086)
{
    // 4909 0061;	
    // (䤉) CJK UNIFIED IDEOGRAPH-4909	[FB80 C909 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4909, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_087)
{
    // 4909 0041;	
    // (䤉) CJK UNIFIED IDEOGRAPH-4909	[FB80 C909 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4909, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC909, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_088)
{
    // 4909 0062;	
    // (䤉) CJK UNIFIED IDEOGRAPH-4909	[FB80 C909 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4909, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC909, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_089)
{
    // 490A 0021;	
    // (䤊) CJK UNIFIED IDEOGRAPH-490A	[FB80 C90A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC90A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_090)
{
    // 490A 003F;	
    // (䤊) CJK UNIFIED IDEOGRAPH-490A	[FB80 C90A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC90A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_091)
{
    // 490A 0061;	
    // (䤊) CJK UNIFIED IDEOGRAPH-490A	[FB80 C90A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC90A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_092)
{
    // 490A 0041;	
    // (䤊) CJK UNIFIED IDEOGRAPH-490A	[FB80 C90A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x490A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC90A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_093)
{
    // 490A 0062;	
    // (䤊) CJK UNIFIED IDEOGRAPH-490A	[FB80 C90A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC90A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_094)
{
    // 490B 0021;	
    // (䤋) CJK UNIFIED IDEOGRAPH-490B	[FB80 C90B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC90B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_095)
{
    // 490B 003F;	
    // (䤋) CJK UNIFIED IDEOGRAPH-490B	[FB80 C90B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC90B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_096)
{
    // 490B 0061;	
    // (䤋) CJK UNIFIED IDEOGRAPH-490B	[FB80 C90B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC90B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_097)
{
    // 490B 0041;	
    // (䤋) CJK UNIFIED IDEOGRAPH-490B	[FB80 C90B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x490B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC90B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_098)
{
    // 490B 0062;	
    // (䤋) CJK UNIFIED IDEOGRAPH-490B	[FB80 C90B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC90B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_099)
{
    // 490C 0021;	
    // (䤌) CJK UNIFIED IDEOGRAPH-490C	[FB80 C90C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC90C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_100)
{
    // 490C 003F;	
    // (䤌) CJK UNIFIED IDEOGRAPH-490C	[FB80 C90C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC90C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_101)
{
    // 490C 0061;	
    // (䤌) CJK UNIFIED IDEOGRAPH-490C	[FB80 C90C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC90C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_102)
{
    // 490C 0041;	
    // (䤌) CJK UNIFIED IDEOGRAPH-490C	[FB80 C90C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x490C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC90C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_103)
{
    // 490C 0062;	
    // (䤌) CJK UNIFIED IDEOGRAPH-490C	[FB80 C90C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC90C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_104)
{
    // 490D 0021;	
    // (䤍) CJK UNIFIED IDEOGRAPH-490D	[FB80 C90D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC90D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_105)
{
    // 490D 003F;	
    // (䤍) CJK UNIFIED IDEOGRAPH-490D	[FB80 C90D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC90D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_106)
{
    // 490D 0061;	
    // (䤍) CJK UNIFIED IDEOGRAPH-490D	[FB80 C90D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC90D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_107)
{
    // 490D 0041;	
    // (䤍) CJK UNIFIED IDEOGRAPH-490D	[FB80 C90D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x490D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC90D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_108)
{
    // 490D 0062;	
    // (䤍) CJK UNIFIED IDEOGRAPH-490D	[FB80 C90D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC90D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_109)
{
    // 490E 0021;	
    // (䤎) CJK UNIFIED IDEOGRAPH-490E	[FB80 C90E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC90E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_110)
{
    // 490E 003F;	
    // (䤎) CJK UNIFIED IDEOGRAPH-490E	[FB80 C90E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC90E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_111)
{
    // 490E 0061;	
    // (䤎) CJK UNIFIED IDEOGRAPH-490E	[FB80 C90E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC90E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_112)
{
    // 490E 0041;	
    // (䤎) CJK UNIFIED IDEOGRAPH-490E	[FB80 C90E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x490E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC90E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_113)
{
    // 490E 0062;	
    // (䤎) CJK UNIFIED IDEOGRAPH-490E	[FB80 C90E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC90E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_114)
{
    // 490F 0021;	
    // (䤏) CJK UNIFIED IDEOGRAPH-490F	[FB80 C90F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC90F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_115)
{
    // 490F 003F;	
    // (䤏) CJK UNIFIED IDEOGRAPH-490F	[FB80 C90F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC90F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_116)
{
    // 490F 0061;	
    // (䤏) CJK UNIFIED IDEOGRAPH-490F	[FB80 C90F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC90F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_117)
{
    // 490F 0041;	
    // (䤏) CJK UNIFIED IDEOGRAPH-490F	[FB80 C90F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x490F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC90F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_118)
{
    // 490F 0062;	
    // (䤏) CJK UNIFIED IDEOGRAPH-490F	[FB80 C90F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x490F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC90F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_119)
{
    // 4910 0021;	
    // (䤐) CJK UNIFIED IDEOGRAPH-4910	[FB80 C910 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4910, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC910, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_120)
{
    // 4910 003F;	
    // (䤐) CJK UNIFIED IDEOGRAPH-4910	[FB80 C910 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4910, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC910, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_121)
{
    // 4910 0061;	
    // (䤐) CJK UNIFIED IDEOGRAPH-4910	[FB80 C910 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4910, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_122)
{
    // 4910 0041;	
    // (䤐) CJK UNIFIED IDEOGRAPH-4910	[FB80 C910 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4910, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_123)
{
    // 4910 0062;	
    // (䤐) CJK UNIFIED IDEOGRAPH-4910	[FB80 C910 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4910, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC910, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_124)
{
    // 4911 0021;	
    // (䤑) CJK UNIFIED IDEOGRAPH-4911	[FB80 C911 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4911, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC911, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_125)
{
    // 4911 003F;	
    // (䤑) CJK UNIFIED IDEOGRAPH-4911	[FB80 C911 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4911, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC911, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_126)
{
    // 4911 0061;	
    // (䤑) CJK UNIFIED IDEOGRAPH-4911	[FB80 C911 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4911, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_127)
{
    // 4911 0041;	
    // (䤑) CJK UNIFIED IDEOGRAPH-4911	[FB80 C911 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4911, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC911, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_128)
{
    // 4911 0062;	
    // (䤑) CJK UNIFIED IDEOGRAPH-4911	[FB80 C911 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4911, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC911, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_129)
{
    // 4912 0021;	
    // (䤒) CJK UNIFIED IDEOGRAPH-4912	[FB80 C912 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4912, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC912, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_130)
{
    // 4912 003F;	
    // (䤒) CJK UNIFIED IDEOGRAPH-4912	[FB80 C912 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4912, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC912, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_131)
{
    // 4912 0061;	
    // (䤒) CJK UNIFIED IDEOGRAPH-4912	[FB80 C912 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4912, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_132)
{
    // 4912 0041;	
    // (䤒) CJK UNIFIED IDEOGRAPH-4912	[FB80 C912 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4912, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC912, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_133)
{
    // 4912 0062;	
    // (䤒) CJK UNIFIED IDEOGRAPH-4912	[FB80 C912 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4912, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC912, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_134)
{
    // 4913 0021;	
    // (䤓) CJK UNIFIED IDEOGRAPH-4913	[FB80 C913 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4913, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC913, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_135)
{
    // 4913 003F;	
    // (䤓) CJK UNIFIED IDEOGRAPH-4913	[FB80 C913 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4913, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC913, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_136)
{
    // 4913 0061;	
    // (䤓) CJK UNIFIED IDEOGRAPH-4913	[FB80 C913 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4913, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_137)
{
    // 4913 0041;	
    // (䤓) CJK UNIFIED IDEOGRAPH-4913	[FB80 C913 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4913, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC913, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_138)
{
    // 4913 0062;	
    // (䤓) CJK UNIFIED IDEOGRAPH-4913	[FB80 C913 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4913, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC913, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_139)
{
    // 4914 0021;	
    // (䤔) CJK UNIFIED IDEOGRAPH-4914	[FB80 C914 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4914, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC914, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_140)
{
    // 4914 003F;	
    // (䤔) CJK UNIFIED IDEOGRAPH-4914	[FB80 C914 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4914, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC914, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_141)
{
    // 4914 0061;	
    // (䤔) CJK UNIFIED IDEOGRAPH-4914	[FB80 C914 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4914, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_142)
{
    // 4914 0041;	
    // (䤔) CJK UNIFIED IDEOGRAPH-4914	[FB80 C914 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4914, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_143)
{
    // 4914 0062;	
    // (䤔) CJK UNIFIED IDEOGRAPH-4914	[FB80 C914 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4914, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC914, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_144)
{
    // 4915 0021;	
    // (䤕) CJK UNIFIED IDEOGRAPH-4915	[FB80 C915 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4915, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC915, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_145)
{
    // 4915 003F;	
    // (䤕) CJK UNIFIED IDEOGRAPH-4915	[FB80 C915 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4915, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC915, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_146)
{
    // 4915 0061;	
    // (䤕) CJK UNIFIED IDEOGRAPH-4915	[FB80 C915 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4915, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_147)
{
    // 4915 0041;	
    // (䤕) CJK UNIFIED IDEOGRAPH-4915	[FB80 C915 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4915, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC915, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_148)
{
    // 4915 0062;	
    // (䤕) CJK UNIFIED IDEOGRAPH-4915	[FB80 C915 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4915, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC915, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_149)
{
    // 4916 0021;	
    // (䤖) CJK UNIFIED IDEOGRAPH-4916	[FB80 C916 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4916, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC916, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_150)
{
    // 4916 003F;	
    // (䤖) CJK UNIFIED IDEOGRAPH-4916	[FB80 C916 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4916, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC916, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_151)
{
    // 4916 0061;	
    // (䤖) CJK UNIFIED IDEOGRAPH-4916	[FB80 C916 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4916, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_152)
{
    // 4916 0041;	
    // (䤖) CJK UNIFIED IDEOGRAPH-4916	[FB80 C916 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4916, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC916, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_153)
{
    // 4916 0062;	
    // (䤖) CJK UNIFIED IDEOGRAPH-4916	[FB80 C916 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4916, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC916, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_154)
{
    // 4917 0021;	
    // (䤗) CJK UNIFIED IDEOGRAPH-4917	[FB80 C917 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4917, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC917, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_155)
{
    // 4917 003F;	
    // (䤗) CJK UNIFIED IDEOGRAPH-4917	[FB80 C917 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4917, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC917, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_156)
{
    // 4917 0061;	
    // (䤗) CJK UNIFIED IDEOGRAPH-4917	[FB80 C917 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4917, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_157)
{
    // 4917 0041;	
    // (䤗) CJK UNIFIED IDEOGRAPH-4917	[FB80 C917 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4917, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC917, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_158)
{
    // 4917 0062;	
    // (䤗) CJK UNIFIED IDEOGRAPH-4917	[FB80 C917 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4917, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC917, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_159)
{
    // 4918 0021;	
    // (䤘) CJK UNIFIED IDEOGRAPH-4918	[FB80 C918 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4918, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC918, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_160)
{
    // 4918 003F;	
    // (䤘) CJK UNIFIED IDEOGRAPH-4918	[FB80 C918 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4918, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC918, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_161)
{
    // 4918 0061;	
    // (䤘) CJK UNIFIED IDEOGRAPH-4918	[FB80 C918 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4918, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_162)
{
    // 4918 0041;	
    // (䤘) CJK UNIFIED IDEOGRAPH-4918	[FB80 C918 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4918, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC918, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_163)
{
    // 4918 0062;	
    // (䤘) CJK UNIFIED IDEOGRAPH-4918	[FB80 C918 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4918, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC918, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_164)
{
    // 4919 0021;	
    // (䤙) CJK UNIFIED IDEOGRAPH-4919	[FB80 C919 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4919, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC919, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_165)
{
    // 4919 003F;	
    // (䤙) CJK UNIFIED IDEOGRAPH-4919	[FB80 C919 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4919, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC919, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_166)
{
    // 4919 0061;	
    // (䤙) CJK UNIFIED IDEOGRAPH-4919	[FB80 C919 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4919, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_167)
{
    // 4919 0041;	
    // (䤙) CJK UNIFIED IDEOGRAPH-4919	[FB80 C919 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4919, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC919, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_168)
{
    // 4919 0062;	
    // (䤙) CJK UNIFIED IDEOGRAPH-4919	[FB80 C919 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4919, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC919, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_169)
{
    // 491A 0021;	
    // (䤚) CJK UNIFIED IDEOGRAPH-491A	[FB80 C91A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC91A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_170)
{
    // 491A 003F;	
    // (䤚) CJK UNIFIED IDEOGRAPH-491A	[FB80 C91A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC91A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_171)
{
    // 491A 0061;	
    // (䤚) CJK UNIFIED IDEOGRAPH-491A	[FB80 C91A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC91A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_172)
{
    // 491A 0041;	
    // (䤚) CJK UNIFIED IDEOGRAPH-491A	[FB80 C91A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x491A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC91A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_173)
{
    // 491A 0062;	
    // (䤚) CJK UNIFIED IDEOGRAPH-491A	[FB80 C91A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC91A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_174)
{
    // 491B 0021;	
    // (䤛) CJK UNIFIED IDEOGRAPH-491B	[FB80 C91B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC91B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_175)
{
    // 491B 003F;	
    // (䤛) CJK UNIFIED IDEOGRAPH-491B	[FB80 C91B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC91B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_176)
{
    // 491B 0061;	
    // (䤛) CJK UNIFIED IDEOGRAPH-491B	[FB80 C91B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC91B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_177)
{
    // 491B 0041;	
    // (䤛) CJK UNIFIED IDEOGRAPH-491B	[FB80 C91B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x491B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC91B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_178)
{
    // 491B 0062;	
    // (䤛) CJK UNIFIED IDEOGRAPH-491B	[FB80 C91B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC91B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_179)
{
    // 491C 0021;	
    // (䤜) CJK UNIFIED IDEOGRAPH-491C	[FB80 C91C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC91C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_180)
{
    // 491C 003F;	
    // (䤜) CJK UNIFIED IDEOGRAPH-491C	[FB80 C91C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC91C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_181)
{
    // 491C 0061;	
    // (䤜) CJK UNIFIED IDEOGRAPH-491C	[FB80 C91C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC91C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_182)
{
    // 491C 0041;	
    // (䤜) CJK UNIFIED IDEOGRAPH-491C	[FB80 C91C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x491C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC91C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_183)
{
    // 491C 0062;	
    // (䤜) CJK UNIFIED IDEOGRAPH-491C	[FB80 C91C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC91C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_184)
{
    // 491D 0021;	
    // (䤝) CJK UNIFIED IDEOGRAPH-491D	[FB80 C91D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC91D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_185)
{
    // 491D 003F;	
    // (䤝) CJK UNIFIED IDEOGRAPH-491D	[FB80 C91D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC91D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_186)
{
    // 491D 0061;	
    // (䤝) CJK UNIFIED IDEOGRAPH-491D	[FB80 C91D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC91D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_187)
{
    // 491D 0041;	
    // (䤝) CJK UNIFIED IDEOGRAPH-491D	[FB80 C91D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x491D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC91D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_188)
{
    // 491D 0062;	
    // (䤝) CJK UNIFIED IDEOGRAPH-491D	[FB80 C91D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC91D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_189)
{
    // 491E 0021;	
    // (䤞) CJK UNIFIED IDEOGRAPH-491E	[FB80 C91E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC91E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_190)
{
    // 491E 003F;	
    // (䤞) CJK UNIFIED IDEOGRAPH-491E	[FB80 C91E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC91E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_191)
{
    // 491E 0061;	
    // (䤞) CJK UNIFIED IDEOGRAPH-491E	[FB80 C91E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC91E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_192)
{
    // 491E 0041;	
    // (䤞) CJK UNIFIED IDEOGRAPH-491E	[FB80 C91E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x491E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC91E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_193)
{
    // 491E 0062;	
    // (䤞) CJK UNIFIED IDEOGRAPH-491E	[FB80 C91E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC91E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_194)
{
    // 491F 0021;	
    // (䤟) CJK UNIFIED IDEOGRAPH-491F	[FB80 C91F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC91F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_195)
{
    // 491F 003F;	
    // (䤟) CJK UNIFIED IDEOGRAPH-491F	[FB80 C91F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC91F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_196)
{
    // 491F 0061;	
    // (䤟) CJK UNIFIED IDEOGRAPH-491F	[FB80 C91F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC91F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_197)
{
    // 491F 0041;	
    // (䤟) CJK UNIFIED IDEOGRAPH-491F	[FB80 C91F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x491F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC91F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_198)
{
    // 491F 0062;	
    // (䤟) CJK UNIFIED IDEOGRAPH-491F	[FB80 C91F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x491F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC91F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_199)
{
    // 4920 0021;	
    // (䤠) CJK UNIFIED IDEOGRAPH-4920	[FB80 C920 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4920, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC920, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_200)
{
    // 4920 003F;	
    // (䤠) CJK UNIFIED IDEOGRAPH-4920	[FB80 C920 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4920, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC920, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_201)
{
    // 4920 0061;	
    // (䤠) CJK UNIFIED IDEOGRAPH-4920	[FB80 C920 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4920, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC920, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_202)
{
    // 4920 0041;	
    // (䤠) CJK UNIFIED IDEOGRAPH-4920	[FB80 C920 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4920, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC920, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_203)
{
    // 4920 0062;	
    // (䤠) CJK UNIFIED IDEOGRAPH-4920	[FB80 C920 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4920, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC920, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_204)
{
    // 4921 0021;	
    // (䤡) CJK UNIFIED IDEOGRAPH-4921	[FB80 C921 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4921, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC921, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_205)
{
    // 4921 003F;	
    // (䤡) CJK UNIFIED IDEOGRAPH-4921	[FB80 C921 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4921, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC921, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_206)
{
    // 4921 0061;	
    // (䤡) CJK UNIFIED IDEOGRAPH-4921	[FB80 C921 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4921, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_207)
{
    // 4921 0041;	
    // (䤡) CJK UNIFIED IDEOGRAPH-4921	[FB80 C921 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4921, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_208)
{
    // 4921 0062;	
    // (䤡) CJK UNIFIED IDEOGRAPH-4921	[FB80 C921 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4921, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC921, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_209)
{
    // 4922 0021;	
    // (䤢) CJK UNIFIED IDEOGRAPH-4922	[FB80 C922 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4922, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC922, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_210)
{
    // 4922 003F;	
    // (䤢) CJK UNIFIED IDEOGRAPH-4922	[FB80 C922 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4922, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC922, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_211)
{
    // 4922 0061;	
    // (䤢) CJK UNIFIED IDEOGRAPH-4922	[FB80 C922 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4922, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_212)
{
    // 4922 0041;	
    // (䤢) CJK UNIFIED IDEOGRAPH-4922	[FB80 C922 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4922, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_213)
{
    // 4922 0062;	
    // (䤢) CJK UNIFIED IDEOGRAPH-4922	[FB80 C922 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4922, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC922, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_214)
{
    // 4923 0021;	
    // (䤣) CJK UNIFIED IDEOGRAPH-4923	[FB80 C923 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4923, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC923, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_215)
{
    // 4923 003F;	
    // (䤣) CJK UNIFIED IDEOGRAPH-4923	[FB80 C923 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4923, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC923, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_216)
{
    // 4923 0061;	
    // (䤣) CJK UNIFIED IDEOGRAPH-4923	[FB80 C923 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4923, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_217)
{
    // 4923 0041;	
    // (䤣) CJK UNIFIED IDEOGRAPH-4923	[FB80 C923 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4923, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_218)
{
    // 4923 0062;	
    // (䤣) CJK UNIFIED IDEOGRAPH-4923	[FB80 C923 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4923, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC923, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_219)
{
    // 4924 0021;	
    // (䤤) CJK UNIFIED IDEOGRAPH-4924	[FB80 C924 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4924, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC924, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_220)
{
    // 4924 003F;	
    // (䤤) CJK UNIFIED IDEOGRAPH-4924	[FB80 C924 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4924, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC924, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_221)
{
    // 4924 0061;	
    // (䤤) CJK UNIFIED IDEOGRAPH-4924	[FB80 C924 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4924, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_222)
{
    // 4924 0041;	
    // (䤤) CJK UNIFIED IDEOGRAPH-4924	[FB80 C924 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4924, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_223)
{
    // 4924 0062;	
    // (䤤) CJK UNIFIED IDEOGRAPH-4924	[FB80 C924 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4924, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC924, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_224)
{
    // 4925 0021;	
    // (䤥) CJK UNIFIED IDEOGRAPH-4925	[FB80 C925 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4925, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC925, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_225)
{
    // 4925 003F;	
    // (䤥) CJK UNIFIED IDEOGRAPH-4925	[FB80 C925 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4925, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC925, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_226)
{
    // 4925 0061;	
    // (䤥) CJK UNIFIED IDEOGRAPH-4925	[FB80 C925 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4925, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_227)
{
    // 4925 0041;	
    // (䤥) CJK UNIFIED IDEOGRAPH-4925	[FB80 C925 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4925, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_228)
{
    // 4925 0062;	
    // (䤥) CJK UNIFIED IDEOGRAPH-4925	[FB80 C925 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4925, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC925, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_229)
{
    // 4926 0021;	
    // (䤦) CJK UNIFIED IDEOGRAPH-4926	[FB80 C926 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4926, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC926, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_230)
{
    // 4926 003F;	
    // (䤦) CJK UNIFIED IDEOGRAPH-4926	[FB80 C926 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4926, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC926, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_231)
{
    // 4926 0061;	
    // (䤦) CJK UNIFIED IDEOGRAPH-4926	[FB80 C926 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4926, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_232)
{
    // 4926 0041;	
    // (䤦) CJK UNIFIED IDEOGRAPH-4926	[FB80 C926 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4926, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_233)
{
    // 4926 0062;	
    // (䤦) CJK UNIFIED IDEOGRAPH-4926	[FB80 C926 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4926, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC926, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_234)
{
    // 4927 0021;	
    // (䤧) CJK UNIFIED IDEOGRAPH-4927	[FB80 C927 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4927, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC927, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_235)
{
    // 4927 003F;	
    // (䤧) CJK UNIFIED IDEOGRAPH-4927	[FB80 C927 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4927, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC927, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_236)
{
    // 4927 0061;	
    // (䤧) CJK UNIFIED IDEOGRAPH-4927	[FB80 C927 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4927, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_237)
{
    // 4927 0041;	
    // (䤧) CJK UNIFIED IDEOGRAPH-4927	[FB80 C927 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4927, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_238)
{
    // 4927 0062;	
    // (䤧) CJK UNIFIED IDEOGRAPH-4927	[FB80 C927 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4927, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC927, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_239)
{
    // 4928 0021;	
    // (䤨) CJK UNIFIED IDEOGRAPH-4928	[FB80 C928 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4928, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC928, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_240)
{
    // 4928 003F;	
    // (䤨) CJK UNIFIED IDEOGRAPH-4928	[FB80 C928 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4928, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC928, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_241)
{
    // 4928 0061;	
    // (䤨) CJK UNIFIED IDEOGRAPH-4928	[FB80 C928 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4928, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_242)
{
    // 4928 0041;	
    // (䤨) CJK UNIFIED IDEOGRAPH-4928	[FB80 C928 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4928, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_243)
{
    // 4928 0062;	
    // (䤨) CJK UNIFIED IDEOGRAPH-4928	[FB80 C928 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4928, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC928, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_244)
{
    // 4929 0021;	
    // (䤩) CJK UNIFIED IDEOGRAPH-4929	[FB80 C929 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4929, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC929, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_245)
{
    // 4929 003F;	
    // (䤩) CJK UNIFIED IDEOGRAPH-4929	[FB80 C929 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4929, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC929, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_246)
{
    // 4929 0061;	
    // (䤩) CJK UNIFIED IDEOGRAPH-4929	[FB80 C929 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4929, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_247)
{
    // 4929 0041;	
    // (䤩) CJK UNIFIED IDEOGRAPH-4929	[FB80 C929 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4929, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_248)
{
    // 4929 0062;	
    // (䤩) CJK UNIFIED IDEOGRAPH-4929	[FB80 C929 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4929, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC929, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_249)
{
    // 492A 0021;	
    // (䤪) CJK UNIFIED IDEOGRAPH-492A	[FB80 C92A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC92A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_250)
{
    // 492A 003F;	
    // (䤪) CJK UNIFIED IDEOGRAPH-492A	[FB80 C92A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC92A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_251)
{
    // 492A 0061;	
    // (䤪) CJK UNIFIED IDEOGRAPH-492A	[FB80 C92A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC92A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_252)
{
    // 492A 0041;	
    // (䤪) CJK UNIFIED IDEOGRAPH-492A	[FB80 C92A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x492A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC92A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_253)
{
    // 492A 0062;	
    // (䤪) CJK UNIFIED IDEOGRAPH-492A	[FB80 C92A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC92A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_254)
{
    // 492B 0021;	
    // (䤫) CJK UNIFIED IDEOGRAPH-492B	[FB80 C92B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC92B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_255)
{
    // 492B 003F;	
    // (䤫) CJK UNIFIED IDEOGRAPH-492B	[FB80 C92B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC92B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_256)
{
    // 492B 0061;	
    // (䤫) CJK UNIFIED IDEOGRAPH-492B	[FB80 C92B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC92B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_257)
{
    // 492B 0041;	
    // (䤫) CJK UNIFIED IDEOGRAPH-492B	[FB80 C92B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x492B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC92B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_258)
{
    // 492B 0062;	
    // (䤫) CJK UNIFIED IDEOGRAPH-492B	[FB80 C92B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC92B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_259)
{
    // 492C 0021;	
    // (䤬) CJK UNIFIED IDEOGRAPH-492C	[FB80 C92C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC92C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_260)
{
    // 492C 003F;	
    // (䤬) CJK UNIFIED IDEOGRAPH-492C	[FB80 C92C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC92C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_261)
{
    // 492C 0061;	
    // (䤬) CJK UNIFIED IDEOGRAPH-492C	[FB80 C92C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC92C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_262)
{
    // 492C 0041;	
    // (䤬) CJK UNIFIED IDEOGRAPH-492C	[FB80 C92C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x492C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC92C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_263)
{
    // 492C 0062;	
    // (䤬) CJK UNIFIED IDEOGRAPH-492C	[FB80 C92C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC92C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_264)
{
    // 492D 0021;	
    // (䤭) CJK UNIFIED IDEOGRAPH-492D	[FB80 C92D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC92D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_265)
{
    // 492D 003F;	
    // (䤭) CJK UNIFIED IDEOGRAPH-492D	[FB80 C92D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC92D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_266)
{
    // 492D 0061;	
    // (䤭) CJK UNIFIED IDEOGRAPH-492D	[FB80 C92D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC92D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_267)
{
    // 492D 0041;	
    // (䤭) CJK UNIFIED IDEOGRAPH-492D	[FB80 C92D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x492D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC92D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_268)
{
    // 492D 0062;	
    // (䤭) CJK UNIFIED IDEOGRAPH-492D	[FB80 C92D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC92D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_269)
{
    // 492E 0021;	
    // (䤮) CJK UNIFIED IDEOGRAPH-492E	[FB80 C92E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC92E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_270)
{
    // 492E 003F;	
    // (䤮) CJK UNIFIED IDEOGRAPH-492E	[FB80 C92E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC92E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_271)
{
    // 492E 0061;	
    // (䤮) CJK UNIFIED IDEOGRAPH-492E	[FB80 C92E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC92E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_272)
{
    // 492E 0041;	
    // (䤮) CJK UNIFIED IDEOGRAPH-492E	[FB80 C92E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x492E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC92E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_273)
{
    // 492E 0062;	
    // (䤮) CJK UNIFIED IDEOGRAPH-492E	[FB80 C92E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC92E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_274)
{
    // 492F 0021;	
    // (䤯) CJK UNIFIED IDEOGRAPH-492F	[FB80 C92F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC92F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_275)
{
    // 492F 003F;	
    // (䤯) CJK UNIFIED IDEOGRAPH-492F	[FB80 C92F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC92F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_276)
{
    // 492F 0061;	
    // (䤯) CJK UNIFIED IDEOGRAPH-492F	[FB80 C92F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC92F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_277)
{
    // 492F 0041;	
    // (䤯) CJK UNIFIED IDEOGRAPH-492F	[FB80 C92F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x492F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC92F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_278)
{
    // 492F 0062;	
    // (䤯) CJK UNIFIED IDEOGRAPH-492F	[FB80 C92F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x492F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC92F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_279)
{
    // 4930 0021;	
    // (䤰) CJK UNIFIED IDEOGRAPH-4930	[FB80 C930 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4930, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC930, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_280)
{
    // 4930 003F;	
    // (䤰) CJK UNIFIED IDEOGRAPH-4930	[FB80 C930 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4930, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC930, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_281)
{
    // 4930 0061;	
    // (䤰) CJK UNIFIED IDEOGRAPH-4930	[FB80 C930 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4930, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_282)
{
    // 4930 0041;	
    // (䤰) CJK UNIFIED IDEOGRAPH-4930	[FB80 C930 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4930, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_283)
{
    // 4930 0062;	
    // (䤰) CJK UNIFIED IDEOGRAPH-4930	[FB80 C930 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4930, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC930, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_284)
{
    // 4931 0021;	
    // (䤱) CJK UNIFIED IDEOGRAPH-4931	[FB80 C931 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4931, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC931, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_285)
{
    // 4931 003F;	
    // (䤱) CJK UNIFIED IDEOGRAPH-4931	[FB80 C931 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4931, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC931, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_286)
{
    // 4931 0061;	
    // (䤱) CJK UNIFIED IDEOGRAPH-4931	[FB80 C931 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4931, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_287)
{
    // 4931 0041;	
    // (䤱) CJK UNIFIED IDEOGRAPH-4931	[FB80 C931 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4931, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_288)
{
    // 4931 0062;	
    // (䤱) CJK UNIFIED IDEOGRAPH-4931	[FB80 C931 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4931, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC931, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_289)
{
    // 4932 0021;	
    // (䤲) CJK UNIFIED IDEOGRAPH-4932	[FB80 C932 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4932, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC932, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_290)
{
    // 4932 003F;	
    // (䤲) CJK UNIFIED IDEOGRAPH-4932	[FB80 C932 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4932, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC932, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_291)
{
    // 4932 0061;	
    // (䤲) CJK UNIFIED IDEOGRAPH-4932	[FB80 C932 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4932, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_292)
{
    // 4932 0041;	
    // (䤲) CJK UNIFIED IDEOGRAPH-4932	[FB80 C932 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4932, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_293)
{
    // 4932 0062;	
    // (䤲) CJK UNIFIED IDEOGRAPH-4932	[FB80 C932 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4932, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC932, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_294)
{
    // 4933 0021;	
    // (䤳) CJK UNIFIED IDEOGRAPH-4933	[FB80 C933 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4933, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC933, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_295)
{
    // 4933 003F;	
    // (䤳) CJK UNIFIED IDEOGRAPH-4933	[FB80 C933 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4933, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC933, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_296)
{
    // 4933 0061;	
    // (䤳) CJK UNIFIED IDEOGRAPH-4933	[FB80 C933 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4933, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_297)
{
    // 4933 0041;	
    // (䤳) CJK UNIFIED IDEOGRAPH-4933	[FB80 C933 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4933, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_298)
{
    // 4933 0062;	
    // (䤳) CJK UNIFIED IDEOGRAPH-4933	[FB80 C933 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4933, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC933, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_299)
{
    // 4934 0021;	
    // (䤴) CJK UNIFIED IDEOGRAPH-4934	[FB80 C934 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4934, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC934, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_300)
{
    // 4934 003F;	
    // (䤴) CJK UNIFIED IDEOGRAPH-4934	[FB80 C934 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4934, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC934, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_301)
{
    // 4934 0061;	
    // (䤴) CJK UNIFIED IDEOGRAPH-4934	[FB80 C934 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4934, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_302)
{
    // 4934 0041;	
    // (䤴) CJK UNIFIED IDEOGRAPH-4934	[FB80 C934 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4934, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_303)
{
    // 4934 0062;	
    // (䤴) CJK UNIFIED IDEOGRAPH-4934	[FB80 C934 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4934, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC934, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_304)
{
    // 4935 0021;	
    // (䤵) CJK UNIFIED IDEOGRAPH-4935	[FB80 C935 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4935, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC935, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_305)
{
    // 4935 003F;	
    // (䤵) CJK UNIFIED IDEOGRAPH-4935	[FB80 C935 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4935, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC935, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_306)
{
    // 4935 0061;	
    // (䤵) CJK UNIFIED IDEOGRAPH-4935	[FB80 C935 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4935, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_307)
{
    // 4935 0041;	
    // (䤵) CJK UNIFIED IDEOGRAPH-4935	[FB80 C935 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4935, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_308)
{
    // 4935 0062;	
    // (䤵) CJK UNIFIED IDEOGRAPH-4935	[FB80 C935 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4935, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC935, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_309)
{
    // 4936 0021;	
    // (䤶) CJK UNIFIED IDEOGRAPH-4936	[FB80 C936 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4936, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC936, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_310)
{
    // 4936 003F;	
    // (䤶) CJK UNIFIED IDEOGRAPH-4936	[FB80 C936 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4936, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC936, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_311)
{
    // 4936 0061;	
    // (䤶) CJK UNIFIED IDEOGRAPH-4936	[FB80 C936 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4936, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_312)
{
    // 4936 0041;	
    // (䤶) CJK UNIFIED IDEOGRAPH-4936	[FB80 C936 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4936, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_313)
{
    // 4936 0062;	
    // (䤶) CJK UNIFIED IDEOGRAPH-4936	[FB80 C936 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4936, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC936, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_314)
{
    // 4937 0021;	
    // (䤷) CJK UNIFIED IDEOGRAPH-4937	[FB80 C937 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4937, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC937, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_315)
{
    // 4937 003F;	
    // (䤷) CJK UNIFIED IDEOGRAPH-4937	[FB80 C937 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4937, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC937, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_316)
{
    // 4937 0061;	
    // (䤷) CJK UNIFIED IDEOGRAPH-4937	[FB80 C937 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4937, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_317)
{
    // 4937 0041;	
    // (䤷) CJK UNIFIED IDEOGRAPH-4937	[FB80 C937 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4937, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_318)
{
    // 4937 0062;	
    // (䤷) CJK UNIFIED IDEOGRAPH-4937	[FB80 C937 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4937, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC937, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_319)
{
    // 4938 0021;	
    // (䤸) CJK UNIFIED IDEOGRAPH-4938	[FB80 C938 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4938, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC938, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_320)
{
    // 4938 003F;	
    // (䤸) CJK UNIFIED IDEOGRAPH-4938	[FB80 C938 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4938, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC938, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_321)
{
    // 4938 0061;	
    // (䤸) CJK UNIFIED IDEOGRAPH-4938	[FB80 C938 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4938, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_322)
{
    // 4938 0041;	
    // (䤸) CJK UNIFIED IDEOGRAPH-4938	[FB80 C938 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4938, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_323)
{
    // 4938 0062;	
    // (䤸) CJK UNIFIED IDEOGRAPH-4938	[FB80 C938 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4938, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC938, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_324)
{
    // 4939 0021;	
    // (䤹) CJK UNIFIED IDEOGRAPH-4939	[FB80 C939 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4939, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC939, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_325)
{
    // 4939 003F;	
    // (䤹) CJK UNIFIED IDEOGRAPH-4939	[FB80 C939 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4939, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC939, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_326)
{
    // 4939 0061;	
    // (䤹) CJK UNIFIED IDEOGRAPH-4939	[FB80 C939 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4939, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_327)
{
    // 4939 0041;	
    // (䤹) CJK UNIFIED IDEOGRAPH-4939	[FB80 C939 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4939, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_328)
{
    // 4939 0062;	
    // (䤹) CJK UNIFIED IDEOGRAPH-4939	[FB80 C939 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4939, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC939, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_329)
{
    // 493A 0021;	
    // (䤺) CJK UNIFIED IDEOGRAPH-493A	[FB80 C93A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC93A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_330)
{
    // 493A 003F;	
    // (䤺) CJK UNIFIED IDEOGRAPH-493A	[FB80 C93A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC93A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_331)
{
    // 493A 0061;	
    // (䤺) CJK UNIFIED IDEOGRAPH-493A	[FB80 C93A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC93A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_332)
{
    // 493A 0041;	
    // (䤺) CJK UNIFIED IDEOGRAPH-493A	[FB80 C93A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x493A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC93A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_333)
{
    // 493A 0062;	
    // (䤺) CJK UNIFIED IDEOGRAPH-493A	[FB80 C93A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC93A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_334)
{
    // 493B 0021;	
    // (䤻) CJK UNIFIED IDEOGRAPH-493B	[FB80 C93B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC93B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_335)
{
    // 493B 003F;	
    // (䤻) CJK UNIFIED IDEOGRAPH-493B	[FB80 C93B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC93B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_336)
{
    // 493B 0061;	
    // (䤻) CJK UNIFIED IDEOGRAPH-493B	[FB80 C93B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC93B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_337)
{
    // 493B 0041;	
    // (䤻) CJK UNIFIED IDEOGRAPH-493B	[FB80 C93B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x493B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC93B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_338)
{
    // 493B 0062;	
    // (䤻) CJK UNIFIED IDEOGRAPH-493B	[FB80 C93B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC93B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_339)
{
    // 493C 0021;	
    // (䤼) CJK UNIFIED IDEOGRAPH-493C	[FB80 C93C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC93C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_340)
{
    // 493C 003F;	
    // (䤼) CJK UNIFIED IDEOGRAPH-493C	[FB80 C93C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC93C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_341)
{
    // 493C 0061;	
    // (䤼) CJK UNIFIED IDEOGRAPH-493C	[FB80 C93C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC93C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_342)
{
    // 493C 0041;	
    // (䤼) CJK UNIFIED IDEOGRAPH-493C	[FB80 C93C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x493C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC93C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_343)
{
    // 493C 0062;	
    // (䤼) CJK UNIFIED IDEOGRAPH-493C	[FB80 C93C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC93C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_344)
{
    // 493D 0021;	
    // (䤽) CJK UNIFIED IDEOGRAPH-493D	[FB80 C93D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC93D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_345)
{
    // 493D 003F;	
    // (䤽) CJK UNIFIED IDEOGRAPH-493D	[FB80 C93D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC93D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_346)
{
    // 493D 0061;	
    // (䤽) CJK UNIFIED IDEOGRAPH-493D	[FB80 C93D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC93D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_347)
{
    // 493D 0041;	
    // (䤽) CJK UNIFIED IDEOGRAPH-493D	[FB80 C93D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x493D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC93D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_348)
{
    // 493D 0062;	
    // (䤽) CJK UNIFIED IDEOGRAPH-493D	[FB80 C93D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC93D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_349)
{
    // 493E 0021;	
    // (䤾) CJK UNIFIED IDEOGRAPH-493E	[FB80 C93E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC93E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_350)
{
    // 493E 003F;	
    // (䤾) CJK UNIFIED IDEOGRAPH-493E	[FB80 C93E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC93E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_351)
{
    // 493E 0061;	
    // (䤾) CJK UNIFIED IDEOGRAPH-493E	[FB80 C93E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC93E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_352)
{
    // 493E 0041;	
    // (䤾) CJK UNIFIED IDEOGRAPH-493E	[FB80 C93E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x493E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC93E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_353)
{
    // 493E 0062;	
    // (䤾) CJK UNIFIED IDEOGRAPH-493E	[FB80 C93E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC93E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_354)
{
    // 493F 0021;	
    // (䤿) CJK UNIFIED IDEOGRAPH-493F	[FB80 C93F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC93F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_355)
{
    // 493F 003F;	
    // (䤿) CJK UNIFIED IDEOGRAPH-493F	[FB80 C93F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC93F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_356)
{
    // 493F 0061;	
    // (䤿) CJK UNIFIED IDEOGRAPH-493F	[FB80 C93F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC93F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_357)
{
    // 493F 0041;	
    // (䤿) CJK UNIFIED IDEOGRAPH-493F	[FB80 C93F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x493F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC93F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_358)
{
    // 493F 0062;	
    // (䤿) CJK UNIFIED IDEOGRAPH-493F	[FB80 C93F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x493F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC93F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_359)
{
    // 4940 0021;	
    // (䥀) CJK UNIFIED IDEOGRAPH-4940	[FB80 C940 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4940, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC940, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_360)
{
    // 4940 003F;	
    // (䥀) CJK UNIFIED IDEOGRAPH-4940	[FB80 C940 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4940, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC940, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_361)
{
    // 4940 0061;	
    // (䥀) CJK UNIFIED IDEOGRAPH-4940	[FB80 C940 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4940, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_362)
{
    // 4940 0041;	
    // (䥀) CJK UNIFIED IDEOGRAPH-4940	[FB80 C940 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4940, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_363)
{
    // 4940 0062;	
    // (䥀) CJK UNIFIED IDEOGRAPH-4940	[FB80 C940 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4940, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC940, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_364)
{
    // 4941 0021;	
    // (䥁) CJK UNIFIED IDEOGRAPH-4941	[FB80 C941 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4941, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC941, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_365)
{
    // 4941 003F;	
    // (䥁) CJK UNIFIED IDEOGRAPH-4941	[FB80 C941 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4941, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC941, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_366)
{
    // 4941 0061;	
    // (䥁) CJK UNIFIED IDEOGRAPH-4941	[FB80 C941 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4941, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_367)
{
    // 4941 0041;	
    // (䥁) CJK UNIFIED IDEOGRAPH-4941	[FB80 C941 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4941, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_368)
{
    // 4941 0062;	
    // (䥁) CJK UNIFIED IDEOGRAPH-4941	[FB80 C941 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4941, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC941, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_369)
{
    // 4942 0021;	
    // (䥂) CJK UNIFIED IDEOGRAPH-4942	[FB80 C942 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4942, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC942, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_370)
{
    // 4942 003F;	
    // (䥂) CJK UNIFIED IDEOGRAPH-4942	[FB80 C942 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4942, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC942, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_371)
{
    // 4942 0061;	
    // (䥂) CJK UNIFIED IDEOGRAPH-4942	[FB80 C942 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4942, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_372)
{
    // 4942 0041;	
    // (䥂) CJK UNIFIED IDEOGRAPH-4942	[FB80 C942 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4942, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_373)
{
    // 4942 0062;	
    // (䥂) CJK UNIFIED IDEOGRAPH-4942	[FB80 C942 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4942, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC942, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_374)
{
    // 4943 0021;	
    // (䥃) CJK UNIFIED IDEOGRAPH-4943	[FB80 C943 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4943, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC943, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_375)
{
    // 4943 003F;	
    // (䥃) CJK UNIFIED IDEOGRAPH-4943	[FB80 C943 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4943, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC943, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_376)
{
    // 4943 0061;	
    // (䥃) CJK UNIFIED IDEOGRAPH-4943	[FB80 C943 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4943, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_377)
{
    // 4943 0041;	
    // (䥃) CJK UNIFIED IDEOGRAPH-4943	[FB80 C943 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4943, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_378)
{
    // 4943 0062;	
    // (䥃) CJK UNIFIED IDEOGRAPH-4943	[FB80 C943 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4943, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC943, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_379)
{
    // 4944 0021;	
    // (䥄) CJK UNIFIED IDEOGRAPH-4944	[FB80 C944 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4944, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC944, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_380)
{
    // 4944 003F;	
    // (䥄) CJK UNIFIED IDEOGRAPH-4944	[FB80 C944 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4944, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC944, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_381)
{
    // 4944 0061;	
    // (䥄) CJK UNIFIED IDEOGRAPH-4944	[FB80 C944 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4944, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_382)
{
    // 4944 0041;	
    // (䥄) CJK UNIFIED IDEOGRAPH-4944	[FB80 C944 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4944, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_383)
{
    // 4944 0062;	
    // (䥄) CJK UNIFIED IDEOGRAPH-4944	[FB80 C944 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4944, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC944, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_384)
{
    // 4945 0021;	
    // (䥅) CJK UNIFIED IDEOGRAPH-4945	[FB80 C945 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4945, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC945, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_385)
{
    // 4945 003F;	
    // (䥅) CJK UNIFIED IDEOGRAPH-4945	[FB80 C945 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4945, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC945, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_386)
{
    // 4945 0061;	
    // (䥅) CJK UNIFIED IDEOGRAPH-4945	[FB80 C945 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4945, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_387)
{
    // 4945 0041;	
    // (䥅) CJK UNIFIED IDEOGRAPH-4945	[FB80 C945 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4945, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_388)
{
    // 4945 0062;	
    // (䥅) CJK UNIFIED IDEOGRAPH-4945	[FB80 C945 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4945, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC945, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_389)
{
    // 4946 0021;	
    // (䥆) CJK UNIFIED IDEOGRAPH-4946	[FB80 C946 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4946, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC946, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_390)
{
    // 4946 003F;	
    // (䥆) CJK UNIFIED IDEOGRAPH-4946	[FB80 C946 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4946, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC946, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_391)
{
    // 4946 0061;	
    // (䥆) CJK UNIFIED IDEOGRAPH-4946	[FB80 C946 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4946, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_392)
{
    // 4946 0041;	
    // (䥆) CJK UNIFIED IDEOGRAPH-4946	[FB80 C946 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4946, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_393)
{
    // 4946 0062;	
    // (䥆) CJK UNIFIED IDEOGRAPH-4946	[FB80 C946 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4946, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC946, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_394)
{
    // 4947 0021;	
    // (䥇) CJK UNIFIED IDEOGRAPH-4947	[FB80 C947 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4947, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC947, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_395)
{
    // 4947 003F;	
    // (䥇) CJK UNIFIED IDEOGRAPH-4947	[FB80 C947 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4947, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC947, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_396)
{
    // 4947 0061;	
    // (䥇) CJK UNIFIED IDEOGRAPH-4947	[FB80 C947 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4947, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_397)
{
    // 4947 0041;	
    // (䥇) CJK UNIFIED IDEOGRAPH-4947	[FB80 C947 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4947, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_398)
{
    // 4947 0062;	
    // (䥇) CJK UNIFIED IDEOGRAPH-4947	[FB80 C947 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4947, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC947, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_399)
{
    // 4948 0021;	
    // (䥈) CJK UNIFIED IDEOGRAPH-4948	[FB80 C948 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4948, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC948, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_400)
{
    // 4948 003F;	
    // (䥈) CJK UNIFIED IDEOGRAPH-4948	[FB80 C948 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4948, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC948, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_401)
{
    // 4948 0061;	
    // (䥈) CJK UNIFIED IDEOGRAPH-4948	[FB80 C948 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4948, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_402)
{
    // 4948 0041;	
    // (䥈) CJK UNIFIED IDEOGRAPH-4948	[FB80 C948 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4948, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_403)
{
    // 4948 0062;	
    // (䥈) CJK UNIFIED IDEOGRAPH-4948	[FB80 C948 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4948, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC948, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_404)
{
    // 4949 0021;	
    // (䥉) CJK UNIFIED IDEOGRAPH-4949	[FB80 C949 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4949, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC949, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_405)
{
    // 4949 003F;	
    // (䥉) CJK UNIFIED IDEOGRAPH-4949	[FB80 C949 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4949, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC949, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_406)
{
    // 4949 0061;	
    // (䥉) CJK UNIFIED IDEOGRAPH-4949	[FB80 C949 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4949, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_407)
{
    // 4949 0041;	
    // (䥉) CJK UNIFIED IDEOGRAPH-4949	[FB80 C949 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4949, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_408)
{
    // 4949 0062;	
    // (䥉) CJK UNIFIED IDEOGRAPH-4949	[FB80 C949 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4949, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC949, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_409)
{
    // 494A 0021;	
    // (䥊) CJK UNIFIED IDEOGRAPH-494A	[FB80 C94A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC94A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_410)
{
    // 494A 003F;	
    // (䥊) CJK UNIFIED IDEOGRAPH-494A	[FB80 C94A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC94A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_411)
{
    // 494A 0061;	
    // (䥊) CJK UNIFIED IDEOGRAPH-494A	[FB80 C94A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC94A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_412)
{
    // 494A 0041;	
    // (䥊) CJK UNIFIED IDEOGRAPH-494A	[FB80 C94A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x494A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC94A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_413)
{
    // 494A 0062;	
    // (䥊) CJK UNIFIED IDEOGRAPH-494A	[FB80 C94A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC94A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_414)
{
    // 494B 0021;	
    // (䥋) CJK UNIFIED IDEOGRAPH-494B	[FB80 C94B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC94B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_415)
{
    // 494B 003F;	
    // (䥋) CJK UNIFIED IDEOGRAPH-494B	[FB80 C94B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC94B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_416)
{
    // 494B 0061;	
    // (䥋) CJK UNIFIED IDEOGRAPH-494B	[FB80 C94B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC94B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_417)
{
    // 494B 0041;	
    // (䥋) CJK UNIFIED IDEOGRAPH-494B	[FB80 C94B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x494B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC94B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_418)
{
    // 494B 0062;	
    // (䥋) CJK UNIFIED IDEOGRAPH-494B	[FB80 C94B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC94B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_419)
{
    // 494C 0021;	
    // (䥌) CJK UNIFIED IDEOGRAPH-494C	[FB80 C94C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC94C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_420)
{
    // 494C 003F;	
    // (䥌) CJK UNIFIED IDEOGRAPH-494C	[FB80 C94C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC94C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_421)
{
    // 494C 0061;	
    // (䥌) CJK UNIFIED IDEOGRAPH-494C	[FB80 C94C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC94C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_422)
{
    // 494C 0041;	
    // (䥌) CJK UNIFIED IDEOGRAPH-494C	[FB80 C94C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x494C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC94C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_423)
{
    // 494C 0062;	
    // (䥌) CJK UNIFIED IDEOGRAPH-494C	[FB80 C94C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC94C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_424)
{
    // 494D 0021;	
    // (䥍) CJK UNIFIED IDEOGRAPH-494D	[FB80 C94D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC94D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_425)
{
    // 494D 003F;	
    // (䥍) CJK UNIFIED IDEOGRAPH-494D	[FB80 C94D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC94D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_426)
{
    // 494D 0061;	
    // (䥍) CJK UNIFIED IDEOGRAPH-494D	[FB80 C94D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC94D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_427)
{
    // 494D 0041;	
    // (䥍) CJK UNIFIED IDEOGRAPH-494D	[FB80 C94D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x494D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC94D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_428)
{
    // 494D 0062;	
    // (䥍) CJK UNIFIED IDEOGRAPH-494D	[FB80 C94D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC94D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_429)
{
    // 494E 0021;	
    // (䥎) CJK UNIFIED IDEOGRAPH-494E	[FB80 C94E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC94E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_430)
{
    // 494E 003F;	
    // (䥎) CJK UNIFIED IDEOGRAPH-494E	[FB80 C94E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC94E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_431)
{
    // 494E 0061;	
    // (䥎) CJK UNIFIED IDEOGRAPH-494E	[FB80 C94E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC94E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_432)
{
    // 494E 0041;	
    // (䥎) CJK UNIFIED IDEOGRAPH-494E	[FB80 C94E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x494E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC94E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_433)
{
    // 494E 0062;	
    // (䥎) CJK UNIFIED IDEOGRAPH-494E	[FB80 C94E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC94E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_434)
{
    // 494F 0021;	
    // (䥏) CJK UNIFIED IDEOGRAPH-494F	[FB80 C94F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC94F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_435)
{
    // 494F 003F;	
    // (䥏) CJK UNIFIED IDEOGRAPH-494F	[FB80 C94F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC94F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_436)
{
    // 494F 0061;	
    // (䥏) CJK UNIFIED IDEOGRAPH-494F	[FB80 C94F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC94F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_437)
{
    // 494F 0041;	
    // (䥏) CJK UNIFIED IDEOGRAPH-494F	[FB80 C94F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x494F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC94F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_438)
{
    // 494F 0062;	
    // (䥏) CJK UNIFIED IDEOGRAPH-494F	[FB80 C94F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x494F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC94F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_439)
{
    // 4950 0021;	
    // (䥐) CJK UNIFIED IDEOGRAPH-4950	[FB80 C950 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4950, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC950, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_440)
{
    // 4950 003F;	
    // (䥐) CJK UNIFIED IDEOGRAPH-4950	[FB80 C950 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4950, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC950, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_441)
{
    // 4950 0061;	
    // (䥐) CJK UNIFIED IDEOGRAPH-4950	[FB80 C950 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4950, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_442)
{
    // 4950 0041;	
    // (䥐) CJK UNIFIED IDEOGRAPH-4950	[FB80 C950 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4950, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_443)
{
    // 4950 0062;	
    // (䥐) CJK UNIFIED IDEOGRAPH-4950	[FB80 C950 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4950, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC950, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_444)
{
    // 4951 0021;	
    // (䥑) CJK UNIFIED IDEOGRAPH-4951	[FB80 C951 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4951, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC951, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_445)
{
    // 4951 003F;	
    // (䥑) CJK UNIFIED IDEOGRAPH-4951	[FB80 C951 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4951, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC951, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_446)
{
    // 4951 0061;	
    // (䥑) CJK UNIFIED IDEOGRAPH-4951	[FB80 C951 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4951, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_447)
{
    // 4951 0041;	
    // (䥑) CJK UNIFIED IDEOGRAPH-4951	[FB80 C951 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4951, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_448)
{
    // 4951 0062;	
    // (䥑) CJK UNIFIED IDEOGRAPH-4951	[FB80 C951 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4951, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC951, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_449)
{
    // 4952 0021;	
    // (䥒) CJK UNIFIED IDEOGRAPH-4952	[FB80 C952 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4952, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC952, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_450)
{
    // 4952 003F;	
    // (䥒) CJK UNIFIED IDEOGRAPH-4952	[FB80 C952 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4952, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC952, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_451)
{
    // 4952 0061;	
    // (䥒) CJK UNIFIED IDEOGRAPH-4952	[FB80 C952 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4952, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_452)
{
    // 4952 0041;	
    // (䥒) CJK UNIFIED IDEOGRAPH-4952	[FB80 C952 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4952, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_453)
{
    // 4952 0062;	
    // (䥒) CJK UNIFIED IDEOGRAPH-4952	[FB80 C952 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4952, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC952, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_454)
{
    // 4953 0021;	
    // (䥓) CJK UNIFIED IDEOGRAPH-4953	[FB80 C953 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4953, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC953, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_455)
{
    // 4953 003F;	
    // (䥓) CJK UNIFIED IDEOGRAPH-4953	[FB80 C953 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4953, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC953, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_456)
{
    // 4953 0061;	
    // (䥓) CJK UNIFIED IDEOGRAPH-4953	[FB80 C953 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4953, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_457)
{
    // 4953 0041;	
    // (䥓) CJK UNIFIED IDEOGRAPH-4953	[FB80 C953 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4953, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_458)
{
    // 4953 0062;	
    // (䥓) CJK UNIFIED IDEOGRAPH-4953	[FB80 C953 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4953, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC953, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_459)
{
    // 4954 0021;	
    // (䥔) CJK UNIFIED IDEOGRAPH-4954	[FB80 C954 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4954, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC954, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_460)
{
    // 4954 003F;	
    // (䥔) CJK UNIFIED IDEOGRAPH-4954	[FB80 C954 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4954, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC954, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_461)
{
    // 4954 0061;	
    // (䥔) CJK UNIFIED IDEOGRAPH-4954	[FB80 C954 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4954, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_462)
{
    // 4954 0041;	
    // (䥔) CJK UNIFIED IDEOGRAPH-4954	[FB80 C954 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4954, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_463)
{
    // 4954 0062;	
    // (䥔) CJK UNIFIED IDEOGRAPH-4954	[FB80 C954 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4954, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC954, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_464)
{
    // 4955 0021;	
    // (䥕) CJK UNIFIED IDEOGRAPH-4955	[FB80 C955 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4955, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC955, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_465)
{
    // 4955 003F;	
    // (䥕) CJK UNIFIED IDEOGRAPH-4955	[FB80 C955 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4955, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC955, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_466)
{
    // 4955 0061;	
    // (䥕) CJK UNIFIED IDEOGRAPH-4955	[FB80 C955 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4955, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_467)
{
    // 4955 0041;	
    // (䥕) CJK UNIFIED IDEOGRAPH-4955	[FB80 C955 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4955, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_468)
{
    // 4955 0062;	
    // (䥕) CJK UNIFIED IDEOGRAPH-4955	[FB80 C955 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4955, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC955, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_469)
{
    // 4956 0021;	
    // (䥖) CJK UNIFIED IDEOGRAPH-4956	[FB80 C956 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4956, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC956, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_470)
{
    // 4956 003F;	
    // (䥖) CJK UNIFIED IDEOGRAPH-4956	[FB80 C956 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4956, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC956, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_471)
{
    // 4956 0061;	
    // (䥖) CJK UNIFIED IDEOGRAPH-4956	[FB80 C956 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4956, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_472)
{
    // 4956 0041;	
    // (䥖) CJK UNIFIED IDEOGRAPH-4956	[FB80 C956 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4956, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_473)
{
    // 4956 0062;	
    // (䥖) CJK UNIFIED IDEOGRAPH-4956	[FB80 C956 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4956, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC956, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_474)
{
    // 4957 0021;	
    // (䥗) CJK UNIFIED IDEOGRAPH-4957	[FB80 C957 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4957, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC957, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_475)
{
    // 4957 003F;	
    // (䥗) CJK UNIFIED IDEOGRAPH-4957	[FB80 C957 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4957, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC957, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_476)
{
    // 4957 0061;	
    // (䥗) CJK UNIFIED IDEOGRAPH-4957	[FB80 C957 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4957, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_477)
{
    // 4957 0041;	
    // (䥗) CJK UNIFIED IDEOGRAPH-4957	[FB80 C957 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4957, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_478)
{
    // 4957 0062;	
    // (䥗) CJK UNIFIED IDEOGRAPH-4957	[FB80 C957 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4957, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC957, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_479)
{
    // 4958 0021;	
    // (䥘) CJK UNIFIED IDEOGRAPH-4958	[FB80 C958 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4958, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC958, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_480)
{
    // 4958 003F;	
    // (䥘) CJK UNIFIED IDEOGRAPH-4958	[FB80 C958 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4958, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC958, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_481)
{
    // 4958 0061;	
    // (䥘) CJK UNIFIED IDEOGRAPH-4958	[FB80 C958 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4958, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_482)
{
    // 4958 0041;	
    // (䥘) CJK UNIFIED IDEOGRAPH-4958	[FB80 C958 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4958, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_483)
{
    // 4958 0062;	
    // (䥘) CJK UNIFIED IDEOGRAPH-4958	[FB80 C958 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4958, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC958, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_484)
{
    // 4959 0021;	
    // (䥙) CJK UNIFIED IDEOGRAPH-4959	[FB80 C959 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4959, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC959, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_485)
{
    // 4959 003F;	
    // (䥙) CJK UNIFIED IDEOGRAPH-4959	[FB80 C959 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4959, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC959, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_486)
{
    // 4959 0061;	
    // (䥙) CJK UNIFIED IDEOGRAPH-4959	[FB80 C959 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4959, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_487)
{
    // 4959 0041;	
    // (䥙) CJK UNIFIED IDEOGRAPH-4959	[FB80 C959 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4959, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_488)
{
    // 4959 0062;	
    // (䥙) CJK UNIFIED IDEOGRAPH-4959	[FB80 C959 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4959, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC959, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_489)
{
    // 495A 0021;	
    // (䥚) CJK UNIFIED IDEOGRAPH-495A	[FB80 C95A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC95A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_490)
{
    // 495A 003F;	
    // (䥚) CJK UNIFIED IDEOGRAPH-495A	[FB80 C95A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC95A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_491)
{
    // 495A 0061;	
    // (䥚) CJK UNIFIED IDEOGRAPH-495A	[FB80 C95A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC95A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_492)
{
    // 495A 0041;	
    // (䥚) CJK UNIFIED IDEOGRAPH-495A	[FB80 C95A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x495A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC95A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_493)
{
    // 495A 0062;	
    // (䥚) CJK UNIFIED IDEOGRAPH-495A	[FB80 C95A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC95A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_494)
{
    // 495B 0021;	
    // (䥛) CJK UNIFIED IDEOGRAPH-495B	[FB80 C95B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC95B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_495)
{
    // 495B 003F;	
    // (䥛) CJK UNIFIED IDEOGRAPH-495B	[FB80 C95B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC95B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_496)
{
    // 495B 0061;	
    // (䥛) CJK UNIFIED IDEOGRAPH-495B	[FB80 C95B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC95B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_497)
{
    // 495B 0041;	
    // (䥛) CJK UNIFIED IDEOGRAPH-495B	[FB80 C95B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x495B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC95B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_498)
{
    // 495B 0062;	
    // (䥛) CJK UNIFIED IDEOGRAPH-495B	[FB80 C95B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC95B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_381_499)
{
    // 495C 0021;	
    // (䥜) CJK UNIFIED IDEOGRAPH-495C	[FB80 C95C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC95C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

