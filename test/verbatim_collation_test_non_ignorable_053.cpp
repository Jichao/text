// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_053_000)
{
    // 1F007 0041;	
    // (🀇) MAHJONG TILE ONE OF CHARACTERS	[11E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F007, 0x0041 };
    uint32_t const ces[9] = { 0x11E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_001)
{
    // 1F007 0062;	
    // (🀇) MAHJONG TILE ONE OF CHARACTERS	[11E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F007, 0x0062 };
    uint32_t const ces[9] = { 0x11E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_002)
{
    // 1F008 0021;	
    // (🀈) MAHJONG TILE TWO OF CHARACTERS	[11E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F008, 0x0021 };
    uint32_t const ces[9] = { 0x11E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_003)
{
    // 1F008 003F;	
    // (🀈) MAHJONG TILE TWO OF CHARACTERS	[11E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F008, 0x003F };
    uint32_t const ces[9] = { 0x11E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_004)
{
    // 1F008 0061;	
    // (🀈) MAHJONG TILE TWO OF CHARACTERS	[11E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F008, 0x0061 };
    uint32_t const ces[9] = { 0x11E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_005)
{
    // 1F008 0041;	
    // (🀈) MAHJONG TILE TWO OF CHARACTERS	[11E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F008, 0x0041 };
    uint32_t const ces[9] = { 0x11E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_006)
{
    // 1F008 0062;	
    // (🀈) MAHJONG TILE TWO OF CHARACTERS	[11E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F008, 0x0062 };
    uint32_t const ces[9] = { 0x11E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_007)
{
    // 1F009 0021;	
    // (🀉) MAHJONG TILE THREE OF CHARACTERS	[11E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F009, 0x0021 };
    uint32_t const ces[9] = { 0x11E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_008)
{
    // 1F009 003F;	
    // (🀉) MAHJONG TILE THREE OF CHARACTERS	[11E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F009, 0x003F };
    uint32_t const ces[9] = { 0x11E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_009)
{
    // 1F009 0061;	
    // (🀉) MAHJONG TILE THREE OF CHARACTERS	[11E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F009, 0x0061 };
    uint32_t const ces[9] = { 0x11E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_010)
{
    // 1F009 0041;	
    // (🀉) MAHJONG TILE THREE OF CHARACTERS	[11E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F009, 0x0041 };
    uint32_t const ces[9] = { 0x11E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_011)
{
    // 1F009 0062;	
    // (🀉) MAHJONG TILE THREE OF CHARACTERS	[11E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F009, 0x0062 };
    uint32_t const ces[9] = { 0x11E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_012)
{
    // 1F00A 0021;	
    // (🀊) MAHJONG TILE FOUR OF CHARACTERS	[11E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00A, 0x0021 };
    uint32_t const ces[9] = { 0x11E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_013)
{
    // 1F00A 003F;	
    // (🀊) MAHJONG TILE FOUR OF CHARACTERS	[11E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00A, 0x003F };
    uint32_t const ces[9] = { 0x11E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_014)
{
    // 1F00A 0061;	
    // (🀊) MAHJONG TILE FOUR OF CHARACTERS	[11E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00A, 0x0061 };
    uint32_t const ces[9] = { 0x11E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_015)
{
    // 1F00A 0041;	
    // (🀊) MAHJONG TILE FOUR OF CHARACTERS	[11E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F00A, 0x0041 };
    uint32_t const ces[9] = { 0x11E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_016)
{
    // 1F00A 0062;	
    // (🀊) MAHJONG TILE FOUR OF CHARACTERS	[11E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00A, 0x0062 };
    uint32_t const ces[9] = { 0x11E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_017)
{
    // 1F00B 0021;	
    // (🀋) MAHJONG TILE FIVE OF CHARACTERS	[11EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00B, 0x0021 };
    uint32_t const ces[9] = { 0x11EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_018)
{
    // 1F00B 003F;	
    // (🀋) MAHJONG TILE FIVE OF CHARACTERS	[11EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00B, 0x003F };
    uint32_t const ces[9] = { 0x11EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_019)
{
    // 1F00B 0061;	
    // (🀋) MAHJONG TILE FIVE OF CHARACTERS	[11EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00B, 0x0061 };
    uint32_t const ces[9] = { 0x11EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_020)
{
    // 1F00B 0041;	
    // (🀋) MAHJONG TILE FIVE OF CHARACTERS	[11EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F00B, 0x0041 };
    uint32_t const ces[9] = { 0x11EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_021)
{
    // 1F00B 0062;	
    // (🀋) MAHJONG TILE FIVE OF CHARACTERS	[11EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00B, 0x0062 };
    uint32_t const ces[9] = { 0x11EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_022)
{
    // 1F00C 0021;	
    // (🀌) MAHJONG TILE SIX OF CHARACTERS	[11EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00C, 0x0021 };
    uint32_t const ces[9] = { 0x11EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_023)
{
    // 1F00C 003F;	
    // (🀌) MAHJONG TILE SIX OF CHARACTERS	[11EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00C, 0x003F };
    uint32_t const ces[9] = { 0x11EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_024)
{
    // 1F00C 0061;	
    // (🀌) MAHJONG TILE SIX OF CHARACTERS	[11EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00C, 0x0061 };
    uint32_t const ces[9] = { 0x11EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_025)
{
    // 1F00C 0041;	
    // (🀌) MAHJONG TILE SIX OF CHARACTERS	[11EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F00C, 0x0041 };
    uint32_t const ces[9] = { 0x11EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_026)
{
    // 1F00C 0062;	
    // (🀌) MAHJONG TILE SIX OF CHARACTERS	[11EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00C, 0x0062 };
    uint32_t const ces[9] = { 0x11EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_027)
{
    // 1F00D 0021;	
    // (🀍) MAHJONG TILE SEVEN OF CHARACTERS	[11EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00D, 0x0021 };
    uint32_t const ces[9] = { 0x11EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_028)
{
    // 1F00D 003F;	
    // (🀍) MAHJONG TILE SEVEN OF CHARACTERS	[11EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00D, 0x003F };
    uint32_t const ces[9] = { 0x11EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_029)
{
    // 1F00D 0061;	
    // (🀍) MAHJONG TILE SEVEN OF CHARACTERS	[11EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00D, 0x0061 };
    uint32_t const ces[9] = { 0x11EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_030)
{
    // 1F00D 0041;	
    // (🀍) MAHJONG TILE SEVEN OF CHARACTERS	[11EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F00D, 0x0041 };
    uint32_t const ces[9] = { 0x11EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_031)
{
    // 1F00D 0062;	
    // (🀍) MAHJONG TILE SEVEN OF CHARACTERS	[11EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00D, 0x0062 };
    uint32_t const ces[9] = { 0x11EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_032)
{
    // 1F00E 0021;	
    // (🀎) MAHJONG TILE EIGHT OF CHARACTERS	[11ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00E, 0x0021 };
    uint32_t const ces[9] = { 0x11ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_033)
{
    // 1F00E 003F;	
    // (🀎) MAHJONG TILE EIGHT OF CHARACTERS	[11ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00E, 0x003F };
    uint32_t const ces[9] = { 0x11ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_034)
{
    // 1F00E 0061;	
    // (🀎) MAHJONG TILE EIGHT OF CHARACTERS	[11ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00E, 0x0061 };
    uint32_t const ces[9] = { 0x11ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_035)
{
    // 1F00E 0041;	
    // (🀎) MAHJONG TILE EIGHT OF CHARACTERS	[11ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F00E, 0x0041 };
    uint32_t const ces[9] = { 0x11ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_036)
{
    // 1F00E 0062;	
    // (🀎) MAHJONG TILE EIGHT OF CHARACTERS	[11ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00E, 0x0062 };
    uint32_t const ces[9] = { 0x11ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_037)
{
    // 1F00F 0021;	
    // (🀏) MAHJONG TILE NINE OF CHARACTERS	[11EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00F, 0x0021 };
    uint32_t const ces[9] = { 0x11EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_038)
{
    // 1F00F 003F;	
    // (🀏) MAHJONG TILE NINE OF CHARACTERS	[11EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00F, 0x003F };
    uint32_t const ces[9] = { 0x11EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_039)
{
    // 1F00F 0061;	
    // (🀏) MAHJONG TILE NINE OF CHARACTERS	[11EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00F, 0x0061 };
    uint32_t const ces[9] = { 0x11EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_040)
{
    // 1F00F 0041;	
    // (🀏) MAHJONG TILE NINE OF CHARACTERS	[11EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F00F, 0x0041 };
    uint32_t const ces[9] = { 0x11EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_041)
{
    // 1F00F 0062;	
    // (🀏) MAHJONG TILE NINE OF CHARACTERS	[11EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F00F, 0x0062 };
    uint32_t const ces[9] = { 0x11EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_042)
{
    // 1F010 0021;	
    // (🀐) MAHJONG TILE ONE OF BAMBOOS	[11EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F010, 0x0021 };
    uint32_t const ces[9] = { 0x11EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_043)
{
    // 1F010 003F;	
    // (🀐) MAHJONG TILE ONE OF BAMBOOS	[11EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F010, 0x003F };
    uint32_t const ces[9] = { 0x11EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_044)
{
    // 1F010 0061;	
    // (🀐) MAHJONG TILE ONE OF BAMBOOS	[11EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F010, 0x0061 };
    uint32_t const ces[9] = { 0x11EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_045)
{
    // 1F010 0041;	
    // (🀐) MAHJONG TILE ONE OF BAMBOOS	[11EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F010, 0x0041 };
    uint32_t const ces[9] = { 0x11EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_046)
{
    // 1F010 0062;	
    // (🀐) MAHJONG TILE ONE OF BAMBOOS	[11EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F010, 0x0062 };
    uint32_t const ces[9] = { 0x11EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_047)
{
    // 1F011 0021;	
    // (🀑) MAHJONG TILE TWO OF BAMBOOS	[11F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F011, 0x0021 };
    uint32_t const ces[9] = { 0x11F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_048)
{
    // 1F011 003F;	
    // (🀑) MAHJONG TILE TWO OF BAMBOOS	[11F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F011, 0x003F };
    uint32_t const ces[9] = { 0x11F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_049)
{
    // 1F011 0061;	
    // (🀑) MAHJONG TILE TWO OF BAMBOOS	[11F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F011, 0x0061 };
    uint32_t const ces[9] = { 0x11F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_050)
{
    // 1F011 0041;	
    // (🀑) MAHJONG TILE TWO OF BAMBOOS	[11F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F011, 0x0041 };
    uint32_t const ces[9] = { 0x11F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_051)
{
    // 1F011 0062;	
    // (🀑) MAHJONG TILE TWO OF BAMBOOS	[11F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F011, 0x0062 };
    uint32_t const ces[9] = { 0x11F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_052)
{
    // 1F012 0021;	
    // (🀒) MAHJONG TILE THREE OF BAMBOOS	[11F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F012, 0x0021 };
    uint32_t const ces[9] = { 0x11F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_053)
{
    // 1F012 003F;	
    // (🀒) MAHJONG TILE THREE OF BAMBOOS	[11F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F012, 0x003F };
    uint32_t const ces[9] = { 0x11F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_054)
{
    // 1F012 0061;	
    // (🀒) MAHJONG TILE THREE OF BAMBOOS	[11F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F012, 0x0061 };
    uint32_t const ces[9] = { 0x11F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_055)
{
    // 1F012 0041;	
    // (🀒) MAHJONG TILE THREE OF BAMBOOS	[11F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F012, 0x0041 };
    uint32_t const ces[9] = { 0x11F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_056)
{
    // 1F012 0062;	
    // (🀒) MAHJONG TILE THREE OF BAMBOOS	[11F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F012, 0x0062 };
    uint32_t const ces[9] = { 0x11F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_057)
{
    // 1F013 0021;	
    // (🀓) MAHJONG TILE FOUR OF BAMBOOS	[11F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F013, 0x0021 };
    uint32_t const ces[9] = { 0x11F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_058)
{
    // 1F013 003F;	
    // (🀓) MAHJONG TILE FOUR OF BAMBOOS	[11F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F013, 0x003F };
    uint32_t const ces[9] = { 0x11F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_059)
{
    // 1F013 0061;	
    // (🀓) MAHJONG TILE FOUR OF BAMBOOS	[11F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F013, 0x0061 };
    uint32_t const ces[9] = { 0x11F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_060)
{
    // 1F013 0041;	
    // (🀓) MAHJONG TILE FOUR OF BAMBOOS	[11F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F013, 0x0041 };
    uint32_t const ces[9] = { 0x11F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_061)
{
    // 1F013 0062;	
    // (🀓) MAHJONG TILE FOUR OF BAMBOOS	[11F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F013, 0x0062 };
    uint32_t const ces[9] = { 0x11F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_062)
{
    // 1F014 0021;	
    // (🀔) MAHJONG TILE FIVE OF BAMBOOS	[11F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F014, 0x0021 };
    uint32_t const ces[9] = { 0x11F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_063)
{
    // 1F014 003F;	
    // (🀔) MAHJONG TILE FIVE OF BAMBOOS	[11F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F014, 0x003F };
    uint32_t const ces[9] = { 0x11F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_064)
{
    // 1F014 0061;	
    // (🀔) MAHJONG TILE FIVE OF BAMBOOS	[11F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F014, 0x0061 };
    uint32_t const ces[9] = { 0x11F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_065)
{
    // 1F014 0041;	
    // (🀔) MAHJONG TILE FIVE OF BAMBOOS	[11F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F014, 0x0041 };
    uint32_t const ces[9] = { 0x11F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_066)
{
    // 1F014 0062;	
    // (🀔) MAHJONG TILE FIVE OF BAMBOOS	[11F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F014, 0x0062 };
    uint32_t const ces[9] = { 0x11F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_067)
{
    // 1F015 0021;	
    // (🀕) MAHJONG TILE SIX OF BAMBOOS	[11F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F015, 0x0021 };
    uint32_t const ces[9] = { 0x11F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_068)
{
    // 1F015 003F;	
    // (🀕) MAHJONG TILE SIX OF BAMBOOS	[11F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F015, 0x003F };
    uint32_t const ces[9] = { 0x11F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_069)
{
    // 1F015 0061;	
    // (🀕) MAHJONG TILE SIX OF BAMBOOS	[11F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F015, 0x0061 };
    uint32_t const ces[9] = { 0x11F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_070)
{
    // 1F015 0041;	
    // (🀕) MAHJONG TILE SIX OF BAMBOOS	[11F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F015, 0x0041 };
    uint32_t const ces[9] = { 0x11F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_071)
{
    // 1F015 0062;	
    // (🀕) MAHJONG TILE SIX OF BAMBOOS	[11F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F015, 0x0062 };
    uint32_t const ces[9] = { 0x11F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_072)
{
    // 1F016 0021;	
    // (🀖) MAHJONG TILE SEVEN OF BAMBOOS	[11F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F016, 0x0021 };
    uint32_t const ces[9] = { 0x11F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_073)
{
    // 1F016 003F;	
    // (🀖) MAHJONG TILE SEVEN OF BAMBOOS	[11F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F016, 0x003F };
    uint32_t const ces[9] = { 0x11F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_074)
{
    // 1F016 0061;	
    // (🀖) MAHJONG TILE SEVEN OF BAMBOOS	[11F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F016, 0x0061 };
    uint32_t const ces[9] = { 0x11F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_075)
{
    // 1F016 0041;	
    // (🀖) MAHJONG TILE SEVEN OF BAMBOOS	[11F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F016, 0x0041 };
    uint32_t const ces[9] = { 0x11F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_076)
{
    // 1F016 0062;	
    // (🀖) MAHJONG TILE SEVEN OF BAMBOOS	[11F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F016, 0x0062 };
    uint32_t const ces[9] = { 0x11F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_077)
{
    // 1F017 0021;	
    // (🀗) MAHJONG TILE EIGHT OF BAMBOOS	[11F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F017, 0x0021 };
    uint32_t const ces[9] = { 0x11F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_078)
{
    // 1F017 003F;	
    // (🀗) MAHJONG TILE EIGHT OF BAMBOOS	[11F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F017, 0x003F };
    uint32_t const ces[9] = { 0x11F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_079)
{
    // 1F017 0061;	
    // (🀗) MAHJONG TILE EIGHT OF BAMBOOS	[11F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F017, 0x0061 };
    uint32_t const ces[9] = { 0x11F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_080)
{
    // 1F017 0041;	
    // (🀗) MAHJONG TILE EIGHT OF BAMBOOS	[11F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F017, 0x0041 };
    uint32_t const ces[9] = { 0x11F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_081)
{
    // 1F017 0062;	
    // (🀗) MAHJONG TILE EIGHT OF BAMBOOS	[11F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F017, 0x0062 };
    uint32_t const ces[9] = { 0x11F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_082)
{
    // 1F018 0021;	
    // (🀘) MAHJONG TILE NINE OF BAMBOOS	[11F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F018, 0x0021 };
    uint32_t const ces[9] = { 0x11F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_083)
{
    // 1F018 003F;	
    // (🀘) MAHJONG TILE NINE OF BAMBOOS	[11F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F018, 0x003F };
    uint32_t const ces[9] = { 0x11F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_084)
{
    // 1F018 0061;	
    // (🀘) MAHJONG TILE NINE OF BAMBOOS	[11F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F018, 0x0061 };
    uint32_t const ces[9] = { 0x11F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_085)
{
    // 1F018 0041;	
    // (🀘) MAHJONG TILE NINE OF BAMBOOS	[11F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F018, 0x0041 };
    uint32_t const ces[9] = { 0x11F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_086)
{
    // 1F018 0062;	
    // (🀘) MAHJONG TILE NINE OF BAMBOOS	[11F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F018, 0x0062 };
    uint32_t const ces[9] = { 0x11F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_087)
{
    // 1F019 0021;	
    // (🀙) MAHJONG TILE ONE OF CIRCLES	[11F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F019, 0x0021 };
    uint32_t const ces[9] = { 0x11F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_088)
{
    // 1F019 003F;	
    // (🀙) MAHJONG TILE ONE OF CIRCLES	[11F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F019, 0x003F };
    uint32_t const ces[9] = { 0x11F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_089)
{
    // 1F019 0061;	
    // (🀙) MAHJONG TILE ONE OF CIRCLES	[11F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F019, 0x0061 };
    uint32_t const ces[9] = { 0x11F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_090)
{
    // 1F019 0041;	
    // (🀙) MAHJONG TILE ONE OF CIRCLES	[11F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F019, 0x0041 };
    uint32_t const ces[9] = { 0x11F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_091)
{
    // 1F019 0062;	
    // (🀙) MAHJONG TILE ONE OF CIRCLES	[11F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F019, 0x0062 };
    uint32_t const ces[9] = { 0x11F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_092)
{
    // 1F01A 0021;	
    // (🀚) MAHJONG TILE TWO OF CIRCLES	[11F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01A, 0x0021 };
    uint32_t const ces[9] = { 0x11F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_093)
{
    // 1F01A 003F;	
    // (🀚) MAHJONG TILE TWO OF CIRCLES	[11F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01A, 0x003F };
    uint32_t const ces[9] = { 0x11F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_094)
{
    // 1F01A 0061;	
    // (🀚) MAHJONG TILE TWO OF CIRCLES	[11F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01A, 0x0061 };
    uint32_t const ces[9] = { 0x11F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_095)
{
    // 1F01A 0041;	
    // (🀚) MAHJONG TILE TWO OF CIRCLES	[11F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F01A, 0x0041 };
    uint32_t const ces[9] = { 0x11F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_096)
{
    // 1F01A 0062;	
    // (🀚) MAHJONG TILE TWO OF CIRCLES	[11F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01A, 0x0062 };
    uint32_t const ces[9] = { 0x11F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_097)
{
    // 1F01B 0021;	
    // (🀛) MAHJONG TILE THREE OF CIRCLES	[11FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01B, 0x0021 };
    uint32_t const ces[9] = { 0x11FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_098)
{
    // 1F01B 003F;	
    // (🀛) MAHJONG TILE THREE OF CIRCLES	[11FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01B, 0x003F };
    uint32_t const ces[9] = { 0x11FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_099)
{
    // 1F01B 0061;	
    // (🀛) MAHJONG TILE THREE OF CIRCLES	[11FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01B, 0x0061 };
    uint32_t const ces[9] = { 0x11FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_100)
{
    // 1F01B 0041;	
    // (🀛) MAHJONG TILE THREE OF CIRCLES	[11FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F01B, 0x0041 };
    uint32_t const ces[9] = { 0x11FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_101)
{
    // 1F01B 0062;	
    // (🀛) MAHJONG TILE THREE OF CIRCLES	[11FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01B, 0x0062 };
    uint32_t const ces[9] = { 0x11FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_102)
{
    // 1F01C 0021;	
    // (🀜) MAHJONG TILE FOUR OF CIRCLES	[11FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01C, 0x0021 };
    uint32_t const ces[9] = { 0x11FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_103)
{
    // 1F01C 003F;	
    // (🀜) MAHJONG TILE FOUR OF CIRCLES	[11FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01C, 0x003F };
    uint32_t const ces[9] = { 0x11FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_104)
{
    // 1F01C 0061;	
    // (🀜) MAHJONG TILE FOUR OF CIRCLES	[11FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01C, 0x0061 };
    uint32_t const ces[9] = { 0x11FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_105)
{
    // 1F01C 0041;	
    // (🀜) MAHJONG TILE FOUR OF CIRCLES	[11FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F01C, 0x0041 };
    uint32_t const ces[9] = { 0x11FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_106)
{
    // 1F01C 0062;	
    // (🀜) MAHJONG TILE FOUR OF CIRCLES	[11FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01C, 0x0062 };
    uint32_t const ces[9] = { 0x11FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_107)
{
    // 1F01D 0021;	
    // (🀝) MAHJONG TILE FIVE OF CIRCLES	[11FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01D, 0x0021 };
    uint32_t const ces[9] = { 0x11FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_108)
{
    // 1F01D 003F;	
    // (🀝) MAHJONG TILE FIVE OF CIRCLES	[11FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01D, 0x003F };
    uint32_t const ces[9] = { 0x11FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_109)
{
    // 1F01D 0061;	
    // (🀝) MAHJONG TILE FIVE OF CIRCLES	[11FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01D, 0x0061 };
    uint32_t const ces[9] = { 0x11FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_110)
{
    // 1F01D 0041;	
    // (🀝) MAHJONG TILE FIVE OF CIRCLES	[11FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F01D, 0x0041 };
    uint32_t const ces[9] = { 0x11FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_111)
{
    // 1F01D 0062;	
    // (🀝) MAHJONG TILE FIVE OF CIRCLES	[11FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01D, 0x0062 };
    uint32_t const ces[9] = { 0x11FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_112)
{
    // 1F01E 0021;	
    // (🀞) MAHJONG TILE SIX OF CIRCLES	[11FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01E, 0x0021 };
    uint32_t const ces[9] = { 0x11FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_113)
{
    // 1F01E 003F;	
    // (🀞) MAHJONG TILE SIX OF CIRCLES	[11FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01E, 0x003F };
    uint32_t const ces[9] = { 0x11FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_114)
{
    // 1F01E 0061;	
    // (🀞) MAHJONG TILE SIX OF CIRCLES	[11FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01E, 0x0061 };
    uint32_t const ces[9] = { 0x11FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_115)
{
    // 1F01E 0041;	
    // (🀞) MAHJONG TILE SIX OF CIRCLES	[11FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F01E, 0x0041 };
    uint32_t const ces[9] = { 0x11FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_116)
{
    // 1F01E 0062;	
    // (🀞) MAHJONG TILE SIX OF CIRCLES	[11FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01E, 0x0062 };
    uint32_t const ces[9] = { 0x11FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_117)
{
    // 1F01F 0021;	
    // (🀟) MAHJONG TILE SEVEN OF CIRCLES	[11FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01F, 0x0021 };
    uint32_t const ces[9] = { 0x11FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_118)
{
    // 1F01F 003F;	
    // (🀟) MAHJONG TILE SEVEN OF CIRCLES	[11FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01F, 0x003F };
    uint32_t const ces[9] = { 0x11FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_119)
{
    // 1F01F 0061;	
    // (🀟) MAHJONG TILE SEVEN OF CIRCLES	[11FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01F, 0x0061 };
    uint32_t const ces[9] = { 0x11FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_120)
{
    // 1F01F 0041;	
    // (🀟) MAHJONG TILE SEVEN OF CIRCLES	[11FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F01F, 0x0041 };
    uint32_t const ces[9] = { 0x11FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_121)
{
    // 1F01F 0062;	
    // (🀟) MAHJONG TILE SEVEN OF CIRCLES	[11FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F01F, 0x0062 };
    uint32_t const ces[9] = { 0x11FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_122)
{
    // 1F020 0021;	
    // (🀠) MAHJONG TILE EIGHT OF CIRCLES	[11FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F020, 0x0021 };
    uint32_t const ces[9] = { 0x11FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_123)
{
    // 1F020 003F;	
    // (🀠) MAHJONG TILE EIGHT OF CIRCLES	[11FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F020, 0x003F };
    uint32_t const ces[9] = { 0x11FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_124)
{
    // 1F020 0061;	
    // (🀠) MAHJONG TILE EIGHT OF CIRCLES	[11FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F020, 0x0061 };
    uint32_t const ces[9] = { 0x11FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_125)
{
    // 1F020 0041;	
    // (🀠) MAHJONG TILE EIGHT OF CIRCLES	[11FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F020, 0x0041 };
    uint32_t const ces[9] = { 0x11FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_126)
{
    // 1F020 0062;	
    // (🀠) MAHJONG TILE EIGHT OF CIRCLES	[11FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F020, 0x0062 };
    uint32_t const ces[9] = { 0x11FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_127)
{
    // 1F021 0021;	
    // (🀡) MAHJONG TILE NINE OF CIRCLES	[1200 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F021, 0x0021 };
    uint32_t const ces[9] = { 0x1200, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_128)
{
    // 1F021 003F;	
    // (🀡) MAHJONG TILE NINE OF CIRCLES	[1200 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F021, 0x003F };
    uint32_t const ces[9] = { 0x1200, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_129)
{
    // 1F021 0061;	
    // (🀡) MAHJONG TILE NINE OF CIRCLES	[1200 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F021, 0x0061 };
    uint32_t const ces[9] = { 0x1200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_130)
{
    // 1F021 0041;	
    // (🀡) MAHJONG TILE NINE OF CIRCLES	[1200 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F021, 0x0041 };
    uint32_t const ces[9] = { 0x1200, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_131)
{
    // 1F021 0062;	
    // (🀡) MAHJONG TILE NINE OF CIRCLES	[1200 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F021, 0x0062 };
    uint32_t const ces[9] = { 0x1200, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_132)
{
    // 1F022 0021;	
    // (🀢) MAHJONG TILE PLUM	[1201 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F022, 0x0021 };
    uint32_t const ces[9] = { 0x1201, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_133)
{
    // 1F022 003F;	
    // (🀢) MAHJONG TILE PLUM	[1201 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F022, 0x003F };
    uint32_t const ces[9] = { 0x1201, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_134)
{
    // 1F022 0061;	
    // (🀢) MAHJONG TILE PLUM	[1201 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F022, 0x0061 };
    uint32_t const ces[9] = { 0x1201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_135)
{
    // 1F022 0041;	
    // (🀢) MAHJONG TILE PLUM	[1201 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F022, 0x0041 };
    uint32_t const ces[9] = { 0x1201, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_136)
{
    // 1F022 0062;	
    // (🀢) MAHJONG TILE PLUM	[1201 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F022, 0x0062 };
    uint32_t const ces[9] = { 0x1201, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_137)
{
    // 1F023 0021;	
    // (🀣) MAHJONG TILE ORCHID	[1202 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F023, 0x0021 };
    uint32_t const ces[9] = { 0x1202, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_138)
{
    // 1F023 003F;	
    // (🀣) MAHJONG TILE ORCHID	[1202 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F023, 0x003F };
    uint32_t const ces[9] = { 0x1202, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_139)
{
    // 1F023 0061;	
    // (🀣) MAHJONG TILE ORCHID	[1202 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F023, 0x0061 };
    uint32_t const ces[9] = { 0x1202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_140)
{
    // 1F023 0041;	
    // (🀣) MAHJONG TILE ORCHID	[1202 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F023, 0x0041 };
    uint32_t const ces[9] = { 0x1202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_141)
{
    // 1F023 0062;	
    // (🀣) MAHJONG TILE ORCHID	[1202 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F023, 0x0062 };
    uint32_t const ces[9] = { 0x1202, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_142)
{
    // 1F024 0021;	
    // (🀤) MAHJONG TILE BAMBOO	[1203 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F024, 0x0021 };
    uint32_t const ces[9] = { 0x1203, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_143)
{
    // 1F024 003F;	
    // (🀤) MAHJONG TILE BAMBOO	[1203 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F024, 0x003F };
    uint32_t const ces[9] = { 0x1203, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_144)
{
    // 1F024 0061;	
    // (🀤) MAHJONG TILE BAMBOO	[1203 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F024, 0x0061 };
    uint32_t const ces[9] = { 0x1203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_145)
{
    // 1F024 0041;	
    // (🀤) MAHJONG TILE BAMBOO	[1203 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F024, 0x0041 };
    uint32_t const ces[9] = { 0x1203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_146)
{
    // 1F024 0062;	
    // (🀤) MAHJONG TILE BAMBOO	[1203 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F024, 0x0062 };
    uint32_t const ces[9] = { 0x1203, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_147)
{
    // 1F025 0021;	
    // (🀥) MAHJONG TILE CHRYSANTHEMUM	[1204 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F025, 0x0021 };
    uint32_t const ces[9] = { 0x1204, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_148)
{
    // 1F025 003F;	
    // (🀥) MAHJONG TILE CHRYSANTHEMUM	[1204 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F025, 0x003F };
    uint32_t const ces[9] = { 0x1204, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_149)
{
    // 1F025 0061;	
    // (🀥) MAHJONG TILE CHRYSANTHEMUM	[1204 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F025, 0x0061 };
    uint32_t const ces[9] = { 0x1204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_150)
{
    // 1F025 0041;	
    // (🀥) MAHJONG TILE CHRYSANTHEMUM	[1204 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F025, 0x0041 };
    uint32_t const ces[9] = { 0x1204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_151)
{
    // 1F025 0062;	
    // (🀥) MAHJONG TILE CHRYSANTHEMUM	[1204 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F025, 0x0062 };
    uint32_t const ces[9] = { 0x1204, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_152)
{
    // 1F026 0021;	
    // (🀦) MAHJONG TILE SPRING	[1205 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F026, 0x0021 };
    uint32_t const ces[9] = { 0x1205, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_153)
{
    // 1F026 003F;	
    // (🀦) MAHJONG TILE SPRING	[1205 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F026, 0x003F };
    uint32_t const ces[9] = { 0x1205, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_154)
{
    // 1F026 0061;	
    // (🀦) MAHJONG TILE SPRING	[1205 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F026, 0x0061 };
    uint32_t const ces[9] = { 0x1205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_155)
{
    // 1F026 0041;	
    // (🀦) MAHJONG TILE SPRING	[1205 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F026, 0x0041 };
    uint32_t const ces[9] = { 0x1205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_156)
{
    // 1F026 0062;	
    // (🀦) MAHJONG TILE SPRING	[1205 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F026, 0x0062 };
    uint32_t const ces[9] = { 0x1205, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_157)
{
    // 1F027 0021;	
    // (🀧) MAHJONG TILE SUMMER	[1206 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F027, 0x0021 };
    uint32_t const ces[9] = { 0x1206, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_158)
{
    // 1F027 003F;	
    // (🀧) MAHJONG TILE SUMMER	[1206 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F027, 0x003F };
    uint32_t const ces[9] = { 0x1206, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_159)
{
    // 1F027 0061;	
    // (🀧) MAHJONG TILE SUMMER	[1206 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F027, 0x0061 };
    uint32_t const ces[9] = { 0x1206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_160)
{
    // 1F027 0041;	
    // (🀧) MAHJONG TILE SUMMER	[1206 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F027, 0x0041 };
    uint32_t const ces[9] = { 0x1206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_161)
{
    // 1F027 0062;	
    // (🀧) MAHJONG TILE SUMMER	[1206 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F027, 0x0062 };
    uint32_t const ces[9] = { 0x1206, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_162)
{
    // 1F028 0021;	
    // (🀨) MAHJONG TILE AUTUMN	[1207 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F028, 0x0021 };
    uint32_t const ces[9] = { 0x1207, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_163)
{
    // 1F028 003F;	
    // (🀨) MAHJONG TILE AUTUMN	[1207 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F028, 0x003F };
    uint32_t const ces[9] = { 0x1207, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_164)
{
    // 1F028 0061;	
    // (🀨) MAHJONG TILE AUTUMN	[1207 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F028, 0x0061 };
    uint32_t const ces[9] = { 0x1207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_165)
{
    // 1F028 0041;	
    // (🀨) MAHJONG TILE AUTUMN	[1207 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F028, 0x0041 };
    uint32_t const ces[9] = { 0x1207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_166)
{
    // 1F028 0062;	
    // (🀨) MAHJONG TILE AUTUMN	[1207 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F028, 0x0062 };
    uint32_t const ces[9] = { 0x1207, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_167)
{
    // 1F029 0021;	
    // (🀩) MAHJONG TILE WINTER	[1208 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F029, 0x0021 };
    uint32_t const ces[9] = { 0x1208, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_168)
{
    // 1F029 003F;	
    // (🀩) MAHJONG TILE WINTER	[1208 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F029, 0x003F };
    uint32_t const ces[9] = { 0x1208, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_169)
{
    // 1F029 0061;	
    // (🀩) MAHJONG TILE WINTER	[1208 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F029, 0x0061 };
    uint32_t const ces[9] = { 0x1208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_170)
{
    // 1F029 0041;	
    // (🀩) MAHJONG TILE WINTER	[1208 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F029, 0x0041 };
    uint32_t const ces[9] = { 0x1208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_171)
{
    // 1F029 0062;	
    // (🀩) MAHJONG TILE WINTER	[1208 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F029, 0x0062 };
    uint32_t const ces[9] = { 0x1208, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_172)
{
    // 1F02A 0021;	
    // (🀪) MAHJONG TILE JOKER	[1209 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F02A, 0x0021 };
    uint32_t const ces[9] = { 0x1209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_173)
{
    // 1F02A 003F;	
    // (🀪) MAHJONG TILE JOKER	[1209 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F02A, 0x003F };
    uint32_t const ces[9] = { 0x1209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_174)
{
    // 1F02A 0061;	
    // (🀪) MAHJONG TILE JOKER	[1209 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F02A, 0x0061 };
    uint32_t const ces[9] = { 0x1209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_175)
{
    // 1F02A 0041;	
    // (🀪) MAHJONG TILE JOKER	[1209 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F02A, 0x0041 };
    uint32_t const ces[9] = { 0x1209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_176)
{
    // 1F02A 0062;	
    // (🀪) MAHJONG TILE JOKER	[1209 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F02A, 0x0062 };
    uint32_t const ces[9] = { 0x1209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_177)
{
    // 1F02B 0021;	
    // (🀫) MAHJONG TILE BACK	[120A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F02B, 0x0021 };
    uint32_t const ces[9] = { 0x120A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_178)
{
    // 1F02B 003F;	
    // (🀫) MAHJONG TILE BACK	[120A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F02B, 0x003F };
    uint32_t const ces[9] = { 0x120A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_179)
{
    // 1F02B 0061;	
    // (🀫) MAHJONG TILE BACK	[120A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F02B, 0x0061 };
    uint32_t const ces[9] = { 0x120A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_180)
{
    // 1F02B 0041;	
    // (🀫) MAHJONG TILE BACK	[120A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F02B, 0x0041 };
    uint32_t const ces[9] = { 0x120A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_181)
{
    // 1F02B 0062;	
    // (🀫) MAHJONG TILE BACK	[120A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F02B, 0x0062 };
    uint32_t const ces[9] = { 0x120A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_182)
{
    // 1F030 0021;	
    // (🀰) DOMINO TILE HORIZONTAL BACK	[120B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F030, 0x0021 };
    uint32_t const ces[9] = { 0x120B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_183)
{
    // 1F030 003F;	
    // (🀰) DOMINO TILE HORIZONTAL BACK	[120B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F030, 0x003F };
    uint32_t const ces[9] = { 0x120B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_184)
{
    // 1F030 0061;	
    // (🀰) DOMINO TILE HORIZONTAL BACK	[120B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F030, 0x0061 };
    uint32_t const ces[9] = { 0x120B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_185)
{
    // 1F030 0041;	
    // (🀰) DOMINO TILE HORIZONTAL BACK	[120B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F030, 0x0041 };
    uint32_t const ces[9] = { 0x120B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_186)
{
    // 1F030 0062;	
    // (🀰) DOMINO TILE HORIZONTAL BACK	[120B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F030, 0x0062 };
    uint32_t const ces[9] = { 0x120B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_187)
{
    // 1F031 0021;	
    // (🀱) DOMINO TILE HORIZONTAL-00-00	[120C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F031, 0x0021 };
    uint32_t const ces[9] = { 0x120C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_188)
{
    // 1F031 003F;	
    // (🀱) DOMINO TILE HORIZONTAL-00-00	[120C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F031, 0x003F };
    uint32_t const ces[9] = { 0x120C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_189)
{
    // 1F031 0061;	
    // (🀱) DOMINO TILE HORIZONTAL-00-00	[120C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F031, 0x0061 };
    uint32_t const ces[9] = { 0x120C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_190)
{
    // 1F031 0041;	
    // (🀱) DOMINO TILE HORIZONTAL-00-00	[120C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F031, 0x0041 };
    uint32_t const ces[9] = { 0x120C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_191)
{
    // 1F031 0062;	
    // (🀱) DOMINO TILE HORIZONTAL-00-00	[120C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F031, 0x0062 };
    uint32_t const ces[9] = { 0x120C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_192)
{
    // 1F032 0021;	
    // (🀲) DOMINO TILE HORIZONTAL-00-01	[120D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F032, 0x0021 };
    uint32_t const ces[9] = { 0x120D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_193)
{
    // 1F032 003F;	
    // (🀲) DOMINO TILE HORIZONTAL-00-01	[120D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F032, 0x003F };
    uint32_t const ces[9] = { 0x120D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_194)
{
    // 1F032 0061;	
    // (🀲) DOMINO TILE HORIZONTAL-00-01	[120D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F032, 0x0061 };
    uint32_t const ces[9] = { 0x120D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_195)
{
    // 1F032 0041;	
    // (🀲) DOMINO TILE HORIZONTAL-00-01	[120D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F032, 0x0041 };
    uint32_t const ces[9] = { 0x120D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_196)
{
    // 1F032 0062;	
    // (🀲) DOMINO TILE HORIZONTAL-00-01	[120D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F032, 0x0062 };
    uint32_t const ces[9] = { 0x120D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_197)
{
    // 1F033 0021;	
    // (🀳) DOMINO TILE HORIZONTAL-00-02	[120E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F033, 0x0021 };
    uint32_t const ces[9] = { 0x120E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_198)
{
    // 1F033 003F;	
    // (🀳) DOMINO TILE HORIZONTAL-00-02	[120E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F033, 0x003F };
    uint32_t const ces[9] = { 0x120E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_199)
{
    // 1F033 0061;	
    // (🀳) DOMINO TILE HORIZONTAL-00-02	[120E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F033, 0x0061 };
    uint32_t const ces[9] = { 0x120E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_200)
{
    // 1F033 0041;	
    // (🀳) DOMINO TILE HORIZONTAL-00-02	[120E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F033, 0x0041 };
    uint32_t const ces[9] = { 0x120E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_201)
{
    // 1F033 0062;	
    // (🀳) DOMINO TILE HORIZONTAL-00-02	[120E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F033, 0x0062 };
    uint32_t const ces[9] = { 0x120E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_202)
{
    // 1F034 0021;	
    // (🀴) DOMINO TILE HORIZONTAL-00-03	[120F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F034, 0x0021 };
    uint32_t const ces[9] = { 0x120F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_203)
{
    // 1F034 003F;	
    // (🀴) DOMINO TILE HORIZONTAL-00-03	[120F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F034, 0x003F };
    uint32_t const ces[9] = { 0x120F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_204)
{
    // 1F034 0061;	
    // (🀴) DOMINO TILE HORIZONTAL-00-03	[120F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F034, 0x0061 };
    uint32_t const ces[9] = { 0x120F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_205)
{
    // 1F034 0041;	
    // (🀴) DOMINO TILE HORIZONTAL-00-03	[120F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F034, 0x0041 };
    uint32_t const ces[9] = { 0x120F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_206)
{
    // 1F034 0062;	
    // (🀴) DOMINO TILE HORIZONTAL-00-03	[120F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F034, 0x0062 };
    uint32_t const ces[9] = { 0x120F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_207)
{
    // 1F035 0021;	
    // (🀵) DOMINO TILE HORIZONTAL-00-04	[1210 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F035, 0x0021 };
    uint32_t const ces[9] = { 0x1210, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_208)
{
    // 1F035 003F;	
    // (🀵) DOMINO TILE HORIZONTAL-00-04	[1210 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F035, 0x003F };
    uint32_t const ces[9] = { 0x1210, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_209)
{
    // 1F035 0061;	
    // (🀵) DOMINO TILE HORIZONTAL-00-04	[1210 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F035, 0x0061 };
    uint32_t const ces[9] = { 0x1210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_210)
{
    // 1F035 0041;	
    // (🀵) DOMINO TILE HORIZONTAL-00-04	[1210 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F035, 0x0041 };
    uint32_t const ces[9] = { 0x1210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_211)
{
    // 1F035 0062;	
    // (🀵) DOMINO TILE HORIZONTAL-00-04	[1210 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F035, 0x0062 };
    uint32_t const ces[9] = { 0x1210, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_212)
{
    // 1F036 0021;	
    // (🀶) DOMINO TILE HORIZONTAL-00-05	[1211 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F036, 0x0021 };
    uint32_t const ces[9] = { 0x1211, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_213)
{
    // 1F036 003F;	
    // (🀶) DOMINO TILE HORIZONTAL-00-05	[1211 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F036, 0x003F };
    uint32_t const ces[9] = { 0x1211, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_214)
{
    // 1F036 0061;	
    // (🀶) DOMINO TILE HORIZONTAL-00-05	[1211 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F036, 0x0061 };
    uint32_t const ces[9] = { 0x1211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_215)
{
    // 1F036 0041;	
    // (🀶) DOMINO TILE HORIZONTAL-00-05	[1211 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F036, 0x0041 };
    uint32_t const ces[9] = { 0x1211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_216)
{
    // 1F036 0062;	
    // (🀶) DOMINO TILE HORIZONTAL-00-05	[1211 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F036, 0x0062 };
    uint32_t const ces[9] = { 0x1211, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_217)
{
    // 1F037 0021;	
    // (🀷) DOMINO TILE HORIZONTAL-00-06	[1212 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F037, 0x0021 };
    uint32_t const ces[9] = { 0x1212, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_218)
{
    // 1F037 003F;	
    // (🀷) DOMINO TILE HORIZONTAL-00-06	[1212 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F037, 0x003F };
    uint32_t const ces[9] = { 0x1212, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_219)
{
    // 1F037 0061;	
    // (🀷) DOMINO TILE HORIZONTAL-00-06	[1212 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F037, 0x0061 };
    uint32_t const ces[9] = { 0x1212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_220)
{
    // 1F037 0041;	
    // (🀷) DOMINO TILE HORIZONTAL-00-06	[1212 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F037, 0x0041 };
    uint32_t const ces[9] = { 0x1212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_221)
{
    // 1F037 0062;	
    // (🀷) DOMINO TILE HORIZONTAL-00-06	[1212 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F037, 0x0062 };
    uint32_t const ces[9] = { 0x1212, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_222)
{
    // 1F038 0021;	
    // (🀸) DOMINO TILE HORIZONTAL-01-00	[1213 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F038, 0x0021 };
    uint32_t const ces[9] = { 0x1213, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_223)
{
    // 1F038 003F;	
    // (🀸) DOMINO TILE HORIZONTAL-01-00	[1213 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F038, 0x003F };
    uint32_t const ces[9] = { 0x1213, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_224)
{
    // 1F038 0061;	
    // (🀸) DOMINO TILE HORIZONTAL-01-00	[1213 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F038, 0x0061 };
    uint32_t const ces[9] = { 0x1213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_225)
{
    // 1F038 0041;	
    // (🀸) DOMINO TILE HORIZONTAL-01-00	[1213 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F038, 0x0041 };
    uint32_t const ces[9] = { 0x1213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_226)
{
    // 1F038 0062;	
    // (🀸) DOMINO TILE HORIZONTAL-01-00	[1213 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F038, 0x0062 };
    uint32_t const ces[9] = { 0x1213, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_227)
{
    // 1F039 0021;	
    // (🀹) DOMINO TILE HORIZONTAL-01-01	[1214 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F039, 0x0021 };
    uint32_t const ces[9] = { 0x1214, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_228)
{
    // 1F039 003F;	
    // (🀹) DOMINO TILE HORIZONTAL-01-01	[1214 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F039, 0x003F };
    uint32_t const ces[9] = { 0x1214, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_229)
{
    // 1F039 0061;	
    // (🀹) DOMINO TILE HORIZONTAL-01-01	[1214 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F039, 0x0061 };
    uint32_t const ces[9] = { 0x1214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_230)
{
    // 1F039 0041;	
    // (🀹) DOMINO TILE HORIZONTAL-01-01	[1214 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F039, 0x0041 };
    uint32_t const ces[9] = { 0x1214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_231)
{
    // 1F039 0062;	
    // (🀹) DOMINO TILE HORIZONTAL-01-01	[1214 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F039, 0x0062 };
    uint32_t const ces[9] = { 0x1214, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_232)
{
    // 1F03A 0021;	
    // (🀺) DOMINO TILE HORIZONTAL-01-02	[1215 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03A, 0x0021 };
    uint32_t const ces[9] = { 0x1215, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_233)
{
    // 1F03A 003F;	
    // (🀺) DOMINO TILE HORIZONTAL-01-02	[1215 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03A, 0x003F };
    uint32_t const ces[9] = { 0x1215, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_234)
{
    // 1F03A 0061;	
    // (🀺) DOMINO TILE HORIZONTAL-01-02	[1215 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03A, 0x0061 };
    uint32_t const ces[9] = { 0x1215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_235)
{
    // 1F03A 0041;	
    // (🀺) DOMINO TILE HORIZONTAL-01-02	[1215 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F03A, 0x0041 };
    uint32_t const ces[9] = { 0x1215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_236)
{
    // 1F03A 0062;	
    // (🀺) DOMINO TILE HORIZONTAL-01-02	[1215 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03A, 0x0062 };
    uint32_t const ces[9] = { 0x1215, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_237)
{
    // 1F03B 0021;	
    // (🀻) DOMINO TILE HORIZONTAL-01-03	[1216 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03B, 0x0021 };
    uint32_t const ces[9] = { 0x1216, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_238)
{
    // 1F03B 003F;	
    // (🀻) DOMINO TILE HORIZONTAL-01-03	[1216 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03B, 0x003F };
    uint32_t const ces[9] = { 0x1216, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_239)
{
    // 1F03B 0061;	
    // (🀻) DOMINO TILE HORIZONTAL-01-03	[1216 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03B, 0x0061 };
    uint32_t const ces[9] = { 0x1216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_240)
{
    // 1F03B 0041;	
    // (🀻) DOMINO TILE HORIZONTAL-01-03	[1216 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F03B, 0x0041 };
    uint32_t const ces[9] = { 0x1216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_241)
{
    // 1F03B 0062;	
    // (🀻) DOMINO TILE HORIZONTAL-01-03	[1216 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03B, 0x0062 };
    uint32_t const ces[9] = { 0x1216, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_242)
{
    // 1F03C 0021;	
    // (🀼) DOMINO TILE HORIZONTAL-01-04	[1217 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03C, 0x0021 };
    uint32_t const ces[9] = { 0x1217, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_243)
{
    // 1F03C 003F;	
    // (🀼) DOMINO TILE HORIZONTAL-01-04	[1217 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03C, 0x003F };
    uint32_t const ces[9] = { 0x1217, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_244)
{
    // 1F03C 0061;	
    // (🀼) DOMINO TILE HORIZONTAL-01-04	[1217 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03C, 0x0061 };
    uint32_t const ces[9] = { 0x1217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_245)
{
    // 1F03C 0041;	
    // (🀼) DOMINO TILE HORIZONTAL-01-04	[1217 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F03C, 0x0041 };
    uint32_t const ces[9] = { 0x1217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_246)
{
    // 1F03C 0062;	
    // (🀼) DOMINO TILE HORIZONTAL-01-04	[1217 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03C, 0x0062 };
    uint32_t const ces[9] = { 0x1217, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_247)
{
    // 1F03D 0021;	
    // (🀽) DOMINO TILE HORIZONTAL-01-05	[1218 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03D, 0x0021 };
    uint32_t const ces[9] = { 0x1218, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_248)
{
    // 1F03D 003F;	
    // (🀽) DOMINO TILE HORIZONTAL-01-05	[1218 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03D, 0x003F };
    uint32_t const ces[9] = { 0x1218, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_249)
{
    // 1F03D 0061;	
    // (🀽) DOMINO TILE HORIZONTAL-01-05	[1218 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03D, 0x0061 };
    uint32_t const ces[9] = { 0x1218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_250)
{
    // 1F03D 0041;	
    // (🀽) DOMINO TILE HORIZONTAL-01-05	[1218 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F03D, 0x0041 };
    uint32_t const ces[9] = { 0x1218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_251)
{
    // 1F03D 0062;	
    // (🀽) DOMINO TILE HORIZONTAL-01-05	[1218 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03D, 0x0062 };
    uint32_t const ces[9] = { 0x1218, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_252)
{
    // 1F03E 0021;	
    // (🀾) DOMINO TILE HORIZONTAL-01-06	[1219 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03E, 0x0021 };
    uint32_t const ces[9] = { 0x1219, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_253)
{
    // 1F03E 003F;	
    // (🀾) DOMINO TILE HORIZONTAL-01-06	[1219 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03E, 0x003F };
    uint32_t const ces[9] = { 0x1219, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_254)
{
    // 1F03E 0061;	
    // (🀾) DOMINO TILE HORIZONTAL-01-06	[1219 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03E, 0x0061 };
    uint32_t const ces[9] = { 0x1219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_255)
{
    // 1F03E 0041;	
    // (🀾) DOMINO TILE HORIZONTAL-01-06	[1219 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F03E, 0x0041 };
    uint32_t const ces[9] = { 0x1219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_256)
{
    // 1F03E 0062;	
    // (🀾) DOMINO TILE HORIZONTAL-01-06	[1219 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03E, 0x0062 };
    uint32_t const ces[9] = { 0x1219, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_257)
{
    // 1F03F 0021;	
    // (🀿) DOMINO TILE HORIZONTAL-02-00	[121A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03F, 0x0021 };
    uint32_t const ces[9] = { 0x121A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_258)
{
    // 1F03F 003F;	
    // (🀿) DOMINO TILE HORIZONTAL-02-00	[121A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03F, 0x003F };
    uint32_t const ces[9] = { 0x121A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_259)
{
    // 1F03F 0061;	
    // (🀿) DOMINO TILE HORIZONTAL-02-00	[121A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03F, 0x0061 };
    uint32_t const ces[9] = { 0x121A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_260)
{
    // 1F03F 0041;	
    // (🀿) DOMINO TILE HORIZONTAL-02-00	[121A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F03F, 0x0041 };
    uint32_t const ces[9] = { 0x121A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_261)
{
    // 1F03F 0062;	
    // (🀿) DOMINO TILE HORIZONTAL-02-00	[121A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F03F, 0x0062 };
    uint32_t const ces[9] = { 0x121A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_262)
{
    // 1F040 0021;	
    // (🁀) DOMINO TILE HORIZONTAL-02-01	[121B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F040, 0x0021 };
    uint32_t const ces[9] = { 0x121B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_263)
{
    // 1F040 003F;	
    // (🁀) DOMINO TILE HORIZONTAL-02-01	[121B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F040, 0x003F };
    uint32_t const ces[9] = { 0x121B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_264)
{
    // 1F040 0061;	
    // (🁀) DOMINO TILE HORIZONTAL-02-01	[121B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F040, 0x0061 };
    uint32_t const ces[9] = { 0x121B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_265)
{
    // 1F040 0041;	
    // (🁀) DOMINO TILE HORIZONTAL-02-01	[121B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F040, 0x0041 };
    uint32_t const ces[9] = { 0x121B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_266)
{
    // 1F040 0062;	
    // (🁀) DOMINO TILE HORIZONTAL-02-01	[121B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F040, 0x0062 };
    uint32_t const ces[9] = { 0x121B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_267)
{
    // 1F041 0021;	
    // (🁁) DOMINO TILE HORIZONTAL-02-02	[121C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F041, 0x0021 };
    uint32_t const ces[9] = { 0x121C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_268)
{
    // 1F041 003F;	
    // (🁁) DOMINO TILE HORIZONTAL-02-02	[121C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F041, 0x003F };
    uint32_t const ces[9] = { 0x121C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_269)
{
    // 1F041 0061;	
    // (🁁) DOMINO TILE HORIZONTAL-02-02	[121C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F041, 0x0061 };
    uint32_t const ces[9] = { 0x121C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_270)
{
    // 1F041 0041;	
    // (🁁) DOMINO TILE HORIZONTAL-02-02	[121C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F041, 0x0041 };
    uint32_t const ces[9] = { 0x121C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_271)
{
    // 1F041 0062;	
    // (🁁) DOMINO TILE HORIZONTAL-02-02	[121C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F041, 0x0062 };
    uint32_t const ces[9] = { 0x121C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_272)
{
    // 1F042 0021;	
    // (🁂) DOMINO TILE HORIZONTAL-02-03	[121D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F042, 0x0021 };
    uint32_t const ces[9] = { 0x121D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_273)
{
    // 1F042 003F;	
    // (🁂) DOMINO TILE HORIZONTAL-02-03	[121D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F042, 0x003F };
    uint32_t const ces[9] = { 0x121D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_274)
{
    // 1F042 0061;	
    // (🁂) DOMINO TILE HORIZONTAL-02-03	[121D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F042, 0x0061 };
    uint32_t const ces[9] = { 0x121D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_275)
{
    // 1F042 0041;	
    // (🁂) DOMINO TILE HORIZONTAL-02-03	[121D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F042, 0x0041 };
    uint32_t const ces[9] = { 0x121D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_276)
{
    // 1F042 0062;	
    // (🁂) DOMINO TILE HORIZONTAL-02-03	[121D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F042, 0x0062 };
    uint32_t const ces[9] = { 0x121D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_277)
{
    // 1F043 0021;	
    // (🁃) DOMINO TILE HORIZONTAL-02-04	[121E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F043, 0x0021 };
    uint32_t const ces[9] = { 0x121E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_278)
{
    // 1F043 003F;	
    // (🁃) DOMINO TILE HORIZONTAL-02-04	[121E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F043, 0x003F };
    uint32_t const ces[9] = { 0x121E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_279)
{
    // 1F043 0061;	
    // (🁃) DOMINO TILE HORIZONTAL-02-04	[121E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F043, 0x0061 };
    uint32_t const ces[9] = { 0x121E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_280)
{
    // 1F043 0041;	
    // (🁃) DOMINO TILE HORIZONTAL-02-04	[121E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F043, 0x0041 };
    uint32_t const ces[9] = { 0x121E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_281)
{
    // 1F043 0062;	
    // (🁃) DOMINO TILE HORIZONTAL-02-04	[121E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F043, 0x0062 };
    uint32_t const ces[9] = { 0x121E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_282)
{
    // 1F044 0021;	
    // (🁄) DOMINO TILE HORIZONTAL-02-05	[121F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F044, 0x0021 };
    uint32_t const ces[9] = { 0x121F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_283)
{
    // 1F044 003F;	
    // (🁄) DOMINO TILE HORIZONTAL-02-05	[121F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F044, 0x003F };
    uint32_t const ces[9] = { 0x121F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_284)
{
    // 1F044 0061;	
    // (🁄) DOMINO TILE HORIZONTAL-02-05	[121F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F044, 0x0061 };
    uint32_t const ces[9] = { 0x121F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_285)
{
    // 1F044 0041;	
    // (🁄) DOMINO TILE HORIZONTAL-02-05	[121F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F044, 0x0041 };
    uint32_t const ces[9] = { 0x121F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_286)
{
    // 1F044 0062;	
    // (🁄) DOMINO TILE HORIZONTAL-02-05	[121F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F044, 0x0062 };
    uint32_t const ces[9] = { 0x121F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_287)
{
    // 1F045 0021;	
    // (🁅) DOMINO TILE HORIZONTAL-02-06	[1220 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F045, 0x0021 };
    uint32_t const ces[9] = { 0x1220, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_288)
{
    // 1F045 003F;	
    // (🁅) DOMINO TILE HORIZONTAL-02-06	[1220 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F045, 0x003F };
    uint32_t const ces[9] = { 0x1220, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_289)
{
    // 1F045 0061;	
    // (🁅) DOMINO TILE HORIZONTAL-02-06	[1220 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F045, 0x0061 };
    uint32_t const ces[9] = { 0x1220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_290)
{
    // 1F045 0041;	
    // (🁅) DOMINO TILE HORIZONTAL-02-06	[1220 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F045, 0x0041 };
    uint32_t const ces[9] = { 0x1220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_291)
{
    // 1F045 0062;	
    // (🁅) DOMINO TILE HORIZONTAL-02-06	[1220 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F045, 0x0062 };
    uint32_t const ces[9] = { 0x1220, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_292)
{
    // 1F046 0021;	
    // (🁆) DOMINO TILE HORIZONTAL-03-00	[1221 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F046, 0x0021 };
    uint32_t const ces[9] = { 0x1221, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_293)
{
    // 1F046 003F;	
    // (🁆) DOMINO TILE HORIZONTAL-03-00	[1221 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F046, 0x003F };
    uint32_t const ces[9] = { 0x1221, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_294)
{
    // 1F046 0061;	
    // (🁆) DOMINO TILE HORIZONTAL-03-00	[1221 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F046, 0x0061 };
    uint32_t const ces[9] = { 0x1221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_295)
{
    // 1F046 0041;	
    // (🁆) DOMINO TILE HORIZONTAL-03-00	[1221 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F046, 0x0041 };
    uint32_t const ces[9] = { 0x1221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_296)
{
    // 1F046 0062;	
    // (🁆) DOMINO TILE HORIZONTAL-03-00	[1221 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F046, 0x0062 };
    uint32_t const ces[9] = { 0x1221, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_297)
{
    // 1F047 0021;	
    // (🁇) DOMINO TILE HORIZONTAL-03-01	[1222 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F047, 0x0021 };
    uint32_t const ces[9] = { 0x1222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_298)
{
    // 1F047 003F;	
    // (🁇) DOMINO TILE HORIZONTAL-03-01	[1222 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F047, 0x003F };
    uint32_t const ces[9] = { 0x1222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_299)
{
    // 1F047 0061;	
    // (🁇) DOMINO TILE HORIZONTAL-03-01	[1222 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F047, 0x0061 };
    uint32_t const ces[9] = { 0x1222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_300)
{
    // 1F047 0041;	
    // (🁇) DOMINO TILE HORIZONTAL-03-01	[1222 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F047, 0x0041 };
    uint32_t const ces[9] = { 0x1222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_301)
{
    // 1F047 0062;	
    // (🁇) DOMINO TILE HORIZONTAL-03-01	[1222 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F047, 0x0062 };
    uint32_t const ces[9] = { 0x1222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_302)
{
    // 1F048 0021;	
    // (🁈) DOMINO TILE HORIZONTAL-03-02	[1223 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F048, 0x0021 };
    uint32_t const ces[9] = { 0x1223, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_303)
{
    // 1F048 003F;	
    // (🁈) DOMINO TILE HORIZONTAL-03-02	[1223 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F048, 0x003F };
    uint32_t const ces[9] = { 0x1223, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_304)
{
    // 1F048 0061;	
    // (🁈) DOMINO TILE HORIZONTAL-03-02	[1223 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F048, 0x0061 };
    uint32_t const ces[9] = { 0x1223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_305)
{
    // 1F048 0041;	
    // (🁈) DOMINO TILE HORIZONTAL-03-02	[1223 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F048, 0x0041 };
    uint32_t const ces[9] = { 0x1223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_306)
{
    // 1F048 0062;	
    // (🁈) DOMINO TILE HORIZONTAL-03-02	[1223 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F048, 0x0062 };
    uint32_t const ces[9] = { 0x1223, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_307)
{
    // 1F049 0021;	
    // (🁉) DOMINO TILE HORIZONTAL-03-03	[1224 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F049, 0x0021 };
    uint32_t const ces[9] = { 0x1224, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_308)
{
    // 1F049 003F;	
    // (🁉) DOMINO TILE HORIZONTAL-03-03	[1224 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F049, 0x003F };
    uint32_t const ces[9] = { 0x1224, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_309)
{
    // 1F049 0061;	
    // (🁉) DOMINO TILE HORIZONTAL-03-03	[1224 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F049, 0x0061 };
    uint32_t const ces[9] = { 0x1224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_310)
{
    // 1F049 0041;	
    // (🁉) DOMINO TILE HORIZONTAL-03-03	[1224 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F049, 0x0041 };
    uint32_t const ces[9] = { 0x1224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_311)
{
    // 1F049 0062;	
    // (🁉) DOMINO TILE HORIZONTAL-03-03	[1224 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F049, 0x0062 };
    uint32_t const ces[9] = { 0x1224, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_312)
{
    // 1F04A 0021;	
    // (🁊) DOMINO TILE HORIZONTAL-03-04	[1225 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04A, 0x0021 };
    uint32_t const ces[9] = { 0x1225, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_313)
{
    // 1F04A 003F;	
    // (🁊) DOMINO TILE HORIZONTAL-03-04	[1225 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04A, 0x003F };
    uint32_t const ces[9] = { 0x1225, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_314)
{
    // 1F04A 0061;	
    // (🁊) DOMINO TILE HORIZONTAL-03-04	[1225 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04A, 0x0061 };
    uint32_t const ces[9] = { 0x1225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_315)
{
    // 1F04A 0041;	
    // (🁊) DOMINO TILE HORIZONTAL-03-04	[1225 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F04A, 0x0041 };
    uint32_t const ces[9] = { 0x1225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_316)
{
    // 1F04A 0062;	
    // (🁊) DOMINO TILE HORIZONTAL-03-04	[1225 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04A, 0x0062 };
    uint32_t const ces[9] = { 0x1225, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_317)
{
    // 1F04B 0021;	
    // (🁋) DOMINO TILE HORIZONTAL-03-05	[1226 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04B, 0x0021 };
    uint32_t const ces[9] = { 0x1226, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_318)
{
    // 1F04B 003F;	
    // (🁋) DOMINO TILE HORIZONTAL-03-05	[1226 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04B, 0x003F };
    uint32_t const ces[9] = { 0x1226, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_319)
{
    // 1F04B 0061;	
    // (🁋) DOMINO TILE HORIZONTAL-03-05	[1226 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04B, 0x0061 };
    uint32_t const ces[9] = { 0x1226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_320)
{
    // 1F04B 0041;	
    // (🁋) DOMINO TILE HORIZONTAL-03-05	[1226 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F04B, 0x0041 };
    uint32_t const ces[9] = { 0x1226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_321)
{
    // 1F04B 0062;	
    // (🁋) DOMINO TILE HORIZONTAL-03-05	[1226 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04B, 0x0062 };
    uint32_t const ces[9] = { 0x1226, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_322)
{
    // 1F04C 0021;	
    // (🁌) DOMINO TILE HORIZONTAL-03-06	[1227 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04C, 0x0021 };
    uint32_t const ces[9] = { 0x1227, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_323)
{
    // 1F04C 003F;	
    // (🁌) DOMINO TILE HORIZONTAL-03-06	[1227 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04C, 0x003F };
    uint32_t const ces[9] = { 0x1227, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_324)
{
    // 1F04C 0061;	
    // (🁌) DOMINO TILE HORIZONTAL-03-06	[1227 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04C, 0x0061 };
    uint32_t const ces[9] = { 0x1227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_325)
{
    // 1F04C 0041;	
    // (🁌) DOMINO TILE HORIZONTAL-03-06	[1227 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F04C, 0x0041 };
    uint32_t const ces[9] = { 0x1227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_326)
{
    // 1F04C 0062;	
    // (🁌) DOMINO TILE HORIZONTAL-03-06	[1227 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04C, 0x0062 };
    uint32_t const ces[9] = { 0x1227, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_327)
{
    // 1F04D 0021;	
    // (🁍) DOMINO TILE HORIZONTAL-04-00	[1228 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04D, 0x0021 };
    uint32_t const ces[9] = { 0x1228, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_328)
{
    // 1F04D 003F;	
    // (🁍) DOMINO TILE HORIZONTAL-04-00	[1228 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04D, 0x003F };
    uint32_t const ces[9] = { 0x1228, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_329)
{
    // 1F04D 0061;	
    // (🁍) DOMINO TILE HORIZONTAL-04-00	[1228 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04D, 0x0061 };
    uint32_t const ces[9] = { 0x1228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_330)
{
    // 1F04D 0041;	
    // (🁍) DOMINO TILE HORIZONTAL-04-00	[1228 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F04D, 0x0041 };
    uint32_t const ces[9] = { 0x1228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_331)
{
    // 1F04D 0062;	
    // (🁍) DOMINO TILE HORIZONTAL-04-00	[1228 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04D, 0x0062 };
    uint32_t const ces[9] = { 0x1228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_332)
{
    // 1F04E 0021;	
    // (🁎) DOMINO TILE HORIZONTAL-04-01	[1229 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04E, 0x0021 };
    uint32_t const ces[9] = { 0x1229, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_333)
{
    // 1F04E 003F;	
    // (🁎) DOMINO TILE HORIZONTAL-04-01	[1229 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04E, 0x003F };
    uint32_t const ces[9] = { 0x1229, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_334)
{
    // 1F04E 0061;	
    // (🁎) DOMINO TILE HORIZONTAL-04-01	[1229 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04E, 0x0061 };
    uint32_t const ces[9] = { 0x1229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_335)
{
    // 1F04E 0041;	
    // (🁎) DOMINO TILE HORIZONTAL-04-01	[1229 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F04E, 0x0041 };
    uint32_t const ces[9] = { 0x1229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_336)
{
    // 1F04E 0062;	
    // (🁎) DOMINO TILE HORIZONTAL-04-01	[1229 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04E, 0x0062 };
    uint32_t const ces[9] = { 0x1229, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_337)
{
    // 1F04F 0021;	
    // (🁏) DOMINO TILE HORIZONTAL-04-02	[122A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04F, 0x0021 };
    uint32_t const ces[9] = { 0x122A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_338)
{
    // 1F04F 003F;	
    // (🁏) DOMINO TILE HORIZONTAL-04-02	[122A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04F, 0x003F };
    uint32_t const ces[9] = { 0x122A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_339)
{
    // 1F04F 0061;	
    // (🁏) DOMINO TILE HORIZONTAL-04-02	[122A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04F, 0x0061 };
    uint32_t const ces[9] = { 0x122A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_340)
{
    // 1F04F 0041;	
    // (🁏) DOMINO TILE HORIZONTAL-04-02	[122A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F04F, 0x0041 };
    uint32_t const ces[9] = { 0x122A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_341)
{
    // 1F04F 0062;	
    // (🁏) DOMINO TILE HORIZONTAL-04-02	[122A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F04F, 0x0062 };
    uint32_t const ces[9] = { 0x122A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_342)
{
    // 1F050 0021;	
    // (🁐) DOMINO TILE HORIZONTAL-04-03	[122B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F050, 0x0021 };
    uint32_t const ces[9] = { 0x122B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_343)
{
    // 1F050 003F;	
    // (🁐) DOMINO TILE HORIZONTAL-04-03	[122B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F050, 0x003F };
    uint32_t const ces[9] = { 0x122B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_344)
{
    // 1F050 0061;	
    // (🁐) DOMINO TILE HORIZONTAL-04-03	[122B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F050, 0x0061 };
    uint32_t const ces[9] = { 0x122B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_345)
{
    // 1F050 0041;	
    // (🁐) DOMINO TILE HORIZONTAL-04-03	[122B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F050, 0x0041 };
    uint32_t const ces[9] = { 0x122B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_346)
{
    // 1F050 0062;	
    // (🁐) DOMINO TILE HORIZONTAL-04-03	[122B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F050, 0x0062 };
    uint32_t const ces[9] = { 0x122B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_347)
{
    // 1F051 0021;	
    // (🁑) DOMINO TILE HORIZONTAL-04-04	[122C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F051, 0x0021 };
    uint32_t const ces[9] = { 0x122C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_348)
{
    // 1F051 003F;	
    // (🁑) DOMINO TILE HORIZONTAL-04-04	[122C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F051, 0x003F };
    uint32_t const ces[9] = { 0x122C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_349)
{
    // 1F051 0061;	
    // (🁑) DOMINO TILE HORIZONTAL-04-04	[122C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F051, 0x0061 };
    uint32_t const ces[9] = { 0x122C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_350)
{
    // 1F051 0041;	
    // (🁑) DOMINO TILE HORIZONTAL-04-04	[122C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F051, 0x0041 };
    uint32_t const ces[9] = { 0x122C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_351)
{
    // 1F051 0062;	
    // (🁑) DOMINO TILE HORIZONTAL-04-04	[122C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F051, 0x0062 };
    uint32_t const ces[9] = { 0x122C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_352)
{
    // 1F052 0021;	
    // (🁒) DOMINO TILE HORIZONTAL-04-05	[122D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F052, 0x0021 };
    uint32_t const ces[9] = { 0x122D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_353)
{
    // 1F052 003F;	
    // (🁒) DOMINO TILE HORIZONTAL-04-05	[122D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F052, 0x003F };
    uint32_t const ces[9] = { 0x122D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_354)
{
    // 1F052 0061;	
    // (🁒) DOMINO TILE HORIZONTAL-04-05	[122D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F052, 0x0061 };
    uint32_t const ces[9] = { 0x122D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_355)
{
    // 1F052 0041;	
    // (🁒) DOMINO TILE HORIZONTAL-04-05	[122D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F052, 0x0041 };
    uint32_t const ces[9] = { 0x122D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_356)
{
    // 1F052 0062;	
    // (🁒) DOMINO TILE HORIZONTAL-04-05	[122D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F052, 0x0062 };
    uint32_t const ces[9] = { 0x122D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_357)
{
    // 1F053 0021;	
    // (🁓) DOMINO TILE HORIZONTAL-04-06	[122E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F053, 0x0021 };
    uint32_t const ces[9] = { 0x122E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_358)
{
    // 1F053 003F;	
    // (🁓) DOMINO TILE HORIZONTAL-04-06	[122E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F053, 0x003F };
    uint32_t const ces[9] = { 0x122E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_359)
{
    // 1F053 0061;	
    // (🁓) DOMINO TILE HORIZONTAL-04-06	[122E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F053, 0x0061 };
    uint32_t const ces[9] = { 0x122E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_360)
{
    // 1F053 0041;	
    // (🁓) DOMINO TILE HORIZONTAL-04-06	[122E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F053, 0x0041 };
    uint32_t const ces[9] = { 0x122E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_361)
{
    // 1F053 0062;	
    // (🁓) DOMINO TILE HORIZONTAL-04-06	[122E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F053, 0x0062 };
    uint32_t const ces[9] = { 0x122E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_362)
{
    // 1F054 0021;	
    // (🁔) DOMINO TILE HORIZONTAL-05-00	[122F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F054, 0x0021 };
    uint32_t const ces[9] = { 0x122F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_363)
{
    // 1F054 003F;	
    // (🁔) DOMINO TILE HORIZONTAL-05-00	[122F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F054, 0x003F };
    uint32_t const ces[9] = { 0x122F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_364)
{
    // 1F054 0061;	
    // (🁔) DOMINO TILE HORIZONTAL-05-00	[122F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F054, 0x0061 };
    uint32_t const ces[9] = { 0x122F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_365)
{
    // 1F054 0041;	
    // (🁔) DOMINO TILE HORIZONTAL-05-00	[122F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F054, 0x0041 };
    uint32_t const ces[9] = { 0x122F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_366)
{
    // 1F054 0062;	
    // (🁔) DOMINO TILE HORIZONTAL-05-00	[122F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F054, 0x0062 };
    uint32_t const ces[9] = { 0x122F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_367)
{
    // 1F055 0021;	
    // (🁕) DOMINO TILE HORIZONTAL-05-01	[1230 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F055, 0x0021 };
    uint32_t const ces[9] = { 0x1230, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_368)
{
    // 1F055 003F;	
    // (🁕) DOMINO TILE HORIZONTAL-05-01	[1230 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F055, 0x003F };
    uint32_t const ces[9] = { 0x1230, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_369)
{
    // 1F055 0061;	
    // (🁕) DOMINO TILE HORIZONTAL-05-01	[1230 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F055, 0x0061 };
    uint32_t const ces[9] = { 0x1230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_370)
{
    // 1F055 0041;	
    // (🁕) DOMINO TILE HORIZONTAL-05-01	[1230 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F055, 0x0041 };
    uint32_t const ces[9] = { 0x1230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_371)
{
    // 1F055 0062;	
    // (🁕) DOMINO TILE HORIZONTAL-05-01	[1230 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F055, 0x0062 };
    uint32_t const ces[9] = { 0x1230, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_372)
{
    // 1F056 0021;	
    // (🁖) DOMINO TILE HORIZONTAL-05-02	[1231 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F056, 0x0021 };
    uint32_t const ces[9] = { 0x1231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_373)
{
    // 1F056 003F;	
    // (🁖) DOMINO TILE HORIZONTAL-05-02	[1231 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F056, 0x003F };
    uint32_t const ces[9] = { 0x1231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_374)
{
    // 1F056 0061;	
    // (🁖) DOMINO TILE HORIZONTAL-05-02	[1231 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F056, 0x0061 };
    uint32_t const ces[9] = { 0x1231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_375)
{
    // 1F056 0041;	
    // (🁖) DOMINO TILE HORIZONTAL-05-02	[1231 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F056, 0x0041 };
    uint32_t const ces[9] = { 0x1231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_376)
{
    // 1F056 0062;	
    // (🁖) DOMINO TILE HORIZONTAL-05-02	[1231 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F056, 0x0062 };
    uint32_t const ces[9] = { 0x1231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_377)
{
    // 1F057 0021;	
    // (🁗) DOMINO TILE HORIZONTAL-05-03	[1232 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F057, 0x0021 };
    uint32_t const ces[9] = { 0x1232, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_378)
{
    // 1F057 003F;	
    // (🁗) DOMINO TILE HORIZONTAL-05-03	[1232 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F057, 0x003F };
    uint32_t const ces[9] = { 0x1232, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_379)
{
    // 1F057 0061;	
    // (🁗) DOMINO TILE HORIZONTAL-05-03	[1232 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F057, 0x0061 };
    uint32_t const ces[9] = { 0x1232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_380)
{
    // 1F057 0041;	
    // (🁗) DOMINO TILE HORIZONTAL-05-03	[1232 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F057, 0x0041 };
    uint32_t const ces[9] = { 0x1232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_381)
{
    // 1F057 0062;	
    // (🁗) DOMINO TILE HORIZONTAL-05-03	[1232 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F057, 0x0062 };
    uint32_t const ces[9] = { 0x1232, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_382)
{
    // 1F058 0021;	
    // (🁘) DOMINO TILE HORIZONTAL-05-04	[1233 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F058, 0x0021 };
    uint32_t const ces[9] = { 0x1233, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_383)
{
    // 1F058 003F;	
    // (🁘) DOMINO TILE HORIZONTAL-05-04	[1233 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F058, 0x003F };
    uint32_t const ces[9] = { 0x1233, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_384)
{
    // 1F058 0061;	
    // (🁘) DOMINO TILE HORIZONTAL-05-04	[1233 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F058, 0x0061 };
    uint32_t const ces[9] = { 0x1233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_385)
{
    // 1F058 0041;	
    // (🁘) DOMINO TILE HORIZONTAL-05-04	[1233 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F058, 0x0041 };
    uint32_t const ces[9] = { 0x1233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_386)
{
    // 1F058 0062;	
    // (🁘) DOMINO TILE HORIZONTAL-05-04	[1233 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F058, 0x0062 };
    uint32_t const ces[9] = { 0x1233, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_387)
{
    // 1F059 0021;	
    // (🁙) DOMINO TILE HORIZONTAL-05-05	[1234 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F059, 0x0021 };
    uint32_t const ces[9] = { 0x1234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_388)
{
    // 1F059 003F;	
    // (🁙) DOMINO TILE HORIZONTAL-05-05	[1234 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F059, 0x003F };
    uint32_t const ces[9] = { 0x1234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_389)
{
    // 1F059 0061;	
    // (🁙) DOMINO TILE HORIZONTAL-05-05	[1234 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F059, 0x0061 };
    uint32_t const ces[9] = { 0x1234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_390)
{
    // 1F059 0041;	
    // (🁙) DOMINO TILE HORIZONTAL-05-05	[1234 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F059, 0x0041 };
    uint32_t const ces[9] = { 0x1234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_391)
{
    // 1F059 0062;	
    // (🁙) DOMINO TILE HORIZONTAL-05-05	[1234 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F059, 0x0062 };
    uint32_t const ces[9] = { 0x1234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_392)
{
    // 1F05A 0021;	
    // (🁚) DOMINO TILE HORIZONTAL-05-06	[1235 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05A, 0x0021 };
    uint32_t const ces[9] = { 0x1235, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_393)
{
    // 1F05A 003F;	
    // (🁚) DOMINO TILE HORIZONTAL-05-06	[1235 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05A, 0x003F };
    uint32_t const ces[9] = { 0x1235, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_394)
{
    // 1F05A 0061;	
    // (🁚) DOMINO TILE HORIZONTAL-05-06	[1235 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05A, 0x0061 };
    uint32_t const ces[9] = { 0x1235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_395)
{
    // 1F05A 0041;	
    // (🁚) DOMINO TILE HORIZONTAL-05-06	[1235 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F05A, 0x0041 };
    uint32_t const ces[9] = { 0x1235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_396)
{
    // 1F05A 0062;	
    // (🁚) DOMINO TILE HORIZONTAL-05-06	[1235 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05A, 0x0062 };
    uint32_t const ces[9] = { 0x1235, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_397)
{
    // 1F05B 0021;	
    // (🁛) DOMINO TILE HORIZONTAL-06-00	[1236 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05B, 0x0021 };
    uint32_t const ces[9] = { 0x1236, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_398)
{
    // 1F05B 003F;	
    // (🁛) DOMINO TILE HORIZONTAL-06-00	[1236 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05B, 0x003F };
    uint32_t const ces[9] = { 0x1236, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_399)
{
    // 1F05B 0061;	
    // (🁛) DOMINO TILE HORIZONTAL-06-00	[1236 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05B, 0x0061 };
    uint32_t const ces[9] = { 0x1236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_400)
{
    // 1F05B 0041;	
    // (🁛) DOMINO TILE HORIZONTAL-06-00	[1236 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F05B, 0x0041 };
    uint32_t const ces[9] = { 0x1236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_401)
{
    // 1F05B 0062;	
    // (🁛) DOMINO TILE HORIZONTAL-06-00	[1236 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05B, 0x0062 };
    uint32_t const ces[9] = { 0x1236, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_402)
{
    // 1F05C 0021;	
    // (🁜) DOMINO TILE HORIZONTAL-06-01	[1237 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05C, 0x0021 };
    uint32_t const ces[9] = { 0x1237, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_403)
{
    // 1F05C 003F;	
    // (🁜) DOMINO TILE HORIZONTAL-06-01	[1237 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05C, 0x003F };
    uint32_t const ces[9] = { 0x1237, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_404)
{
    // 1F05C 0061;	
    // (🁜) DOMINO TILE HORIZONTAL-06-01	[1237 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05C, 0x0061 };
    uint32_t const ces[9] = { 0x1237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_405)
{
    // 1F05C 0041;	
    // (🁜) DOMINO TILE HORIZONTAL-06-01	[1237 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F05C, 0x0041 };
    uint32_t const ces[9] = { 0x1237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_406)
{
    // 1F05C 0062;	
    // (🁜) DOMINO TILE HORIZONTAL-06-01	[1237 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05C, 0x0062 };
    uint32_t const ces[9] = { 0x1237, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_407)
{
    // 1F05D 0021;	
    // (🁝) DOMINO TILE HORIZONTAL-06-02	[1238 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05D, 0x0021 };
    uint32_t const ces[9] = { 0x1238, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_408)
{
    // 1F05D 003F;	
    // (🁝) DOMINO TILE HORIZONTAL-06-02	[1238 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05D, 0x003F };
    uint32_t const ces[9] = { 0x1238, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_409)
{
    // 1F05D 0061;	
    // (🁝) DOMINO TILE HORIZONTAL-06-02	[1238 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05D, 0x0061 };
    uint32_t const ces[9] = { 0x1238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_410)
{
    // 1F05D 0041;	
    // (🁝) DOMINO TILE HORIZONTAL-06-02	[1238 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F05D, 0x0041 };
    uint32_t const ces[9] = { 0x1238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_411)
{
    // 1F05D 0062;	
    // (🁝) DOMINO TILE HORIZONTAL-06-02	[1238 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05D, 0x0062 };
    uint32_t const ces[9] = { 0x1238, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_412)
{
    // 1F05E 0021;	
    // (🁞) DOMINO TILE HORIZONTAL-06-03	[1239 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05E, 0x0021 };
    uint32_t const ces[9] = { 0x1239, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_413)
{
    // 1F05E 003F;	
    // (🁞) DOMINO TILE HORIZONTAL-06-03	[1239 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05E, 0x003F };
    uint32_t const ces[9] = { 0x1239, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_414)
{
    // 1F05E 0061;	
    // (🁞) DOMINO TILE HORIZONTAL-06-03	[1239 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05E, 0x0061 };
    uint32_t const ces[9] = { 0x1239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_415)
{
    // 1F05E 0041;	
    // (🁞) DOMINO TILE HORIZONTAL-06-03	[1239 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F05E, 0x0041 };
    uint32_t const ces[9] = { 0x1239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_416)
{
    // 1F05E 0062;	
    // (🁞) DOMINO TILE HORIZONTAL-06-03	[1239 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05E, 0x0062 };
    uint32_t const ces[9] = { 0x1239, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_417)
{
    // 1F05F 0021;	
    // (🁟) DOMINO TILE HORIZONTAL-06-04	[123A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05F, 0x0021 };
    uint32_t const ces[9] = { 0x123A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_418)
{
    // 1F05F 003F;	
    // (🁟) DOMINO TILE HORIZONTAL-06-04	[123A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05F, 0x003F };
    uint32_t const ces[9] = { 0x123A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_419)
{
    // 1F05F 0061;	
    // (🁟) DOMINO TILE HORIZONTAL-06-04	[123A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05F, 0x0061 };
    uint32_t const ces[9] = { 0x123A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_420)
{
    // 1F05F 0041;	
    // (🁟) DOMINO TILE HORIZONTAL-06-04	[123A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F05F, 0x0041 };
    uint32_t const ces[9] = { 0x123A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_421)
{
    // 1F05F 0062;	
    // (🁟) DOMINO TILE HORIZONTAL-06-04	[123A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F05F, 0x0062 };
    uint32_t const ces[9] = { 0x123A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_422)
{
    // 1F060 0021;	
    // (🁠) DOMINO TILE HORIZONTAL-06-05	[123B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F060, 0x0021 };
    uint32_t const ces[9] = { 0x123B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_423)
{
    // 1F060 003F;	
    // (🁠) DOMINO TILE HORIZONTAL-06-05	[123B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F060, 0x003F };
    uint32_t const ces[9] = { 0x123B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_424)
{
    // 1F060 0061;	
    // (🁠) DOMINO TILE HORIZONTAL-06-05	[123B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F060, 0x0061 };
    uint32_t const ces[9] = { 0x123B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_425)
{
    // 1F060 0041;	
    // (🁠) DOMINO TILE HORIZONTAL-06-05	[123B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F060, 0x0041 };
    uint32_t const ces[9] = { 0x123B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_426)
{
    // 1F060 0062;	
    // (🁠) DOMINO TILE HORIZONTAL-06-05	[123B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F060, 0x0062 };
    uint32_t const ces[9] = { 0x123B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_427)
{
    // 1F061 0021;	
    // (🁡) DOMINO TILE HORIZONTAL-06-06	[123C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F061, 0x0021 };
    uint32_t const ces[9] = { 0x123C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_428)
{
    // 1F061 003F;	
    // (🁡) DOMINO TILE HORIZONTAL-06-06	[123C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F061, 0x003F };
    uint32_t const ces[9] = { 0x123C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_429)
{
    // 1F061 0061;	
    // (🁡) DOMINO TILE HORIZONTAL-06-06	[123C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F061, 0x0061 };
    uint32_t const ces[9] = { 0x123C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_430)
{
    // 1F061 0041;	
    // (🁡) DOMINO TILE HORIZONTAL-06-06	[123C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F061, 0x0041 };
    uint32_t const ces[9] = { 0x123C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_431)
{
    // 1F061 0062;	
    // (🁡) DOMINO TILE HORIZONTAL-06-06	[123C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F061, 0x0062 };
    uint32_t const ces[9] = { 0x123C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_432)
{
    // 1F062 0021;	
    // (🁢) DOMINO TILE VERTICAL BACK	[123D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F062, 0x0021 };
    uint32_t const ces[9] = { 0x123D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_433)
{
    // 1F062 003F;	
    // (🁢) DOMINO TILE VERTICAL BACK	[123D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F062, 0x003F };
    uint32_t const ces[9] = { 0x123D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_434)
{
    // 1F062 0061;	
    // (🁢) DOMINO TILE VERTICAL BACK	[123D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F062, 0x0061 };
    uint32_t const ces[9] = { 0x123D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_435)
{
    // 1F062 0041;	
    // (🁢) DOMINO TILE VERTICAL BACK	[123D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F062, 0x0041 };
    uint32_t const ces[9] = { 0x123D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_436)
{
    // 1F062 0062;	
    // (🁢) DOMINO TILE VERTICAL BACK	[123D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F062, 0x0062 };
    uint32_t const ces[9] = { 0x123D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_437)
{
    // 1F063 0021;	
    // (🁣) DOMINO TILE VERTICAL-00-00	[123E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F063, 0x0021 };
    uint32_t const ces[9] = { 0x123E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_438)
{
    // 1F063 003F;	
    // (🁣) DOMINO TILE VERTICAL-00-00	[123E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F063, 0x003F };
    uint32_t const ces[9] = { 0x123E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_439)
{
    // 1F063 0061;	
    // (🁣) DOMINO TILE VERTICAL-00-00	[123E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F063, 0x0061 };
    uint32_t const ces[9] = { 0x123E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_440)
{
    // 1F063 0041;	
    // (🁣) DOMINO TILE VERTICAL-00-00	[123E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F063, 0x0041 };
    uint32_t const ces[9] = { 0x123E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_441)
{
    // 1F063 0062;	
    // (🁣) DOMINO TILE VERTICAL-00-00	[123E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F063, 0x0062 };
    uint32_t const ces[9] = { 0x123E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_442)
{
    // 1F064 0021;	
    // (🁤) DOMINO TILE VERTICAL-00-01	[123F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F064, 0x0021 };
    uint32_t const ces[9] = { 0x123F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_443)
{
    // 1F064 003F;	
    // (🁤) DOMINO TILE VERTICAL-00-01	[123F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F064, 0x003F };
    uint32_t const ces[9] = { 0x123F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_444)
{
    // 1F064 0061;	
    // (🁤) DOMINO TILE VERTICAL-00-01	[123F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F064, 0x0061 };
    uint32_t const ces[9] = { 0x123F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_445)
{
    // 1F064 0041;	
    // (🁤) DOMINO TILE VERTICAL-00-01	[123F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F064, 0x0041 };
    uint32_t const ces[9] = { 0x123F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_446)
{
    // 1F064 0062;	
    // (🁤) DOMINO TILE VERTICAL-00-01	[123F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F064, 0x0062 };
    uint32_t const ces[9] = { 0x123F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_447)
{
    // 1F065 0021;	
    // (🁥) DOMINO TILE VERTICAL-00-02	[1240 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F065, 0x0021 };
    uint32_t const ces[9] = { 0x1240, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_448)
{
    // 1F065 003F;	
    // (🁥) DOMINO TILE VERTICAL-00-02	[1240 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F065, 0x003F };
    uint32_t const ces[9] = { 0x1240, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_449)
{
    // 1F065 0061;	
    // (🁥) DOMINO TILE VERTICAL-00-02	[1240 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F065, 0x0061 };
    uint32_t const ces[9] = { 0x1240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_450)
{
    // 1F065 0041;	
    // (🁥) DOMINO TILE VERTICAL-00-02	[1240 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F065, 0x0041 };
    uint32_t const ces[9] = { 0x1240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_451)
{
    // 1F065 0062;	
    // (🁥) DOMINO TILE VERTICAL-00-02	[1240 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F065, 0x0062 };
    uint32_t const ces[9] = { 0x1240, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_452)
{
    // 1F066 0021;	
    // (🁦) DOMINO TILE VERTICAL-00-03	[1241 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F066, 0x0021 };
    uint32_t const ces[9] = { 0x1241, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_453)
{
    // 1F066 003F;	
    // (🁦) DOMINO TILE VERTICAL-00-03	[1241 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F066, 0x003F };
    uint32_t const ces[9] = { 0x1241, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_454)
{
    // 1F066 0061;	
    // (🁦) DOMINO TILE VERTICAL-00-03	[1241 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F066, 0x0061 };
    uint32_t const ces[9] = { 0x1241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_455)
{
    // 1F066 0041;	
    // (🁦) DOMINO TILE VERTICAL-00-03	[1241 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F066, 0x0041 };
    uint32_t const ces[9] = { 0x1241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_456)
{
    // 1F066 0062;	
    // (🁦) DOMINO TILE VERTICAL-00-03	[1241 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F066, 0x0062 };
    uint32_t const ces[9] = { 0x1241, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_457)
{
    // 1F067 0021;	
    // (🁧) DOMINO TILE VERTICAL-00-04	[1242 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F067, 0x0021 };
    uint32_t const ces[9] = { 0x1242, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_458)
{
    // 1F067 003F;	
    // (🁧) DOMINO TILE VERTICAL-00-04	[1242 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F067, 0x003F };
    uint32_t const ces[9] = { 0x1242, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_459)
{
    // 1F067 0061;	
    // (🁧) DOMINO TILE VERTICAL-00-04	[1242 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F067, 0x0061 };
    uint32_t const ces[9] = { 0x1242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_460)
{
    // 1F067 0041;	
    // (🁧) DOMINO TILE VERTICAL-00-04	[1242 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F067, 0x0041 };
    uint32_t const ces[9] = { 0x1242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_461)
{
    // 1F067 0062;	
    // (🁧) DOMINO TILE VERTICAL-00-04	[1242 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F067, 0x0062 };
    uint32_t const ces[9] = { 0x1242, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_462)
{
    // 1F068 0021;	
    // (🁨) DOMINO TILE VERTICAL-00-05	[1243 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F068, 0x0021 };
    uint32_t const ces[9] = { 0x1243, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_463)
{
    // 1F068 003F;	
    // (🁨) DOMINO TILE VERTICAL-00-05	[1243 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F068, 0x003F };
    uint32_t const ces[9] = { 0x1243, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_464)
{
    // 1F068 0061;	
    // (🁨) DOMINO TILE VERTICAL-00-05	[1243 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F068, 0x0061 };
    uint32_t const ces[9] = { 0x1243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_465)
{
    // 1F068 0041;	
    // (🁨) DOMINO TILE VERTICAL-00-05	[1243 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F068, 0x0041 };
    uint32_t const ces[9] = { 0x1243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_466)
{
    // 1F068 0062;	
    // (🁨) DOMINO TILE VERTICAL-00-05	[1243 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F068, 0x0062 };
    uint32_t const ces[9] = { 0x1243, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_467)
{
    // 1F069 0021;	
    // (🁩) DOMINO TILE VERTICAL-00-06	[1244 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F069, 0x0021 };
    uint32_t const ces[9] = { 0x1244, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_468)
{
    // 1F069 003F;	
    // (🁩) DOMINO TILE VERTICAL-00-06	[1244 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F069, 0x003F };
    uint32_t const ces[9] = { 0x1244, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_469)
{
    // 1F069 0061;	
    // (🁩) DOMINO TILE VERTICAL-00-06	[1244 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F069, 0x0061 };
    uint32_t const ces[9] = { 0x1244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_470)
{
    // 1F069 0041;	
    // (🁩) DOMINO TILE VERTICAL-00-06	[1244 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F069, 0x0041 };
    uint32_t const ces[9] = { 0x1244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_471)
{
    // 1F069 0062;	
    // (🁩) DOMINO TILE VERTICAL-00-06	[1244 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F069, 0x0062 };
    uint32_t const ces[9] = { 0x1244, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_472)
{
    // 1F06A 0021;	
    // (🁪) DOMINO TILE VERTICAL-01-00	[1245 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06A, 0x0021 };
    uint32_t const ces[9] = { 0x1245, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_473)
{
    // 1F06A 003F;	
    // (🁪) DOMINO TILE VERTICAL-01-00	[1245 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06A, 0x003F };
    uint32_t const ces[9] = { 0x1245, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_474)
{
    // 1F06A 0061;	
    // (🁪) DOMINO TILE VERTICAL-01-00	[1245 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06A, 0x0061 };
    uint32_t const ces[9] = { 0x1245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_475)
{
    // 1F06A 0041;	
    // (🁪) DOMINO TILE VERTICAL-01-00	[1245 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F06A, 0x0041 };
    uint32_t const ces[9] = { 0x1245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_476)
{
    // 1F06A 0062;	
    // (🁪) DOMINO TILE VERTICAL-01-00	[1245 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06A, 0x0062 };
    uint32_t const ces[9] = { 0x1245, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_477)
{
    // 1F06B 0021;	
    // (🁫) DOMINO TILE VERTICAL-01-01	[1246 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06B, 0x0021 };
    uint32_t const ces[9] = { 0x1246, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_478)
{
    // 1F06B 003F;	
    // (🁫) DOMINO TILE VERTICAL-01-01	[1246 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06B, 0x003F };
    uint32_t const ces[9] = { 0x1246, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_479)
{
    // 1F06B 0061;	
    // (🁫) DOMINO TILE VERTICAL-01-01	[1246 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06B, 0x0061 };
    uint32_t const ces[9] = { 0x1246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_480)
{
    // 1F06B 0041;	
    // (🁫) DOMINO TILE VERTICAL-01-01	[1246 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F06B, 0x0041 };
    uint32_t const ces[9] = { 0x1246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_481)
{
    // 1F06B 0062;	
    // (🁫) DOMINO TILE VERTICAL-01-01	[1246 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06B, 0x0062 };
    uint32_t const ces[9] = { 0x1246, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_482)
{
    // 1F06C 0021;	
    // (🁬) DOMINO TILE VERTICAL-01-02	[1247 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06C, 0x0021 };
    uint32_t const ces[9] = { 0x1247, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_483)
{
    // 1F06C 003F;	
    // (🁬) DOMINO TILE VERTICAL-01-02	[1247 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06C, 0x003F };
    uint32_t const ces[9] = { 0x1247, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_484)
{
    // 1F06C 0061;	
    // (🁬) DOMINO TILE VERTICAL-01-02	[1247 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06C, 0x0061 };
    uint32_t const ces[9] = { 0x1247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_485)
{
    // 1F06C 0041;	
    // (🁬) DOMINO TILE VERTICAL-01-02	[1247 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F06C, 0x0041 };
    uint32_t const ces[9] = { 0x1247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_486)
{
    // 1F06C 0062;	
    // (🁬) DOMINO TILE VERTICAL-01-02	[1247 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06C, 0x0062 };
    uint32_t const ces[9] = { 0x1247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_487)
{
    // 1F06D 0021;	
    // (🁭) DOMINO TILE VERTICAL-01-03	[1248 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06D, 0x0021 };
    uint32_t const ces[9] = { 0x1248, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_488)
{
    // 1F06D 003F;	
    // (🁭) DOMINO TILE VERTICAL-01-03	[1248 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06D, 0x003F };
    uint32_t const ces[9] = { 0x1248, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_489)
{
    // 1F06D 0061;	
    // (🁭) DOMINO TILE VERTICAL-01-03	[1248 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06D, 0x0061 };
    uint32_t const ces[9] = { 0x1248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_490)
{
    // 1F06D 0041;	
    // (🁭) DOMINO TILE VERTICAL-01-03	[1248 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F06D, 0x0041 };
    uint32_t const ces[9] = { 0x1248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_491)
{
    // 1F06D 0062;	
    // (🁭) DOMINO TILE VERTICAL-01-03	[1248 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06D, 0x0062 };
    uint32_t const ces[9] = { 0x1248, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_492)
{
    // 1F06E 0021;	
    // (🁮) DOMINO TILE VERTICAL-01-04	[1249 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06E, 0x0021 };
    uint32_t const ces[9] = { 0x1249, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_493)
{
    // 1F06E 003F;	
    // (🁮) DOMINO TILE VERTICAL-01-04	[1249 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06E, 0x003F };
    uint32_t const ces[9] = { 0x1249, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_494)
{
    // 1F06E 0061;	
    // (🁮) DOMINO TILE VERTICAL-01-04	[1249 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06E, 0x0061 };
    uint32_t const ces[9] = { 0x1249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_495)
{
    // 1F06E 0041;	
    // (🁮) DOMINO TILE VERTICAL-01-04	[1249 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F06E, 0x0041 };
    uint32_t const ces[9] = { 0x1249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_496)
{
    // 1F06E 0062;	
    // (🁮) DOMINO TILE VERTICAL-01-04	[1249 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06E, 0x0062 };
    uint32_t const ces[9] = { 0x1249, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_497)
{
    // 1F06F 0021;	
    // (🁯) DOMINO TILE VERTICAL-01-05	[124A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06F, 0x0021 };
    uint32_t const ces[9] = { 0x124A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_498)
{
    // 1F06F 003F;	
    // (🁯) DOMINO TILE VERTICAL-01-05	[124A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06F, 0x003F };
    uint32_t const ces[9] = { 0x124A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_053_499)
{
    // 1F06F 0061;	
    // (🁯) DOMINO TILE VERTICAL-01-05	[124A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F06F, 0x0061 };
    uint32_t const ces[9] = { 0x124A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

