// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_098_000)
{
    // 24B6 0021;	
    // (Ⓐ) CIRCLED LATIN CAPITAL LETTER A	[1CAD 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24B6, 0x0021 };
    uint32_t const ces[9] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_001)
{
    // 1F150 0021;	
    // (🅐) NEGATIVE CIRCLED LATIN CAPITAL LETTER A	[1CAD 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F150, 0x0021 };
    uint32_t const ces[9] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_002)
{
    // 00AA 0021;	
    // (ª) FEMININE ORDINAL INDICATOR	[1CAD 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00AA, 0x0021 };
    uint32_t const ces[9] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_003)
{
    // 1D43 0021;	
    // (ᵃ) MODIFIER LETTER SMALL A	[1CAD 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D43, 0x0021 };
    uint32_t const ces[9] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_004)
{
    // 2090 0021;	
    // (ₐ) LATIN SUBSCRIPT SMALL LETTER A	[1CAD 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2090, 0x0021 };
    uint32_t const ces[9] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_005)
{
    // 1D2C 0021;	
    // (ᴬ) MODIFIER LETTER CAPITAL A	[1CAD 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D2C, 0x0021 };
    uint32_t const ces[9] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_006)
{
    // 1F130 0021;	
    // (🄰) SQUARED LATIN CAPITAL LETTER A	[1CAD 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F130, 0x0021 };
    uint32_t const ces[9] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_007)
{
    // 1F170 0021;	
    // (🅰) NEGATIVE SQUARED LATIN CAPITAL LETTER A	[1CAD 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F170, 0x0021 };
    uint32_t const ces[9] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_008)
{
    // 00E1 0021;	
    // (á) LATIN SMALL LETTER A WITH ACUTE	[1CAD 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E1, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_009)
{
    // 00C1 0021;	
    // (Á) LATIN CAPITAL LETTER A WITH ACUTE	[1CAD 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C1, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_010)
{
    // 00E0 0021;	
    // (à) LATIN SMALL LETTER A WITH GRAVE	[1CAD 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E0, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_011)
{
    // 00C0 0021;	
    // (À) LATIN CAPITAL LETTER A WITH GRAVE	[1CAD 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C0, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_012)
{
    // 0103 0021;	
    // (ă) LATIN SMALL LETTER A WITH BREVE	[1CAD 0261 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0103, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_013)
{
    // 0102 0021;	
    // (Ă) LATIN CAPITAL LETTER A WITH BREVE	[1CAD 0261 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0102, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_014)
{
    // 1EAF 0021;	
    // (ắ) LATIN SMALL LETTER A WITH BREVE AND ACUTE	[1CAD 0261 | 0020 0026 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAF, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_015)
{
    // 1EAE 0021;	
    // (Ắ) LATIN CAPITAL LETTER A WITH BREVE AND ACUTE	[1CAD 0261 | 0020 0026 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAE, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_016)
{
    // 1EB1 0021;	
    // (ằ) LATIN SMALL LETTER A WITH BREVE AND GRAVE	[1CAD 0261 | 0020 0026 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB1, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_017)
{
    // 1EB0 0021;	
    // (Ằ) LATIN CAPITAL LETTER A WITH BREVE AND GRAVE	[1CAD 0261 | 0020 0026 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB0, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_018)
{
    // 1EB5 0021;	
    // (ẵ) LATIN SMALL LETTER A WITH BREVE AND TILDE	[1CAD 0261 | 0020 0026 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB5, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_019)
{
    // 1EB4 0021;	
    // (Ẵ) LATIN CAPITAL LETTER A WITH BREVE AND TILDE	[1CAD 0261 | 0020 0026 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB4, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_020)
{
    // 1EB3 0021;	
    // (ẳ) LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 0261 | 0020 0026 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB3, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_021)
{
    // 1EB2 0021;	
    // (Ẳ) LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 0261 | 0020 0026 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB2, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_022)
{
    // 00E2 0021;	
    // (â) LATIN SMALL LETTER A WITH CIRCUMFLEX	[1CAD 0261 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E2, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_023)
{
    // 00C2 0021;	
    // (Â) LATIN CAPITAL LETTER A WITH CIRCUMFLEX	[1CAD 0261 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C2, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_024)
{
    // 1EA5 0021;	
    // (ấ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 0261 | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA5, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_025)
{
    // 1EA4 0021;	
    // (Ấ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 0261 | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA4, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_026)
{
    // 1EA7 0021;	
    // (ầ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 0261 | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA7, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_027)
{
    // 1EA6 0021;	
    // (Ầ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 0261 | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA6, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_028)
{
    // 1EAB 0021;	
    // (ẫ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 0261 | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAB, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_029)
{
    // 1EAA 0021;	
    // (Ẫ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 0261 | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAA, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_030)
{
    // 1EA9 0021;	
    // (ẩ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 0261 | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA9, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_031)
{
    // 1EA8 0021;	
    // (Ẩ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 0261 | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA8, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_032)
{
    // 01CE 0021;	
    // (ǎ) LATIN SMALL LETTER A WITH CARON	[1CAD 0261 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01CE, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_033)
{
    // 01CD 0021;	
    // (Ǎ) LATIN CAPITAL LETTER A WITH CARON	[1CAD 0261 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CD, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_034)
{
    // 00E5 0021;	
    // (å) LATIN SMALL LETTER A WITH RING ABOVE	[1CAD 0261 | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E5, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_035)
{
    // 00C5 0021;	
    // (Å) LATIN CAPITAL LETTER A WITH RING ABOVE	[1CAD 0261 | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C5, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_036)
{
    // 212B 0021;	
    // (Å) ANGSTROM SIGN	[1CAD 0261 | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x212B, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_037)
{
    // 01FB 0021;	
    // (ǻ) LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 0261 | 0020 0029 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FB, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_038)
{
    // 01FA 0021;	
    // (Ǻ) LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 0261 | 0020 0029 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FA, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_039)
{
    // 00E4 0021;	
    // (ä) LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E4, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_040)
{
    // 1DF2 0021;	
    // (ᷲ) COMBINING LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 0261 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF2, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_041)
{
    // A79B 0021;	
    // (ꞛ) LATIN SMALL LETTER VOLAPUK AE	[1CAD 0261 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA79B, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_042)
{
    // 00C4 0021;	
    // (Ä) LATIN CAPITAL LETTER A WITH DIAERESIS	[1CAD 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C4, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_043)
{
    // A79A 0021;	
    // (Ꞛ) LATIN CAPITAL LETTER VOLAPUK AE	[1CAD 0261 | 0020 002B 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA79A, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_044)
{
    // 01DF 0021;	
    // (ǟ) LATIN SMALL LETTER A WITH DIAERESIS AND MACRON	[1CAD 0261 | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DF, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_045)
{
    // 01DE 0021;	
    // (Ǟ) LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON	[1CAD 0261 | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DE, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_046)
{
    // 00E3 0021;	
    // (ã) LATIN SMALL LETTER A WITH TILDE	[1CAD 0261 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E3, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_047)
{
    // 00C3 0021;	
    // (Ã) LATIN CAPITAL LETTER A WITH TILDE	[1CAD 0261 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C3, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_048)
{
    // 0227 0021;	
    // (ȧ) LATIN SMALL LETTER A WITH DOT ABOVE	[1CAD 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0227, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_049)
{
    // 0226 0021;	
    // (Ȧ) LATIN CAPITAL LETTER A WITH DOT ABOVE	[1CAD 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0226, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_050)
{
    // 01E1 0021;	
    // (ǡ) LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 0261 | 0020 002E 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E1, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_051)
{
    // 01E0 0021;	
    // (Ǡ) LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 0261 | 0020 002E 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E0, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_052)
{
    // 0105 0021;	
    // (ą) LATIN SMALL LETTER A WITH OGONEK	[1CAD 0261 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0105, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_053)
{
    // 0104 0021;	
    // (Ą) LATIN CAPITAL LETTER A WITH OGONEK	[1CAD 0261 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0104, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_054)
{
    // 0101 0021;	
    // (ā) LATIN SMALL LETTER A WITH MACRON	[1CAD 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0101, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_055)
{
    // 0100 0021;	
    // (Ā) LATIN CAPITAL LETTER A WITH MACRON	[1CAD 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0100, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_056)
{
    // 1EA3 0021;	
    // (ả) LATIN SMALL LETTER A WITH HOOK ABOVE	[1CAD 0261 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA3, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_057)
{
    // 1EA2 0021;	
    // (Ả) LATIN CAPITAL LETTER A WITH HOOK ABOVE	[1CAD 0261 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EA2, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_058)
{
    // 0201 0021;	
    // (ȁ) LATIN SMALL LETTER A WITH DOUBLE GRAVE	[1CAD 0261 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0201, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_059)
{
    // 0200 0021;	
    // (Ȁ) LATIN CAPITAL LETTER A WITH DOUBLE GRAVE	[1CAD 0261 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0200, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_060)
{
    // 0203 0021;	
    // (ȃ) LATIN SMALL LETTER A WITH INVERTED BREVE	[1CAD 0261 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0203, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_061)
{
    // 0202 0021;	
    // (Ȃ) LATIN CAPITAL LETTER A WITH INVERTED BREVE	[1CAD 0261 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0202, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_062)
{
    // 1EA1 0021;	
    // (ạ) LATIN SMALL LETTER A WITH DOT BELOW	[1CAD 0261 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA1, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_063)
{
    // 1EA0 0021;	
    // (Ạ) LATIN CAPITAL LETTER A WITH DOT BELOW	[1CAD 0261 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EA0, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_064)
{
    // 1EB7 0021;	
    // (ặ) LATIN SMALL LETTER A WITH BREVE AND DOT BELOW	[1CAD 0261 | 0020 0042 0026 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB7, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0042, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_065)
{
    // 1EB6 0021;	
    // (Ặ) LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW	[1CAD 0261 | 0020 0042 0026 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB6, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0042, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_066)
{
    // 1EAD 0021;	
    // (ậ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW	[1CAD 0261 | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAD, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_067)
{
    // 1EAC 0021;	
    // (Ậ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW	[1CAD 0261 | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAC, 0x0021 };
    uint32_t const ces[13] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_068)
{
    // 1E01 0021;	
    // (ḁ) LATIN SMALL LETTER A WITH RING BELOW	[1CAD 0261 | 0020 0044 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E01, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0044, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_069)
{
    // 1E00 0021;	
    // (Ḁ) LATIN CAPITAL LETTER A WITH RING BELOW	[1CAD 0261 | 0020 0044 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E00, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0044, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_070)
{
    // 1DD3 0021;	
    // (ᷓ) COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE	[1CAD 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DD3, 0x0021 };
    uint32_t const ces[11] = { 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_071)
{
    // 0061 003F;	
    // (a) LATIN SMALL LETTER A	[1CAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0061, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_072)
{
    // FF41 003F;	
    // (ａ) FULLWIDTH LATIN SMALL LETTER A	[1CAD 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF41, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_073)
{
    // 0363 003F;	
    // (ͣ) COMBINING LATIN SMALL LETTER A	[1CAD 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0363, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_074)
{
    // 1D41A 003F;	
    // (𝐚) MATHEMATICAL BOLD SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41A, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_075)
{
    // 1D44E 003F;	
    // (𝑎) MATHEMATICAL ITALIC SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D44E, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_076)
{
    // 1D482 003F;	
    // (𝒂) MATHEMATICAL BOLD ITALIC SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D482, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_077)
{
    // 1D4B6 003F;	
    // (𝒶) MATHEMATICAL SCRIPT SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4B6, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_078)
{
    // 1D4EA 003F;	
    // (𝓪) MATHEMATICAL BOLD SCRIPT SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EA, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_079)
{
    // 1D51E 003F;	
    // (𝔞) MATHEMATICAL FRAKTUR SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D51E, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_080)
{
    // 1D552 003F;	
    // (𝕒) MATHEMATICAL DOUBLE-STRUCK SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D552, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_081)
{
    // 1D586 003F;	
    // (𝖆) MATHEMATICAL BOLD FRAKTUR SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D586, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_082)
{
    // 1D5BA 003F;	
    // (𝖺) MATHEMATICAL SANS-SERIF SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BA, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_083)
{
    // 1D5EE 003F;	
    // (𝗮) MATHEMATICAL SANS-SERIF BOLD SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5EE, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_084)
{
    // 1D622 003F;	
    // (𝘢) MATHEMATICAL SANS-SERIF ITALIC SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D622, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_085)
{
    // 1D656 003F;	
    // (𝙖) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D656, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_086)
{
    // 1D68A 003F;	
    // (𝚊) MATHEMATICAL MONOSPACE SMALL A	[1CAD 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68A, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_087)
{
    // 24D0 003F;	
    // (ⓐ) CIRCLED LATIN SMALL LETTER A	[1CAD 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D0, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_088)
{
    // 0041 003F;	
    // (A) LATIN CAPITAL LETTER A	[1CAD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0041, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_089)
{
    // FF21 003F;	
    // (Ａ) FULLWIDTH LATIN CAPITAL LETTER A	[1CAD 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF21, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_090)
{
    // 1D400 003F;	
    // (𝐀) MATHEMATICAL BOLD CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D400, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_091)
{
    // 1D434 003F;	
    // (𝐴) MATHEMATICAL ITALIC CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D434, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_092)
{
    // 1D468 003F;	
    // (𝑨) MATHEMATICAL BOLD ITALIC CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D468, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_093)
{
    // 1D49C 003F;	
    // (𝒜) MATHEMATICAL SCRIPT CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D49C, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_094)
{
    // 1D4D0 003F;	
    // (𝓐) MATHEMATICAL BOLD SCRIPT CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D0, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_095)
{
    // 1D504 003F;	
    // (𝔄) MATHEMATICAL FRAKTUR CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D504, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_096)
{
    // 1D538 003F;	
    // (𝔸) MATHEMATICAL DOUBLE-STRUCK CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D538, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_097)
{
    // 1D56C 003F;	
    // (𝕬) MATHEMATICAL BOLD FRAKTUR CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D56C, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_098)
{
    // 1D5A0 003F;	
    // (𝖠) MATHEMATICAL SANS-SERIF CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A0, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_099)
{
    // 1D5D4 003F;	
    // (𝗔) MATHEMATICAL SANS-SERIF BOLD CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D4, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_100)
{
    // 1D608 003F;	
    // (𝘈) MATHEMATICAL SANS-SERIF ITALIC CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D608, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_101)
{
    // 1D63C 003F;	
    // (𝘼) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D63C, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_102)
{
    // 1D670 003F;	
    // (𝙰) MATHEMATICAL MONOSPACE CAPITAL A	[1CAD 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D670, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_103)
{
    // 24B6 003F;	
    // (Ⓐ) CIRCLED LATIN CAPITAL LETTER A	[1CAD 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24B6, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_104)
{
    // 1F150 003F;	
    // (🅐) NEGATIVE CIRCLED LATIN CAPITAL LETTER A	[1CAD 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F150, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_105)
{
    // 00AA 003F;	
    // (ª) FEMININE ORDINAL INDICATOR	[1CAD 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00AA, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_106)
{
    // 1D43 003F;	
    // (ᵃ) MODIFIER LETTER SMALL A	[1CAD 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D43, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_107)
{
    // 2090 003F;	
    // (ₐ) LATIN SUBSCRIPT SMALL LETTER A	[1CAD 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2090, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_108)
{
    // 1D2C 003F;	
    // (ᴬ) MODIFIER LETTER CAPITAL A	[1CAD 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D2C, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_109)
{
    // 1F130 003F;	
    // (🄰) SQUARED LATIN CAPITAL LETTER A	[1CAD 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F130, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_110)
{
    // 1F170 003F;	
    // (🅰) NEGATIVE SQUARED LATIN CAPITAL LETTER A	[1CAD 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F170, 0x003F };
    uint32_t const ces[9] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_111)
{
    // 00E1 003F;	
    // (á) LATIN SMALL LETTER A WITH ACUTE	[1CAD 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E1, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_112)
{
    // 00C1 003F;	
    // (Á) LATIN CAPITAL LETTER A WITH ACUTE	[1CAD 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C1, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_113)
{
    // 00E0 003F;	
    // (à) LATIN SMALL LETTER A WITH GRAVE	[1CAD 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E0, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_114)
{
    // 00C0 003F;	
    // (À) LATIN CAPITAL LETTER A WITH GRAVE	[1CAD 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C0, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_115)
{
    // 0103 003F;	
    // (ă) LATIN SMALL LETTER A WITH BREVE	[1CAD 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0103, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_116)
{
    // 0102 003F;	
    // (Ă) LATIN CAPITAL LETTER A WITH BREVE	[1CAD 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0102, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_117)
{
    // 1EAF 003F;	
    // (ắ) LATIN SMALL LETTER A WITH BREVE AND ACUTE	[1CAD 0267 | 0020 0026 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAF, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_118)
{
    // 1EAE 003F;	
    // (Ắ) LATIN CAPITAL LETTER A WITH BREVE AND ACUTE	[1CAD 0267 | 0020 0026 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAE, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_119)
{
    // 1EB1 003F;	
    // (ằ) LATIN SMALL LETTER A WITH BREVE AND GRAVE	[1CAD 0267 | 0020 0026 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB1, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_120)
{
    // 1EB0 003F;	
    // (Ằ) LATIN CAPITAL LETTER A WITH BREVE AND GRAVE	[1CAD 0267 | 0020 0026 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB0, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_121)
{
    // 1EB5 003F;	
    // (ẵ) LATIN SMALL LETTER A WITH BREVE AND TILDE	[1CAD 0267 | 0020 0026 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB5, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_122)
{
    // 1EB4 003F;	
    // (Ẵ) LATIN CAPITAL LETTER A WITH BREVE AND TILDE	[1CAD 0267 | 0020 0026 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB4, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_123)
{
    // 1EB3 003F;	
    // (ẳ) LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 0267 | 0020 0026 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB3, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_124)
{
    // 1EB2 003F;	
    // (Ẳ) LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 0267 | 0020 0026 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB2, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_125)
{
    // 00E2 003F;	
    // (â) LATIN SMALL LETTER A WITH CIRCUMFLEX	[1CAD 0267 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E2, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_126)
{
    // 00C2 003F;	
    // (Â) LATIN CAPITAL LETTER A WITH CIRCUMFLEX	[1CAD 0267 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C2, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_127)
{
    // 1EA5 003F;	
    // (ấ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 0267 | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA5, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_128)
{
    // 1EA4 003F;	
    // (Ấ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 0267 | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA4, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_129)
{
    // 1EA7 003F;	
    // (ầ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 0267 | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA7, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_130)
{
    // 1EA6 003F;	
    // (Ầ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 0267 | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA6, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_131)
{
    // 1EAB 003F;	
    // (ẫ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 0267 | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAB, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_132)
{
    // 1EAA 003F;	
    // (Ẫ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 0267 | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAA, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_133)
{
    // 1EA9 003F;	
    // (ẩ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 0267 | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA9, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_134)
{
    // 1EA8 003F;	
    // (Ẩ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 0267 | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA8, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_135)
{
    // 01CE 003F;	
    // (ǎ) LATIN SMALL LETTER A WITH CARON	[1CAD 0267 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01CE, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_136)
{
    // 01CD 003F;	
    // (Ǎ) LATIN CAPITAL LETTER A WITH CARON	[1CAD 0267 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CD, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_137)
{
    // 00E5 003F;	
    // (å) LATIN SMALL LETTER A WITH RING ABOVE	[1CAD 0267 | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E5, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_138)
{
    // 00C5 003F;	
    // (Å) LATIN CAPITAL LETTER A WITH RING ABOVE	[1CAD 0267 | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C5, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_139)
{
    // 212B 003F;	
    // (Å) ANGSTROM SIGN	[1CAD 0267 | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x212B, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_140)
{
    // 01FB 003F;	
    // (ǻ) LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 0267 | 0020 0029 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FB, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_141)
{
    // 01FA 003F;	
    // (Ǻ) LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 0267 | 0020 0029 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FA, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_142)
{
    // 00E4 003F;	
    // (ä) LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E4, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_143)
{
    // 1DF2 003F;	
    // (ᷲ) COMBINING LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 0267 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF2, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_144)
{
    // A79B 003F;	
    // (ꞛ) LATIN SMALL LETTER VOLAPUK AE	[1CAD 0267 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA79B, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_145)
{
    // 00C4 003F;	
    // (Ä) LATIN CAPITAL LETTER A WITH DIAERESIS	[1CAD 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C4, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_146)
{
    // A79A 003F;	
    // (Ꞛ) LATIN CAPITAL LETTER VOLAPUK AE	[1CAD 0267 | 0020 002B 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA79A, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_147)
{
    // 01DF 003F;	
    // (ǟ) LATIN SMALL LETTER A WITH DIAERESIS AND MACRON	[1CAD 0267 | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DF, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_148)
{
    // 01DE 003F;	
    // (Ǟ) LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON	[1CAD 0267 | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DE, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_149)
{
    // 00E3 003F;	
    // (ã) LATIN SMALL LETTER A WITH TILDE	[1CAD 0267 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E3, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_150)
{
    // 00C3 003F;	
    // (Ã) LATIN CAPITAL LETTER A WITH TILDE	[1CAD 0267 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C3, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_151)
{
    // 0227 003F;	
    // (ȧ) LATIN SMALL LETTER A WITH DOT ABOVE	[1CAD 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0227, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_152)
{
    // 0226 003F;	
    // (Ȧ) LATIN CAPITAL LETTER A WITH DOT ABOVE	[1CAD 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0226, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_153)
{
    // 01E1 003F;	
    // (ǡ) LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 0267 | 0020 002E 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E1, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_154)
{
    // 01E0 003F;	
    // (Ǡ) LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 0267 | 0020 002E 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E0, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_155)
{
    // 0105 003F;	
    // (ą) LATIN SMALL LETTER A WITH OGONEK	[1CAD 0267 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0105, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_156)
{
    // 0104 003F;	
    // (Ą) LATIN CAPITAL LETTER A WITH OGONEK	[1CAD 0267 | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0104, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_157)
{
    // 0101 003F;	
    // (ā) LATIN SMALL LETTER A WITH MACRON	[1CAD 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0101, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_158)
{
    // 0100 003F;	
    // (Ā) LATIN CAPITAL LETTER A WITH MACRON	[1CAD 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0100, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_159)
{
    // 1EA3 003F;	
    // (ả) LATIN SMALL LETTER A WITH HOOK ABOVE	[1CAD 0267 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA3, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_160)
{
    // 1EA2 003F;	
    // (Ả) LATIN CAPITAL LETTER A WITH HOOK ABOVE	[1CAD 0267 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EA2, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_161)
{
    // 0201 003F;	
    // (ȁ) LATIN SMALL LETTER A WITH DOUBLE GRAVE	[1CAD 0267 | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0201, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_162)
{
    // 0200 003F;	
    // (Ȁ) LATIN CAPITAL LETTER A WITH DOUBLE GRAVE	[1CAD 0267 | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0200, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_163)
{
    // 0203 003F;	
    // (ȃ) LATIN SMALL LETTER A WITH INVERTED BREVE	[1CAD 0267 | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0203, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_164)
{
    // 0202 003F;	
    // (Ȃ) LATIN CAPITAL LETTER A WITH INVERTED BREVE	[1CAD 0267 | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0202, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_165)
{
    // 1EA1 003F;	
    // (ạ) LATIN SMALL LETTER A WITH DOT BELOW	[1CAD 0267 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA1, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_166)
{
    // 1EA0 003F;	
    // (Ạ) LATIN CAPITAL LETTER A WITH DOT BELOW	[1CAD 0267 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EA0, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_167)
{
    // 1EB7 003F;	
    // (ặ) LATIN SMALL LETTER A WITH BREVE AND DOT BELOW	[1CAD 0267 | 0020 0042 0026 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB7, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0042, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_168)
{
    // 1EB6 003F;	
    // (Ặ) LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW	[1CAD 0267 | 0020 0042 0026 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB6, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0042, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_169)
{
    // 1EAD 003F;	
    // (ậ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW	[1CAD 0267 | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAD, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_170)
{
    // 1EAC 003F;	
    // (Ậ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW	[1CAD 0267 | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAC, 0x003F };
    uint32_t const ces[13] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_171)
{
    // 1E01 003F;	
    // (ḁ) LATIN SMALL LETTER A WITH RING BELOW	[1CAD 0267 | 0020 0044 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E01, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0044, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_172)
{
    // 1E00 003F;	
    // (Ḁ) LATIN CAPITAL LETTER A WITH RING BELOW	[1CAD 0267 | 0020 0044 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E00, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0044, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_173)
{
    // 1DD3 003F;	
    // (ᷓ) COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE	[1CAD 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DD3, 0x003F };
    uint32_t const ces[11] = { 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_174)
{
    // 33C2 0021;	
    // (㏂) SQUARE AM	[1CAD 0278 1E10 0278 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33C2, 0x0021 };
    uint32_t const ces[18] = { 0x1CAD, 0x0278, 0x1E10, 0x0278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_175)
{
    // 33C2 003F;	
    // (㏂) SQUARE AM	[1CAD 0278 1E10 0278 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33C2, 0x003F };
    uint32_t const ces[18] = { 0x1CAD, 0x0278, 0x1E10, 0x0278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_176)
{
    // 33C2 0061;	
    // (㏂) SQUARE AM	[1CAD 0278 1E10 0278 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33C2, 0x0061 };
    uint32_t const ces[18] = { 0x1CAD, 0x0278, 0x1E10, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_177)
{
    // 33C2 0041;	
    // (㏂) SQUARE AM	[1CAD 0278 1E10 0278 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33C2, 0x0041 };
    uint32_t const ces[18] = { 0x1CAD, 0x0278, 0x1E10, 0x0278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_178)
{
    // 33C2 0062;	
    // (㏂) SQUARE AM	[1CAD 0278 1E10 0278 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33C2, 0x0062 };
    uint32_t const ces[18] = { 0x1CAD, 0x0278, 0x1E10, 0x0278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_179)
{
    // 2100 0021;	
    // (℀) ACCOUNT OF	[1CAD 0395 1CE0 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2100, 0x0021 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1CE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_180)
{
    // 2100 003F;	
    // (℀) ACCOUNT OF	[1CAD 0395 1CE0 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2100, 0x003F };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1CE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_181)
{
    // 2100 0061;	
    // (℀) ACCOUNT OF	[1CAD 0395 1CE0 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2100, 0x0061 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_182)
{
    // 2100 0041;	
    // (℀) ACCOUNT OF	[1CAD 0395 1CE0 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2100, 0x0041 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1CE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_183)
{
    // 2100 0062;	
    // (℀) ACCOUNT OF	[1CAD 0395 1CE0 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2100, 0x0062 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1CE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_184)
{
    // 2101 0021;	
    // (℁) ADDRESSED TO THE SUBJECT	[1CAD 0395 1ED7 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2101, 0x0021 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_185)
{
    // 214D 0021;	
    // (⅍) AKTIESELSKAB	[1CAD 0395 1ED7 0261 | 0020 0020 0020 0020 | 000A 0004 000A 0002 |]

    uint32_t cps[2] = { 0x214D, 0x0021 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_186)
{
    // 2101 003F;	
    // (℁) ADDRESSED TO THE SUBJECT	[1CAD 0395 1ED7 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2101, 0x003F };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_187)
{
    // 214D 003F;	
    // (⅍) AKTIESELSKAB	[1CAD 0395 1ED7 0267 | 0020 0020 0020 0020 | 000A 0004 000A 0002 |]

    uint32_t cps[2] = { 0x214D, 0x003F };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_188)
{
    // 2101 0061;	
    // (℁) ADDRESSED TO THE SUBJECT	[1CAD 0395 1ED7 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2101, 0x0061 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_189)
{
    // 2101 0041;	
    // (℁) ADDRESSED TO THE SUBJECT	[1CAD 0395 1ED7 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2101, 0x0041 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_190)
{
    // 214D 0061;	
    // (⅍) AKTIESELSKAB	[1CAD 0395 1ED7 1CAD | 0020 0020 0020 0020 | 000A 0004 000A 0002 |]

    uint32_t cps[2] = { 0x214D, 0x0061 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_191)
{
    // 214D 0041;	
    // (⅍) AKTIESELSKAB	[1CAD 0395 1ED7 1CAD | 0020 0020 0020 0020 | 000A 0004 000A 0008 |]

    uint32_t cps[2] = { 0x214D, 0x0041 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_192)
{
    // 2101 0062;	
    // (℁) ADDRESSED TO THE SUBJECT	[1CAD 0395 1ED7 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2101, 0x0062 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_193)
{
    // 214D 0062;	
    // (⅍) AKTIESELSKAB	[1CAD 0395 1ED7 1CC6 | 0020 0020 0020 0020 | 000A 0004 000A 0002 |]

    uint32_t cps[2] = { 0x214D, 0x0062 };
    uint32_t const ces[15] = { 0x1CAD, 0x0395, 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_194)
{
    // 33DF 0021;	
    // (㏟) SQUARE A OVER M	[1CAD 063B 1E10 0261 | 0020 0020 0020 0020 | 001D 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33DF, 0x0021 };
    uint32_t const ces[15] = { 0x1CAD, 0x063B, 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_195)
{
    // 33DF 003F;	
    // (㏟) SQUARE A OVER M	[1CAD 063B 1E10 0267 | 0020 0020 0020 0020 | 001D 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33DF, 0x003F };
    uint32_t const ces[15] = { 0x1CAD, 0x063B, 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_196)
{
    // 33DF 0061;	
    // (㏟) SQUARE A OVER M	[1CAD 063B 1E10 1CAD | 0020 0020 0020 0020 | 001D 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33DF, 0x0061 };
    uint32_t const ces[15] = { 0x1CAD, 0x063B, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_197)
{
    // 33DF 0041;	
    // (㏟) SQUARE A OVER M	[1CAD 063B 1E10 1CAD | 0020 0020 0020 0020 | 001D 001C 001C 0008 |]

    uint32_t cps[2] = { 0x33DF, 0x0041 };
    uint32_t const ces[15] = { 0x1CAD, 0x063B, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_198)
{
    // 33DF 0062;	
    // (㏟) SQUARE A OVER M	[1CAD 063B 1E10 1CC6 | 0020 0020 0020 0020 | 001D 001C 001C 0002 |]

    uint32_t cps[2] = { 0x33DF, 0x0062 };
    uint32_t const ces[15] = { 0x1CAD, 0x063B, 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_199)
{
    // 0061 0061;	
    // (a) LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0061, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_200)
{
    // 0061 0041;	
    // (a) LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0061, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_201)
{
    // FF41 0061;	
    // (ａ) FULLWIDTH LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF41, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_202)
{
    // FF41 0041;	
    // (ａ) FULLWIDTH LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF41, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_203)
{
    // 0363 0061;	
    // (ͣ) COMBINING LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0363, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_204)
{
    // 0363 0041;	
    // (ͣ) COMBINING LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x0363, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_205)
{
    // 1D41A 0061;	
    // (𝐚) MATHEMATICAL BOLD SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41A, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_206)
{
    // 1D44E 0061;	
    // (𝑎) MATHEMATICAL ITALIC SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D44E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_207)
{
    // 1D482 0061;	
    // (𝒂) MATHEMATICAL BOLD ITALIC SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D482, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_208)
{
    // 1D4B6 0061;	
    // (𝒶) MATHEMATICAL SCRIPT SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4B6, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_209)
{
    // 1D4EA 0061;	
    // (𝓪) MATHEMATICAL BOLD SCRIPT SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EA, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_210)
{
    // 1D51E 0061;	
    // (𝔞) MATHEMATICAL FRAKTUR SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D51E, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_211)
{
    // 1D552 0061;	
    // (𝕒) MATHEMATICAL DOUBLE-STRUCK SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D552, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_212)
{
    // 1D586 0061;	
    // (𝖆) MATHEMATICAL BOLD FRAKTUR SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D586, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_213)
{
    // 1D5BA 0061;	
    // (𝖺) MATHEMATICAL SANS-SERIF SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BA, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_214)
{
    // 1D5EE 0061;	
    // (𝗮) MATHEMATICAL SANS-SERIF BOLD SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5EE, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_215)
{
    // 1D622 0061;	
    // (𝘢) MATHEMATICAL SANS-SERIF ITALIC SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D622, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_216)
{
    // 1D656 0061;	
    // (𝙖) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D656, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_217)
{
    // 1D68A 0061;	
    // (𝚊) MATHEMATICAL MONOSPACE SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68A, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_218)
{
    // 1D41A 0041;	
    // (𝐚) MATHEMATICAL BOLD SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D41A, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_219)
{
    // 1D44E 0041;	
    // (𝑎) MATHEMATICAL ITALIC SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D44E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_220)
{
    // 1D482 0041;	
    // (𝒂) MATHEMATICAL BOLD ITALIC SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D482, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_221)
{
    // 1D4B6 0041;	
    // (𝒶) MATHEMATICAL SCRIPT SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4B6, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_222)
{
    // 1D4EA 0041;	
    // (𝓪) MATHEMATICAL BOLD SCRIPT SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4EA, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_223)
{
    // 1D51E 0041;	
    // (𝔞) MATHEMATICAL FRAKTUR SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D51E, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_224)
{
    // 1D552 0041;	
    // (𝕒) MATHEMATICAL DOUBLE-STRUCK SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D552, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_225)
{
    // 1D586 0041;	
    // (𝖆) MATHEMATICAL BOLD FRAKTUR SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D586, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_226)
{
    // 1D5BA 0041;	
    // (𝖺) MATHEMATICAL SANS-SERIF SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5BA, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_227)
{
    // 1D5EE 0041;	
    // (𝗮) MATHEMATICAL SANS-SERIF BOLD SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5EE, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_228)
{
    // 1D622 0041;	
    // (𝘢) MATHEMATICAL SANS-SERIF ITALIC SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D622, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_229)
{
    // 1D656 0041;	
    // (𝙖) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D656, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_230)
{
    // 1D68A 0041;	
    // (𝚊) MATHEMATICAL MONOSPACE SMALL A	[1CAD 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D68A, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_231)
{
    // 24D0 0061;	
    // (ⓐ) CIRCLED LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D0, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_232)
{
    // 24D0 0041;	
    // (ⓐ) CIRCLED LATIN SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24D0, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_233)
{
    // 0041 0061;	
    // (A) LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0041, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_234)
{
    // 0041 0041;	
    // (A) LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0041, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_235)
{
    // FF21 0061;	
    // (Ａ) FULLWIDTH LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF21, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_236)
{
    // FF21 0041;	
    // (Ａ) FULLWIDTH LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF21, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_237)
{
    // 1D400 0061;	
    // (𝐀) MATHEMATICAL BOLD CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D400, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_238)
{
    // 1D434 0061;	
    // (𝐴) MATHEMATICAL ITALIC CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D434, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_239)
{
    // 1D468 0061;	
    // (𝑨) MATHEMATICAL BOLD ITALIC CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D468, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_240)
{
    // 1D49C 0061;	
    // (𝒜) MATHEMATICAL SCRIPT CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D49C, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_241)
{
    // 1D4D0 0061;	
    // (𝓐) MATHEMATICAL BOLD SCRIPT CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D0, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_242)
{
    // 1D504 0061;	
    // (𝔄) MATHEMATICAL FRAKTUR CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D504, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_243)
{
    // 1D538 0061;	
    // (𝔸) MATHEMATICAL DOUBLE-STRUCK CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D538, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_244)
{
    // 1D56C 0061;	
    // (𝕬) MATHEMATICAL BOLD FRAKTUR CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D56C, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_245)
{
    // 1D5A0 0061;	
    // (𝖠) MATHEMATICAL SANS-SERIF CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A0, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_246)
{
    // 1D5D4 0061;	
    // (𝗔) MATHEMATICAL SANS-SERIF BOLD CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D4, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_247)
{
    // 1D608 0061;	
    // (𝘈) MATHEMATICAL SANS-SERIF ITALIC CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D608, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_248)
{
    // 1D63C 0061;	
    // (𝘼) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D63C, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_249)
{
    // 1D670 0061;	
    // (𝙰) MATHEMATICAL MONOSPACE CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D670, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_250)
{
    // 1D400 0041;	
    // (𝐀) MATHEMATICAL BOLD CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D400, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_251)
{
    // 1D434 0041;	
    // (𝐴) MATHEMATICAL ITALIC CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D434, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_252)
{
    // 1D468 0041;	
    // (𝑨) MATHEMATICAL BOLD ITALIC CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D468, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_253)
{
    // 1D49C 0041;	
    // (𝒜) MATHEMATICAL SCRIPT CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D49C, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_254)
{
    // 1D4D0 0041;	
    // (𝓐) MATHEMATICAL BOLD SCRIPT CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4D0, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_255)
{
    // 1D504 0041;	
    // (𝔄) MATHEMATICAL FRAKTUR CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D504, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_256)
{
    // 1D538 0041;	
    // (𝔸) MATHEMATICAL DOUBLE-STRUCK CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D538, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_257)
{
    // 1D56C 0041;	
    // (𝕬) MATHEMATICAL BOLD FRAKTUR CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D56C, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_258)
{
    // 1D5A0 0041;	
    // (𝖠) MATHEMATICAL SANS-SERIF CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5A0, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_259)
{
    // 1D5D4 0041;	
    // (𝗔) MATHEMATICAL SANS-SERIF BOLD CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5D4, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_260)
{
    // 1D608 0041;	
    // (𝘈) MATHEMATICAL SANS-SERIF ITALIC CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D608, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_261)
{
    // 1D63C 0041;	
    // (𝘼) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D63C, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_262)
{
    // 1D670 0041;	
    // (𝙰) MATHEMATICAL MONOSPACE CAPITAL A	[1CAD 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D670, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_263)
{
    // 24B6 0061;	
    // (Ⓐ) CIRCLED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24B6, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_264)
{
    // 1F150 0061;	
    // (🅐) NEGATIVE CIRCLED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F150, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_265)
{
    // 24B6 0041;	
    // (Ⓐ) CIRCLED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24B6, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_266)
{
    // 1F150 0041;	
    // (🅐) NEGATIVE CIRCLED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F150, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_267)
{
    // 00AA 0061;	
    // (ª) FEMININE ORDINAL INDICATOR	[1CAD 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00AA, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_268)
{
    // 1D43 0061;	
    // (ᵃ) MODIFIER LETTER SMALL A	[1CAD 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D43, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_269)
{
    // 00AA 0041;	
    // (ª) FEMININE ORDINAL INDICATOR	[1CAD 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x00AA, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_270)
{
    // 1D43 0041;	
    // (ᵃ) MODIFIER LETTER SMALL A	[1CAD 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D43, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_271)
{
    // 2090 0061;	
    // (ₐ) LATIN SUBSCRIPT SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2090, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_272)
{
    // 2090 0041;	
    // (ₐ) LATIN SUBSCRIPT SMALL LETTER A	[1CAD 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2090, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_273)
{
    // 1D2C 0061;	
    // (ᴬ) MODIFIER LETTER CAPITAL A	[1CAD 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D2C, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_274)
{
    // 1F130 0061;	
    // (🄰) SQUARED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F130, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_275)
{
    // 1F170 0061;	
    // (🅰) NEGATIVE SQUARED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F170, 0x0061 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_276)
{
    // 1D2C 0041;	
    // (ᴬ) MODIFIER LETTER CAPITAL A	[1CAD 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1D2C, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_277)
{
    // 1F130 0041;	
    // (🄰) SQUARED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F130, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_278)
{
    // 1F170 0041;	
    // (🅰) NEGATIVE SQUARED LATIN CAPITAL LETTER A	[1CAD 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F170, 0x0041 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_279)
{
    // 00E1 0061;	
    // (á) LATIN SMALL LETTER A WITH ACUTE	[1CAD 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E1, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_280)
{
    // 00E1 0041;	
    // (á) LATIN SMALL LETTER A WITH ACUTE	[1CAD 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00E1, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_281)
{
    // 00C1 0061;	
    // (Á) LATIN CAPITAL LETTER A WITH ACUTE	[1CAD 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C1, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_282)
{
    // 00C1 0041;	
    // (Á) LATIN CAPITAL LETTER A WITH ACUTE	[1CAD 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00C1, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_283)
{
    // 00E0 0061;	
    // (à) LATIN SMALL LETTER A WITH GRAVE	[1CAD 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E0, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_284)
{
    // 00E0 0041;	
    // (à) LATIN SMALL LETTER A WITH GRAVE	[1CAD 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00E0, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_285)
{
    // 00C0 0061;	
    // (À) LATIN CAPITAL LETTER A WITH GRAVE	[1CAD 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C0, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_286)
{
    // 00C0 0041;	
    // (À) LATIN CAPITAL LETTER A WITH GRAVE	[1CAD 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00C0, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_287)
{
    // 0103 0061;	
    // (ă) LATIN SMALL LETTER A WITH BREVE	[1CAD 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0103, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_288)
{
    // 0103 0041;	
    // (ă) LATIN SMALL LETTER A WITH BREVE	[1CAD 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0103, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_289)
{
    // 0102 0061;	
    // (Ă) LATIN CAPITAL LETTER A WITH BREVE	[1CAD 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0102, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_290)
{
    // 0102 0041;	
    // (Ă) LATIN CAPITAL LETTER A WITH BREVE	[1CAD 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0102, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_291)
{
    // 1EAF 0061;	
    // (ắ) LATIN SMALL LETTER A WITH BREVE AND ACUTE	[1CAD 1CAD | 0020 0026 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAF, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_292)
{
    // 1EAF 0041;	
    // (ắ) LATIN SMALL LETTER A WITH BREVE AND ACUTE	[1CAD 1CAD | 0020 0026 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EAF, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_293)
{
    // 1EAE 0061;	
    // (Ắ) LATIN CAPITAL LETTER A WITH BREVE AND ACUTE	[1CAD 1CAD | 0020 0026 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAE, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_294)
{
    // 1EAE 0041;	
    // (Ắ) LATIN CAPITAL LETTER A WITH BREVE AND ACUTE	[1CAD 1CAD | 0020 0026 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EAE, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_295)
{
    // 1EB1 0061;	
    // (ằ) LATIN SMALL LETTER A WITH BREVE AND GRAVE	[1CAD 1CAD | 0020 0026 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB1, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_296)
{
    // 1EB1 0041;	
    // (ằ) LATIN SMALL LETTER A WITH BREVE AND GRAVE	[1CAD 1CAD | 0020 0026 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EB1, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_297)
{
    // 1EB0 0061;	
    // (Ằ) LATIN CAPITAL LETTER A WITH BREVE AND GRAVE	[1CAD 1CAD | 0020 0026 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB0, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_298)
{
    // 1EB0 0041;	
    // (Ằ) LATIN CAPITAL LETTER A WITH BREVE AND GRAVE	[1CAD 1CAD | 0020 0026 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EB0, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_299)
{
    // 1EB5 0061;	
    // (ẵ) LATIN SMALL LETTER A WITH BREVE AND TILDE	[1CAD 1CAD | 0020 0026 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB5, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_300)
{
    // 1EB5 0041;	
    // (ẵ) LATIN SMALL LETTER A WITH BREVE AND TILDE	[1CAD 1CAD | 0020 0026 002D 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EB5, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_301)
{
    // 1EB4 0061;	
    // (Ẵ) LATIN CAPITAL LETTER A WITH BREVE AND TILDE	[1CAD 1CAD | 0020 0026 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB4, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_302)
{
    // 1EB4 0041;	
    // (Ẵ) LATIN CAPITAL LETTER A WITH BREVE AND TILDE	[1CAD 1CAD | 0020 0026 002D 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EB4, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_303)
{
    // 1EB3 0061;	
    // (ẳ) LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 1CAD | 0020 0026 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB3, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_304)
{
    // 1EB3 0041;	
    // (ẳ) LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 1CAD | 0020 0026 003B 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EB3, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_305)
{
    // 1EB2 0061;	
    // (Ẳ) LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 1CAD | 0020 0026 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB2, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_306)
{
    // 1EB2 0041;	
    // (Ẳ) LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 1CAD | 0020 0026 003B 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EB2, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_307)
{
    // 00E2 0061;	
    // (â) LATIN SMALL LETTER A WITH CIRCUMFLEX	[1CAD 1CAD | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E2, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_308)
{
    // 00E2 0041;	
    // (â) LATIN SMALL LETTER A WITH CIRCUMFLEX	[1CAD 1CAD | 0020 0027 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00E2, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_309)
{
    // 00C2 0061;	
    // (Â) LATIN CAPITAL LETTER A WITH CIRCUMFLEX	[1CAD 1CAD | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C2, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_310)
{
    // 00C2 0041;	
    // (Â) LATIN CAPITAL LETTER A WITH CIRCUMFLEX	[1CAD 1CAD | 0020 0027 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00C2, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_311)
{
    // 1EA5 0061;	
    // (ấ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 1CAD | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA5, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_312)
{
    // 1EA5 0041;	
    // (ấ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 1CAD | 0020 0027 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EA5, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_313)
{
    // 1EA4 0061;	
    // (Ấ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 1CAD | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA4, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_314)
{
    // 1EA4 0041;	
    // (Ấ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 1CAD | 0020 0027 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EA4, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_315)
{
    // 1EA7 0061;	
    // (ầ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 1CAD | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA7, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_316)
{
    // 1EA7 0041;	
    // (ầ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 1CAD | 0020 0027 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EA7, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_317)
{
    // 1EA6 0061;	
    // (Ầ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 1CAD | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA6, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_318)
{
    // 1EA6 0041;	
    // (Ầ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 1CAD | 0020 0027 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EA6, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_319)
{
    // 1EAB 0061;	
    // (ẫ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 1CAD | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAB, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_320)
{
    // 1EAB 0041;	
    // (ẫ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 1CAD | 0020 0027 002D 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EAB, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_321)
{
    // 1EAA 0061;	
    // (Ẫ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 1CAD | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAA, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_322)
{
    // 1EAA 0041;	
    // (Ẫ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 1CAD | 0020 0027 002D 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EAA, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_323)
{
    // 1EA9 0061;	
    // (ẩ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 1CAD | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA9, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_324)
{
    // 1EA9 0041;	
    // (ẩ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 1CAD | 0020 0027 003B 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EA9, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_325)
{
    // 1EA8 0061;	
    // (Ẩ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 1CAD | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA8, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_326)
{
    // 1EA8 0041;	
    // (Ẩ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 1CAD | 0020 0027 003B 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EA8, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_327)
{
    // 01CE 0061;	
    // (ǎ) LATIN SMALL LETTER A WITH CARON	[1CAD 1CAD | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01CE, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_328)
{
    // 01CE 0041;	
    // (ǎ) LATIN SMALL LETTER A WITH CARON	[1CAD 1CAD | 0020 0028 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01CE, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_329)
{
    // 01CD 0061;	
    // (Ǎ) LATIN CAPITAL LETTER A WITH CARON	[1CAD 1CAD | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CD, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_330)
{
    // 01CD 0041;	
    // (Ǎ) LATIN CAPITAL LETTER A WITH CARON	[1CAD 1CAD | 0020 0028 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x01CD, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_331)
{
    // 00E5 0061;	
    // (å) LATIN SMALL LETTER A WITH RING ABOVE	[1CAD 1CAD | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E5, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_332)
{
    // 00E5 0041;	
    // (å) LATIN SMALL LETTER A WITH RING ABOVE	[1CAD 1CAD | 0020 0029 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00E5, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_333)
{
    // 00C5 0061;	
    // (Å) LATIN CAPITAL LETTER A WITH RING ABOVE	[1CAD 1CAD | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C5, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_334)
{
    // 212B 0061;	
    // (Å) ANGSTROM SIGN	[1CAD 1CAD | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x212B, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_335)
{
    // 00C5 0041;	
    // (Å) LATIN CAPITAL LETTER A WITH RING ABOVE	[1CAD 1CAD | 0020 0029 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00C5, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_336)
{
    // 212B 0041;	
    // (Å) ANGSTROM SIGN	[1CAD 1CAD | 0020 0029 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x212B, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_337)
{
    // 01FB 0061;	
    // (ǻ) LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 1CAD | 0020 0029 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FB, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_338)
{
    // 01FB 0041;	
    // (ǻ) LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 1CAD | 0020 0029 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01FB, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_339)
{
    // 01FA 0061;	
    // (Ǻ) LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 1CAD | 0020 0029 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FA, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_340)
{
    // 01FA 0041;	
    // (Ǻ) LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 1CAD | 0020 0029 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01FA, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_341)
{
    // 00E4 0061;	
    // (ä) LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E4, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_342)
{
    // 00E4 0041;	
    // (ä) LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00E4, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_343)
{
    // 1DF2 0061;	
    // (ᷲ) COMBINING LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 1CAD | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF2, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_344)
{
    // A79B 0061;	
    // (ꞛ) LATIN SMALL LETTER VOLAPUK AE	[1CAD 1CAD | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA79B, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_345)
{
    // 1DF2 0041;	
    // (ᷲ) COMBINING LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 1CAD | 0020 002B 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1DF2, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_346)
{
    // A79B 0041;	
    // (ꞛ) LATIN SMALL LETTER VOLAPUK AE	[1CAD 1CAD | 0020 002B 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA79B, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_347)
{
    // 00C4 0061;	
    // (Ä) LATIN CAPITAL LETTER A WITH DIAERESIS	[1CAD 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C4, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_348)
{
    // 00C4 0041;	
    // (Ä) LATIN CAPITAL LETTER A WITH DIAERESIS	[1CAD 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00C4, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_349)
{
    // A79A 0061;	
    // (Ꞛ) LATIN CAPITAL LETTER VOLAPUK AE	[1CAD 1CAD | 0020 002B 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA79A, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_350)
{
    // A79A 0041;	
    // (Ꞛ) LATIN CAPITAL LETTER VOLAPUK AE	[1CAD 1CAD | 0020 002B 0020 | 000A 0004 0008 |]

    uint32_t cps[2] = { 0xA79A, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_351)
{
    // 01DF 0061;	
    // (ǟ) LATIN SMALL LETTER A WITH DIAERESIS AND MACRON	[1CAD 1CAD | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DF, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_352)
{
    // 01DF 0041;	
    // (ǟ) LATIN SMALL LETTER A WITH DIAERESIS AND MACRON	[1CAD 1CAD | 0020 002B 0032 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01DF, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_353)
{
    // 01DE 0061;	
    // (Ǟ) LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON	[1CAD 1CAD | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DE, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_354)
{
    // 01DE 0041;	
    // (Ǟ) LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON	[1CAD 1CAD | 0020 002B 0032 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01DE, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_355)
{
    // 00E3 0061;	
    // (ã) LATIN SMALL LETTER A WITH TILDE	[1CAD 1CAD | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E3, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_356)
{
    // 00E3 0041;	
    // (ã) LATIN SMALL LETTER A WITH TILDE	[1CAD 1CAD | 0020 002D 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00E3, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_357)
{
    // 00C3 0061;	
    // (Ã) LATIN CAPITAL LETTER A WITH TILDE	[1CAD 1CAD | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C3, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_358)
{
    // 00C3 0041;	
    // (Ã) LATIN CAPITAL LETTER A WITH TILDE	[1CAD 1CAD | 0020 002D 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00C3, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_359)
{
    // 0227 0061;	
    // (ȧ) LATIN SMALL LETTER A WITH DOT ABOVE	[1CAD 1CAD | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0227, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_360)
{
    // 0227 0041;	
    // (ȧ) LATIN SMALL LETTER A WITH DOT ABOVE	[1CAD 1CAD | 0020 002E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0227, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_361)
{
    // 0226 0061;	
    // (Ȧ) LATIN CAPITAL LETTER A WITH DOT ABOVE	[1CAD 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0226, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_362)
{
    // 0226 0041;	
    // (Ȧ) LATIN CAPITAL LETTER A WITH DOT ABOVE	[1CAD 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0226, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_363)
{
    // 01E1 0061;	
    // (ǡ) LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 1CAD | 0020 002E 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E1, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_364)
{
    // 01E1 0041;	
    // (ǡ) LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 1CAD | 0020 002E 0032 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01E1, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_365)
{
    // 01E0 0061;	
    // (Ǡ) LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 1CAD | 0020 002E 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E0, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_366)
{
    // 01E0 0041;	
    // (Ǡ) LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 1CAD | 0020 002E 0032 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x01E0, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_367)
{
    // 0105 0061;	
    // (ą) LATIN SMALL LETTER A WITH OGONEK	[1CAD 1CAD | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0105, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_368)
{
    // 0105 0041;	
    // (ą) LATIN SMALL LETTER A WITH OGONEK	[1CAD 1CAD | 0020 0031 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0105, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_369)
{
    // 0104 0061;	
    // (Ą) LATIN CAPITAL LETTER A WITH OGONEK	[1CAD 1CAD | 0020 0031 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0104, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_370)
{
    // 0104 0041;	
    // (Ą) LATIN CAPITAL LETTER A WITH OGONEK	[1CAD 1CAD | 0020 0031 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0104, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_371)
{
    // 0101 0061;	
    // (ā) LATIN SMALL LETTER A WITH MACRON	[1CAD 1CAD | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0101, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_372)
{
    // 0101 0041;	
    // (ā) LATIN SMALL LETTER A WITH MACRON	[1CAD 1CAD | 0020 0032 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0101, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_373)
{
    // 0100 0061;	
    // (Ā) LATIN CAPITAL LETTER A WITH MACRON	[1CAD 1CAD | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0100, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_374)
{
    // 0100 0041;	
    // (Ā) LATIN CAPITAL LETTER A WITH MACRON	[1CAD 1CAD | 0020 0032 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0100, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_375)
{
    // 1EA3 0061;	
    // (ả) LATIN SMALL LETTER A WITH HOOK ABOVE	[1CAD 1CAD | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA3, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_376)
{
    // 1EA3 0041;	
    // (ả) LATIN SMALL LETTER A WITH HOOK ABOVE	[1CAD 1CAD | 0020 003B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EA3, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_377)
{
    // 1EA2 0061;	
    // (Ả) LATIN CAPITAL LETTER A WITH HOOK ABOVE	[1CAD 1CAD | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EA2, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_378)
{
    // 1EA2 0041;	
    // (Ả) LATIN CAPITAL LETTER A WITH HOOK ABOVE	[1CAD 1CAD | 0020 003B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EA2, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_379)
{
    // 0201 0061;	
    // (ȁ) LATIN SMALL LETTER A WITH DOUBLE GRAVE	[1CAD 1CAD | 0020 003C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0201, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_380)
{
    // 0201 0041;	
    // (ȁ) LATIN SMALL LETTER A WITH DOUBLE GRAVE	[1CAD 1CAD | 0020 003C 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0201, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_381)
{
    // 0200 0061;	
    // (Ȁ) LATIN CAPITAL LETTER A WITH DOUBLE GRAVE	[1CAD 1CAD | 0020 003C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0200, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_382)
{
    // 0200 0041;	
    // (Ȁ) LATIN CAPITAL LETTER A WITH DOUBLE GRAVE	[1CAD 1CAD | 0020 003C 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0200, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_383)
{
    // 0203 0061;	
    // (ȃ) LATIN SMALL LETTER A WITH INVERTED BREVE	[1CAD 1CAD | 0020 003E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0203, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_384)
{
    // 0203 0041;	
    // (ȃ) LATIN SMALL LETTER A WITH INVERTED BREVE	[1CAD 1CAD | 0020 003E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0203, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_385)
{
    // 0202 0061;	
    // (Ȃ) LATIN CAPITAL LETTER A WITH INVERTED BREVE	[1CAD 1CAD | 0020 003E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0202, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_386)
{
    // 0202 0041;	
    // (Ȃ) LATIN CAPITAL LETTER A WITH INVERTED BREVE	[1CAD 1CAD | 0020 003E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0202, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x003E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_387)
{
    // 1EA1 0061;	
    // (ạ) LATIN SMALL LETTER A WITH DOT BELOW	[1CAD 1CAD | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA1, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_388)
{
    // 1EA1 0041;	
    // (ạ) LATIN SMALL LETTER A WITH DOT BELOW	[1CAD 1CAD | 0020 0042 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EA1, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_389)
{
    // 1EA0 0061;	
    // (Ạ) LATIN CAPITAL LETTER A WITH DOT BELOW	[1CAD 1CAD | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EA0, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_390)
{
    // 1EA0 0041;	
    // (Ạ) LATIN CAPITAL LETTER A WITH DOT BELOW	[1CAD 1CAD | 0020 0042 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EA0, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_391)
{
    // 1EB7 0061;	
    // (ặ) LATIN SMALL LETTER A WITH BREVE AND DOT BELOW	[1CAD 1CAD | 0020 0042 0026 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB7, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_392)
{
    // 1EB7 0041;	
    // (ặ) LATIN SMALL LETTER A WITH BREVE AND DOT BELOW	[1CAD 1CAD | 0020 0042 0026 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EB7, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_393)
{
    // 1EB6 0061;	
    // (Ặ) LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW	[1CAD 1CAD | 0020 0042 0026 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB6, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_394)
{
    // 1EB6 0041;	
    // (Ặ) LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW	[1CAD 1CAD | 0020 0042 0026 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EB6, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_395)
{
    // 1EAD 0061;	
    // (ậ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW	[1CAD 1CAD | 0020 0042 0027 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAD, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_396)
{
    // 1EAD 0041;	
    // (ậ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW	[1CAD 1CAD | 0020 0042 0027 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EAD, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_397)
{
    // 1EAC 0061;	
    // (Ậ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW	[1CAD 1CAD | 0020 0042 0027 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAC, 0x0061 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_398)
{
    // 1EAC 0041;	
    // (Ậ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW	[1CAD 1CAD | 0020 0042 0027 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EAC, 0x0041 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_399)
{
    // 1E01 0061;	
    // (ḁ) LATIN SMALL LETTER A WITH RING BELOW	[1CAD 1CAD | 0020 0044 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E01, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0044, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_400)
{
    // 1E01 0041;	
    // (ḁ) LATIN SMALL LETTER A WITH RING BELOW	[1CAD 1CAD | 0020 0044 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E01, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0044, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_401)
{
    // 1E00 0061;	
    // (Ḁ) LATIN CAPITAL LETTER A WITH RING BELOW	[1CAD 1CAD | 0020 0044 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E00, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0044, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_402)
{
    // 1E00 0041;	
    // (Ḁ) LATIN CAPITAL LETTER A WITH RING BELOW	[1CAD 1CAD | 0020 0044 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E00, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0044, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_403)
{
    // 1DD3 0061;	
    // (ᷓ) COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE	[1CAD 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DD3, 0x0061 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_404)
{
    // 1DD3 0041;	
    // (ᷓ) COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE	[1CAD 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x1DD3, 0x0041 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_405)
{
    // A733 0021;	
    // (ꜳ) LATIN SMALL LETTER AA	[1CAD 1CAD 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA733, 0x0021 };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_406)
{
    // A732 0021;	
    // (Ꜳ) LATIN CAPITAL LETTER AA	[1CAD 1CAD 0261 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0xA732, 0x0021 };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_407)
{
    // A733 003F;	
    // (ꜳ) LATIN SMALL LETTER AA	[1CAD 1CAD 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA733, 0x003F };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_408)
{
    // A732 003F;	
    // (Ꜳ) LATIN CAPITAL LETTER AA	[1CAD 1CAD 0267 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0xA732, 0x003F };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_409)
{
    // A733 0061;	
    // (ꜳ) LATIN SMALL LETTER AA	[1CAD 1CAD 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA733, 0x0061 };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_410)
{
    // A733 0041;	
    // (ꜳ) LATIN SMALL LETTER AA	[1CAD 1CAD 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0xA733, 0x0041 };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_411)
{
    // A732 0061;	
    // (Ꜳ) LATIN CAPITAL LETTER AA	[1CAD 1CAD 1CAD | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0xA732, 0x0061 };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_412)
{
    // A732 0041;	
    // (Ꜳ) LATIN CAPITAL LETTER AA	[1CAD 1CAD 1CAD | 0020 0020 0020 | 000A 000A 0008 |]

    uint32_t cps[2] = { 0xA732, 0x0041 };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_413)
{
    // A733 0062;	
    // (ꜳ) LATIN SMALL LETTER AA	[1CAD 1CAD 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA733, 0x0062 };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_414)
{
    // A732 0062;	
    // (Ꜳ) LATIN CAPITAL LETTER AA	[1CAD 1CAD 1CC6 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0xA732, 0x0062 };
    uint32_t const ces[12] = { 0x1CAD, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_415)
{
    // 0061 0062;	
    // (a) LATIN SMALL LETTER A	[1CAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0061, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_416)
{
    // FF41 0062;	
    // (ａ) FULLWIDTH LATIN SMALL LETTER A	[1CAD 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF41, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_417)
{
    // 0363 0062;	
    // (ͣ) COMBINING LATIN SMALL LETTER A	[1CAD 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x0363, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_418)
{
    // 1D41A 0062;	
    // (𝐚) MATHEMATICAL BOLD SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D41A, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_419)
{
    // 1D44E 0062;	
    // (𝑎) MATHEMATICAL ITALIC SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D44E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_420)
{
    // 1D482 0062;	
    // (𝒂) MATHEMATICAL BOLD ITALIC SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D482, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_421)
{
    // 1D4B6 0062;	
    // (𝒶) MATHEMATICAL SCRIPT SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4B6, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_422)
{
    // 1D4EA 0062;	
    // (𝓪) MATHEMATICAL BOLD SCRIPT SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4EA, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_423)
{
    // 1D51E 0062;	
    // (𝔞) MATHEMATICAL FRAKTUR SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D51E, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_424)
{
    // 1D552 0062;	
    // (𝕒) MATHEMATICAL DOUBLE-STRUCK SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D552, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_425)
{
    // 1D586 0062;	
    // (𝖆) MATHEMATICAL BOLD FRAKTUR SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D586, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_426)
{
    // 1D5BA 0062;	
    // (𝖺) MATHEMATICAL SANS-SERIF SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5BA, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_427)
{
    // 1D5EE 0062;	
    // (𝗮) MATHEMATICAL SANS-SERIF BOLD SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5EE, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_428)
{
    // 1D622 0062;	
    // (𝘢) MATHEMATICAL SANS-SERIF ITALIC SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D622, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_429)
{
    // 1D656 0062;	
    // (𝙖) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D656, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_430)
{
    // 1D68A 0062;	
    // (𝚊) MATHEMATICAL MONOSPACE SMALL A	[1CAD 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D68A, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_431)
{
    // 24D0 0062;	
    // (ⓐ) CIRCLED LATIN SMALL LETTER A	[1CAD 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24D0, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_432)
{
    // 0041 0062;	
    // (A) LATIN CAPITAL LETTER A	[1CAD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0041, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_433)
{
    // FF21 0062;	
    // (Ａ) FULLWIDTH LATIN CAPITAL LETTER A	[1CAD 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF21, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_434)
{
    // 1D400 0062;	
    // (𝐀) MATHEMATICAL BOLD CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D400, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_435)
{
    // 1D434 0062;	
    // (𝐴) MATHEMATICAL ITALIC CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D434, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_436)
{
    // 1D468 0062;	
    // (𝑨) MATHEMATICAL BOLD ITALIC CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D468, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_437)
{
    // 1D49C 0062;	
    // (𝒜) MATHEMATICAL SCRIPT CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D49C, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_438)
{
    // 1D4D0 0062;	
    // (𝓐) MATHEMATICAL BOLD SCRIPT CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4D0, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_439)
{
    // 1D504 0062;	
    // (𝔄) MATHEMATICAL FRAKTUR CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D504, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_440)
{
    // 1D538 0062;	
    // (𝔸) MATHEMATICAL DOUBLE-STRUCK CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D538, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_441)
{
    // 1D56C 0062;	
    // (𝕬) MATHEMATICAL BOLD FRAKTUR CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D56C, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_442)
{
    // 1D5A0 0062;	
    // (𝖠) MATHEMATICAL SANS-SERIF CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5A0, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_443)
{
    // 1D5D4 0062;	
    // (𝗔) MATHEMATICAL SANS-SERIF BOLD CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5D4, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_444)
{
    // 1D608 0062;	
    // (𝘈) MATHEMATICAL SANS-SERIF ITALIC CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D608, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_445)
{
    // 1D63C 0062;	
    // (𝘼) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D63C, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_446)
{
    // 1D670 0062;	
    // (𝙰) MATHEMATICAL MONOSPACE CAPITAL A	[1CAD 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D670, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_447)
{
    // 24B6 0062;	
    // (Ⓐ) CIRCLED LATIN CAPITAL LETTER A	[1CAD 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24B6, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_448)
{
    // 1F150 0062;	
    // (🅐) NEGATIVE CIRCLED LATIN CAPITAL LETTER A	[1CAD 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F150, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_449)
{
    // 00AA 0062;	
    // (ª) FEMININE ORDINAL INDICATOR	[1CAD 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x00AA, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_450)
{
    // 1D43 0062;	
    // (ᵃ) MODIFIER LETTER SMALL A	[1CAD 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D43, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_451)
{
    // 2090 0062;	
    // (ₐ) LATIN SUBSCRIPT SMALL LETTER A	[1CAD 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2090, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_452)
{
    // 1D2C 0062;	
    // (ᴬ) MODIFIER LETTER CAPITAL A	[1CAD 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1D2C, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_453)
{
    // 1F130 0062;	
    // (🄰) SQUARED LATIN CAPITAL LETTER A	[1CAD 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F130, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_454)
{
    // 1F170 0062;	
    // (🅰) NEGATIVE SQUARED LATIN CAPITAL LETTER A	[1CAD 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F170, 0x0062 };
    uint32_t const ces[9] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_455)
{
    // 00E1 0062;	
    // (á) LATIN SMALL LETTER A WITH ACUTE	[1CAD 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E1, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_456)
{
    // 00C1 0062;	
    // (Á) LATIN CAPITAL LETTER A WITH ACUTE	[1CAD 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C1, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_457)
{
    // 00E0 0062;	
    // (à) LATIN SMALL LETTER A WITH GRAVE	[1CAD 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E0, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_458)
{
    // 00C0 0062;	
    // (À) LATIN CAPITAL LETTER A WITH GRAVE	[1CAD 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C0, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_459)
{
    // 0103 0062;	
    // (ă) LATIN SMALL LETTER A WITH BREVE	[1CAD 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0103, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_460)
{
    // 0102 0062;	
    // (Ă) LATIN CAPITAL LETTER A WITH BREVE	[1CAD 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0102, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_461)
{
    // 1EAF 0062;	
    // (ắ) LATIN SMALL LETTER A WITH BREVE AND ACUTE	[1CAD 1CC6 | 0020 0026 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAF, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_462)
{
    // 1EAE 0062;	
    // (Ắ) LATIN CAPITAL LETTER A WITH BREVE AND ACUTE	[1CAD 1CC6 | 0020 0026 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAE, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_463)
{
    // 1EB1 0062;	
    // (ằ) LATIN SMALL LETTER A WITH BREVE AND GRAVE	[1CAD 1CC6 | 0020 0026 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB1, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_464)
{
    // 1EB0 0062;	
    // (Ằ) LATIN CAPITAL LETTER A WITH BREVE AND GRAVE	[1CAD 1CC6 | 0020 0026 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB0, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_465)
{
    // 1EB5 0062;	
    // (ẵ) LATIN SMALL LETTER A WITH BREVE AND TILDE	[1CAD 1CC6 | 0020 0026 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB5, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_466)
{
    // 1EB4 0062;	
    // (Ẵ) LATIN CAPITAL LETTER A WITH BREVE AND TILDE	[1CAD 1CC6 | 0020 0026 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB4, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_467)
{
    // 1EB3 0062;	
    // (ẳ) LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 1CC6 | 0020 0026 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB3, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_468)
{
    // 1EB2 0062;	
    // (Ẳ) LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE	[1CAD 1CC6 | 0020 0026 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EB2, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_469)
{
    // 00E2 0062;	
    // (â) LATIN SMALL LETTER A WITH CIRCUMFLEX	[1CAD 1CC6 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E2, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_470)
{
    // 00C2 0062;	
    // (Â) LATIN CAPITAL LETTER A WITH CIRCUMFLEX	[1CAD 1CC6 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C2, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_471)
{
    // 1EA5 0062;	
    // (ấ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 1CC6 | 0020 0027 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA5, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_472)
{
    // 1EA4 0062;	
    // (Ấ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE	[1CAD 1CC6 | 0020 0027 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA4, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_473)
{
    // 1EA7 0062;	
    // (ầ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 1CC6 | 0020 0027 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA7, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_474)
{
    // 1EA6 0062;	
    // (Ầ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE	[1CAD 1CC6 | 0020 0027 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA6, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_475)
{
    // 1EAB 0062;	
    // (ẫ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 1CC6 | 0020 0027 002D 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAB, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_476)
{
    // 1EAA 0062;	
    // (Ẫ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE	[1CAD 1CC6 | 0020 0027 002D 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EAA, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_477)
{
    // 1EA9 0062;	
    // (ẩ) LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 1CC6 | 0020 0027 003B 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA9, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_478)
{
    // 1EA8 0062;	
    // (Ẩ) LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE	[1CAD 1CC6 | 0020 0027 003B 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EA8, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_479)
{
    // 01CE 0062;	
    // (ǎ) LATIN SMALL LETTER A WITH CARON	[1CAD 1CC6 | 0020 0028 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01CE, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_480)
{
    // 01CD 0062;	
    // (Ǎ) LATIN CAPITAL LETTER A WITH CARON	[1CAD 1CC6 | 0020 0028 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x01CD, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_481)
{
    // 00E5 0062;	
    // (å) LATIN SMALL LETTER A WITH RING ABOVE	[1CAD 1CC6 | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E5, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_482)
{
    // 00C5 0062;	
    // (Å) LATIN CAPITAL LETTER A WITH RING ABOVE	[1CAD 1CC6 | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C5, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_483)
{
    // 212B 0062;	
    // (Å) ANGSTROM SIGN	[1CAD 1CC6 | 0020 0029 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x212B, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_484)
{
    // 01FB 0062;	
    // (ǻ) LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 1CC6 | 0020 0029 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FB, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_485)
{
    // 01FA 0062;	
    // (Ǻ) LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE	[1CAD 1CC6 | 0020 0029 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01FA, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0029, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_486)
{
    // 00E4 0062;	
    // (ä) LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E4, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_487)
{
    // 1DF2 0062;	
    // (ᷲ) COMBINING LATIN SMALL LETTER A WITH DIAERESIS	[1CAD 1CC6 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x1DF2, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_488)
{
    // A79B 0062;	
    // (ꞛ) LATIN SMALL LETTER VOLAPUK AE	[1CAD 1CC6 | 0020 002B 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0xA79B, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_489)
{
    // 00C4 0062;	
    // (Ä) LATIN CAPITAL LETTER A WITH DIAERESIS	[1CAD 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C4, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_490)
{
    // A79A 0062;	
    // (Ꞛ) LATIN CAPITAL LETTER VOLAPUK AE	[1CAD 1CC6 | 0020 002B 0020 | 000A 0004 0002 |]

    uint32_t cps[2] = { 0xA79A, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_491)
{
    // 01DF 0062;	
    // (ǟ) LATIN SMALL LETTER A WITH DIAERESIS AND MACRON	[1CAD 1CC6 | 0020 002B 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DF, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_492)
{
    // 01DE 0062;	
    // (Ǟ) LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON	[1CAD 1CC6 | 0020 002B 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01DE, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_493)
{
    // 00E3 0062;	
    // (ã) LATIN SMALL LETTER A WITH TILDE	[1CAD 1CC6 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00E3, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_494)
{
    // 00C3 0062;	
    // (Ã) LATIN CAPITAL LETTER A WITH TILDE	[1CAD 1CC6 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00C3, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_495)
{
    // 0227 0062;	
    // (ȧ) LATIN SMALL LETTER A WITH DOT ABOVE	[1CAD 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0227, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_496)
{
    // 0226 0062;	
    // (Ȧ) LATIN CAPITAL LETTER A WITH DOT ABOVE	[1CAD 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0226, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_497)
{
    // 01E1 0062;	
    // (ǡ) LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 1CC6 | 0020 002E 0032 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E1, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_498)
{
    // 01E0 0062;	
    // (Ǡ) LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON	[1CAD 1CC6 | 0020 002E 0032 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x01E0, 0x0062 };
    uint32_t const ces[13] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_098_499)
{
    // 0105 0062;	
    // (ą) LATIN SMALL LETTER A WITH OGONEK	[1CAD 1CC6 | 0020 0031 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0105, 0x0062 };
    uint32_t const ces[11] = { 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

