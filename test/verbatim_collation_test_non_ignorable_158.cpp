// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_158_000)
{
    // FBE6 0062;	
    // (‎‎ﯦ‎‎) ARABIC LETTER E INITIAL FORM	[2430 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFBE6, 0x0062 };
    uint32_t const ces[9] = { 0x2430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_001)
{
    // FBE7 0062;	
    // (‎‎ﯧ‎‎) ARABIC LETTER E MEDIAL FORM	[2430 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFBE7, 0x0062 };
    uint32_t const ces[9] = { 0x2430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_002)
{
    // FBE5 0062;	
    // (‎‎ﯥ‎‎) ARABIC LETTER E FINAL FORM	[2430 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBE5, 0x0062 };
    uint32_t const ces[9] = { 0x2430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_003)
{
    // FBE4 0062;	
    // (‎‎ﯤ‎‎) ARABIC LETTER E ISOLATED FORM	[2430 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBE4, 0x0062 };
    uint32_t const ces[9] = { 0x2430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_004)
{
    // 06D1 0021;	
    // (‎‎ۑ‎‎) ARABIC LETTER YEH WITH THREE DOTS BELOW	[2431 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D1, 0x0021 };
    uint32_t const ces[9] = { 0x2431, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_005)
{
    // 06D1 003F;	
    // (‎‎ۑ‎‎) ARABIC LETTER YEH WITH THREE DOTS BELOW	[2431 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D1, 0x003F };
    uint32_t const ces[9] = { 0x2431, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_006)
{
    // 06D1 0061;	
    // (‎‎ۑ‎‎) ARABIC LETTER YEH WITH THREE DOTS BELOW	[2431 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D1, 0x0061 };
    uint32_t const ces[9] = { 0x2431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_007)
{
    // 06D1 0041;	
    // (‎‎ۑ‎‎) ARABIC LETTER YEH WITH THREE DOTS BELOW	[2431 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06D1, 0x0041 };
    uint32_t const ces[9] = { 0x2431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_008)
{
    // 06D1 0062;	
    // (‎‎ۑ‎‎) ARABIC LETTER YEH WITH THREE DOTS BELOW	[2431 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D1, 0x0062 };
    uint32_t const ces[9] = { 0x2431, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_009)
{
    // 063D 0021;	
    // (‎‎ؽ‎‎) ARABIC LETTER FARSI YEH WITH INVERTED V	[2432 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063D, 0x0021 };
    uint32_t const ces[9] = { 0x2432, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_010)
{
    // 063D 003F;	
    // (‎‎ؽ‎‎) ARABIC LETTER FARSI YEH WITH INVERTED V	[2432 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063D, 0x003F };
    uint32_t const ces[9] = { 0x2432, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_011)
{
    // 063D 0061;	
    // (‎‎ؽ‎‎) ARABIC LETTER FARSI YEH WITH INVERTED V	[2432 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063D, 0x0061 };
    uint32_t const ces[9] = { 0x2432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_012)
{
    // 063D 0041;	
    // (‎‎ؽ‎‎) ARABIC LETTER FARSI YEH WITH INVERTED V	[2432 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x063D, 0x0041 };
    uint32_t const ces[9] = { 0x2432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_013)
{
    // 063D 0062;	
    // (‎‎ؽ‎‎) ARABIC LETTER FARSI YEH WITH INVERTED V	[2432 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063D, 0x0062 };
    uint32_t const ces[9] = { 0x2432, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_014)
{
    // 063E 0021;	
    // (‎‎ؾ‎‎) ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE	[2433 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063E, 0x0021 };
    uint32_t const ces[9] = { 0x2433, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_015)
{
    // 063E 003F;	
    // (‎‎ؾ‎‎) ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE	[2433 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063E, 0x003F };
    uint32_t const ces[9] = { 0x2433, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_016)
{
    // 063E 0061;	
    // (‎‎ؾ‎‎) ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE	[2433 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063E, 0x0061 };
    uint32_t const ces[9] = { 0x2433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_017)
{
    // 063E 0041;	
    // (‎‎ؾ‎‎) ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE	[2433 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x063E, 0x0041 };
    uint32_t const ces[9] = { 0x2433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_018)
{
    // 063E 0062;	
    // (‎‎ؾ‎‎) ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE	[2433 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063E, 0x0062 };
    uint32_t const ces[9] = { 0x2433, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_019)
{
    // 063F 0021;	
    // (‎‎ؿ‎‎) ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE	[2434 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063F, 0x0021 };
    uint32_t const ces[9] = { 0x2434, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_020)
{
    // 063F 003F;	
    // (‎‎ؿ‎‎) ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE	[2434 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063F, 0x003F };
    uint32_t const ces[9] = { 0x2434, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_021)
{
    // 063F 0061;	
    // (‎‎ؿ‎‎) ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE	[2434 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063F, 0x0061 };
    uint32_t const ces[9] = { 0x2434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_022)
{
    // 063F 0041;	
    // (‎‎ؿ‎‎) ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE	[2434 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x063F, 0x0041 };
    uint32_t const ces[9] = { 0x2434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_023)
{
    // 063F 0062;	
    // (‎‎ؿ‎‎) ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE	[2434 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x063F, 0x0062 };
    uint32_t const ces[9] = { 0x2434, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_024)
{
    // 0620 0021;	
    // (‎‎ؠ‎‎) ARABIC LETTER KASHMIRI YEH	[2435 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0620, 0x0021 };
    uint32_t const ces[9] = { 0x2435, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_025)
{
    // 0620 003F;	
    // (‎‎ؠ‎‎) ARABIC LETTER KASHMIRI YEH	[2435 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0620, 0x003F };
    uint32_t const ces[9] = { 0x2435, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_026)
{
    // 0620 0061;	
    // (‎‎ؠ‎‎) ARABIC LETTER KASHMIRI YEH	[2435 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0620, 0x0061 };
    uint32_t const ces[9] = { 0x2435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_027)
{
    // 0620 0041;	
    // (‎‎ؠ‎‎) ARABIC LETTER KASHMIRI YEH	[2435 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0620, 0x0041 };
    uint32_t const ces[9] = { 0x2435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_028)
{
    // 0620 0062;	
    // (‎‎ؠ‎‎) ARABIC LETTER KASHMIRI YEH	[2435 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0620, 0x0062 };
    uint32_t const ces[9] = { 0x2435, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_029)
{
    // 0775 0021;	
    // (‎‎ݵ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[2436 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0775, 0x0021 };
    uint32_t const ces[9] = { 0x2436, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_030)
{
    // 0775 003F;	
    // (‎‎ݵ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[2436 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0775, 0x003F };
    uint32_t const ces[9] = { 0x2436, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_031)
{
    // 0775 0061;	
    // (‎‎ݵ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[2436 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0775, 0x0061 };
    uint32_t const ces[9] = { 0x2436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_032)
{
    // 0775 0041;	
    // (‎‎ݵ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[2436 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0775, 0x0041 };
    uint32_t const ces[9] = { 0x2436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_033)
{
    // 0775 0062;	
    // (‎‎ݵ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[2436 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0775, 0x0062 };
    uint32_t const ces[9] = { 0x2436, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_034)
{
    // 0776 0021;	
    // (‎‎ݶ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[2437 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0776, 0x0021 };
    uint32_t const ces[9] = { 0x2437, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_035)
{
    // 0776 003F;	
    // (‎‎ݶ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[2437 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0776, 0x003F };
    uint32_t const ces[9] = { 0x2437, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_036)
{
    // 0776 0061;	
    // (‎‎ݶ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[2437 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0776, 0x0061 };
    uint32_t const ces[9] = { 0x2437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_037)
{
    // 0776 0041;	
    // (‎‎ݶ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[2437 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0776, 0x0041 };
    uint32_t const ces[9] = { 0x2437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_038)
{
    // 0776 0062;	
    // (‎‎ݶ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[2437 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0776, 0x0062 };
    uint32_t const ces[9] = { 0x2437, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_039)
{
    // 0777 0021;	
    // (‎‎ݷ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[2438 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0777, 0x0021 };
    uint32_t const ces[9] = { 0x2438, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_040)
{
    // 0777 003F;	
    // (‎‎ݷ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[2438 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0777, 0x003F };
    uint32_t const ces[9] = { 0x2438, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_041)
{
    // 0777 0061;	
    // (‎‎ݷ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[2438 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0777, 0x0061 };
    uint32_t const ces[9] = { 0x2438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_042)
{
    // 0777 0041;	
    // (‎‎ݷ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[2438 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0777, 0x0041 };
    uint32_t const ces[9] = { 0x2438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_043)
{
    // 0777 0062;	
    // (‎‎ݷ‎‎) ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW	[2438 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0777, 0x0062 };
    uint32_t const ces[9] = { 0x2438, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_044)
{
    // 08BA 0021;	
    // (‎‎ࢺ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE	[2439 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08BA, 0x0021 };
    uint32_t const ces[9] = { 0x2439, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_045)
{
    // 08BA 003F;	
    // (‎‎ࢺ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE	[2439 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08BA, 0x003F };
    uint32_t const ces[9] = { 0x2439, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_046)
{
    // 08BA 0061;	
    // (‎‎ࢺ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE	[2439 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08BA, 0x0061 };
    uint32_t const ces[9] = { 0x2439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_047)
{
    // 08BA 0041;	
    // (‎‎ࢺ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE	[2439 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08BA, 0x0041 };
    uint32_t const ces[9] = { 0x2439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_048)
{
    // 08BA 0062;	
    // (‎‎ࢺ‎‎) ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE	[2439 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08BA, 0x0062 };
    uint32_t const ces[9] = { 0x2439, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_049)
{
    // 06D2 0334 0654;	
    // (‎‎ے̴‎‎) ARABIC LETTER YEH BARREE, COMBINING TILDE OVERLAY	[243A | 0020 004A 0083 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x06D2, 0x0334, 0x0654 };
    uint32_t const ces[10] = { 0x243A, 0x0000, 0x0020, 0x004A, 0x0083, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_050)
{
    // 06D2 0654 0334;	
    // (‎‎ۓ‎‎) ARABIC LETTER YEH BARREE, ARABIC HAMZA ABOVE	[243A | 0020 004A 0083 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x06D2, 0x0654, 0x0334 };
    uint32_t const ces[10] = { 0x243A, 0x0000, 0x0020, 0x004A, 0x0083, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_051)
{
    // 06D3 0334;	
    // (‎‎ۓ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE	[243A | 0020 004A 0083 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x06D3, 0x0334 };
    uint32_t const ces[10] = { 0x243A, 0x0000, 0x0020, 0x004A, 0x0083, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_052)
{
    // 06D2 0021;	
    // (‎‎ے‎‎) ARABIC LETTER YEH BARREE	[243A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D2, 0x0021 };
    uint32_t const ces[9] = { 0x243A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_053)
{
    // FBAF 0021;	
    // (‎‎ﮯ‎‎) ARABIC LETTER YEH BARREE FINAL FORM	[243A 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBAF, 0x0021 };
    uint32_t const ces[9] = { 0x243A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_054)
{
    // FBAE 0021;	
    // (‎‎ﮮ‎‎) ARABIC LETTER YEH BARREE ISOLATED FORM	[243A 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBAE, 0x0021 };
    uint32_t const ces[9] = { 0x243A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_055)
{
    // 06D3 0021;	
    // (‎‎ۓ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE	[243A 0261 | 0020 0083 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x06D3, 0x0021 };
    uint32_t const ces[11] = { 0x243A, 0x0261, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_056)
{
    // FBB1 0021;	
    // (‎‎ﮱ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM	[243A 0261 | 0020 0083 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBB1, 0x0021 };
    uint32_t const ces[11] = { 0x243A, 0x0261, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_057)
{
    // FBB0 0021;	
    // (‎‎ﮰ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE ISOLATED FORM	[243A 0261 | 0020 0083 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBB0, 0x0021 };
    uint32_t const ces[11] = { 0x243A, 0x0261, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_058)
{
    // 06D2 003F;	
    // (‎‎ے‎‎) ARABIC LETTER YEH BARREE	[243A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D2, 0x003F };
    uint32_t const ces[9] = { 0x243A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_059)
{
    // FBAF 003F;	
    // (‎‎ﮯ‎‎) ARABIC LETTER YEH BARREE FINAL FORM	[243A 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBAF, 0x003F };
    uint32_t const ces[9] = { 0x243A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_060)
{
    // FBAE 003F;	
    // (‎‎ﮮ‎‎) ARABIC LETTER YEH BARREE ISOLATED FORM	[243A 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBAE, 0x003F };
    uint32_t const ces[9] = { 0x243A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_061)
{
    // 06D3 003F;	
    // (‎‎ۓ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE	[243A 0267 | 0020 0083 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x06D3, 0x003F };
    uint32_t const ces[11] = { 0x243A, 0x0267, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_062)
{
    // FBB1 003F;	
    // (‎‎ﮱ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM	[243A 0267 | 0020 0083 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBB1, 0x003F };
    uint32_t const ces[11] = { 0x243A, 0x0267, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_063)
{
    // FBB0 003F;	
    // (‎‎ﮰ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE ISOLATED FORM	[243A 0267 | 0020 0083 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBB0, 0x003F };
    uint32_t const ces[11] = { 0x243A, 0x0267, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_064)
{
    // 06D2 0061;	
    // (‎‎ے‎‎) ARABIC LETTER YEH BARREE	[243A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D2, 0x0061 };
    uint32_t const ces[9] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_065)
{
    // 06D2 0041;	
    // (‎‎ے‎‎) ARABIC LETTER YEH BARREE	[243A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06D2, 0x0041 };
    uint32_t const ces[9] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_066)
{
    // FBAF 0061;	
    // (‎‎ﮯ‎‎) ARABIC LETTER YEH BARREE FINAL FORM	[243A 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBAF, 0x0061 };
    uint32_t const ces[9] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_067)
{
    // FBAF 0041;	
    // (‎‎ﮯ‎‎) ARABIC LETTER YEH BARREE FINAL FORM	[243A 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFBAF, 0x0041 };
    uint32_t const ces[9] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_068)
{
    // FBAE 0061;	
    // (‎‎ﮮ‎‎) ARABIC LETTER YEH BARREE ISOLATED FORM	[243A 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBAE, 0x0061 };
    uint32_t const ces[9] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_069)
{
    // FBAE 0041;	
    // (‎‎ﮮ‎‎) ARABIC LETTER YEH BARREE ISOLATED FORM	[243A 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFBAE, 0x0041 };
    uint32_t const ces[9] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_070)
{
    // 06D3 0061;	
    // (‎‎ۓ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE	[243A 1CAD | 0020 0083 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x06D3, 0x0061 };
    uint32_t const ces[11] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_071)
{
    // 06D3 0041;	
    // (‎‎ۓ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE	[243A 1CAD | 0020 0083 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x06D3, 0x0041 };
    uint32_t const ces[11] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_072)
{
    // FBB1 0061;	
    // (‎‎ﮱ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM	[243A 1CAD | 0020 0083 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBB1, 0x0061 };
    uint32_t const ces[11] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_073)
{
    // FBB1 0041;	
    // (‎‎ﮱ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM	[243A 1CAD | 0020 0083 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFBB1, 0x0041 };
    uint32_t const ces[11] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_074)
{
    // FBB0 0061;	
    // (‎‎ﮰ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE ISOLATED FORM	[243A 1CAD | 0020 0083 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBB0, 0x0061 };
    uint32_t const ces[11] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_075)
{
    // FBB0 0041;	
    // (‎‎ﮰ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE ISOLATED FORM	[243A 1CAD | 0020 0083 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFBB0, 0x0041 };
    uint32_t const ces[11] = { 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_076)
{
    // 06D2 0062;	
    // (‎‎ے‎‎) ARABIC LETTER YEH BARREE	[243A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06D2, 0x0062 };
    uint32_t const ces[9] = { 0x243A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_077)
{
    // FBAF 0062;	
    // (‎‎ﮯ‎‎) ARABIC LETTER YEH BARREE FINAL FORM	[243A 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFBAF, 0x0062 };
    uint32_t const ces[9] = { 0x243A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_078)
{
    // FBAE 0062;	
    // (‎‎ﮮ‎‎) ARABIC LETTER YEH BARREE ISOLATED FORM	[243A 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFBAE, 0x0062 };
    uint32_t const ces[9] = { 0x243A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_079)
{
    // 06D3 0062;	
    // (‎‎ۓ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE	[243A 1CC6 | 0020 0083 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x06D3, 0x0062 };
    uint32_t const ces[11] = { 0x243A, 0x1CC6, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_080)
{
    // FBB1 0062;	
    // (‎‎ﮱ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM	[243A 1CC6 | 0020 0083 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFBB1, 0x0062 };
    uint32_t const ces[11] = { 0x243A, 0x1CC6, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_081)
{
    // FBB0 0062;	
    // (‎‎ﮰ‎‎) ARABIC LETTER YEH BARREE WITH HAMZA ABOVE ISOLATED FORM	[243A 1CC6 | 0020 0083 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFBB0, 0x0062 };
    uint32_t const ces[11] = { 0x243A, 0x1CC6, 0x0000, 0x0020, 0x0083, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_082)
{
    // 077A 0021;	
    // (‎‎ݺ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[243B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077A, 0x0021 };
    uint32_t const ces[9] = { 0x243B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_083)
{
    // 077A 003F;	
    // (‎‎ݺ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[243B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077A, 0x003F };
    uint32_t const ces[9] = { 0x243B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_084)
{
    // 077A 0061;	
    // (‎‎ݺ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[243B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077A, 0x0061 };
    uint32_t const ces[9] = { 0x243B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_085)
{
    // 077A 0041;	
    // (‎‎ݺ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[243B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x077A, 0x0041 };
    uint32_t const ces[9] = { 0x243B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_086)
{
    // 077A 0062;	
    // (‎‎ݺ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE	[243B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077A, 0x0062 };
    uint32_t const ces[9] = { 0x243B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_087)
{
    // 077B 0021;	
    // (‎‎ݻ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[243C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077B, 0x0021 };
    uint32_t const ces[9] = { 0x243C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_088)
{
    // 077B 003F;	
    // (‎‎ݻ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[243C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077B, 0x003F };
    uint32_t const ces[9] = { 0x243C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_089)
{
    // 077B 0061;	
    // (‎‎ݻ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[243C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077B, 0x0061 };
    uint32_t const ces[9] = { 0x243C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_090)
{
    // 077B 0041;	
    // (‎‎ݻ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[243C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x077B, 0x0041 };
    uint32_t const ces[9] = { 0x243C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_091)
{
    // 077B 0062;	
    // (‎‎ݻ‎‎) ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE	[243C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077B, 0x0062 };
    uint32_t const ces[9] = { 0x243C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_092)
{
    // 0710 0021;	
    // (‎‎ܐ‎‎) SYRIAC LETTER ALAPH	[243D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0710, 0x0021 };
    uint32_t const ces[9] = { 0x243D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_093)
{
    // 0710 003F;	
    // (‎‎ܐ‎‎) SYRIAC LETTER ALAPH	[243D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0710, 0x003F };
    uint32_t const ces[9] = { 0x243D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_094)
{
    // 0710 0061;	
    // (‎‎ܐ‎‎) SYRIAC LETTER ALAPH	[243D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0710, 0x0061 };
    uint32_t const ces[9] = { 0x243D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_095)
{
    // 0710 0041;	
    // (‎‎ܐ‎‎) SYRIAC LETTER ALAPH	[243D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0710, 0x0041 };
    uint32_t const ces[9] = { 0x243D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_096)
{
    // 0710 0062;	
    // (‎‎ܐ‎‎) SYRIAC LETTER ALAPH	[243D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0710, 0x0062 };
    uint32_t const ces[9] = { 0x243D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_097)
{
    // 0712 0021;	
    // (‎‎ܒ‎‎) SYRIAC LETTER BETH	[243E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0712, 0x0021 };
    uint32_t const ces[9] = { 0x243E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_098)
{
    // 072D 0021;	
    // (‎‎ܭ‎‎) SYRIAC LETTER PERSIAN BHETH	[243E 0261 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072D, 0x0021 };
    uint32_t const ces[11] = { 0x243E, 0x0261, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_099)
{
    // 0712 003F;	
    // (‎‎ܒ‎‎) SYRIAC LETTER BETH	[243E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0712, 0x003F };
    uint32_t const ces[9] = { 0x243E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_100)
{
    // 072D 003F;	
    // (‎‎ܭ‎‎) SYRIAC LETTER PERSIAN BHETH	[243E 0267 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072D, 0x003F };
    uint32_t const ces[11] = { 0x243E, 0x0267, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_101)
{
    // 0712 0061;	
    // (‎‎ܒ‎‎) SYRIAC LETTER BETH	[243E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0712, 0x0061 };
    uint32_t const ces[9] = { 0x243E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_102)
{
    // 0712 0041;	
    // (‎‎ܒ‎‎) SYRIAC LETTER BETH	[243E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0712, 0x0041 };
    uint32_t const ces[9] = { 0x243E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_103)
{
    // 072D 0061;	
    // (‎‎ܭ‎‎) SYRIAC LETTER PERSIAN BHETH	[243E 1CAD | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072D, 0x0061 };
    uint32_t const ces[11] = { 0x243E, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_104)
{
    // 072D 0041;	
    // (‎‎ܭ‎‎) SYRIAC LETTER PERSIAN BHETH	[243E 1CAD | 0020 0113 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x072D, 0x0041 };
    uint32_t const ces[11] = { 0x243E, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_105)
{
    // 0712 0062;	
    // (‎‎ܒ‎‎) SYRIAC LETTER BETH	[243E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0712, 0x0062 };
    uint32_t const ces[9] = { 0x243E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_106)
{
    // 072D 0062;	
    // (‎‎ܭ‎‎) SYRIAC LETTER PERSIAN BHETH	[243E 1CC6 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072D, 0x0062 };
    uint32_t const ces[11] = { 0x243E, 0x1CC6, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_107)
{
    // 0713 0021;	
    // (‎‎ܓ‎‎) SYRIAC LETTER GAMAL	[243F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0713, 0x0021 };
    uint32_t const ces[9] = { 0x243F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_108)
{
    // 0714 0021;	
    // (‎‎ܔ‎‎) SYRIAC LETTER GAMAL GARSHUNI	[243F 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0714, 0x0021 };
    uint32_t const ces[11] = { 0x243F, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_109)
{
    // 072E 0021;	
    // (‎‎ܮ‎‎) SYRIAC LETTER PERSIAN GHAMAL	[243F 0261 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072E, 0x0021 };
    uint32_t const ces[11] = { 0x243F, 0x0261, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_110)
{
    // 0713 003F;	
    // (‎‎ܓ‎‎) SYRIAC LETTER GAMAL	[243F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0713, 0x003F };
    uint32_t const ces[9] = { 0x243F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_111)
{
    // 0714 003F;	
    // (‎‎ܔ‎‎) SYRIAC LETTER GAMAL GARSHUNI	[243F 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0714, 0x003F };
    uint32_t const ces[11] = { 0x243F, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_112)
{
    // 072E 003F;	
    // (‎‎ܮ‎‎) SYRIAC LETTER PERSIAN GHAMAL	[243F 0267 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072E, 0x003F };
    uint32_t const ces[11] = { 0x243F, 0x0267, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_113)
{
    // 0713 0061;	
    // (‎‎ܓ‎‎) SYRIAC LETTER GAMAL	[243F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0713, 0x0061 };
    uint32_t const ces[9] = { 0x243F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_114)
{
    // 0713 0041;	
    // (‎‎ܓ‎‎) SYRIAC LETTER GAMAL	[243F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0713, 0x0041 };
    uint32_t const ces[9] = { 0x243F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_115)
{
    // 0714 0061;	
    // (‎‎ܔ‎‎) SYRIAC LETTER GAMAL GARSHUNI	[243F 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0714, 0x0061 };
    uint32_t const ces[11] = { 0x243F, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_116)
{
    // 0714 0041;	
    // (‎‎ܔ‎‎) SYRIAC LETTER GAMAL GARSHUNI	[243F 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0714, 0x0041 };
    uint32_t const ces[11] = { 0x243F, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_117)
{
    // 072E 0061;	
    // (‎‎ܮ‎‎) SYRIAC LETTER PERSIAN GHAMAL	[243F 1CAD | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072E, 0x0061 };
    uint32_t const ces[11] = { 0x243F, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_118)
{
    // 072E 0041;	
    // (‎‎ܮ‎‎) SYRIAC LETTER PERSIAN GHAMAL	[243F 1CAD | 0020 0113 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x072E, 0x0041 };
    uint32_t const ces[11] = { 0x243F, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_119)
{
    // 0713 0062;	
    // (‎‎ܓ‎‎) SYRIAC LETTER GAMAL	[243F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0713, 0x0062 };
    uint32_t const ces[9] = { 0x243F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_120)
{
    // 0714 0062;	
    // (‎‎ܔ‎‎) SYRIAC LETTER GAMAL GARSHUNI	[243F 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0714, 0x0062 };
    uint32_t const ces[11] = { 0x243F, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_121)
{
    // 072E 0062;	
    // (‎‎ܮ‎‎) SYRIAC LETTER PERSIAN GHAMAL	[243F 1CC6 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072E, 0x0062 };
    uint32_t const ces[11] = { 0x243F, 0x1CC6, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_122)
{
    // 0716 0021;	
    // (‎‎ܖ‎‎) SYRIAC LETTER DOTLESS DALATH RISH	[2440 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0716, 0x0021 };
    uint32_t const ces[9] = { 0x2440, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_123)
{
    // 0716 003F;	
    // (‎‎ܖ‎‎) SYRIAC LETTER DOTLESS DALATH RISH	[2440 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0716, 0x003F };
    uint32_t const ces[9] = { 0x2440, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_124)
{
    // 0716 0061;	
    // (‎‎ܖ‎‎) SYRIAC LETTER DOTLESS DALATH RISH	[2440 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0716, 0x0061 };
    uint32_t const ces[9] = { 0x2440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_125)
{
    // 0716 0041;	
    // (‎‎ܖ‎‎) SYRIAC LETTER DOTLESS DALATH RISH	[2440 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0716, 0x0041 };
    uint32_t const ces[9] = { 0x2440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_126)
{
    // 0716 0062;	
    // (‎‎ܖ‎‎) SYRIAC LETTER DOTLESS DALATH RISH	[2440 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0716, 0x0062 };
    uint32_t const ces[9] = { 0x2440, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_127)
{
    // 0715 0021;	
    // (‎‎ܕ‎‎) SYRIAC LETTER DALATH	[2441 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0715, 0x0021 };
    uint32_t const ces[9] = { 0x2441, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_128)
{
    // 072F 0021;	
    // (‎‎ܯ‎‎) SYRIAC LETTER PERSIAN DHALATH	[2441 0261 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072F, 0x0021 };
    uint32_t const ces[11] = { 0x2441, 0x0261, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_129)
{
    // 0715 003F;	
    // (‎‎ܕ‎‎) SYRIAC LETTER DALATH	[2441 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0715, 0x003F };
    uint32_t const ces[9] = { 0x2441, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_130)
{
    // 072F 003F;	
    // (‎‎ܯ‎‎) SYRIAC LETTER PERSIAN DHALATH	[2441 0267 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072F, 0x003F };
    uint32_t const ces[11] = { 0x2441, 0x0267, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_131)
{
    // 0715 0061;	
    // (‎‎ܕ‎‎) SYRIAC LETTER DALATH	[2441 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0715, 0x0061 };
    uint32_t const ces[9] = { 0x2441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_132)
{
    // 0715 0041;	
    // (‎‎ܕ‎‎) SYRIAC LETTER DALATH	[2441 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0715, 0x0041 };
    uint32_t const ces[9] = { 0x2441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_133)
{
    // 072F 0061;	
    // (‎‎ܯ‎‎) SYRIAC LETTER PERSIAN DHALATH	[2441 1CAD | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072F, 0x0061 };
    uint32_t const ces[11] = { 0x2441, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_134)
{
    // 072F 0041;	
    // (‎‎ܯ‎‎) SYRIAC LETTER PERSIAN DHALATH	[2441 1CAD | 0020 0113 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x072F, 0x0041 };
    uint32_t const ces[11] = { 0x2441, 0x1CAD, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_135)
{
    // 0715 0062;	
    // (‎‎ܕ‎‎) SYRIAC LETTER DALATH	[2441 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0715, 0x0062 };
    uint32_t const ces[9] = { 0x2441, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_136)
{
    // 072F 0062;	
    // (‎‎ܯ‎‎) SYRIAC LETTER PERSIAN DHALATH	[2441 1CC6 | 0020 0113 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x072F, 0x0062 };
    uint32_t const ces[11] = { 0x2441, 0x1CC6, 0x0000, 0x0020, 0x0113, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_137)
{
    // 0717 0021;	
    // (‎‎ܗ‎‎) SYRIAC LETTER HE	[2442 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0717, 0x0021 };
    uint32_t const ces[9] = { 0x2442, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_138)
{
    // 0717 003F;	
    // (‎‎ܗ‎‎) SYRIAC LETTER HE	[2442 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0717, 0x003F };
    uint32_t const ces[9] = { 0x2442, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_139)
{
    // 0717 0061;	
    // (‎‎ܗ‎‎) SYRIAC LETTER HE	[2442 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0717, 0x0061 };
    uint32_t const ces[9] = { 0x2442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_140)
{
    // 0717 0041;	
    // (‎‎ܗ‎‎) SYRIAC LETTER HE	[2442 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0717, 0x0041 };
    uint32_t const ces[9] = { 0x2442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_141)
{
    // 0717 0062;	
    // (‎‎ܗ‎‎) SYRIAC LETTER HE	[2442 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0717, 0x0062 };
    uint32_t const ces[9] = { 0x2442, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_142)
{
    // 0718 0021;	
    // (‎‎ܘ‎‎) SYRIAC LETTER WAW	[2443 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0718, 0x0021 };
    uint32_t const ces[9] = { 0x2443, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_143)
{
    // 0718 003F;	
    // (‎‎ܘ‎‎) SYRIAC LETTER WAW	[2443 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0718, 0x003F };
    uint32_t const ces[9] = { 0x2443, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_144)
{
    // 0718 0061;	
    // (‎‎ܘ‎‎) SYRIAC LETTER WAW	[2443 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0718, 0x0061 };
    uint32_t const ces[9] = { 0x2443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_145)
{
    // 0718 0041;	
    // (‎‎ܘ‎‎) SYRIAC LETTER WAW	[2443 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0718, 0x0041 };
    uint32_t const ces[9] = { 0x2443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_146)
{
    // 0718 0062;	
    // (‎‎ܘ‎‎) SYRIAC LETTER WAW	[2443 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0718, 0x0062 };
    uint32_t const ces[9] = { 0x2443, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_147)
{
    // 0719 0021;	
    // (‎‎ܙ‎‎) SYRIAC LETTER ZAIN	[2444 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0719, 0x0021 };
    uint32_t const ces[9] = { 0x2444, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_148)
{
    // 0719 003F;	
    // (‎‎ܙ‎‎) SYRIAC LETTER ZAIN	[2444 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0719, 0x003F };
    uint32_t const ces[9] = { 0x2444, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_149)
{
    // 0719 0061;	
    // (‎‎ܙ‎‎) SYRIAC LETTER ZAIN	[2444 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0719, 0x0061 };
    uint32_t const ces[9] = { 0x2444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_150)
{
    // 0719 0041;	
    // (‎‎ܙ‎‎) SYRIAC LETTER ZAIN	[2444 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0719, 0x0041 };
    uint32_t const ces[9] = { 0x2444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_151)
{
    // 0719 0062;	
    // (‎‎ܙ‎‎) SYRIAC LETTER ZAIN	[2444 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0719, 0x0062 };
    uint32_t const ces[9] = { 0x2444, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_152)
{
    // 074D 0021;	
    // (‎‎ݍ‎‎) SYRIAC LETTER SOGDIAN ZHAIN	[2445 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074D, 0x0021 };
    uint32_t const ces[9] = { 0x2445, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_153)
{
    // 074D 003F;	
    // (‎‎ݍ‎‎) SYRIAC LETTER SOGDIAN ZHAIN	[2445 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074D, 0x003F };
    uint32_t const ces[9] = { 0x2445, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_154)
{
    // 074D 0061;	
    // (‎‎ݍ‎‎) SYRIAC LETTER SOGDIAN ZHAIN	[2445 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074D, 0x0061 };
    uint32_t const ces[9] = { 0x2445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_155)
{
    // 074D 0041;	
    // (‎‎ݍ‎‎) SYRIAC LETTER SOGDIAN ZHAIN	[2445 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x074D, 0x0041 };
    uint32_t const ces[9] = { 0x2445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_156)
{
    // 074D 0062;	
    // (‎‎ݍ‎‎) SYRIAC LETTER SOGDIAN ZHAIN	[2445 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074D, 0x0062 };
    uint32_t const ces[9] = { 0x2445, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_157)
{
    // 071A 0021;	
    // (‎‎ܚ‎‎) SYRIAC LETTER HETH	[2446 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071A, 0x0021 };
    uint32_t const ces[9] = { 0x2446, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_158)
{
    // 071A 003F;	
    // (‎‎ܚ‎‎) SYRIAC LETTER HETH	[2446 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071A, 0x003F };
    uint32_t const ces[9] = { 0x2446, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_159)
{
    // 071A 0061;	
    // (‎‎ܚ‎‎) SYRIAC LETTER HETH	[2446 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071A, 0x0061 };
    uint32_t const ces[9] = { 0x2446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_160)
{
    // 071A 0041;	
    // (‎‎ܚ‎‎) SYRIAC LETTER HETH	[2446 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x071A, 0x0041 };
    uint32_t const ces[9] = { 0x2446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_161)
{
    // 071A 0062;	
    // (‎‎ܚ‎‎) SYRIAC LETTER HETH	[2446 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071A, 0x0062 };
    uint32_t const ces[9] = { 0x2446, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_162)
{
    // 071B 0021;	
    // (‎‎ܛ‎‎) SYRIAC LETTER TETH	[2447 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071B, 0x0021 };
    uint32_t const ces[9] = { 0x2447, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_163)
{
    // 071C 0021;	
    // (‎‎ܜ‎‎) SYRIAC LETTER TETH GARSHUNI	[2447 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x071C, 0x0021 };
    uint32_t const ces[11] = { 0x2447, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_164)
{
    // 071B 003F;	
    // (‎‎ܛ‎‎) SYRIAC LETTER TETH	[2447 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071B, 0x003F };
    uint32_t const ces[9] = { 0x2447, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_165)
{
    // 071C 003F;	
    // (‎‎ܜ‎‎) SYRIAC LETTER TETH GARSHUNI	[2447 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x071C, 0x003F };
    uint32_t const ces[11] = { 0x2447, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_166)
{
    // 071B 0061;	
    // (‎‎ܛ‎‎) SYRIAC LETTER TETH	[2447 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071B, 0x0061 };
    uint32_t const ces[9] = { 0x2447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_167)
{
    // 071B 0041;	
    // (‎‎ܛ‎‎) SYRIAC LETTER TETH	[2447 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x071B, 0x0041 };
    uint32_t const ces[9] = { 0x2447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_168)
{
    // 071C 0061;	
    // (‎‎ܜ‎‎) SYRIAC LETTER TETH GARSHUNI	[2447 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x071C, 0x0061 };
    uint32_t const ces[11] = { 0x2447, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_169)
{
    // 071C 0041;	
    // (‎‎ܜ‎‎) SYRIAC LETTER TETH GARSHUNI	[2447 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x071C, 0x0041 };
    uint32_t const ces[11] = { 0x2447, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_170)
{
    // 071B 0062;	
    // (‎‎ܛ‎‎) SYRIAC LETTER TETH	[2447 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071B, 0x0062 };
    uint32_t const ces[9] = { 0x2447, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_171)
{
    // 071C 0062;	
    // (‎‎ܜ‎‎) SYRIAC LETTER TETH GARSHUNI	[2447 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x071C, 0x0062 };
    uint32_t const ces[11] = { 0x2447, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_172)
{
    // 071D 0021;	
    // (‎‎ܝ‎‎) SYRIAC LETTER YUDH	[2448 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071D, 0x0021 };
    uint32_t const ces[9] = { 0x2448, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_173)
{
    // 071D 003F;	
    // (‎‎ܝ‎‎) SYRIAC LETTER YUDH	[2448 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071D, 0x003F };
    uint32_t const ces[9] = { 0x2448, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_174)
{
    // 071D 0061;	
    // (‎‎ܝ‎‎) SYRIAC LETTER YUDH	[2448 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071D, 0x0061 };
    uint32_t const ces[9] = { 0x2448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_175)
{
    // 071D 0041;	
    // (‎‎ܝ‎‎) SYRIAC LETTER YUDH	[2448 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x071D, 0x0041 };
    uint32_t const ces[9] = { 0x2448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_176)
{
    // 071D 0062;	
    // (‎‎ܝ‎‎) SYRIAC LETTER YUDH	[2448 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071D, 0x0062 };
    uint32_t const ces[9] = { 0x2448, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_177)
{
    // 071E 0021;	
    // (‎‎ܞ‎‎) SYRIAC LETTER YUDH HE	[2449 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071E, 0x0021 };
    uint32_t const ces[9] = { 0x2449, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_178)
{
    // 071E 003F;	
    // (‎‎ܞ‎‎) SYRIAC LETTER YUDH HE	[2449 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071E, 0x003F };
    uint32_t const ces[9] = { 0x2449, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_179)
{
    // 071E 0061;	
    // (‎‎ܞ‎‎) SYRIAC LETTER YUDH HE	[2449 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071E, 0x0061 };
    uint32_t const ces[9] = { 0x2449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_180)
{
    // 071E 0041;	
    // (‎‎ܞ‎‎) SYRIAC LETTER YUDH HE	[2449 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x071E, 0x0041 };
    uint32_t const ces[9] = { 0x2449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_181)
{
    // 071E 0062;	
    // (‎‎ܞ‎‎) SYRIAC LETTER YUDH HE	[2449 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071E, 0x0062 };
    uint32_t const ces[9] = { 0x2449, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_182)
{
    // 071F 0021;	
    // (‎‎ܟ‎‎) SYRIAC LETTER KAPH	[244A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071F, 0x0021 };
    uint32_t const ces[9] = { 0x244A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_183)
{
    // 071F 003F;	
    // (‎‎ܟ‎‎) SYRIAC LETTER KAPH	[244A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071F, 0x003F };
    uint32_t const ces[9] = { 0x244A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_184)
{
    // 071F 0061;	
    // (‎‎ܟ‎‎) SYRIAC LETTER KAPH	[244A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071F, 0x0061 };
    uint32_t const ces[9] = { 0x244A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_185)
{
    // 071F 0041;	
    // (‎‎ܟ‎‎) SYRIAC LETTER KAPH	[244A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x071F, 0x0041 };
    uint32_t const ces[9] = { 0x244A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_186)
{
    // 071F 0062;	
    // (‎‎ܟ‎‎) SYRIAC LETTER KAPH	[244A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x071F, 0x0062 };
    uint32_t const ces[9] = { 0x244A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_187)
{
    // 074E 0021;	
    // (‎‎ݎ‎‎) SYRIAC LETTER SOGDIAN KHAPH	[244B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074E, 0x0021 };
    uint32_t const ces[9] = { 0x244B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_188)
{
    // 074E 003F;	
    // (‎‎ݎ‎‎) SYRIAC LETTER SOGDIAN KHAPH	[244B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074E, 0x003F };
    uint32_t const ces[9] = { 0x244B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_189)
{
    // 074E 0061;	
    // (‎‎ݎ‎‎) SYRIAC LETTER SOGDIAN KHAPH	[244B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074E, 0x0061 };
    uint32_t const ces[9] = { 0x244B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_190)
{
    // 074E 0041;	
    // (‎‎ݎ‎‎) SYRIAC LETTER SOGDIAN KHAPH	[244B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x074E, 0x0041 };
    uint32_t const ces[9] = { 0x244B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_191)
{
    // 074E 0062;	
    // (‎‎ݎ‎‎) SYRIAC LETTER SOGDIAN KHAPH	[244B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074E, 0x0062 };
    uint32_t const ces[9] = { 0x244B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_192)
{
    // 0720 0021;	
    // (‎‎ܠ‎‎) SYRIAC LETTER LAMADH	[244C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0720, 0x0021 };
    uint32_t const ces[9] = { 0x244C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_193)
{
    // 0720 003F;	
    // (‎‎ܠ‎‎) SYRIAC LETTER LAMADH	[244C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0720, 0x003F };
    uint32_t const ces[9] = { 0x244C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_194)
{
    // 0720 0061;	
    // (‎‎ܠ‎‎) SYRIAC LETTER LAMADH	[244C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0720, 0x0061 };
    uint32_t const ces[9] = { 0x244C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_195)
{
    // 0720 0041;	
    // (‎‎ܠ‎‎) SYRIAC LETTER LAMADH	[244C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0720, 0x0041 };
    uint32_t const ces[9] = { 0x244C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_196)
{
    // 0720 0062;	
    // (‎‎ܠ‎‎) SYRIAC LETTER LAMADH	[244C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0720, 0x0062 };
    uint32_t const ces[9] = { 0x244C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_197)
{
    // 0721 0021;	
    // (‎‎ܡ‎‎) SYRIAC LETTER MIM	[244D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0721, 0x0021 };
    uint32_t const ces[9] = { 0x244D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_198)
{
    // 0721 003F;	
    // (‎‎ܡ‎‎) SYRIAC LETTER MIM	[244D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0721, 0x003F };
    uint32_t const ces[9] = { 0x244D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_199)
{
    // 0721 0061;	
    // (‎‎ܡ‎‎) SYRIAC LETTER MIM	[244D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0721, 0x0061 };
    uint32_t const ces[9] = { 0x244D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_200)
{
    // 0721 0041;	
    // (‎‎ܡ‎‎) SYRIAC LETTER MIM	[244D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0721, 0x0041 };
    uint32_t const ces[9] = { 0x244D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_201)
{
    // 0721 0062;	
    // (‎‎ܡ‎‎) SYRIAC LETTER MIM	[244D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0721, 0x0062 };
    uint32_t const ces[9] = { 0x244D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_202)
{
    // 0722 0021;	
    // (‎‎ܢ‎‎) SYRIAC LETTER NUN	[244E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0722, 0x0021 };
    uint32_t const ces[9] = { 0x244E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_203)
{
    // 0722 003F;	
    // (‎‎ܢ‎‎) SYRIAC LETTER NUN	[244E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0722, 0x003F };
    uint32_t const ces[9] = { 0x244E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_204)
{
    // 0722 0061;	
    // (‎‎ܢ‎‎) SYRIAC LETTER NUN	[244E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0722, 0x0061 };
    uint32_t const ces[9] = { 0x244E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_205)
{
    // 0722 0041;	
    // (‎‎ܢ‎‎) SYRIAC LETTER NUN	[244E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0722, 0x0041 };
    uint32_t const ces[9] = { 0x244E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_206)
{
    // 0722 0062;	
    // (‎‎ܢ‎‎) SYRIAC LETTER NUN	[244E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0722, 0x0062 };
    uint32_t const ces[9] = { 0x244E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_207)
{
    // 0723 0021;	
    // (‎‎ܣ‎‎) SYRIAC LETTER SEMKATH	[244F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0723, 0x0021 };
    uint32_t const ces[9] = { 0x244F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_208)
{
    // 0724 0021;	
    // (‎‎ܤ‎‎) SYRIAC LETTER FINAL SEMKATH	[244F 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x0724, 0x0021 };
    uint32_t const ces[9] = { 0x244F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_209)
{
    // 0723 003F;	
    // (‎‎ܣ‎‎) SYRIAC LETTER SEMKATH	[244F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0723, 0x003F };
    uint32_t const ces[9] = { 0x244F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_210)
{
    // 0724 003F;	
    // (‎‎ܤ‎‎) SYRIAC LETTER FINAL SEMKATH	[244F 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x0724, 0x003F };
    uint32_t const ces[9] = { 0x244F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_211)
{
    // 0723 0061;	
    // (‎‎ܣ‎‎) SYRIAC LETTER SEMKATH	[244F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0723, 0x0061 };
    uint32_t const ces[9] = { 0x244F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_212)
{
    // 0723 0041;	
    // (‎‎ܣ‎‎) SYRIAC LETTER SEMKATH	[244F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0723, 0x0041 };
    uint32_t const ces[9] = { 0x244F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_213)
{
    // 0724 0061;	
    // (‎‎ܤ‎‎) SYRIAC LETTER FINAL SEMKATH	[244F 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x0724, 0x0061 };
    uint32_t const ces[9] = { 0x244F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_214)
{
    // 0724 0041;	
    // (‎‎ܤ‎‎) SYRIAC LETTER FINAL SEMKATH	[244F 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x0724, 0x0041 };
    uint32_t const ces[9] = { 0x244F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_215)
{
    // 0723 0062;	
    // (‎‎ܣ‎‎) SYRIAC LETTER SEMKATH	[244F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0723, 0x0062 };
    uint32_t const ces[9] = { 0x244F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_216)
{
    // 0724 0062;	
    // (‎‎ܤ‎‎) SYRIAC LETTER FINAL SEMKATH	[244F 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x0724, 0x0062 };
    uint32_t const ces[9] = { 0x244F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_217)
{
    // 0725 0021;	
    // (‎‎ܥ‎‎) SYRIAC LETTER E	[2450 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0725, 0x0021 };
    uint32_t const ces[9] = { 0x2450, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_218)
{
    // 0725 003F;	
    // (‎‎ܥ‎‎) SYRIAC LETTER E	[2450 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0725, 0x003F };
    uint32_t const ces[9] = { 0x2450, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_219)
{
    // 0725 0061;	
    // (‎‎ܥ‎‎) SYRIAC LETTER E	[2450 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0725, 0x0061 };
    uint32_t const ces[9] = { 0x2450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_220)
{
    // 0725 0041;	
    // (‎‎ܥ‎‎) SYRIAC LETTER E	[2450 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0725, 0x0041 };
    uint32_t const ces[9] = { 0x2450, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_221)
{
    // 0725 0062;	
    // (‎‎ܥ‎‎) SYRIAC LETTER E	[2450 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0725, 0x0062 };
    uint32_t const ces[9] = { 0x2450, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_222)
{
    // 0726 0021;	
    // (‎‎ܦ‎‎) SYRIAC LETTER PE	[2451 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0726, 0x0021 };
    uint32_t const ces[9] = { 0x2451, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_223)
{
    // 0727 0021;	
    // (‎‎ܧ‎‎) SYRIAC LETTER REVERSED PE	[2451 0261 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0727, 0x0021 };
    uint32_t const ces[11] = { 0x2451, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_224)
{
    // 0726 003F;	
    // (‎‎ܦ‎‎) SYRIAC LETTER PE	[2451 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0726, 0x003F };
    uint32_t const ces[9] = { 0x2451, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_225)
{
    // 0727 003F;	
    // (‎‎ܧ‎‎) SYRIAC LETTER REVERSED PE	[2451 0267 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0727, 0x003F };
    uint32_t const ces[11] = { 0x2451, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_226)
{
    // 0726 0061;	
    // (‎‎ܦ‎‎) SYRIAC LETTER PE	[2451 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0726, 0x0061 };
    uint32_t const ces[9] = { 0x2451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_227)
{
    // 0726 0041;	
    // (‎‎ܦ‎‎) SYRIAC LETTER PE	[2451 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0726, 0x0041 };
    uint32_t const ces[9] = { 0x2451, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_228)
{
    // 0727 0061;	
    // (‎‎ܧ‎‎) SYRIAC LETTER REVERSED PE	[2451 1CAD | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0727, 0x0061 };
    uint32_t const ces[11] = { 0x2451, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_229)
{
    // 0727 0041;	
    // (‎‎ܧ‎‎) SYRIAC LETTER REVERSED PE	[2451 1CAD | 0020 0112 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0727, 0x0041 };
    uint32_t const ces[11] = { 0x2451, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_230)
{
    // 0726 0062;	
    // (‎‎ܦ‎‎) SYRIAC LETTER PE	[2451 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0726, 0x0062 };
    uint32_t const ces[9] = { 0x2451, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_231)
{
    // 0727 0062;	
    // (‎‎ܧ‎‎) SYRIAC LETTER REVERSED PE	[2451 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0727, 0x0062 };
    uint32_t const ces[11] = { 0x2451, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_232)
{
    // 074F 0021;	
    // (‎‎ݏ‎‎) SYRIAC LETTER SOGDIAN FE	[2452 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074F, 0x0021 };
    uint32_t const ces[9] = { 0x2452, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_233)
{
    // 074F 003F;	
    // (‎‎ݏ‎‎) SYRIAC LETTER SOGDIAN FE	[2452 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074F, 0x003F };
    uint32_t const ces[9] = { 0x2452, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_234)
{
    // 074F 0061;	
    // (‎‎ݏ‎‎) SYRIAC LETTER SOGDIAN FE	[2452 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074F, 0x0061 };
    uint32_t const ces[9] = { 0x2452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_235)
{
    // 074F 0041;	
    // (‎‎ݏ‎‎) SYRIAC LETTER SOGDIAN FE	[2452 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x074F, 0x0041 };
    uint32_t const ces[9] = { 0x2452, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_236)
{
    // 074F 0062;	
    // (‎‎ݏ‎‎) SYRIAC LETTER SOGDIAN FE	[2452 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x074F, 0x0062 };
    uint32_t const ces[9] = { 0x2452, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_237)
{
    // 0728 0021;	
    // (‎‎ܨ‎‎) SYRIAC LETTER SADHE	[2453 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0728, 0x0021 };
    uint32_t const ces[9] = { 0x2453, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_238)
{
    // 0728 003F;	
    // (‎‎ܨ‎‎) SYRIAC LETTER SADHE	[2453 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0728, 0x003F };
    uint32_t const ces[9] = { 0x2453, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_239)
{
    // 0728 0061;	
    // (‎‎ܨ‎‎) SYRIAC LETTER SADHE	[2453 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0728, 0x0061 };
    uint32_t const ces[9] = { 0x2453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_240)
{
    // 0728 0041;	
    // (‎‎ܨ‎‎) SYRIAC LETTER SADHE	[2453 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0728, 0x0041 };
    uint32_t const ces[9] = { 0x2453, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_241)
{
    // 0728 0062;	
    // (‎‎ܨ‎‎) SYRIAC LETTER SADHE	[2453 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0728, 0x0062 };
    uint32_t const ces[9] = { 0x2453, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_242)
{
    // 0729 0021;	
    // (‎‎ܩ‎‎) SYRIAC LETTER QAPH	[2454 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0729, 0x0021 };
    uint32_t const ces[9] = { 0x2454, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_243)
{
    // 0729 003F;	
    // (‎‎ܩ‎‎) SYRIAC LETTER QAPH	[2454 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0729, 0x003F };
    uint32_t const ces[9] = { 0x2454, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_244)
{
    // 0729 0061;	
    // (‎‎ܩ‎‎) SYRIAC LETTER QAPH	[2454 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0729, 0x0061 };
    uint32_t const ces[9] = { 0x2454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_245)
{
    // 0729 0041;	
    // (‎‎ܩ‎‎) SYRIAC LETTER QAPH	[2454 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0729, 0x0041 };
    uint32_t const ces[9] = { 0x2454, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_246)
{
    // 0729 0062;	
    // (‎‎ܩ‎‎) SYRIAC LETTER QAPH	[2454 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0729, 0x0062 };
    uint32_t const ces[9] = { 0x2454, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_247)
{
    // 072A 0021;	
    // (‎‎ܪ‎‎) SYRIAC LETTER RISH	[2455 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072A, 0x0021 };
    uint32_t const ces[9] = { 0x2455, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_248)
{
    // 072A 003F;	
    // (‎‎ܪ‎‎) SYRIAC LETTER RISH	[2455 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072A, 0x003F };
    uint32_t const ces[9] = { 0x2455, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_249)
{
    // 072A 0061;	
    // (‎‎ܪ‎‎) SYRIAC LETTER RISH	[2455 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072A, 0x0061 };
    uint32_t const ces[9] = { 0x2455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_250)
{
    // 072A 0041;	
    // (‎‎ܪ‎‎) SYRIAC LETTER RISH	[2455 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x072A, 0x0041 };
    uint32_t const ces[9] = { 0x2455, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_251)
{
    // 072A 0062;	
    // (‎‎ܪ‎‎) SYRIAC LETTER RISH	[2455 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072A, 0x0062 };
    uint32_t const ces[9] = { 0x2455, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_252)
{
    // 072B 0021;	
    // (‎‎ܫ‎‎) SYRIAC LETTER SHIN	[2456 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072B, 0x0021 };
    uint32_t const ces[9] = { 0x2456, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_253)
{
    // 072B 003F;	
    // (‎‎ܫ‎‎) SYRIAC LETTER SHIN	[2456 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072B, 0x003F };
    uint32_t const ces[9] = { 0x2456, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_254)
{
    // 072B 0061;	
    // (‎‎ܫ‎‎) SYRIAC LETTER SHIN	[2456 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072B, 0x0061 };
    uint32_t const ces[9] = { 0x2456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_255)
{
    // 072B 0041;	
    // (‎‎ܫ‎‎) SYRIAC LETTER SHIN	[2456 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x072B, 0x0041 };
    uint32_t const ces[9] = { 0x2456, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_256)
{
    // 072B 0062;	
    // (‎‎ܫ‎‎) SYRIAC LETTER SHIN	[2456 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072B, 0x0062 };
    uint32_t const ces[9] = { 0x2456, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_257)
{
    // 072C 0021;	
    // (‎‎ܬ‎‎) SYRIAC LETTER TAW	[2457 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072C, 0x0021 };
    uint32_t const ces[9] = { 0x2457, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_258)
{
    // 072C 003F;	
    // (‎‎ܬ‎‎) SYRIAC LETTER TAW	[2457 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072C, 0x003F };
    uint32_t const ces[9] = { 0x2457, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_259)
{
    // 072C 0061;	
    // (‎‎ܬ‎‎) SYRIAC LETTER TAW	[2457 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072C, 0x0061 };
    uint32_t const ces[9] = { 0x2457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_260)
{
    // 072C 0041;	
    // (‎‎ܬ‎‎) SYRIAC LETTER TAW	[2457 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x072C, 0x0041 };
    uint32_t const ces[9] = { 0x2457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_261)
{
    // 072C 0062;	
    // (‎‎ܬ‎‎) SYRIAC LETTER TAW	[2457 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x072C, 0x0062 };
    uint32_t const ces[9] = { 0x2457, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_262)
{
    // 0860 0021;	
    // (‎‎ࡠ‎‎) SYRIAC LETTER MALAYALAM NGA	[2458 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0860, 0x0021 };
    uint32_t const ces[9] = { 0x2458, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_263)
{
    // 0860 003F;	
    // (‎‎ࡠ‎‎) SYRIAC LETTER MALAYALAM NGA	[2458 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0860, 0x003F };
    uint32_t const ces[9] = { 0x2458, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_264)
{
    // 0860 0061;	
    // (‎‎ࡠ‎‎) SYRIAC LETTER MALAYALAM NGA	[2458 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0860, 0x0061 };
    uint32_t const ces[9] = { 0x2458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_265)
{
    // 0860 0041;	
    // (‎‎ࡠ‎‎) SYRIAC LETTER MALAYALAM NGA	[2458 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0860, 0x0041 };
    uint32_t const ces[9] = { 0x2458, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_266)
{
    // 0860 0062;	
    // (‎‎ࡠ‎‎) SYRIAC LETTER MALAYALAM NGA	[2458 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0860, 0x0062 };
    uint32_t const ces[9] = { 0x2458, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_267)
{
    // 0861 0021;	
    // (‎‎ࡡ‎‎) SYRIAC LETTER MALAYALAM JA	[2459 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0861, 0x0021 };
    uint32_t const ces[9] = { 0x2459, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_268)
{
    // 0861 003F;	
    // (‎‎ࡡ‎‎) SYRIAC LETTER MALAYALAM JA	[2459 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0861, 0x003F };
    uint32_t const ces[9] = { 0x2459, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_269)
{
    // 0861 0061;	
    // (‎‎ࡡ‎‎) SYRIAC LETTER MALAYALAM JA	[2459 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0861, 0x0061 };
    uint32_t const ces[9] = { 0x2459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_270)
{
    // 0861 0041;	
    // (‎‎ࡡ‎‎) SYRIAC LETTER MALAYALAM JA	[2459 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0861, 0x0041 };
    uint32_t const ces[9] = { 0x2459, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_271)
{
    // 0861 0062;	
    // (‎‎ࡡ‎‎) SYRIAC LETTER MALAYALAM JA	[2459 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0861, 0x0062 };
    uint32_t const ces[9] = { 0x2459, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_272)
{
    // 0862 0021;	
    // (‎‎ࡢ‎‎) SYRIAC LETTER MALAYALAM NYA	[245A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0862, 0x0021 };
    uint32_t const ces[9] = { 0x245A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_273)
{
    // 0862 003F;	
    // (‎‎ࡢ‎‎) SYRIAC LETTER MALAYALAM NYA	[245A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0862, 0x003F };
    uint32_t const ces[9] = { 0x245A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_274)
{
    // 0862 0061;	
    // (‎‎ࡢ‎‎) SYRIAC LETTER MALAYALAM NYA	[245A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0862, 0x0061 };
    uint32_t const ces[9] = { 0x245A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_275)
{
    // 0862 0041;	
    // (‎‎ࡢ‎‎) SYRIAC LETTER MALAYALAM NYA	[245A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0862, 0x0041 };
    uint32_t const ces[9] = { 0x245A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_276)
{
    // 0862 0062;	
    // (‎‎ࡢ‎‎) SYRIAC LETTER MALAYALAM NYA	[245A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0862, 0x0062 };
    uint32_t const ces[9] = { 0x245A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_277)
{
    // 0863 0021;	
    // (‎‎ࡣ‎‎) SYRIAC LETTER MALAYALAM TTA	[245B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0863, 0x0021 };
    uint32_t const ces[9] = { 0x245B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_278)
{
    // 0863 003F;	
    // (‎‎ࡣ‎‎) SYRIAC LETTER MALAYALAM TTA	[245B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0863, 0x003F };
    uint32_t const ces[9] = { 0x245B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_279)
{
    // 0863 0061;	
    // (‎‎ࡣ‎‎) SYRIAC LETTER MALAYALAM TTA	[245B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0863, 0x0061 };
    uint32_t const ces[9] = { 0x245B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_280)
{
    // 0863 0041;	
    // (‎‎ࡣ‎‎) SYRIAC LETTER MALAYALAM TTA	[245B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0863, 0x0041 };
    uint32_t const ces[9] = { 0x245B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_281)
{
    // 0863 0062;	
    // (‎‎ࡣ‎‎) SYRIAC LETTER MALAYALAM TTA	[245B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0863, 0x0062 };
    uint32_t const ces[9] = { 0x245B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_282)
{
    // 0864 0021;	
    // (‎‎ࡤ‎‎) SYRIAC LETTER MALAYALAM NNA	[245C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0864, 0x0021 };
    uint32_t const ces[9] = { 0x245C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_283)
{
    // 0864 003F;	
    // (‎‎ࡤ‎‎) SYRIAC LETTER MALAYALAM NNA	[245C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0864, 0x003F };
    uint32_t const ces[9] = { 0x245C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_284)
{
    // 0864 0061;	
    // (‎‎ࡤ‎‎) SYRIAC LETTER MALAYALAM NNA	[245C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0864, 0x0061 };
    uint32_t const ces[9] = { 0x245C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_285)
{
    // 0864 0041;	
    // (‎‎ࡤ‎‎) SYRIAC LETTER MALAYALAM NNA	[245C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0864, 0x0041 };
    uint32_t const ces[9] = { 0x245C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_286)
{
    // 0864 0062;	
    // (‎‎ࡤ‎‎) SYRIAC LETTER MALAYALAM NNA	[245C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0864, 0x0062 };
    uint32_t const ces[9] = { 0x245C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_287)
{
    // 0865 0021;	
    // (‎‎ࡥ‎‎) SYRIAC LETTER MALAYALAM NNNA	[245D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0865, 0x0021 };
    uint32_t const ces[9] = { 0x245D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_288)
{
    // 0865 003F;	
    // (‎‎ࡥ‎‎) SYRIAC LETTER MALAYALAM NNNA	[245D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0865, 0x003F };
    uint32_t const ces[9] = { 0x245D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_289)
{
    // 0865 0061;	
    // (‎‎ࡥ‎‎) SYRIAC LETTER MALAYALAM NNNA	[245D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0865, 0x0061 };
    uint32_t const ces[9] = { 0x245D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_290)
{
    // 0865 0041;	
    // (‎‎ࡥ‎‎) SYRIAC LETTER MALAYALAM NNNA	[245D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0865, 0x0041 };
    uint32_t const ces[9] = { 0x245D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_291)
{
    // 0865 0062;	
    // (‎‎ࡥ‎‎) SYRIAC LETTER MALAYALAM NNNA	[245D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0865, 0x0062 };
    uint32_t const ces[9] = { 0x245D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_292)
{
    // 0866 0021;	
    // (‎‎ࡦ‎‎) SYRIAC LETTER MALAYALAM BHA	[245E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0866, 0x0021 };
    uint32_t const ces[9] = { 0x245E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_293)
{
    // 0866 003F;	
    // (‎‎ࡦ‎‎) SYRIAC LETTER MALAYALAM BHA	[245E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0866, 0x003F };
    uint32_t const ces[9] = { 0x245E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_294)
{
    // 0866 0061;	
    // (‎‎ࡦ‎‎) SYRIAC LETTER MALAYALAM BHA	[245E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0866, 0x0061 };
    uint32_t const ces[9] = { 0x245E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_295)
{
    // 0866 0041;	
    // (‎‎ࡦ‎‎) SYRIAC LETTER MALAYALAM BHA	[245E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0866, 0x0041 };
    uint32_t const ces[9] = { 0x245E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_296)
{
    // 0866 0062;	
    // (‎‎ࡦ‎‎) SYRIAC LETTER MALAYALAM BHA	[245E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0866, 0x0062 };
    uint32_t const ces[9] = { 0x245E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_297)
{
    // 0867 0021;	
    // (‎‎ࡧ‎‎) SYRIAC LETTER MALAYALAM RA	[245F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0867, 0x0021 };
    uint32_t const ces[9] = { 0x245F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_298)
{
    // 0867 003F;	
    // (‎‎ࡧ‎‎) SYRIAC LETTER MALAYALAM RA	[245F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0867, 0x003F };
    uint32_t const ces[9] = { 0x245F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_299)
{
    // 0867 0061;	
    // (‎‎ࡧ‎‎) SYRIAC LETTER MALAYALAM RA	[245F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0867, 0x0061 };
    uint32_t const ces[9] = { 0x245F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_300)
{
    // 0867 0041;	
    // (‎‎ࡧ‎‎) SYRIAC LETTER MALAYALAM RA	[245F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0867, 0x0041 };
    uint32_t const ces[9] = { 0x245F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_301)
{
    // 0867 0062;	
    // (‎‎ࡧ‎‎) SYRIAC LETTER MALAYALAM RA	[245F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0867, 0x0062 };
    uint32_t const ces[9] = { 0x245F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_302)
{
    // 0868 0021;	
    // (‎‎ࡨ‎‎) SYRIAC LETTER MALAYALAM LLA	[2460 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0868, 0x0021 };
    uint32_t const ces[9] = { 0x2460, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_303)
{
    // 0868 003F;	
    // (‎‎ࡨ‎‎) SYRIAC LETTER MALAYALAM LLA	[2460 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0868, 0x003F };
    uint32_t const ces[9] = { 0x2460, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_304)
{
    // 0868 0061;	
    // (‎‎ࡨ‎‎) SYRIAC LETTER MALAYALAM LLA	[2460 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0868, 0x0061 };
    uint32_t const ces[9] = { 0x2460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_305)
{
    // 0868 0041;	
    // (‎‎ࡨ‎‎) SYRIAC LETTER MALAYALAM LLA	[2460 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0868, 0x0041 };
    uint32_t const ces[9] = { 0x2460, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_306)
{
    // 0868 0062;	
    // (‎‎ࡨ‎‎) SYRIAC LETTER MALAYALAM LLA	[2460 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0868, 0x0062 };
    uint32_t const ces[9] = { 0x2460, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_307)
{
    // 0869 0021;	
    // (‎‎ࡩ‎‎) SYRIAC LETTER MALAYALAM LLLA	[2461 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0869, 0x0021 };
    uint32_t const ces[9] = { 0x2461, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_308)
{
    // 0869 003F;	
    // (‎‎ࡩ‎‎) SYRIAC LETTER MALAYALAM LLLA	[2461 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0869, 0x003F };
    uint32_t const ces[9] = { 0x2461, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_309)
{
    // 0869 0061;	
    // (‎‎ࡩ‎‎) SYRIAC LETTER MALAYALAM LLLA	[2461 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0869, 0x0061 };
    uint32_t const ces[9] = { 0x2461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_310)
{
    // 0869 0041;	
    // (‎‎ࡩ‎‎) SYRIAC LETTER MALAYALAM LLLA	[2461 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0869, 0x0041 };
    uint32_t const ces[9] = { 0x2461, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_311)
{
    // 0869 0062;	
    // (‎‎ࡩ‎‎) SYRIAC LETTER MALAYALAM LLLA	[2461 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0869, 0x0062 };
    uint32_t const ces[9] = { 0x2461, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_312)
{
    // 086A 0021;	
    // (‎‎ࡪ‎‎) SYRIAC LETTER MALAYALAM SSA	[2462 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x086A, 0x0021 };
    uint32_t const ces[9] = { 0x2462, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_313)
{
    // 086A 003F;	
    // (‎‎ࡪ‎‎) SYRIAC LETTER MALAYALAM SSA	[2462 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x086A, 0x003F };
    uint32_t const ces[9] = { 0x2462, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_314)
{
    // 086A 0061;	
    // (‎‎ࡪ‎‎) SYRIAC LETTER MALAYALAM SSA	[2462 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x086A, 0x0061 };
    uint32_t const ces[9] = { 0x2462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_315)
{
    // 086A 0041;	
    // (‎‎ࡪ‎‎) SYRIAC LETTER MALAYALAM SSA	[2462 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x086A, 0x0041 };
    uint32_t const ces[9] = { 0x2462, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_316)
{
    // 086A 0062;	
    // (‎‎ࡪ‎‎) SYRIAC LETTER MALAYALAM SSA	[2462 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x086A, 0x0062 };
    uint32_t const ces[9] = { 0x2462, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_317)
{
    // 0840 0021;	
    // (‎‎ࡀ‎‎) MANDAIC LETTER HALQA	[2463 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0840, 0x0021 };
    uint32_t const ces[9] = { 0x2463, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_318)
{
    // 0840 003F;	
    // (‎‎ࡀ‎‎) MANDAIC LETTER HALQA	[2463 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0840, 0x003F };
    uint32_t const ces[9] = { 0x2463, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_319)
{
    // 0840 0061;	
    // (‎‎ࡀ‎‎) MANDAIC LETTER HALQA	[2463 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0840, 0x0061 };
    uint32_t const ces[9] = { 0x2463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_320)
{
    // 0840 0041;	
    // (‎‎ࡀ‎‎) MANDAIC LETTER HALQA	[2463 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0840, 0x0041 };
    uint32_t const ces[9] = { 0x2463, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_321)
{
    // 0840 0062;	
    // (‎‎ࡀ‎‎) MANDAIC LETTER HALQA	[2463 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0840, 0x0062 };
    uint32_t const ces[9] = { 0x2463, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_322)
{
    // 0841 0021;	
    // (‎‎ࡁ‎‎) MANDAIC LETTER AB	[2464 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0841, 0x0021 };
    uint32_t const ces[9] = { 0x2464, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_323)
{
    // 0841 003F;	
    // (‎‎ࡁ‎‎) MANDAIC LETTER AB	[2464 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0841, 0x003F };
    uint32_t const ces[9] = { 0x2464, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_324)
{
    // 0841 0061;	
    // (‎‎ࡁ‎‎) MANDAIC LETTER AB	[2464 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0841, 0x0061 };
    uint32_t const ces[9] = { 0x2464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_325)
{
    // 0841 0041;	
    // (‎‎ࡁ‎‎) MANDAIC LETTER AB	[2464 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0841, 0x0041 };
    uint32_t const ces[9] = { 0x2464, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_326)
{
    // 0841 0062;	
    // (‎‎ࡁ‎‎) MANDAIC LETTER AB	[2464 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0841, 0x0062 };
    uint32_t const ces[9] = { 0x2464, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_327)
{
    // 0842 0021;	
    // (‎‎ࡂ‎‎) MANDAIC LETTER AG	[2465 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0842, 0x0021 };
    uint32_t const ces[9] = { 0x2465, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_328)
{
    // 0842 003F;	
    // (‎‎ࡂ‎‎) MANDAIC LETTER AG	[2465 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0842, 0x003F };
    uint32_t const ces[9] = { 0x2465, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_329)
{
    // 0842 0061;	
    // (‎‎ࡂ‎‎) MANDAIC LETTER AG	[2465 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0842, 0x0061 };
    uint32_t const ces[9] = { 0x2465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_330)
{
    // 0842 0041;	
    // (‎‎ࡂ‎‎) MANDAIC LETTER AG	[2465 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0842, 0x0041 };
    uint32_t const ces[9] = { 0x2465, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_331)
{
    // 0842 0062;	
    // (‎‎ࡂ‎‎) MANDAIC LETTER AG	[2465 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0842, 0x0062 };
    uint32_t const ces[9] = { 0x2465, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_332)
{
    // 0843 0021;	
    // (‎‎ࡃ‎‎) MANDAIC LETTER AD	[2466 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0843, 0x0021 };
    uint32_t const ces[9] = { 0x2466, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_333)
{
    // 0843 003F;	
    // (‎‎ࡃ‎‎) MANDAIC LETTER AD	[2466 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0843, 0x003F };
    uint32_t const ces[9] = { 0x2466, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_334)
{
    // 0843 0061;	
    // (‎‎ࡃ‎‎) MANDAIC LETTER AD	[2466 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0843, 0x0061 };
    uint32_t const ces[9] = { 0x2466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_335)
{
    // 0843 0041;	
    // (‎‎ࡃ‎‎) MANDAIC LETTER AD	[2466 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0843, 0x0041 };
    uint32_t const ces[9] = { 0x2466, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_336)
{
    // 0843 0062;	
    // (‎‎ࡃ‎‎) MANDAIC LETTER AD	[2466 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0843, 0x0062 };
    uint32_t const ces[9] = { 0x2466, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_337)
{
    // 0844 0021;	
    // (‎‎ࡄ‎‎) MANDAIC LETTER AH	[2467 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0844, 0x0021 };
    uint32_t const ces[9] = { 0x2467, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_338)
{
    // 0844 003F;	
    // (‎‎ࡄ‎‎) MANDAIC LETTER AH	[2467 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0844, 0x003F };
    uint32_t const ces[9] = { 0x2467, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_339)
{
    // 0844 0061;	
    // (‎‎ࡄ‎‎) MANDAIC LETTER AH	[2467 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0844, 0x0061 };
    uint32_t const ces[9] = { 0x2467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_340)
{
    // 0844 0041;	
    // (‎‎ࡄ‎‎) MANDAIC LETTER AH	[2467 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0844, 0x0041 };
    uint32_t const ces[9] = { 0x2467, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_341)
{
    // 0844 0062;	
    // (‎‎ࡄ‎‎) MANDAIC LETTER AH	[2467 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0844, 0x0062 };
    uint32_t const ces[9] = { 0x2467, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_342)
{
    // 0845 0021;	
    // (‎‎ࡅ‎‎) MANDAIC LETTER USHENNA	[2468 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0845, 0x0021 };
    uint32_t const ces[9] = { 0x2468, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_343)
{
    // 0845 003F;	
    // (‎‎ࡅ‎‎) MANDAIC LETTER USHENNA	[2468 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0845, 0x003F };
    uint32_t const ces[9] = { 0x2468, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_344)
{
    // 0845 0061;	
    // (‎‎ࡅ‎‎) MANDAIC LETTER USHENNA	[2468 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0845, 0x0061 };
    uint32_t const ces[9] = { 0x2468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_345)
{
    // 0845 0041;	
    // (‎‎ࡅ‎‎) MANDAIC LETTER USHENNA	[2468 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0845, 0x0041 };
    uint32_t const ces[9] = { 0x2468, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_346)
{
    // 0845 0062;	
    // (‎‎ࡅ‎‎) MANDAIC LETTER USHENNA	[2468 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0845, 0x0062 };
    uint32_t const ces[9] = { 0x2468, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_347)
{
    // 0846 0021;	
    // (‎‎ࡆ‎‎) MANDAIC LETTER AZ	[2469 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0846, 0x0021 };
    uint32_t const ces[9] = { 0x2469, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_348)
{
    // 0846 003F;	
    // (‎‎ࡆ‎‎) MANDAIC LETTER AZ	[2469 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0846, 0x003F };
    uint32_t const ces[9] = { 0x2469, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_349)
{
    // 0846 0061;	
    // (‎‎ࡆ‎‎) MANDAIC LETTER AZ	[2469 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0846, 0x0061 };
    uint32_t const ces[9] = { 0x2469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_350)
{
    // 0846 0041;	
    // (‎‎ࡆ‎‎) MANDAIC LETTER AZ	[2469 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0846, 0x0041 };
    uint32_t const ces[9] = { 0x2469, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_351)
{
    // 0846 0062;	
    // (‎‎ࡆ‎‎) MANDAIC LETTER AZ	[2469 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0846, 0x0062 };
    uint32_t const ces[9] = { 0x2469, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_352)
{
    // 0847 0021;	
    // (‎‎ࡇ‎‎) MANDAIC LETTER IT	[246A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0847, 0x0021 };
    uint32_t const ces[9] = { 0x246A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_353)
{
    // 0847 003F;	
    // (‎‎ࡇ‎‎) MANDAIC LETTER IT	[246A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0847, 0x003F };
    uint32_t const ces[9] = { 0x246A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_354)
{
    // 0847 0061;	
    // (‎‎ࡇ‎‎) MANDAIC LETTER IT	[246A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0847, 0x0061 };
    uint32_t const ces[9] = { 0x246A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_355)
{
    // 0847 0041;	
    // (‎‎ࡇ‎‎) MANDAIC LETTER IT	[246A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0847, 0x0041 };
    uint32_t const ces[9] = { 0x246A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_356)
{
    // 0847 0062;	
    // (‎‎ࡇ‎‎) MANDAIC LETTER IT	[246A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0847, 0x0062 };
    uint32_t const ces[9] = { 0x246A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_357)
{
    // 0848 0021;	
    // (‎‎ࡈ‎‎) MANDAIC LETTER ATT	[246B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0848, 0x0021 };
    uint32_t const ces[9] = { 0x246B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_358)
{
    // 0848 003F;	
    // (‎‎ࡈ‎‎) MANDAIC LETTER ATT	[246B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0848, 0x003F };
    uint32_t const ces[9] = { 0x246B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_359)
{
    // 0848 0061;	
    // (‎‎ࡈ‎‎) MANDAIC LETTER ATT	[246B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0848, 0x0061 };
    uint32_t const ces[9] = { 0x246B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_360)
{
    // 0848 0041;	
    // (‎‎ࡈ‎‎) MANDAIC LETTER ATT	[246B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0848, 0x0041 };
    uint32_t const ces[9] = { 0x246B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_361)
{
    // 0848 0062;	
    // (‎‎ࡈ‎‎) MANDAIC LETTER ATT	[246B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0848, 0x0062 };
    uint32_t const ces[9] = { 0x246B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_362)
{
    // 0849 0021;	
    // (‎‎ࡉ‎‎) MANDAIC LETTER AKSA	[246C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0849, 0x0021 };
    uint32_t const ces[9] = { 0x246C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_363)
{
    // 0849 003F;	
    // (‎‎ࡉ‎‎) MANDAIC LETTER AKSA	[246C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0849, 0x003F };
    uint32_t const ces[9] = { 0x246C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_364)
{
    // 0849 0061;	
    // (‎‎ࡉ‎‎) MANDAIC LETTER AKSA	[246C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0849, 0x0061 };
    uint32_t const ces[9] = { 0x246C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_365)
{
    // 0849 0041;	
    // (‎‎ࡉ‎‎) MANDAIC LETTER AKSA	[246C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0849, 0x0041 };
    uint32_t const ces[9] = { 0x246C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_366)
{
    // 0849 0062;	
    // (‎‎ࡉ‎‎) MANDAIC LETTER AKSA	[246C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0849, 0x0062 };
    uint32_t const ces[9] = { 0x246C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_367)
{
    // 084A 0021;	
    // (‎‎ࡊ‎‎) MANDAIC LETTER AK	[246D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084A, 0x0021 };
    uint32_t const ces[9] = { 0x246D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_368)
{
    // 084A 003F;	
    // (‎‎ࡊ‎‎) MANDAIC LETTER AK	[246D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084A, 0x003F };
    uint32_t const ces[9] = { 0x246D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_369)
{
    // 084A 0061;	
    // (‎‎ࡊ‎‎) MANDAIC LETTER AK	[246D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084A, 0x0061 };
    uint32_t const ces[9] = { 0x246D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_370)
{
    // 084A 0041;	
    // (‎‎ࡊ‎‎) MANDAIC LETTER AK	[246D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x084A, 0x0041 };
    uint32_t const ces[9] = { 0x246D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_371)
{
    // 084A 0062;	
    // (‎‎ࡊ‎‎) MANDAIC LETTER AK	[246D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084A, 0x0062 };
    uint32_t const ces[9] = { 0x246D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_372)
{
    // 084B 0021;	
    // (‎‎ࡋ‎‎) MANDAIC LETTER AL	[246E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084B, 0x0021 };
    uint32_t const ces[9] = { 0x246E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_373)
{
    // 084B 003F;	
    // (‎‎ࡋ‎‎) MANDAIC LETTER AL	[246E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084B, 0x003F };
    uint32_t const ces[9] = { 0x246E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_374)
{
    // 084B 0061;	
    // (‎‎ࡋ‎‎) MANDAIC LETTER AL	[246E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084B, 0x0061 };
    uint32_t const ces[9] = { 0x246E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_375)
{
    // 084B 0041;	
    // (‎‎ࡋ‎‎) MANDAIC LETTER AL	[246E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x084B, 0x0041 };
    uint32_t const ces[9] = { 0x246E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_376)
{
    // 084B 0062;	
    // (‎‎ࡋ‎‎) MANDAIC LETTER AL	[246E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084B, 0x0062 };
    uint32_t const ces[9] = { 0x246E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_377)
{
    // 084C 0021;	
    // (‎‎ࡌ‎‎) MANDAIC LETTER AM	[246F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084C, 0x0021 };
    uint32_t const ces[9] = { 0x246F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_378)
{
    // 084C 003F;	
    // (‎‎ࡌ‎‎) MANDAIC LETTER AM	[246F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084C, 0x003F };
    uint32_t const ces[9] = { 0x246F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_379)
{
    // 084C 0061;	
    // (‎‎ࡌ‎‎) MANDAIC LETTER AM	[246F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084C, 0x0061 };
    uint32_t const ces[9] = { 0x246F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_380)
{
    // 084C 0041;	
    // (‎‎ࡌ‎‎) MANDAIC LETTER AM	[246F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x084C, 0x0041 };
    uint32_t const ces[9] = { 0x246F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_381)
{
    // 084C 0062;	
    // (‎‎ࡌ‎‎) MANDAIC LETTER AM	[246F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084C, 0x0062 };
    uint32_t const ces[9] = { 0x246F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_382)
{
    // 084D 0021;	
    // (‎‎ࡍ‎‎) MANDAIC LETTER AN	[2470 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084D, 0x0021 };
    uint32_t const ces[9] = { 0x2470, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_383)
{
    // 084D 003F;	
    // (‎‎ࡍ‎‎) MANDAIC LETTER AN	[2470 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084D, 0x003F };
    uint32_t const ces[9] = { 0x2470, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_384)
{
    // 084D 0061;	
    // (‎‎ࡍ‎‎) MANDAIC LETTER AN	[2470 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084D, 0x0061 };
    uint32_t const ces[9] = { 0x2470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_385)
{
    // 084D 0041;	
    // (‎‎ࡍ‎‎) MANDAIC LETTER AN	[2470 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x084D, 0x0041 };
    uint32_t const ces[9] = { 0x2470, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_386)
{
    // 084D 0062;	
    // (‎‎ࡍ‎‎) MANDAIC LETTER AN	[2470 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084D, 0x0062 };
    uint32_t const ces[9] = { 0x2470, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_387)
{
    // 084E 0021;	
    // (‎‎ࡎ‎‎) MANDAIC LETTER AS	[2471 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084E, 0x0021 };
    uint32_t const ces[9] = { 0x2471, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_388)
{
    // 084E 003F;	
    // (‎‎ࡎ‎‎) MANDAIC LETTER AS	[2471 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084E, 0x003F };
    uint32_t const ces[9] = { 0x2471, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_389)
{
    // 084E 0061;	
    // (‎‎ࡎ‎‎) MANDAIC LETTER AS	[2471 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084E, 0x0061 };
    uint32_t const ces[9] = { 0x2471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_390)
{
    // 084E 0041;	
    // (‎‎ࡎ‎‎) MANDAIC LETTER AS	[2471 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x084E, 0x0041 };
    uint32_t const ces[9] = { 0x2471, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_391)
{
    // 084E 0062;	
    // (‎‎ࡎ‎‎) MANDAIC LETTER AS	[2471 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084E, 0x0062 };
    uint32_t const ces[9] = { 0x2471, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_392)
{
    // 084F 0021;	
    // (‎‎ࡏ‎‎) MANDAIC LETTER IN	[2472 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084F, 0x0021 };
    uint32_t const ces[9] = { 0x2472, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_393)
{
    // 084F 003F;	
    // (‎‎ࡏ‎‎) MANDAIC LETTER IN	[2472 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084F, 0x003F };
    uint32_t const ces[9] = { 0x2472, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_394)
{
    // 084F 0061;	
    // (‎‎ࡏ‎‎) MANDAIC LETTER IN	[2472 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084F, 0x0061 };
    uint32_t const ces[9] = { 0x2472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_395)
{
    // 084F 0041;	
    // (‎‎ࡏ‎‎) MANDAIC LETTER IN	[2472 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x084F, 0x0041 };
    uint32_t const ces[9] = { 0x2472, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_396)
{
    // 084F 0062;	
    // (‎‎ࡏ‎‎) MANDAIC LETTER IN	[2472 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x084F, 0x0062 };
    uint32_t const ces[9] = { 0x2472, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_397)
{
    // 0850 0021;	
    // (‎‎ࡐ‎‎) MANDAIC LETTER AP	[2473 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0850, 0x0021 };
    uint32_t const ces[9] = { 0x2473, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_398)
{
    // 0850 003F;	
    // (‎‎ࡐ‎‎) MANDAIC LETTER AP	[2473 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0850, 0x003F };
    uint32_t const ces[9] = { 0x2473, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_399)
{
    // 0850 0061;	
    // (‎‎ࡐ‎‎) MANDAIC LETTER AP	[2473 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0850, 0x0061 };
    uint32_t const ces[9] = { 0x2473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_400)
{
    // 0850 0041;	
    // (‎‎ࡐ‎‎) MANDAIC LETTER AP	[2473 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0850, 0x0041 };
    uint32_t const ces[9] = { 0x2473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_401)
{
    // 0850 0062;	
    // (‎‎ࡐ‎‎) MANDAIC LETTER AP	[2473 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0850, 0x0062 };
    uint32_t const ces[9] = { 0x2473, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_402)
{
    // 0851 0021;	
    // (‎‎ࡑ‎‎) MANDAIC LETTER ASZ	[2474 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0851, 0x0021 };
    uint32_t const ces[9] = { 0x2474, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_403)
{
    // 0851 003F;	
    // (‎‎ࡑ‎‎) MANDAIC LETTER ASZ	[2474 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0851, 0x003F };
    uint32_t const ces[9] = { 0x2474, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_404)
{
    // 0851 0061;	
    // (‎‎ࡑ‎‎) MANDAIC LETTER ASZ	[2474 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0851, 0x0061 };
    uint32_t const ces[9] = { 0x2474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_405)
{
    // 0851 0041;	
    // (‎‎ࡑ‎‎) MANDAIC LETTER ASZ	[2474 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0851, 0x0041 };
    uint32_t const ces[9] = { 0x2474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_406)
{
    // 0851 0062;	
    // (‎‎ࡑ‎‎) MANDAIC LETTER ASZ	[2474 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0851, 0x0062 };
    uint32_t const ces[9] = { 0x2474, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_407)
{
    // 0852 0021;	
    // (‎‎ࡒ‎‎) MANDAIC LETTER AQ	[2475 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0852, 0x0021 };
    uint32_t const ces[9] = { 0x2475, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_408)
{
    // 0852 003F;	
    // (‎‎ࡒ‎‎) MANDAIC LETTER AQ	[2475 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0852, 0x003F };
    uint32_t const ces[9] = { 0x2475, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_409)
{
    // 0852 0061;	
    // (‎‎ࡒ‎‎) MANDAIC LETTER AQ	[2475 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0852, 0x0061 };
    uint32_t const ces[9] = { 0x2475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_410)
{
    // 0852 0041;	
    // (‎‎ࡒ‎‎) MANDAIC LETTER AQ	[2475 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0852, 0x0041 };
    uint32_t const ces[9] = { 0x2475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_411)
{
    // 0852 0062;	
    // (‎‎ࡒ‎‎) MANDAIC LETTER AQ	[2475 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0852, 0x0062 };
    uint32_t const ces[9] = { 0x2475, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_412)
{
    // 0853 0021;	
    // (‎‎ࡓ‎‎) MANDAIC LETTER AR	[2476 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0853, 0x0021 };
    uint32_t const ces[9] = { 0x2476, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_413)
{
    // 0853 003F;	
    // (‎‎ࡓ‎‎) MANDAIC LETTER AR	[2476 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0853, 0x003F };
    uint32_t const ces[9] = { 0x2476, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_414)
{
    // 0853 0061;	
    // (‎‎ࡓ‎‎) MANDAIC LETTER AR	[2476 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0853, 0x0061 };
    uint32_t const ces[9] = { 0x2476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_415)
{
    // 0853 0041;	
    // (‎‎ࡓ‎‎) MANDAIC LETTER AR	[2476 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0853, 0x0041 };
    uint32_t const ces[9] = { 0x2476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_416)
{
    // 0853 0062;	
    // (‎‎ࡓ‎‎) MANDAIC LETTER AR	[2476 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0853, 0x0062 };
    uint32_t const ces[9] = { 0x2476, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_417)
{
    // 0854 0021;	
    // (‎‎ࡔ‎‎) MANDAIC LETTER ASH	[2477 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0854, 0x0021 };
    uint32_t const ces[9] = { 0x2477, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_418)
{
    // 0854 003F;	
    // (‎‎ࡔ‎‎) MANDAIC LETTER ASH	[2477 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0854, 0x003F };
    uint32_t const ces[9] = { 0x2477, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_419)
{
    // 0854 0061;	
    // (‎‎ࡔ‎‎) MANDAIC LETTER ASH	[2477 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0854, 0x0061 };
    uint32_t const ces[9] = { 0x2477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_420)
{
    // 0854 0041;	
    // (‎‎ࡔ‎‎) MANDAIC LETTER ASH	[2477 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0854, 0x0041 };
    uint32_t const ces[9] = { 0x2477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_421)
{
    // 0854 0062;	
    // (‎‎ࡔ‎‎) MANDAIC LETTER ASH	[2477 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0854, 0x0062 };
    uint32_t const ces[9] = { 0x2477, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_422)
{
    // 0855 0021;	
    // (‎‎ࡕ‎‎) MANDAIC LETTER AT	[2478 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0855, 0x0021 };
    uint32_t const ces[9] = { 0x2478, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_423)
{
    // 0855 003F;	
    // (‎‎ࡕ‎‎) MANDAIC LETTER AT	[2478 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0855, 0x003F };
    uint32_t const ces[9] = { 0x2478, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_424)
{
    // 0855 0061;	
    // (‎‎ࡕ‎‎) MANDAIC LETTER AT	[2478 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0855, 0x0061 };
    uint32_t const ces[9] = { 0x2478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_425)
{
    // 0855 0041;	
    // (‎‎ࡕ‎‎) MANDAIC LETTER AT	[2478 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0855, 0x0041 };
    uint32_t const ces[9] = { 0x2478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_426)
{
    // 0855 0062;	
    // (‎‎ࡕ‎‎) MANDAIC LETTER AT	[2478 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0855, 0x0062 };
    uint32_t const ces[9] = { 0x2478, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_427)
{
    // 0856 0021;	
    // (‎‎ࡖ‎‎) MANDAIC LETTER DUSHENNA	[2479 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0856, 0x0021 };
    uint32_t const ces[9] = { 0x2479, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_428)
{
    // 0856 003F;	
    // (‎‎ࡖ‎‎) MANDAIC LETTER DUSHENNA	[2479 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0856, 0x003F };
    uint32_t const ces[9] = { 0x2479, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_429)
{
    // 0856 0061;	
    // (‎‎ࡖ‎‎) MANDAIC LETTER DUSHENNA	[2479 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0856, 0x0061 };
    uint32_t const ces[9] = { 0x2479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_430)
{
    // 0856 0041;	
    // (‎‎ࡖ‎‎) MANDAIC LETTER DUSHENNA	[2479 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0856, 0x0041 };
    uint32_t const ces[9] = { 0x2479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_431)
{
    // 0856 0062;	
    // (‎‎ࡖ‎‎) MANDAIC LETTER DUSHENNA	[2479 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0856, 0x0062 };
    uint32_t const ces[9] = { 0x2479, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_432)
{
    // 0857 0021;	
    // (‎‎ࡗ‎‎) MANDAIC LETTER KAD	[247A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0857, 0x0021 };
    uint32_t const ces[9] = { 0x247A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_433)
{
    // 0857 003F;	
    // (‎‎ࡗ‎‎) MANDAIC LETTER KAD	[247A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0857, 0x003F };
    uint32_t const ces[9] = { 0x247A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_434)
{
    // 0857 0061;	
    // (‎‎ࡗ‎‎) MANDAIC LETTER KAD	[247A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0857, 0x0061 };
    uint32_t const ces[9] = { 0x247A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_435)
{
    // 0857 0041;	
    // (‎‎ࡗ‎‎) MANDAIC LETTER KAD	[247A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0857, 0x0041 };
    uint32_t const ces[9] = { 0x247A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_436)
{
    // 0857 0062;	
    // (‎‎ࡗ‎‎) MANDAIC LETTER KAD	[247A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0857, 0x0062 };
    uint32_t const ces[9] = { 0x247A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_437)
{
    // 0858 0021;	
    // (‎‎ࡘ‎‎) MANDAIC LETTER AIN	[247B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0858, 0x0021 };
    uint32_t const ces[9] = { 0x247B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_438)
{
    // 0858 003F;	
    // (‎‎ࡘ‎‎) MANDAIC LETTER AIN	[247B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0858, 0x003F };
    uint32_t const ces[9] = { 0x247B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_439)
{
    // 0858 0061;	
    // (‎‎ࡘ‎‎) MANDAIC LETTER AIN	[247B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0858, 0x0061 };
    uint32_t const ces[9] = { 0x247B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_440)
{
    // 0858 0041;	
    // (‎‎ࡘ‎‎) MANDAIC LETTER AIN	[247B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0858, 0x0041 };
    uint32_t const ces[9] = { 0x247B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_441)
{
    // 0858 0062;	
    // (‎‎ࡘ‎‎) MANDAIC LETTER AIN	[247B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0858, 0x0062 };
    uint32_t const ces[9] = { 0x247B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_442)
{
    // 0780 0021;	
    // (‎‎ހ‎‎) THAANA LETTER HAA	[247C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0780, 0x0021 };
    uint32_t const ces[9] = { 0x247C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_443)
{
    // 0780 003F;	
    // (‎‎ހ‎‎) THAANA LETTER HAA	[247C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0780, 0x003F };
    uint32_t const ces[9] = { 0x247C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_444)
{
    // 0780 0061;	
    // (‎‎ހ‎‎) THAANA LETTER HAA	[247C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0780, 0x0061 };
    uint32_t const ces[9] = { 0x247C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_445)
{
    // 0780 0041;	
    // (‎‎ހ‎‎) THAANA LETTER HAA	[247C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0780, 0x0041 };
    uint32_t const ces[9] = { 0x247C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_446)
{
    // 0780 0062;	
    // (‎‎ހ‎‎) THAANA LETTER HAA	[247C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0780, 0x0062 };
    uint32_t const ces[9] = { 0x247C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_447)
{
    // 0799 0021;	
    // (‎‎ޙ‎‎) THAANA LETTER HHAA	[247D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0799, 0x0021 };
    uint32_t const ces[9] = { 0x247D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_448)
{
    // 0799 003F;	
    // (‎‎ޙ‎‎) THAANA LETTER HHAA	[247D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0799, 0x003F };
    uint32_t const ces[9] = { 0x247D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_449)
{
    // 0799 0061;	
    // (‎‎ޙ‎‎) THAANA LETTER HHAA	[247D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0799, 0x0061 };
    uint32_t const ces[9] = { 0x247D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_450)
{
    // 0799 0041;	
    // (‎‎ޙ‎‎) THAANA LETTER HHAA	[247D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0799, 0x0041 };
    uint32_t const ces[9] = { 0x247D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_451)
{
    // 0799 0062;	
    // (‎‎ޙ‎‎) THAANA LETTER HHAA	[247D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0799, 0x0062 };
    uint32_t const ces[9] = { 0x247D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_452)
{
    // 079A 0021;	
    // (‎‎ޚ‎‎) THAANA LETTER KHAA	[247E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x079A, 0x0021 };
    uint32_t const ces[9] = { 0x247E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_453)
{
    // 079A 003F;	
    // (‎‎ޚ‎‎) THAANA LETTER KHAA	[247E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x079A, 0x003F };
    uint32_t const ces[9] = { 0x247E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_454)
{
    // 079A 0061;	
    // (‎‎ޚ‎‎) THAANA LETTER KHAA	[247E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x079A, 0x0061 };
    uint32_t const ces[9] = { 0x247E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_455)
{
    // 079A 0041;	
    // (‎‎ޚ‎‎) THAANA LETTER KHAA	[247E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x079A, 0x0041 };
    uint32_t const ces[9] = { 0x247E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_456)
{
    // 079A 0062;	
    // (‎‎ޚ‎‎) THAANA LETTER KHAA	[247E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x079A, 0x0062 };
    uint32_t const ces[9] = { 0x247E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_457)
{
    // 0781 0021;	
    // (‎‎ށ‎‎) THAANA LETTER SHAVIYANI	[247F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0781, 0x0021 };
    uint32_t const ces[9] = { 0x247F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_458)
{
    // 0781 003F;	
    // (‎‎ށ‎‎) THAANA LETTER SHAVIYANI	[247F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0781, 0x003F };
    uint32_t const ces[9] = { 0x247F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_459)
{
    // 0781 0061;	
    // (‎‎ށ‎‎) THAANA LETTER SHAVIYANI	[247F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0781, 0x0061 };
    uint32_t const ces[9] = { 0x247F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_460)
{
    // 0781 0041;	
    // (‎‎ށ‎‎) THAANA LETTER SHAVIYANI	[247F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0781, 0x0041 };
    uint32_t const ces[9] = { 0x247F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_461)
{
    // 0781 0062;	
    // (‎‎ށ‎‎) THAANA LETTER SHAVIYANI	[247F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0781, 0x0062 };
    uint32_t const ces[9] = { 0x247F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_462)
{
    // 0782 0021;	
    // (‎‎ނ‎‎) THAANA LETTER NOONU	[2480 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0782, 0x0021 };
    uint32_t const ces[9] = { 0x2480, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_463)
{
    // 0782 003F;	
    // (‎‎ނ‎‎) THAANA LETTER NOONU	[2480 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0782, 0x003F };
    uint32_t const ces[9] = { 0x2480, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_464)
{
    // 0782 0061;	
    // (‎‎ނ‎‎) THAANA LETTER NOONU	[2480 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0782, 0x0061 };
    uint32_t const ces[9] = { 0x2480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_465)
{
    // 0782 0041;	
    // (‎‎ނ‎‎) THAANA LETTER NOONU	[2480 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0782, 0x0041 };
    uint32_t const ces[9] = { 0x2480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_466)
{
    // 0782 0062;	
    // (‎‎ނ‎‎) THAANA LETTER NOONU	[2480 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0782, 0x0062 };
    uint32_t const ces[9] = { 0x2480, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_467)
{
    // 0783 0021;	
    // (‎‎ރ‎‎) THAANA LETTER RAA	[2481 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0783, 0x0021 };
    uint32_t const ces[9] = { 0x2481, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_468)
{
    // 0783 003F;	
    // (‎‎ރ‎‎) THAANA LETTER RAA	[2481 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0783, 0x003F };
    uint32_t const ces[9] = { 0x2481, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_469)
{
    // 0783 0061;	
    // (‎‎ރ‎‎) THAANA LETTER RAA	[2481 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0783, 0x0061 };
    uint32_t const ces[9] = { 0x2481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_470)
{
    // 0783 0041;	
    // (‎‎ރ‎‎) THAANA LETTER RAA	[2481 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0783, 0x0041 };
    uint32_t const ces[9] = { 0x2481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_471)
{
    // 0783 0062;	
    // (‎‎ރ‎‎) THAANA LETTER RAA	[2481 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0783, 0x0062 };
    uint32_t const ces[9] = { 0x2481, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_472)
{
    // 079C 0021;	
    // (‎‎ޜ‎‎) THAANA LETTER ZAA	[2482 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x079C, 0x0021 };
    uint32_t const ces[9] = { 0x2482, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_473)
{
    // 079C 003F;	
    // (‎‎ޜ‎‎) THAANA LETTER ZAA	[2482 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x079C, 0x003F };
    uint32_t const ces[9] = { 0x2482, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_474)
{
    // 079C 0061;	
    // (‎‎ޜ‎‎) THAANA LETTER ZAA	[2482 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x079C, 0x0061 };
    uint32_t const ces[9] = { 0x2482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_475)
{
    // 079C 0041;	
    // (‎‎ޜ‎‎) THAANA LETTER ZAA	[2482 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x079C, 0x0041 };
    uint32_t const ces[9] = { 0x2482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_476)
{
    // 079C 0062;	
    // (‎‎ޜ‎‎) THAANA LETTER ZAA	[2482 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x079C, 0x0062 };
    uint32_t const ces[9] = { 0x2482, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_477)
{
    // 0784 0021;	
    // (‎‎ބ‎‎) THAANA LETTER BAA	[2483 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0784, 0x0021 };
    uint32_t const ces[9] = { 0x2483, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_478)
{
    // 0784 003F;	
    // (‎‎ބ‎‎) THAANA LETTER BAA	[2483 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0784, 0x003F };
    uint32_t const ces[9] = { 0x2483, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_479)
{
    // 0784 0061;	
    // (‎‎ބ‎‎) THAANA LETTER BAA	[2483 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0784, 0x0061 };
    uint32_t const ces[9] = { 0x2483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_480)
{
    // 0784 0041;	
    // (‎‎ބ‎‎) THAANA LETTER BAA	[2483 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0784, 0x0041 };
    uint32_t const ces[9] = { 0x2483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_481)
{
    // 0784 0062;	
    // (‎‎ބ‎‎) THAANA LETTER BAA	[2483 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0784, 0x0062 };
    uint32_t const ces[9] = { 0x2483, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_482)
{
    // 0785 0021;	
    // (‎‎ޅ‎‎) THAANA LETTER LHAVIYANI	[2484 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0785, 0x0021 };
    uint32_t const ces[9] = { 0x2484, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_483)
{
    // 0785 003F;	
    // (‎‎ޅ‎‎) THAANA LETTER LHAVIYANI	[2484 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0785, 0x003F };
    uint32_t const ces[9] = { 0x2484, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_484)
{
    // 0785 0061;	
    // (‎‎ޅ‎‎) THAANA LETTER LHAVIYANI	[2484 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0785, 0x0061 };
    uint32_t const ces[9] = { 0x2484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_485)
{
    // 0785 0041;	
    // (‎‎ޅ‎‎) THAANA LETTER LHAVIYANI	[2484 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0785, 0x0041 };
    uint32_t const ces[9] = { 0x2484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_486)
{
    // 0785 0062;	
    // (‎‎ޅ‎‎) THAANA LETTER LHAVIYANI	[2484 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0785, 0x0062 };
    uint32_t const ces[9] = { 0x2484, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_487)
{
    // 0786 0021;	
    // (‎‎ކ‎‎) THAANA LETTER KAAFU	[2485 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0786, 0x0021 };
    uint32_t const ces[9] = { 0x2485, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_488)
{
    // 0786 003F;	
    // (‎‎ކ‎‎) THAANA LETTER KAAFU	[2485 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0786, 0x003F };
    uint32_t const ces[9] = { 0x2485, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_489)
{
    // 0786 0061;	
    // (‎‎ކ‎‎) THAANA LETTER KAAFU	[2485 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0786, 0x0061 };
    uint32_t const ces[9] = { 0x2485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_490)
{
    // 0786 0041;	
    // (‎‎ކ‎‎) THAANA LETTER KAAFU	[2485 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0786, 0x0041 };
    uint32_t const ces[9] = { 0x2485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_491)
{
    // 0786 0062;	
    // (‎‎ކ‎‎) THAANA LETTER KAAFU	[2485 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0786, 0x0062 };
    uint32_t const ces[9] = { 0x2485, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_492)
{
    // 0787 0021;	
    // (‎‎އ‎‎) THAANA LETTER ALIFU	[2486 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0787, 0x0021 };
    uint32_t const ces[9] = { 0x2486, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_493)
{
    // 0787 003F;	
    // (‎‎އ‎‎) THAANA LETTER ALIFU	[2486 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0787, 0x003F };
    uint32_t const ces[9] = { 0x2486, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_494)
{
    // 0787 0061;	
    // (‎‎އ‎‎) THAANA LETTER ALIFU	[2486 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0787, 0x0061 };
    uint32_t const ces[9] = { 0x2486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_495)
{
    // 0787 0041;	
    // (‎‎އ‎‎) THAANA LETTER ALIFU	[2486 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0787, 0x0041 };
    uint32_t const ces[9] = { 0x2486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_496)
{
    // 0787 0062;	
    // (‎‎އ‎‎) THAANA LETTER ALIFU	[2486 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0787, 0x0062 };
    uint32_t const ces[9] = { 0x2486, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_497)
{
    // 07A2 0021;	
    // (‎‎ޢ‎‎) THAANA LETTER AINU	[2487 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07A2, 0x0021 };
    uint32_t const ces[9] = { 0x2487, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_498)
{
    // 07A2 003F;	
    // (‎‎ޢ‎‎) THAANA LETTER AINU	[2487 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07A2, 0x003F };
    uint32_t const ces[9] = { 0x2487, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_158_499)
{
    // 07A2 0061;	
    // (‎‎ޢ‎‎) THAANA LETTER AINU	[2487 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x07A2, 0x0061 };
    uint32_t const ces[9] = { 0x2487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

