// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_173_000)
{
    // ABC1 003F;	
    // (ꯁ) MEETEI MAYEK LETTER SAM	[2991 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC1, 0x003F };
    uint32_t const ces[9] = { 0x2991, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_001)
{
    // ABC1 0061;	
    // (ꯁ) MEETEI MAYEK LETTER SAM	[2991 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC1, 0x0061 };
    uint32_t const ces[9] = { 0x2991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_002)
{
    // ABC1 0041;	
    // (ꯁ) MEETEI MAYEK LETTER SAM	[2991 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC1, 0x0041 };
    uint32_t const ces[9] = { 0x2991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_003)
{
    // ABC1 0062;	
    // (ꯁ) MEETEI MAYEK LETTER SAM	[2991 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC1, 0x0062 };
    uint32_t const ces[9] = { 0x2991, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_004)
{
    // ABC2 0021;	
    // (ꯂ) MEETEI MAYEK LETTER LAI	[2992 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC2, 0x0021 };
    uint32_t const ces[9] = { 0x2992, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_005)
{
    // ABC2 003F;	
    // (ꯂ) MEETEI MAYEK LETTER LAI	[2992 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC2, 0x003F };
    uint32_t const ces[9] = { 0x2992, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_006)
{
    // ABC2 0061;	
    // (ꯂ) MEETEI MAYEK LETTER LAI	[2992 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC2, 0x0061 };
    uint32_t const ces[9] = { 0x2992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_007)
{
    // ABC2 0041;	
    // (ꯂ) MEETEI MAYEK LETTER LAI	[2992 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC2, 0x0041 };
    uint32_t const ces[9] = { 0x2992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_008)
{
    // ABC2 0062;	
    // (ꯂ) MEETEI MAYEK LETTER LAI	[2992 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC2, 0x0062 };
    uint32_t const ces[9] = { 0x2992, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_009)
{
    // ABC3 0021;	
    // (ꯃ) MEETEI MAYEK LETTER MIT	[2993 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC3, 0x0021 };
    uint32_t const ces[9] = { 0x2993, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_010)
{
    // ABC3 003F;	
    // (ꯃ) MEETEI MAYEK LETTER MIT	[2993 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC3, 0x003F };
    uint32_t const ces[9] = { 0x2993, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_011)
{
    // ABC3 0061;	
    // (ꯃ) MEETEI MAYEK LETTER MIT	[2993 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC3, 0x0061 };
    uint32_t const ces[9] = { 0x2993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_012)
{
    // ABC3 0041;	
    // (ꯃ) MEETEI MAYEK LETTER MIT	[2993 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC3, 0x0041 };
    uint32_t const ces[9] = { 0x2993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_013)
{
    // ABC3 0062;	
    // (ꯃ) MEETEI MAYEK LETTER MIT	[2993 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC3, 0x0062 };
    uint32_t const ces[9] = { 0x2993, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_014)
{
    // ABC4 0021;	
    // (ꯄ) MEETEI MAYEK LETTER PA	[2994 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC4, 0x0021 };
    uint32_t const ces[9] = { 0x2994, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_015)
{
    // ABC4 003F;	
    // (ꯄ) MEETEI MAYEK LETTER PA	[2994 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC4, 0x003F };
    uint32_t const ces[9] = { 0x2994, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_016)
{
    // ABC4 0061;	
    // (ꯄ) MEETEI MAYEK LETTER PA	[2994 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC4, 0x0061 };
    uint32_t const ces[9] = { 0x2994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_017)
{
    // ABC4 0041;	
    // (ꯄ) MEETEI MAYEK LETTER PA	[2994 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC4, 0x0041 };
    uint32_t const ces[9] = { 0x2994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_018)
{
    // ABC4 0062;	
    // (ꯄ) MEETEI MAYEK LETTER PA	[2994 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC4, 0x0062 };
    uint32_t const ces[9] = { 0x2994, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_019)
{
    // ABC5 0021;	
    // (ꯅ) MEETEI MAYEK LETTER NA	[2995 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC5, 0x0021 };
    uint32_t const ces[9] = { 0x2995, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_020)
{
    // ABC5 003F;	
    // (ꯅ) MEETEI MAYEK LETTER NA	[2995 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC5, 0x003F };
    uint32_t const ces[9] = { 0x2995, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_021)
{
    // ABC5 0061;	
    // (ꯅ) MEETEI MAYEK LETTER NA	[2995 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC5, 0x0061 };
    uint32_t const ces[9] = { 0x2995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_022)
{
    // ABC5 0041;	
    // (ꯅ) MEETEI MAYEK LETTER NA	[2995 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC5, 0x0041 };
    uint32_t const ces[9] = { 0x2995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_023)
{
    // ABC5 0062;	
    // (ꯅ) MEETEI MAYEK LETTER NA	[2995 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC5, 0x0062 };
    uint32_t const ces[9] = { 0x2995, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_024)
{
    // ABC6 0021;	
    // (ꯆ) MEETEI MAYEK LETTER CHIL	[2996 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC6, 0x0021 };
    uint32_t const ces[9] = { 0x2996, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_025)
{
    // ABC6 003F;	
    // (ꯆ) MEETEI MAYEK LETTER CHIL	[2996 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC6, 0x003F };
    uint32_t const ces[9] = { 0x2996, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_026)
{
    // ABC6 0061;	
    // (ꯆ) MEETEI MAYEK LETTER CHIL	[2996 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC6, 0x0061 };
    uint32_t const ces[9] = { 0x2996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_027)
{
    // ABC6 0041;	
    // (ꯆ) MEETEI MAYEK LETTER CHIL	[2996 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC6, 0x0041 };
    uint32_t const ces[9] = { 0x2996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_028)
{
    // ABC6 0062;	
    // (ꯆ) MEETEI MAYEK LETTER CHIL	[2996 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC6, 0x0062 };
    uint32_t const ces[9] = { 0x2996, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_029)
{
    // ABC7 0021;	
    // (ꯇ) MEETEI MAYEK LETTER TIL	[2997 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC7, 0x0021 };
    uint32_t const ces[9] = { 0x2997, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_030)
{
    // ABC7 003F;	
    // (ꯇ) MEETEI MAYEK LETTER TIL	[2997 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC7, 0x003F };
    uint32_t const ces[9] = { 0x2997, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_031)
{
    // ABC7 0061;	
    // (ꯇ) MEETEI MAYEK LETTER TIL	[2997 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC7, 0x0061 };
    uint32_t const ces[9] = { 0x2997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_032)
{
    // ABC7 0041;	
    // (ꯇ) MEETEI MAYEK LETTER TIL	[2997 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC7, 0x0041 };
    uint32_t const ces[9] = { 0x2997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_033)
{
    // ABC7 0062;	
    // (ꯇ) MEETEI MAYEK LETTER TIL	[2997 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC7, 0x0062 };
    uint32_t const ces[9] = { 0x2997, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_034)
{
    // ABC8 0021;	
    // (ꯈ) MEETEI MAYEK LETTER KHOU	[2998 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC8, 0x0021 };
    uint32_t const ces[9] = { 0x2998, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_035)
{
    // ABC8 003F;	
    // (ꯈ) MEETEI MAYEK LETTER KHOU	[2998 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC8, 0x003F };
    uint32_t const ces[9] = { 0x2998, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_036)
{
    // ABC8 0061;	
    // (ꯈ) MEETEI MAYEK LETTER KHOU	[2998 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC8, 0x0061 };
    uint32_t const ces[9] = { 0x2998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_037)
{
    // ABC8 0041;	
    // (ꯈ) MEETEI MAYEK LETTER KHOU	[2998 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC8, 0x0041 };
    uint32_t const ces[9] = { 0x2998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_038)
{
    // ABC8 0062;	
    // (ꯈ) MEETEI MAYEK LETTER KHOU	[2998 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC8, 0x0062 };
    uint32_t const ces[9] = { 0x2998, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_039)
{
    // ABC9 0021;	
    // (ꯉ) MEETEI MAYEK LETTER NGOU	[2999 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC9, 0x0021 };
    uint32_t const ces[9] = { 0x2999, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_040)
{
    // ABC9 003F;	
    // (ꯉ) MEETEI MAYEK LETTER NGOU	[2999 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC9, 0x003F };
    uint32_t const ces[9] = { 0x2999, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_041)
{
    // ABC9 0061;	
    // (ꯉ) MEETEI MAYEK LETTER NGOU	[2999 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC9, 0x0061 };
    uint32_t const ces[9] = { 0x2999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_042)
{
    // ABC9 0041;	
    // (ꯉ) MEETEI MAYEK LETTER NGOU	[2999 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABC9, 0x0041 };
    uint32_t const ces[9] = { 0x2999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_043)
{
    // ABC9 0062;	
    // (ꯉ) MEETEI MAYEK LETTER NGOU	[2999 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABC9, 0x0062 };
    uint32_t const ces[9] = { 0x2999, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_044)
{
    // ABCA 0021;	
    // (ꯊ) MEETEI MAYEK LETTER THOU	[299A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCA, 0x0021 };
    uint32_t const ces[9] = { 0x299A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_045)
{
    // ABCA 003F;	
    // (ꯊ) MEETEI MAYEK LETTER THOU	[299A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCA, 0x003F };
    uint32_t const ces[9] = { 0x299A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_046)
{
    // ABCA 0061;	
    // (ꯊ) MEETEI MAYEK LETTER THOU	[299A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCA, 0x0061 };
    uint32_t const ces[9] = { 0x299A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_047)
{
    // ABCA 0041;	
    // (ꯊ) MEETEI MAYEK LETTER THOU	[299A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABCA, 0x0041 };
    uint32_t const ces[9] = { 0x299A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_048)
{
    // ABCA 0062;	
    // (ꯊ) MEETEI MAYEK LETTER THOU	[299A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCA, 0x0062 };
    uint32_t const ces[9] = { 0x299A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_049)
{
    // ABCB 0021;	
    // (ꯋ) MEETEI MAYEK LETTER WAI	[299B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCB, 0x0021 };
    uint32_t const ces[9] = { 0x299B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_050)
{
    // ABCB 003F;	
    // (ꯋ) MEETEI MAYEK LETTER WAI	[299B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCB, 0x003F };
    uint32_t const ces[9] = { 0x299B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_051)
{
    // ABCB 0061;	
    // (ꯋ) MEETEI MAYEK LETTER WAI	[299B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCB, 0x0061 };
    uint32_t const ces[9] = { 0x299B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_052)
{
    // ABCB 0041;	
    // (ꯋ) MEETEI MAYEK LETTER WAI	[299B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABCB, 0x0041 };
    uint32_t const ces[9] = { 0x299B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_053)
{
    // ABCB 0062;	
    // (ꯋ) MEETEI MAYEK LETTER WAI	[299B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCB, 0x0062 };
    uint32_t const ces[9] = { 0x299B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_054)
{
    // ABCC 0021;	
    // (ꯌ) MEETEI MAYEK LETTER YANG	[299C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCC, 0x0021 };
    uint32_t const ces[9] = { 0x299C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_055)
{
    // ABCC 003F;	
    // (ꯌ) MEETEI MAYEK LETTER YANG	[299C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCC, 0x003F };
    uint32_t const ces[9] = { 0x299C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_056)
{
    // ABCC 0061;	
    // (ꯌ) MEETEI MAYEK LETTER YANG	[299C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCC, 0x0061 };
    uint32_t const ces[9] = { 0x299C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_057)
{
    // ABCC 0041;	
    // (ꯌ) MEETEI MAYEK LETTER YANG	[299C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABCC, 0x0041 };
    uint32_t const ces[9] = { 0x299C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_058)
{
    // ABCC 0062;	
    // (ꯌ) MEETEI MAYEK LETTER YANG	[299C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCC, 0x0062 };
    uint32_t const ces[9] = { 0x299C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_059)
{
    // ABCD 0021;	
    // (ꯍ) MEETEI MAYEK LETTER HUK	[299D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCD, 0x0021 };
    uint32_t const ces[9] = { 0x299D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_060)
{
    // ABCD 003F;	
    // (ꯍ) MEETEI MAYEK LETTER HUK	[299D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCD, 0x003F };
    uint32_t const ces[9] = { 0x299D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_061)
{
    // ABCD 0061;	
    // (ꯍ) MEETEI MAYEK LETTER HUK	[299D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCD, 0x0061 };
    uint32_t const ces[9] = { 0x299D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_062)
{
    // ABCD 0041;	
    // (ꯍ) MEETEI MAYEK LETTER HUK	[299D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABCD, 0x0041 };
    uint32_t const ces[9] = { 0x299D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_063)
{
    // ABCD 0062;	
    // (ꯍ) MEETEI MAYEK LETTER HUK	[299D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCD, 0x0062 };
    uint32_t const ces[9] = { 0x299D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_064)
{
    // ABCE 0021;	
    // (ꯎ) MEETEI MAYEK LETTER UN	[299E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCE, 0x0021 };
    uint32_t const ces[9] = { 0x299E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_065)
{
    // ABCE 003F;	
    // (ꯎ) MEETEI MAYEK LETTER UN	[299E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCE, 0x003F };
    uint32_t const ces[9] = { 0x299E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_066)
{
    // ABCE 0061;	
    // (ꯎ) MEETEI MAYEK LETTER UN	[299E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCE, 0x0061 };
    uint32_t const ces[9] = { 0x299E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_067)
{
    // ABCE 0041;	
    // (ꯎ) MEETEI MAYEK LETTER UN	[299E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABCE, 0x0041 };
    uint32_t const ces[9] = { 0x299E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_068)
{
    // ABCE 0062;	
    // (ꯎ) MEETEI MAYEK LETTER UN	[299E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCE, 0x0062 };
    uint32_t const ces[9] = { 0x299E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_069)
{
    // ABCF 0021;	
    // (ꯏ) MEETEI MAYEK LETTER I	[299F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCF, 0x0021 };
    uint32_t const ces[9] = { 0x299F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_070)
{
    // ABCF 003F;	
    // (ꯏ) MEETEI MAYEK LETTER I	[299F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCF, 0x003F };
    uint32_t const ces[9] = { 0x299F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_071)
{
    // ABCF 0061;	
    // (ꯏ) MEETEI MAYEK LETTER I	[299F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCF, 0x0061 };
    uint32_t const ces[9] = { 0x299F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_072)
{
    // ABCF 0041;	
    // (ꯏ) MEETEI MAYEK LETTER I	[299F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABCF, 0x0041 };
    uint32_t const ces[9] = { 0x299F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_073)
{
    // ABCF 0062;	
    // (ꯏ) MEETEI MAYEK LETTER I	[299F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABCF, 0x0062 };
    uint32_t const ces[9] = { 0x299F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_074)
{
    // ABD0 0021;	
    // (ꯐ) MEETEI MAYEK LETTER PHAM	[29A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD0, 0x0021 };
    uint32_t const ces[9] = { 0x29A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_075)
{
    // ABD0 003F;	
    // (ꯐ) MEETEI MAYEK LETTER PHAM	[29A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD0, 0x003F };
    uint32_t const ces[9] = { 0x29A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_076)
{
    // ABD0 0061;	
    // (ꯐ) MEETEI MAYEK LETTER PHAM	[29A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD0, 0x0061 };
    uint32_t const ces[9] = { 0x29A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_077)
{
    // ABD0 0041;	
    // (ꯐ) MEETEI MAYEK LETTER PHAM	[29A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD0, 0x0041 };
    uint32_t const ces[9] = { 0x29A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_078)
{
    // ABD0 0062;	
    // (ꯐ) MEETEI MAYEK LETTER PHAM	[29A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD0, 0x0062 };
    uint32_t const ces[9] = { 0x29A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_079)
{
    // ABD1 0021;	
    // (ꯑ) MEETEI MAYEK LETTER ATIYA	[29A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD1, 0x0021 };
    uint32_t const ces[9] = { 0x29A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_080)
{
    // ABD1 003F;	
    // (ꯑ) MEETEI MAYEK LETTER ATIYA	[29A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD1, 0x003F };
    uint32_t const ces[9] = { 0x29A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_081)
{
    // ABD1 0061;	
    // (ꯑ) MEETEI MAYEK LETTER ATIYA	[29A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD1, 0x0061 };
    uint32_t const ces[9] = { 0x29A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_082)
{
    // ABD1 0041;	
    // (ꯑ) MEETEI MAYEK LETTER ATIYA	[29A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD1, 0x0041 };
    uint32_t const ces[9] = { 0x29A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_083)
{
    // ABD1 0062;	
    // (ꯑ) MEETEI MAYEK LETTER ATIYA	[29A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD1, 0x0062 };
    uint32_t const ces[9] = { 0x29A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_084)
{
    // ABD2 0021;	
    // (ꯒ) MEETEI MAYEK LETTER GOK	[29A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD2, 0x0021 };
    uint32_t const ces[9] = { 0x29A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_085)
{
    // ABD2 003F;	
    // (ꯒ) MEETEI MAYEK LETTER GOK	[29A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD2, 0x003F };
    uint32_t const ces[9] = { 0x29A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_086)
{
    // ABD2 0061;	
    // (ꯒ) MEETEI MAYEK LETTER GOK	[29A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD2, 0x0061 };
    uint32_t const ces[9] = { 0x29A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_087)
{
    // ABD2 0041;	
    // (ꯒ) MEETEI MAYEK LETTER GOK	[29A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD2, 0x0041 };
    uint32_t const ces[9] = { 0x29A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_088)
{
    // ABD2 0062;	
    // (ꯒ) MEETEI MAYEK LETTER GOK	[29A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD2, 0x0062 };
    uint32_t const ces[9] = { 0x29A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_089)
{
    // ABD3 0021;	
    // (ꯓ) MEETEI MAYEK LETTER JHAM	[29A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD3, 0x0021 };
    uint32_t const ces[9] = { 0x29A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_090)
{
    // ABD3 003F;	
    // (ꯓ) MEETEI MAYEK LETTER JHAM	[29A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD3, 0x003F };
    uint32_t const ces[9] = { 0x29A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_091)
{
    // ABD3 0061;	
    // (ꯓ) MEETEI MAYEK LETTER JHAM	[29A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD3, 0x0061 };
    uint32_t const ces[9] = { 0x29A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_092)
{
    // ABD3 0041;	
    // (ꯓ) MEETEI MAYEK LETTER JHAM	[29A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD3, 0x0041 };
    uint32_t const ces[9] = { 0x29A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_093)
{
    // ABD3 0062;	
    // (ꯓ) MEETEI MAYEK LETTER JHAM	[29A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD3, 0x0062 };
    uint32_t const ces[9] = { 0x29A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_094)
{
    // ABD4 0021;	
    // (ꯔ) MEETEI MAYEK LETTER RAI	[29A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD4, 0x0021 };
    uint32_t const ces[9] = { 0x29A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_095)
{
    // ABD4 003F;	
    // (ꯔ) MEETEI MAYEK LETTER RAI	[29A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD4, 0x003F };
    uint32_t const ces[9] = { 0x29A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_096)
{
    // ABD4 0061;	
    // (ꯔ) MEETEI MAYEK LETTER RAI	[29A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD4, 0x0061 };
    uint32_t const ces[9] = { 0x29A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_097)
{
    // ABD4 0041;	
    // (ꯔ) MEETEI MAYEK LETTER RAI	[29A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD4, 0x0041 };
    uint32_t const ces[9] = { 0x29A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_098)
{
    // ABD4 0062;	
    // (ꯔ) MEETEI MAYEK LETTER RAI	[29A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD4, 0x0062 };
    uint32_t const ces[9] = { 0x29A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_099)
{
    // ABD5 0021;	
    // (ꯕ) MEETEI MAYEK LETTER BA	[29A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD5, 0x0021 };
    uint32_t const ces[9] = { 0x29A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_100)
{
    // ABD5 003F;	
    // (ꯕ) MEETEI MAYEK LETTER BA	[29A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD5, 0x003F };
    uint32_t const ces[9] = { 0x29A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_101)
{
    // ABD5 0061;	
    // (ꯕ) MEETEI MAYEK LETTER BA	[29A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD5, 0x0061 };
    uint32_t const ces[9] = { 0x29A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_102)
{
    // ABD5 0041;	
    // (ꯕ) MEETEI MAYEK LETTER BA	[29A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD5, 0x0041 };
    uint32_t const ces[9] = { 0x29A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_103)
{
    // ABD5 0062;	
    // (ꯕ) MEETEI MAYEK LETTER BA	[29A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD5, 0x0062 };
    uint32_t const ces[9] = { 0x29A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_104)
{
    // ABD6 0021;	
    // (ꯖ) MEETEI MAYEK LETTER JIL	[29A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD6, 0x0021 };
    uint32_t const ces[9] = { 0x29A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_105)
{
    // ABD6 003F;	
    // (ꯖ) MEETEI MAYEK LETTER JIL	[29A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD6, 0x003F };
    uint32_t const ces[9] = { 0x29A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_106)
{
    // ABD6 0061;	
    // (ꯖ) MEETEI MAYEK LETTER JIL	[29A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD6, 0x0061 };
    uint32_t const ces[9] = { 0x29A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_107)
{
    // ABD6 0041;	
    // (ꯖ) MEETEI MAYEK LETTER JIL	[29A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD6, 0x0041 };
    uint32_t const ces[9] = { 0x29A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_108)
{
    // ABD6 0062;	
    // (ꯖ) MEETEI MAYEK LETTER JIL	[29A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD6, 0x0062 };
    uint32_t const ces[9] = { 0x29A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_109)
{
    // ABD7 0021;	
    // (ꯗ) MEETEI MAYEK LETTER DIL	[29A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD7, 0x0021 };
    uint32_t const ces[9] = { 0x29A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_110)
{
    // ABD7 003F;	
    // (ꯗ) MEETEI MAYEK LETTER DIL	[29A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD7, 0x003F };
    uint32_t const ces[9] = { 0x29A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_111)
{
    // ABD7 0061;	
    // (ꯗ) MEETEI MAYEK LETTER DIL	[29A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD7, 0x0061 };
    uint32_t const ces[9] = { 0x29A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_112)
{
    // ABD7 0041;	
    // (ꯗ) MEETEI MAYEK LETTER DIL	[29A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD7, 0x0041 };
    uint32_t const ces[9] = { 0x29A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_113)
{
    // ABD7 0062;	
    // (ꯗ) MEETEI MAYEK LETTER DIL	[29A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD7, 0x0062 };
    uint32_t const ces[9] = { 0x29A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_114)
{
    // ABD8 0021;	
    // (ꯘ) MEETEI MAYEK LETTER GHOU	[29A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD8, 0x0021 };
    uint32_t const ces[9] = { 0x29A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_115)
{
    // ABD8 003F;	
    // (ꯘ) MEETEI MAYEK LETTER GHOU	[29A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD8, 0x003F };
    uint32_t const ces[9] = { 0x29A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_116)
{
    // ABD8 0061;	
    // (ꯘ) MEETEI MAYEK LETTER GHOU	[29A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD8, 0x0061 };
    uint32_t const ces[9] = { 0x29A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_117)
{
    // ABD8 0041;	
    // (ꯘ) MEETEI MAYEK LETTER GHOU	[29A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD8, 0x0041 };
    uint32_t const ces[9] = { 0x29A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_118)
{
    // ABD8 0062;	
    // (ꯘ) MEETEI MAYEK LETTER GHOU	[29A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD8, 0x0062 };
    uint32_t const ces[9] = { 0x29A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_119)
{
    // ABD9 0021;	
    // (ꯙ) MEETEI MAYEK LETTER DHOU	[29A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD9, 0x0021 };
    uint32_t const ces[9] = { 0x29A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_120)
{
    // ABD9 003F;	
    // (ꯙ) MEETEI MAYEK LETTER DHOU	[29A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD9, 0x003F };
    uint32_t const ces[9] = { 0x29A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_121)
{
    // ABD9 0061;	
    // (ꯙ) MEETEI MAYEK LETTER DHOU	[29A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD9, 0x0061 };
    uint32_t const ces[9] = { 0x29A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_122)
{
    // ABD9 0041;	
    // (ꯙ) MEETEI MAYEK LETTER DHOU	[29A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABD9, 0x0041 };
    uint32_t const ces[9] = { 0x29A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_123)
{
    // ABD9 0062;	
    // (ꯙ) MEETEI MAYEK LETTER DHOU	[29A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABD9, 0x0062 };
    uint32_t const ces[9] = { 0x29A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_124)
{
    // ABDA 0021;	
    // (ꯚ) MEETEI MAYEK LETTER BHAM	[29AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDA, 0x0021 };
    uint32_t const ces[9] = { 0x29AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_125)
{
    // ABDA 003F;	
    // (ꯚ) MEETEI MAYEK LETTER BHAM	[29AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDA, 0x003F };
    uint32_t const ces[9] = { 0x29AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_126)
{
    // ABDA 0061;	
    // (ꯚ) MEETEI MAYEK LETTER BHAM	[29AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDA, 0x0061 };
    uint32_t const ces[9] = { 0x29AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_127)
{
    // ABDA 0041;	
    // (ꯚ) MEETEI MAYEK LETTER BHAM	[29AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABDA, 0x0041 };
    uint32_t const ces[9] = { 0x29AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_128)
{
    // ABDA 0062;	
    // (ꯚ) MEETEI MAYEK LETTER BHAM	[29AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDA, 0x0062 };
    uint32_t const ces[9] = { 0x29AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_129)
{
    // AAE0 0021;	
    // (ꫠ) MEETEI MAYEK LETTER E	[29AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE0, 0x0021 };
    uint32_t const ces[9] = { 0x29AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_130)
{
    // AAE0 003F;	
    // (ꫠ) MEETEI MAYEK LETTER E	[29AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE0, 0x003F };
    uint32_t const ces[9] = { 0x29AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_131)
{
    // AAE0 0061;	
    // (ꫠ) MEETEI MAYEK LETTER E	[29AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE0, 0x0061 };
    uint32_t const ces[9] = { 0x29AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_132)
{
    // AAE0 0041;	
    // (ꫠ) MEETEI MAYEK LETTER E	[29AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE0, 0x0041 };
    uint32_t const ces[9] = { 0x29AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_133)
{
    // AAE0 0062;	
    // (ꫠ) MEETEI MAYEK LETTER E	[29AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE0, 0x0062 };
    uint32_t const ces[9] = { 0x29AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_134)
{
    // AAE1 0021;	
    // (ꫡ) MEETEI MAYEK LETTER O	[29AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE1, 0x0021 };
    uint32_t const ces[9] = { 0x29AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_135)
{
    // AAE1 003F;	
    // (ꫡ) MEETEI MAYEK LETTER O	[29AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE1, 0x003F };
    uint32_t const ces[9] = { 0x29AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_136)
{
    // AAE1 0061;	
    // (ꫡ) MEETEI MAYEK LETTER O	[29AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE1, 0x0061 };
    uint32_t const ces[9] = { 0x29AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_137)
{
    // AAE1 0041;	
    // (ꫡ) MEETEI MAYEK LETTER O	[29AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE1, 0x0041 };
    uint32_t const ces[9] = { 0x29AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_138)
{
    // AAE1 0062;	
    // (ꫡ) MEETEI MAYEK LETTER O	[29AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE1, 0x0062 };
    uint32_t const ces[9] = { 0x29AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_139)
{
    // AAE2 0021;	
    // (ꫢ) MEETEI MAYEK LETTER CHA	[29AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE2, 0x0021 };
    uint32_t const ces[9] = { 0x29AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_140)
{
    // AAE2 003F;	
    // (ꫢ) MEETEI MAYEK LETTER CHA	[29AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE2, 0x003F };
    uint32_t const ces[9] = { 0x29AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_141)
{
    // AAE2 0061;	
    // (ꫢ) MEETEI MAYEK LETTER CHA	[29AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE2, 0x0061 };
    uint32_t const ces[9] = { 0x29AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_142)
{
    // AAE2 0041;	
    // (ꫢ) MEETEI MAYEK LETTER CHA	[29AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE2, 0x0041 };
    uint32_t const ces[9] = { 0x29AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_143)
{
    // AAE2 0062;	
    // (ꫢ) MEETEI MAYEK LETTER CHA	[29AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE2, 0x0062 };
    uint32_t const ces[9] = { 0x29AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_144)
{
    // AAE3 0021;	
    // (ꫣ) MEETEI MAYEK LETTER NYA	[29AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE3, 0x0021 };
    uint32_t const ces[9] = { 0x29AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_145)
{
    // AAE3 003F;	
    // (ꫣ) MEETEI MAYEK LETTER NYA	[29AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE3, 0x003F };
    uint32_t const ces[9] = { 0x29AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_146)
{
    // AAE3 0061;	
    // (ꫣ) MEETEI MAYEK LETTER NYA	[29AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE3, 0x0061 };
    uint32_t const ces[9] = { 0x29AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_147)
{
    // AAE3 0041;	
    // (ꫣ) MEETEI MAYEK LETTER NYA	[29AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE3, 0x0041 };
    uint32_t const ces[9] = { 0x29AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_148)
{
    // AAE3 0062;	
    // (ꫣ) MEETEI MAYEK LETTER NYA	[29AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE3, 0x0062 };
    uint32_t const ces[9] = { 0x29AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_149)
{
    // AAE4 0021;	
    // (ꫤ) MEETEI MAYEK LETTER TTA	[29AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE4, 0x0021 };
    uint32_t const ces[9] = { 0x29AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_150)
{
    // AAE4 003F;	
    // (ꫤ) MEETEI MAYEK LETTER TTA	[29AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE4, 0x003F };
    uint32_t const ces[9] = { 0x29AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_151)
{
    // AAE4 0061;	
    // (ꫤ) MEETEI MAYEK LETTER TTA	[29AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE4, 0x0061 };
    uint32_t const ces[9] = { 0x29AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_152)
{
    // AAE4 0041;	
    // (ꫤ) MEETEI MAYEK LETTER TTA	[29AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE4, 0x0041 };
    uint32_t const ces[9] = { 0x29AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_153)
{
    // AAE4 0062;	
    // (ꫤ) MEETEI MAYEK LETTER TTA	[29AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE4, 0x0062 };
    uint32_t const ces[9] = { 0x29AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_154)
{
    // AAE5 0021;	
    // (ꫥ) MEETEI MAYEK LETTER TTHA	[29B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE5, 0x0021 };
    uint32_t const ces[9] = { 0x29B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_155)
{
    // AAE5 003F;	
    // (ꫥ) MEETEI MAYEK LETTER TTHA	[29B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE5, 0x003F };
    uint32_t const ces[9] = { 0x29B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_156)
{
    // AAE5 0061;	
    // (ꫥ) MEETEI MAYEK LETTER TTHA	[29B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE5, 0x0061 };
    uint32_t const ces[9] = { 0x29B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_157)
{
    // AAE5 0041;	
    // (ꫥ) MEETEI MAYEK LETTER TTHA	[29B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE5, 0x0041 };
    uint32_t const ces[9] = { 0x29B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_158)
{
    // AAE5 0062;	
    // (ꫥ) MEETEI MAYEK LETTER TTHA	[29B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE5, 0x0062 };
    uint32_t const ces[9] = { 0x29B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_159)
{
    // AAE6 0021;	
    // (ꫦ) MEETEI MAYEK LETTER DDA	[29B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE6, 0x0021 };
    uint32_t const ces[9] = { 0x29B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_160)
{
    // AAE6 003F;	
    // (ꫦ) MEETEI MAYEK LETTER DDA	[29B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE6, 0x003F };
    uint32_t const ces[9] = { 0x29B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_161)
{
    // AAE6 0061;	
    // (ꫦ) MEETEI MAYEK LETTER DDA	[29B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE6, 0x0061 };
    uint32_t const ces[9] = { 0x29B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_162)
{
    // AAE6 0041;	
    // (ꫦ) MEETEI MAYEK LETTER DDA	[29B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE6, 0x0041 };
    uint32_t const ces[9] = { 0x29B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_163)
{
    // AAE6 0062;	
    // (ꫦ) MEETEI MAYEK LETTER DDA	[29B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE6, 0x0062 };
    uint32_t const ces[9] = { 0x29B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_164)
{
    // AAE7 0021;	
    // (ꫧ) MEETEI MAYEK LETTER DDHA	[29B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE7, 0x0021 };
    uint32_t const ces[9] = { 0x29B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_165)
{
    // AAE7 003F;	
    // (ꫧ) MEETEI MAYEK LETTER DDHA	[29B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE7, 0x003F };
    uint32_t const ces[9] = { 0x29B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_166)
{
    // AAE7 0061;	
    // (ꫧ) MEETEI MAYEK LETTER DDHA	[29B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE7, 0x0061 };
    uint32_t const ces[9] = { 0x29B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_167)
{
    // AAE7 0041;	
    // (ꫧ) MEETEI MAYEK LETTER DDHA	[29B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE7, 0x0041 };
    uint32_t const ces[9] = { 0x29B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_168)
{
    // AAE7 0062;	
    // (ꫧ) MEETEI MAYEK LETTER DDHA	[29B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE7, 0x0062 };
    uint32_t const ces[9] = { 0x29B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_169)
{
    // AAE8 0021;	
    // (ꫨ) MEETEI MAYEK LETTER NNA	[29B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE8, 0x0021 };
    uint32_t const ces[9] = { 0x29B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_170)
{
    // AAE8 003F;	
    // (ꫨ) MEETEI MAYEK LETTER NNA	[29B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE8, 0x003F };
    uint32_t const ces[9] = { 0x29B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_171)
{
    // AAE8 0061;	
    // (ꫨ) MEETEI MAYEK LETTER NNA	[29B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE8, 0x0061 };
    uint32_t const ces[9] = { 0x29B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_172)
{
    // AAE8 0041;	
    // (ꫨ) MEETEI MAYEK LETTER NNA	[29B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE8, 0x0041 };
    uint32_t const ces[9] = { 0x29B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_173)
{
    // AAE8 0062;	
    // (ꫨ) MEETEI MAYEK LETTER NNA	[29B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE8, 0x0062 };
    uint32_t const ces[9] = { 0x29B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_174)
{
    // AAE9 0021;	
    // (ꫩ) MEETEI MAYEK LETTER SHA	[29B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE9, 0x0021 };
    uint32_t const ces[9] = { 0x29B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_175)
{
    // AAE9 003F;	
    // (ꫩ) MEETEI MAYEK LETTER SHA	[29B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE9, 0x003F };
    uint32_t const ces[9] = { 0x29B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_176)
{
    // AAE9 0061;	
    // (ꫩ) MEETEI MAYEK LETTER SHA	[29B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE9, 0x0061 };
    uint32_t const ces[9] = { 0x29B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_177)
{
    // AAE9 0041;	
    // (ꫩ) MEETEI MAYEK LETTER SHA	[29B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAE9, 0x0041 };
    uint32_t const ces[9] = { 0x29B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_178)
{
    // AAE9 0062;	
    // (ꫩ) MEETEI MAYEK LETTER SHA	[29B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAE9, 0x0062 };
    uint32_t const ces[9] = { 0x29B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_179)
{
    // AAEA 0021;	
    // (ꫪ) MEETEI MAYEK LETTER SSA	[29B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEA, 0x0021 };
    uint32_t const ces[9] = { 0x29B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_180)
{
    // AAEA 003F;	
    // (ꫪ) MEETEI MAYEK LETTER SSA	[29B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEA, 0x003F };
    uint32_t const ces[9] = { 0x29B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_181)
{
    // AAEA 0061;	
    // (ꫪ) MEETEI MAYEK LETTER SSA	[29B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEA, 0x0061 };
    uint32_t const ces[9] = { 0x29B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_182)
{
    // AAEA 0041;	
    // (ꫪ) MEETEI MAYEK LETTER SSA	[29B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAEA, 0x0041 };
    uint32_t const ces[9] = { 0x29B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_183)
{
    // AAEA 0062;	
    // (ꫪ) MEETEI MAYEK LETTER SSA	[29B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEA, 0x0062 };
    uint32_t const ces[9] = { 0x29B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_184)
{
    // ABE3 0021;	
    // (ꯣ) MEETEI MAYEK VOWEL SIGN ONAP	[29B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE3, 0x0021 };
    uint32_t const ces[9] = { 0x29B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_185)
{
    // ABE3 003F;	
    // (ꯣ) MEETEI MAYEK VOWEL SIGN ONAP	[29B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE3, 0x003F };
    uint32_t const ces[9] = { 0x29B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_186)
{
    // ABE3 0061;	
    // (ꯣ) MEETEI MAYEK VOWEL SIGN ONAP	[29B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE3, 0x0061 };
    uint32_t const ces[9] = { 0x29B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_187)
{
    // ABE3 0041;	
    // (ꯣ) MEETEI MAYEK VOWEL SIGN ONAP	[29B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE3, 0x0041 };
    uint32_t const ces[9] = { 0x29B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_188)
{
    // ABE3 0062;	
    // (ꯣ) MEETEI MAYEK VOWEL SIGN ONAP	[29B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE3, 0x0062 };
    uint32_t const ces[9] = { 0x29B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_189)
{
    // ABE4 0021;	
    // (ꯤ) MEETEI MAYEK VOWEL SIGN INAP	[29B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE4, 0x0021 };
    uint32_t const ces[9] = { 0x29B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_190)
{
    // ABE4 003F;	
    // (ꯤ) MEETEI MAYEK VOWEL SIGN INAP	[29B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE4, 0x003F };
    uint32_t const ces[9] = { 0x29B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_191)
{
    // ABE4 0061;	
    // (ꯤ) MEETEI MAYEK VOWEL SIGN INAP	[29B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE4, 0x0061 };
    uint32_t const ces[9] = { 0x29B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_192)
{
    // ABE4 0041;	
    // (ꯤ) MEETEI MAYEK VOWEL SIGN INAP	[29B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE4, 0x0041 };
    uint32_t const ces[9] = { 0x29B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_193)
{
    // ABE4 0062;	
    // (ꯤ) MEETEI MAYEK VOWEL SIGN INAP	[29B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE4, 0x0062 };
    uint32_t const ces[9] = { 0x29B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_194)
{
    // ABE5 0021;	
    // (ꯥ) MEETEI MAYEK VOWEL SIGN ANAP	[29B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE5, 0x0021 };
    uint32_t const ces[9] = { 0x29B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_195)
{
    // ABE5 003F;	
    // (ꯥ) MEETEI MAYEK VOWEL SIGN ANAP	[29B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE5, 0x003F };
    uint32_t const ces[9] = { 0x29B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_196)
{
    // ABE5 0061;	
    // (ꯥ) MEETEI MAYEK VOWEL SIGN ANAP	[29B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE5, 0x0061 };
    uint32_t const ces[9] = { 0x29B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_197)
{
    // ABE5 0041;	
    // (ꯥ) MEETEI MAYEK VOWEL SIGN ANAP	[29B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE5, 0x0041 };
    uint32_t const ces[9] = { 0x29B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_198)
{
    // ABE5 0062;	
    // (ꯥ) MEETEI MAYEK VOWEL SIGN ANAP	[29B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE5, 0x0062 };
    uint32_t const ces[9] = { 0x29B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_199)
{
    // ABE6 0021;	
    // (ꯦ) MEETEI MAYEK VOWEL SIGN YENAP	[29B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE6, 0x0021 };
    uint32_t const ces[9] = { 0x29B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_200)
{
    // ABE6 003F;	
    // (ꯦ) MEETEI MAYEK VOWEL SIGN YENAP	[29B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE6, 0x003F };
    uint32_t const ces[9] = { 0x29B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_201)
{
    // ABE6 0061;	
    // (ꯦ) MEETEI MAYEK VOWEL SIGN YENAP	[29B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE6, 0x0061 };
    uint32_t const ces[9] = { 0x29B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_202)
{
    // ABE6 0041;	
    // (ꯦ) MEETEI MAYEK VOWEL SIGN YENAP	[29B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE6, 0x0041 };
    uint32_t const ces[9] = { 0x29B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_203)
{
    // ABE6 0062;	
    // (ꯦ) MEETEI MAYEK VOWEL SIGN YENAP	[29B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE6, 0x0062 };
    uint32_t const ces[9] = { 0x29B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_204)
{
    // ABE7 0021;	
    // (ꯧ) MEETEI MAYEK VOWEL SIGN SOUNAP	[29BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE7, 0x0021 };
    uint32_t const ces[9] = { 0x29BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_205)
{
    // ABE7 003F;	
    // (ꯧ) MEETEI MAYEK VOWEL SIGN SOUNAP	[29BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE7, 0x003F };
    uint32_t const ces[9] = { 0x29BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_206)
{
    // ABE7 0061;	
    // (ꯧ) MEETEI MAYEK VOWEL SIGN SOUNAP	[29BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE7, 0x0061 };
    uint32_t const ces[9] = { 0x29BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_207)
{
    // ABE7 0041;	
    // (ꯧ) MEETEI MAYEK VOWEL SIGN SOUNAP	[29BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE7, 0x0041 };
    uint32_t const ces[9] = { 0x29BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_208)
{
    // ABE7 0062;	
    // (ꯧ) MEETEI MAYEK VOWEL SIGN SOUNAP	[29BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE7, 0x0062 };
    uint32_t const ces[9] = { 0x29BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_209)
{
    // ABE8 0021;	
    // (ꯨ) MEETEI MAYEK VOWEL SIGN UNAP	[29BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE8, 0x0021 };
    uint32_t const ces[9] = { 0x29BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_210)
{
    // ABE8 003F;	
    // (ꯨ) MEETEI MAYEK VOWEL SIGN UNAP	[29BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE8, 0x003F };
    uint32_t const ces[9] = { 0x29BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_211)
{
    // ABE8 0061;	
    // (ꯨ) MEETEI MAYEK VOWEL SIGN UNAP	[29BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE8, 0x0061 };
    uint32_t const ces[9] = { 0x29BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_212)
{
    // ABE8 0041;	
    // (ꯨ) MEETEI MAYEK VOWEL SIGN UNAP	[29BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE8, 0x0041 };
    uint32_t const ces[9] = { 0x29BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_213)
{
    // ABE8 0062;	
    // (ꯨ) MEETEI MAYEK VOWEL SIGN UNAP	[29BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE8, 0x0062 };
    uint32_t const ces[9] = { 0x29BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_214)
{
    // ABE9 0021;	
    // (ꯩ) MEETEI MAYEK VOWEL SIGN CHEINAP	[29BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE9, 0x0021 };
    uint32_t const ces[9] = { 0x29BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_215)
{
    // ABE9 003F;	
    // (ꯩ) MEETEI MAYEK VOWEL SIGN CHEINAP	[29BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE9, 0x003F };
    uint32_t const ces[9] = { 0x29BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_216)
{
    // ABE9 0061;	
    // (ꯩ) MEETEI MAYEK VOWEL SIGN CHEINAP	[29BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE9, 0x0061 };
    uint32_t const ces[9] = { 0x29BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_217)
{
    // ABE9 0041;	
    // (ꯩ) MEETEI MAYEK VOWEL SIGN CHEINAP	[29BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE9, 0x0041 };
    uint32_t const ces[9] = { 0x29BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_218)
{
    // ABE9 0062;	
    // (ꯩ) MEETEI MAYEK VOWEL SIGN CHEINAP	[29BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE9, 0x0062 };
    uint32_t const ces[9] = { 0x29BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_219)
{
    // ABEA 0021;	
    // (ꯪ) MEETEI MAYEK VOWEL SIGN NUNG	[29BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABEA, 0x0021 };
    uint32_t const ces[9] = { 0x29BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_220)
{
    // ABEA 003F;	
    // (ꯪ) MEETEI MAYEK VOWEL SIGN NUNG	[29BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABEA, 0x003F };
    uint32_t const ces[9] = { 0x29BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_221)
{
    // ABEA 0061;	
    // (ꯪ) MEETEI MAYEK VOWEL SIGN NUNG	[29BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABEA, 0x0061 };
    uint32_t const ces[9] = { 0x29BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_222)
{
    // ABEA 0041;	
    // (ꯪ) MEETEI MAYEK VOWEL SIGN NUNG	[29BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABEA, 0x0041 };
    uint32_t const ces[9] = { 0x29BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_223)
{
    // ABEA 0062;	
    // (ꯪ) MEETEI MAYEK VOWEL SIGN NUNG	[29BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABEA, 0x0062 };
    uint32_t const ces[9] = { 0x29BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_224)
{
    // AAEB 0021;	
    // (ꫫ) MEETEI MAYEK VOWEL SIGN II	[29BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEB, 0x0021 };
    uint32_t const ces[9] = { 0x29BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_225)
{
    // AAEB 003F;	
    // (ꫫ) MEETEI MAYEK VOWEL SIGN II	[29BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEB, 0x003F };
    uint32_t const ces[9] = { 0x29BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_226)
{
    // AAEB 0061;	
    // (ꫫ) MEETEI MAYEK VOWEL SIGN II	[29BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEB, 0x0061 };
    uint32_t const ces[9] = { 0x29BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_227)
{
    // AAEB 0041;	
    // (ꫫ) MEETEI MAYEK VOWEL SIGN II	[29BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAEB, 0x0041 };
    uint32_t const ces[9] = { 0x29BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_228)
{
    // AAEB 0062;	
    // (ꫫ) MEETEI MAYEK VOWEL SIGN II	[29BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEB, 0x0062 };
    uint32_t const ces[9] = { 0x29BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_229)
{
    // AAEC 0021;	
    // (ꫬ) MEETEI MAYEK VOWEL SIGN UU	[29BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEC, 0x0021 };
    uint32_t const ces[9] = { 0x29BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_230)
{
    // AAEC 003F;	
    // (ꫬ) MEETEI MAYEK VOWEL SIGN UU	[29BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEC, 0x003F };
    uint32_t const ces[9] = { 0x29BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_231)
{
    // AAEC 0061;	
    // (ꫬ) MEETEI MAYEK VOWEL SIGN UU	[29BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEC, 0x0061 };
    uint32_t const ces[9] = { 0x29BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_232)
{
    // AAEC 0041;	
    // (ꫬ) MEETEI MAYEK VOWEL SIGN UU	[29BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAEC, 0x0041 };
    uint32_t const ces[9] = { 0x29BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_233)
{
    // AAEC 0062;	
    // (ꫬ) MEETEI MAYEK VOWEL SIGN UU	[29BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEC, 0x0062 };
    uint32_t const ces[9] = { 0x29BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_234)
{
    // AAED 0021;	
    // (ꫭ) MEETEI MAYEK VOWEL SIGN AAI	[29C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAED, 0x0021 };
    uint32_t const ces[9] = { 0x29C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_235)
{
    // AAED 003F;	
    // (ꫭ) MEETEI MAYEK VOWEL SIGN AAI	[29C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAED, 0x003F };
    uint32_t const ces[9] = { 0x29C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_236)
{
    // AAED 0061;	
    // (ꫭ) MEETEI MAYEK VOWEL SIGN AAI	[29C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAED, 0x0061 };
    uint32_t const ces[9] = { 0x29C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_237)
{
    // AAED 0041;	
    // (ꫭ) MEETEI MAYEK VOWEL SIGN AAI	[29C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAED, 0x0041 };
    uint32_t const ces[9] = { 0x29C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_238)
{
    // AAED 0062;	
    // (ꫭ) MEETEI MAYEK VOWEL SIGN AAI	[29C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAED, 0x0062 };
    uint32_t const ces[9] = { 0x29C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_239)
{
    // AAEE 0021;	
    // (ꫮ) MEETEI MAYEK VOWEL SIGN AU	[29C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEE, 0x0021 };
    uint32_t const ces[9] = { 0x29C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_240)
{
    // AAEE 003F;	
    // (ꫮ) MEETEI MAYEK VOWEL SIGN AU	[29C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEE, 0x003F };
    uint32_t const ces[9] = { 0x29C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_241)
{
    // AAEE 0061;	
    // (ꫮ) MEETEI MAYEK VOWEL SIGN AU	[29C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEE, 0x0061 };
    uint32_t const ces[9] = { 0x29C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_242)
{
    // AAEE 0041;	
    // (ꫮ) MEETEI MAYEK VOWEL SIGN AU	[29C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAEE, 0x0041 };
    uint32_t const ces[9] = { 0x29C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_243)
{
    // AAEE 0062;	
    // (ꫮ) MEETEI MAYEK VOWEL SIGN AU	[29C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEE, 0x0062 };
    uint32_t const ces[9] = { 0x29C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_244)
{
    // AAEF 0021;	
    // (ꫯ) MEETEI MAYEK VOWEL SIGN AAU	[29C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEF, 0x0021 };
    uint32_t const ces[9] = { 0x29C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_245)
{
    // AAEF 003F;	
    // (ꫯ) MEETEI MAYEK VOWEL SIGN AAU	[29C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEF, 0x003F };
    uint32_t const ces[9] = { 0x29C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_246)
{
    // AAEF 0061;	
    // (ꫯ) MEETEI MAYEK VOWEL SIGN AAU	[29C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEF, 0x0061 };
    uint32_t const ces[9] = { 0x29C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_247)
{
    // AAEF 0041;	
    // (ꫯ) MEETEI MAYEK VOWEL SIGN AAU	[29C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAEF, 0x0041 };
    uint32_t const ces[9] = { 0x29C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_248)
{
    // AAEF 0062;	
    // (ꫯ) MEETEI MAYEK VOWEL SIGN AAU	[29C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAEF, 0x0062 };
    uint32_t const ces[9] = { 0x29C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_249)
{
    // AAF5 0021;	
    // (ꫵ) MEETEI MAYEK VOWEL SIGN VISARGA	[29C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF5, 0x0021 };
    uint32_t const ces[9] = { 0x29C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_250)
{
    // AAF5 003F;	
    // (ꫵ) MEETEI MAYEK VOWEL SIGN VISARGA	[29C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF5, 0x003F };
    uint32_t const ces[9] = { 0x29C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_251)
{
    // AAF5 0061;	
    // (ꫵ) MEETEI MAYEK VOWEL SIGN VISARGA	[29C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF5, 0x0061 };
    uint32_t const ces[9] = { 0x29C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_252)
{
    // AAF5 0041;	
    // (ꫵ) MEETEI MAYEK VOWEL SIGN VISARGA	[29C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAF5, 0x0041 };
    uint32_t const ces[9] = { 0x29C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_253)
{
    // AAF5 0062;	
    // (ꫵ) MEETEI MAYEK VOWEL SIGN VISARGA	[29C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF5, 0x0062 };
    uint32_t const ces[9] = { 0x29C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_254)
{
    // ABDB 0021;	
    // (ꯛ) MEETEI MAYEK LETTER KOK LONSUM	[29C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDB, 0x0021 };
    uint32_t const ces[9] = { 0x29C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_255)
{
    // ABDB 003F;	
    // (ꯛ) MEETEI MAYEK LETTER KOK LONSUM	[29C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDB, 0x003F };
    uint32_t const ces[9] = { 0x29C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_256)
{
    // ABDB 0061;	
    // (ꯛ) MEETEI MAYEK LETTER KOK LONSUM	[29C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDB, 0x0061 };
    uint32_t const ces[9] = { 0x29C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_257)
{
    // ABDB 0041;	
    // (ꯛ) MEETEI MAYEK LETTER KOK LONSUM	[29C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABDB, 0x0041 };
    uint32_t const ces[9] = { 0x29C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_258)
{
    // ABDB 0062;	
    // (ꯛ) MEETEI MAYEK LETTER KOK LONSUM	[29C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDB, 0x0062 };
    uint32_t const ces[9] = { 0x29C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_259)
{
    // ABDC 0021;	
    // (ꯜ) MEETEI MAYEK LETTER LAI LONSUM	[29C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDC, 0x0021 };
    uint32_t const ces[9] = { 0x29C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_260)
{
    // ABDC 003F;	
    // (ꯜ) MEETEI MAYEK LETTER LAI LONSUM	[29C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDC, 0x003F };
    uint32_t const ces[9] = { 0x29C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_261)
{
    // ABDC 0061;	
    // (ꯜ) MEETEI MAYEK LETTER LAI LONSUM	[29C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDC, 0x0061 };
    uint32_t const ces[9] = { 0x29C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_262)
{
    // ABDC 0041;	
    // (ꯜ) MEETEI MAYEK LETTER LAI LONSUM	[29C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABDC, 0x0041 };
    uint32_t const ces[9] = { 0x29C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_263)
{
    // ABDC 0062;	
    // (ꯜ) MEETEI MAYEK LETTER LAI LONSUM	[29C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDC, 0x0062 };
    uint32_t const ces[9] = { 0x29C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_264)
{
    // ABDD 0021;	
    // (ꯝ) MEETEI MAYEK LETTER MIT LONSUM	[29C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDD, 0x0021 };
    uint32_t const ces[9] = { 0x29C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_265)
{
    // ABDD 003F;	
    // (ꯝ) MEETEI MAYEK LETTER MIT LONSUM	[29C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDD, 0x003F };
    uint32_t const ces[9] = { 0x29C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_266)
{
    // ABDD 0061;	
    // (ꯝ) MEETEI MAYEK LETTER MIT LONSUM	[29C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDD, 0x0061 };
    uint32_t const ces[9] = { 0x29C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_267)
{
    // ABDD 0041;	
    // (ꯝ) MEETEI MAYEK LETTER MIT LONSUM	[29C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABDD, 0x0041 };
    uint32_t const ces[9] = { 0x29C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_268)
{
    // ABDD 0062;	
    // (ꯝ) MEETEI MAYEK LETTER MIT LONSUM	[29C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDD, 0x0062 };
    uint32_t const ces[9] = { 0x29C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_269)
{
    // ABDE 0021;	
    // (ꯞ) MEETEI MAYEK LETTER PA LONSUM	[29C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDE, 0x0021 };
    uint32_t const ces[9] = { 0x29C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_270)
{
    // ABDE 003F;	
    // (ꯞ) MEETEI MAYEK LETTER PA LONSUM	[29C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDE, 0x003F };
    uint32_t const ces[9] = { 0x29C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_271)
{
    // ABDE 0061;	
    // (ꯞ) MEETEI MAYEK LETTER PA LONSUM	[29C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDE, 0x0061 };
    uint32_t const ces[9] = { 0x29C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_272)
{
    // ABDE 0041;	
    // (ꯞ) MEETEI MAYEK LETTER PA LONSUM	[29C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABDE, 0x0041 };
    uint32_t const ces[9] = { 0x29C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_273)
{
    // ABDE 0062;	
    // (ꯞ) MEETEI MAYEK LETTER PA LONSUM	[29C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDE, 0x0062 };
    uint32_t const ces[9] = { 0x29C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_274)
{
    // ABDF 0021;	
    // (ꯟ) MEETEI MAYEK LETTER NA LONSUM	[29C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDF, 0x0021 };
    uint32_t const ces[9] = { 0x29C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_275)
{
    // ABDF 003F;	
    // (ꯟ) MEETEI MAYEK LETTER NA LONSUM	[29C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDF, 0x003F };
    uint32_t const ces[9] = { 0x29C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_276)
{
    // ABDF 0061;	
    // (ꯟ) MEETEI MAYEK LETTER NA LONSUM	[29C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDF, 0x0061 };
    uint32_t const ces[9] = { 0x29C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_277)
{
    // ABDF 0041;	
    // (ꯟ) MEETEI MAYEK LETTER NA LONSUM	[29C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABDF, 0x0041 };
    uint32_t const ces[9] = { 0x29C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_278)
{
    // ABDF 0062;	
    // (ꯟ) MEETEI MAYEK LETTER NA LONSUM	[29C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABDF, 0x0062 };
    uint32_t const ces[9] = { 0x29C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_279)
{
    // ABE0 0021;	
    // (ꯠ) MEETEI MAYEK LETTER TIL LONSUM	[29C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE0, 0x0021 };
    uint32_t const ces[9] = { 0x29C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_280)
{
    // ABE0 003F;	
    // (ꯠ) MEETEI MAYEK LETTER TIL LONSUM	[29C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE0, 0x003F };
    uint32_t const ces[9] = { 0x29C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_281)
{
    // ABE0 0061;	
    // (ꯠ) MEETEI MAYEK LETTER TIL LONSUM	[29C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE0, 0x0061 };
    uint32_t const ces[9] = { 0x29C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_282)
{
    // ABE0 0041;	
    // (ꯠ) MEETEI MAYEK LETTER TIL LONSUM	[29C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE0, 0x0041 };
    uint32_t const ces[9] = { 0x29C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_283)
{
    // ABE0 0062;	
    // (ꯠ) MEETEI MAYEK LETTER TIL LONSUM	[29C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE0, 0x0062 };
    uint32_t const ces[9] = { 0x29C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_284)
{
    // ABE1 0021;	
    // (ꯡ) MEETEI MAYEK LETTER NGOU LONSUM	[29CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE1, 0x0021 };
    uint32_t const ces[9] = { 0x29CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_285)
{
    // ABE1 003F;	
    // (ꯡ) MEETEI MAYEK LETTER NGOU LONSUM	[29CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE1, 0x003F };
    uint32_t const ces[9] = { 0x29CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_286)
{
    // ABE1 0061;	
    // (ꯡ) MEETEI MAYEK LETTER NGOU LONSUM	[29CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE1, 0x0061 };
    uint32_t const ces[9] = { 0x29CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_287)
{
    // ABE1 0041;	
    // (ꯡ) MEETEI MAYEK LETTER NGOU LONSUM	[29CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE1, 0x0041 };
    uint32_t const ces[9] = { 0x29CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_288)
{
    // ABE1 0062;	
    // (ꯡ) MEETEI MAYEK LETTER NGOU LONSUM	[29CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE1, 0x0062 };
    uint32_t const ces[9] = { 0x29CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_289)
{
    // ABE2 0021;	
    // (ꯢ) MEETEI MAYEK LETTER I LONSUM	[29CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE2, 0x0021 };
    uint32_t const ces[9] = { 0x29CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_290)
{
    // ABE2 003F;	
    // (ꯢ) MEETEI MAYEK LETTER I LONSUM	[29CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE2, 0x003F };
    uint32_t const ces[9] = { 0x29CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_291)
{
    // ABE2 0061;	
    // (ꯢ) MEETEI MAYEK LETTER I LONSUM	[29CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE2, 0x0061 };
    uint32_t const ces[9] = { 0x29CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_292)
{
    // ABE2 0041;	
    // (ꯢ) MEETEI MAYEK LETTER I LONSUM	[29CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABE2, 0x0041 };
    uint32_t const ces[9] = { 0x29CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_293)
{
    // ABE2 0062;	
    // (ꯢ) MEETEI MAYEK LETTER I LONSUM	[29CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABE2, 0x0062 };
    uint32_t const ces[9] = { 0x29CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_294)
{
    // 0334 ABED;	
    // (꯭) MEETEI MAYEK APUN IYEK	[29CC | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xABED };
    uint32_t const ces[8] = { 0x29CC, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_295)
{
    // ABED 0334;	
    // (꯭) MEETEI MAYEK APUN IYEK	[29CC | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABED, 0x0334 };
    uint32_t const ces[8] = { 0x29CC, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_296)
{
    // ABED 0021;	
    // (꯭) MEETEI MAYEK APUN IYEK	[29CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABED, 0x0021 };
    uint32_t const ces[9] = { 0x29CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_297)
{
    // ABED 003F;	
    // (꯭) MEETEI MAYEK APUN IYEK	[29CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABED, 0x003F };
    uint32_t const ces[9] = { 0x29CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_298)
{
    // ABED 0061;	
    // (꯭) MEETEI MAYEK APUN IYEK	[29CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABED, 0x0061 };
    uint32_t const ces[9] = { 0x29CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_299)
{
    // ABED 0041;	
    // (꯭) MEETEI MAYEK APUN IYEK	[29CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xABED, 0x0041 };
    uint32_t const ces[9] = { 0x29CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_300)
{
    // ABED 0062;	
    // (꯭) MEETEI MAYEK APUN IYEK	[29CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xABED, 0x0062 };
    uint32_t const ces[9] = { 0x29CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_301)
{
    // 0334 AAF6;	
    // (꫶) MEETEI MAYEK VIRAMA	[29CD | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xAAF6 };
    uint32_t const ces[8] = { 0x29CD, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_302)
{
    // AAF6 0334;	
    // (꫶) MEETEI MAYEK VIRAMA	[29CD | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF6, 0x0334 };
    uint32_t const ces[8] = { 0x29CD, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_303)
{
    // AAF6 0021;	
    // (꫶) MEETEI MAYEK VIRAMA	[29CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF6, 0x0021 };
    uint32_t const ces[9] = { 0x29CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_304)
{
    // AAF6 003F;	
    // (꫶) MEETEI MAYEK VIRAMA	[29CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF6, 0x003F };
    uint32_t const ces[9] = { 0x29CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_305)
{
    // AAF6 0061;	
    // (꫶) MEETEI MAYEK VIRAMA	[29CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF6, 0x0061 };
    uint32_t const ces[9] = { 0x29CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_306)
{
    // AAF6 0041;	
    // (꫶) MEETEI MAYEK VIRAMA	[29CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAF6, 0x0041 };
    uint32_t const ces[9] = { 0x29CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_307)
{
    // AAF6 0062;	
    // (꫶) MEETEI MAYEK VIRAMA	[29CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAF6, 0x0062 };
    uint32_t const ces[9] = { 0x29CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_308)
{
    // A800 0021;	
    // (ꠀ) SYLOTI NAGRI LETTER A	[29CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA800, 0x0021 };
    uint32_t const ces[9] = { 0x29CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_309)
{
    // A800 003F;	
    // (ꠀ) SYLOTI NAGRI LETTER A	[29CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA800, 0x003F };
    uint32_t const ces[9] = { 0x29CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_310)
{
    // A800 0061;	
    // (ꠀ) SYLOTI NAGRI LETTER A	[29CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA800, 0x0061 };
    uint32_t const ces[9] = { 0x29CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_311)
{
    // A800 0041;	
    // (ꠀ) SYLOTI NAGRI LETTER A	[29CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA800, 0x0041 };
    uint32_t const ces[9] = { 0x29CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_312)
{
    // A800 0062;	
    // (ꠀ) SYLOTI NAGRI LETTER A	[29CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA800, 0x0062 };
    uint32_t const ces[9] = { 0x29CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_313)
{
    // A801 0021;	
    // (ꠁ) SYLOTI NAGRI LETTER I	[29CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA801, 0x0021 };
    uint32_t const ces[9] = { 0x29CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_314)
{
    // A801 003F;	
    // (ꠁ) SYLOTI NAGRI LETTER I	[29CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA801, 0x003F };
    uint32_t const ces[9] = { 0x29CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_315)
{
    // A801 0061;	
    // (ꠁ) SYLOTI NAGRI LETTER I	[29CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA801, 0x0061 };
    uint32_t const ces[9] = { 0x29CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_316)
{
    // A801 0041;	
    // (ꠁ) SYLOTI NAGRI LETTER I	[29CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA801, 0x0041 };
    uint32_t const ces[9] = { 0x29CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_317)
{
    // A801 0062;	
    // (ꠁ) SYLOTI NAGRI LETTER I	[29CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA801, 0x0062 };
    uint32_t const ces[9] = { 0x29CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_318)
{
    // A802 0021;	
    // (ꠂ) SYLOTI NAGRI SIGN DVISVARA	[29D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA802, 0x0021 };
    uint32_t const ces[9] = { 0x29D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_319)
{
    // A802 003F;	
    // (ꠂ) SYLOTI NAGRI SIGN DVISVARA	[29D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA802, 0x003F };
    uint32_t const ces[9] = { 0x29D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_320)
{
    // A802 0061;	
    // (ꠂ) SYLOTI NAGRI SIGN DVISVARA	[29D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA802, 0x0061 };
    uint32_t const ces[9] = { 0x29D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_321)
{
    // A802 0041;	
    // (ꠂ) SYLOTI NAGRI SIGN DVISVARA	[29D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA802, 0x0041 };
    uint32_t const ces[9] = { 0x29D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_322)
{
    // A802 0062;	
    // (ꠂ) SYLOTI NAGRI SIGN DVISVARA	[29D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA802, 0x0062 };
    uint32_t const ces[9] = { 0x29D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_323)
{
    // A803 0021;	
    // (ꠃ) SYLOTI NAGRI LETTER U	[29D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA803, 0x0021 };
    uint32_t const ces[9] = { 0x29D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_324)
{
    // A803 003F;	
    // (ꠃ) SYLOTI NAGRI LETTER U	[29D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA803, 0x003F };
    uint32_t const ces[9] = { 0x29D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_325)
{
    // A803 0061;	
    // (ꠃ) SYLOTI NAGRI LETTER U	[29D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA803, 0x0061 };
    uint32_t const ces[9] = { 0x29D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_326)
{
    // A803 0041;	
    // (ꠃ) SYLOTI NAGRI LETTER U	[29D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA803, 0x0041 };
    uint32_t const ces[9] = { 0x29D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_327)
{
    // A803 0062;	
    // (ꠃ) SYLOTI NAGRI LETTER U	[29D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA803, 0x0062 };
    uint32_t const ces[9] = { 0x29D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_328)
{
    // A804 0021;	
    // (ꠄ) SYLOTI NAGRI LETTER E	[29D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA804, 0x0021 };
    uint32_t const ces[9] = { 0x29D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_329)
{
    // A804 003F;	
    // (ꠄ) SYLOTI NAGRI LETTER E	[29D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA804, 0x003F };
    uint32_t const ces[9] = { 0x29D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_330)
{
    // A804 0061;	
    // (ꠄ) SYLOTI NAGRI LETTER E	[29D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA804, 0x0061 };
    uint32_t const ces[9] = { 0x29D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_331)
{
    // A804 0041;	
    // (ꠄ) SYLOTI NAGRI LETTER E	[29D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA804, 0x0041 };
    uint32_t const ces[9] = { 0x29D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_332)
{
    // A804 0062;	
    // (ꠄ) SYLOTI NAGRI LETTER E	[29D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA804, 0x0062 };
    uint32_t const ces[9] = { 0x29D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_333)
{
    // A805 0021;	
    // (ꠅ) SYLOTI NAGRI LETTER O	[29D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA805, 0x0021 };
    uint32_t const ces[9] = { 0x29D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_334)
{
    // A805 003F;	
    // (ꠅ) SYLOTI NAGRI LETTER O	[29D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA805, 0x003F };
    uint32_t const ces[9] = { 0x29D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_335)
{
    // A805 0061;	
    // (ꠅ) SYLOTI NAGRI LETTER O	[29D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA805, 0x0061 };
    uint32_t const ces[9] = { 0x29D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_336)
{
    // A805 0041;	
    // (ꠅ) SYLOTI NAGRI LETTER O	[29D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA805, 0x0041 };
    uint32_t const ces[9] = { 0x29D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_337)
{
    // A805 0062;	
    // (ꠅ) SYLOTI NAGRI LETTER O	[29D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA805, 0x0062 };
    uint32_t const ces[9] = { 0x29D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_338)
{
    // 0334 A806;	
    // (꠆) SYLOTI NAGRI SIGN HASANTA	[29D4 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0xA806 };
    uint32_t const ces[8] = { 0x29D4, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_339)
{
    // A806 0334;	
    // (꠆) SYLOTI NAGRI SIGN HASANTA	[29D4 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA806, 0x0334 };
    uint32_t const ces[8] = { 0x29D4, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_340)
{
    // A806 0021;	
    // (꠆) SYLOTI NAGRI SIGN HASANTA	[29D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA806, 0x0021 };
    uint32_t const ces[9] = { 0x29D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_341)
{
    // A806 003F;	
    // (꠆) SYLOTI NAGRI SIGN HASANTA	[29D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA806, 0x003F };
    uint32_t const ces[9] = { 0x29D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_342)
{
    // A806 0061;	
    // (꠆) SYLOTI NAGRI SIGN HASANTA	[29D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA806, 0x0061 };
    uint32_t const ces[9] = { 0x29D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_343)
{
    // A806 0041;	
    // (꠆) SYLOTI NAGRI SIGN HASANTA	[29D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA806, 0x0041 };
    uint32_t const ces[9] = { 0x29D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_344)
{
    // A806 0062;	
    // (꠆) SYLOTI NAGRI SIGN HASANTA	[29D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA806, 0x0062 };
    uint32_t const ces[9] = { 0x29D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_345)
{
    // A807 0021;	
    // (ꠇ) SYLOTI NAGRI LETTER KO	[29D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA807, 0x0021 };
    uint32_t const ces[9] = { 0x29D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_346)
{
    // A807 003F;	
    // (ꠇ) SYLOTI NAGRI LETTER KO	[29D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA807, 0x003F };
    uint32_t const ces[9] = { 0x29D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_347)
{
    // A807 0061;	
    // (ꠇ) SYLOTI NAGRI LETTER KO	[29D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA807, 0x0061 };
    uint32_t const ces[9] = { 0x29D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_348)
{
    // A807 0041;	
    // (ꠇ) SYLOTI NAGRI LETTER KO	[29D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA807, 0x0041 };
    uint32_t const ces[9] = { 0x29D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_349)
{
    // A807 0062;	
    // (ꠇ) SYLOTI NAGRI LETTER KO	[29D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA807, 0x0062 };
    uint32_t const ces[9] = { 0x29D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_350)
{
    // A808 0021;	
    // (ꠈ) SYLOTI NAGRI LETTER KHO	[29D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA808, 0x0021 };
    uint32_t const ces[9] = { 0x29D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_351)
{
    // A808 003F;	
    // (ꠈ) SYLOTI NAGRI LETTER KHO	[29D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA808, 0x003F };
    uint32_t const ces[9] = { 0x29D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_352)
{
    // A808 0061;	
    // (ꠈ) SYLOTI NAGRI LETTER KHO	[29D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA808, 0x0061 };
    uint32_t const ces[9] = { 0x29D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_353)
{
    // A808 0041;	
    // (ꠈ) SYLOTI NAGRI LETTER KHO	[29D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA808, 0x0041 };
    uint32_t const ces[9] = { 0x29D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_354)
{
    // A808 0062;	
    // (ꠈ) SYLOTI NAGRI LETTER KHO	[29D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA808, 0x0062 };
    uint32_t const ces[9] = { 0x29D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_355)
{
    // A809 0021;	
    // (ꠉ) SYLOTI NAGRI LETTER GO	[29D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA809, 0x0021 };
    uint32_t const ces[9] = { 0x29D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_356)
{
    // A809 003F;	
    // (ꠉ) SYLOTI NAGRI LETTER GO	[29D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA809, 0x003F };
    uint32_t const ces[9] = { 0x29D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_357)
{
    // A809 0061;	
    // (ꠉ) SYLOTI NAGRI LETTER GO	[29D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA809, 0x0061 };
    uint32_t const ces[9] = { 0x29D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_358)
{
    // A809 0041;	
    // (ꠉ) SYLOTI NAGRI LETTER GO	[29D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA809, 0x0041 };
    uint32_t const ces[9] = { 0x29D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_359)
{
    // A809 0062;	
    // (ꠉ) SYLOTI NAGRI LETTER GO	[29D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA809, 0x0062 };
    uint32_t const ces[9] = { 0x29D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_360)
{
    // A80A 0021;	
    // (ꠊ) SYLOTI NAGRI LETTER GHO	[29D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80A, 0x0021 };
    uint32_t const ces[9] = { 0x29D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_361)
{
    // A80A 003F;	
    // (ꠊ) SYLOTI NAGRI LETTER GHO	[29D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80A, 0x003F };
    uint32_t const ces[9] = { 0x29D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_362)
{
    // A80A 0061;	
    // (ꠊ) SYLOTI NAGRI LETTER GHO	[29D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80A, 0x0061 };
    uint32_t const ces[9] = { 0x29D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_363)
{
    // A80A 0041;	
    // (ꠊ) SYLOTI NAGRI LETTER GHO	[29D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA80A, 0x0041 };
    uint32_t const ces[9] = { 0x29D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_364)
{
    // A80A 0062;	
    // (ꠊ) SYLOTI NAGRI LETTER GHO	[29D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80A, 0x0062 };
    uint32_t const ces[9] = { 0x29D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_365)
{
    // A80C 0021;	
    // (ꠌ) SYLOTI NAGRI LETTER CO	[29D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80C, 0x0021 };
    uint32_t const ces[9] = { 0x29D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_366)
{
    // A80C 003F;	
    // (ꠌ) SYLOTI NAGRI LETTER CO	[29D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80C, 0x003F };
    uint32_t const ces[9] = { 0x29D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_367)
{
    // A80C 0061;	
    // (ꠌ) SYLOTI NAGRI LETTER CO	[29D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80C, 0x0061 };
    uint32_t const ces[9] = { 0x29D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_368)
{
    // A80C 0041;	
    // (ꠌ) SYLOTI NAGRI LETTER CO	[29D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA80C, 0x0041 };
    uint32_t const ces[9] = { 0x29D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_369)
{
    // A80C 0062;	
    // (ꠌ) SYLOTI NAGRI LETTER CO	[29D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80C, 0x0062 };
    uint32_t const ces[9] = { 0x29D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_370)
{
    // A80D 0021;	
    // (ꠍ) SYLOTI NAGRI LETTER CHO	[29DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80D, 0x0021 };
    uint32_t const ces[9] = { 0x29DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_371)
{
    // A80D 003F;	
    // (ꠍ) SYLOTI NAGRI LETTER CHO	[29DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80D, 0x003F };
    uint32_t const ces[9] = { 0x29DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_372)
{
    // A80D 0061;	
    // (ꠍ) SYLOTI NAGRI LETTER CHO	[29DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80D, 0x0061 };
    uint32_t const ces[9] = { 0x29DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_373)
{
    // A80D 0041;	
    // (ꠍ) SYLOTI NAGRI LETTER CHO	[29DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA80D, 0x0041 };
    uint32_t const ces[9] = { 0x29DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_374)
{
    // A80D 0062;	
    // (ꠍ) SYLOTI NAGRI LETTER CHO	[29DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80D, 0x0062 };
    uint32_t const ces[9] = { 0x29DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_375)
{
    // A80E 0021;	
    // (ꠎ) SYLOTI NAGRI LETTER JO	[29DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80E, 0x0021 };
    uint32_t const ces[9] = { 0x29DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_376)
{
    // A80E 003F;	
    // (ꠎ) SYLOTI NAGRI LETTER JO	[29DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80E, 0x003F };
    uint32_t const ces[9] = { 0x29DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_377)
{
    // A80E 0061;	
    // (ꠎ) SYLOTI NAGRI LETTER JO	[29DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80E, 0x0061 };
    uint32_t const ces[9] = { 0x29DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_378)
{
    // A80E 0041;	
    // (ꠎ) SYLOTI NAGRI LETTER JO	[29DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA80E, 0x0041 };
    uint32_t const ces[9] = { 0x29DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_379)
{
    // A80E 0062;	
    // (ꠎ) SYLOTI NAGRI LETTER JO	[29DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80E, 0x0062 };
    uint32_t const ces[9] = { 0x29DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_380)
{
    // A80F 0021;	
    // (ꠏ) SYLOTI NAGRI LETTER JHO	[29DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80F, 0x0021 };
    uint32_t const ces[9] = { 0x29DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_381)
{
    // A80F 003F;	
    // (ꠏ) SYLOTI NAGRI LETTER JHO	[29DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80F, 0x003F };
    uint32_t const ces[9] = { 0x29DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_382)
{
    // A80F 0061;	
    // (ꠏ) SYLOTI NAGRI LETTER JHO	[29DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80F, 0x0061 };
    uint32_t const ces[9] = { 0x29DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_383)
{
    // A80F 0041;	
    // (ꠏ) SYLOTI NAGRI LETTER JHO	[29DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA80F, 0x0041 };
    uint32_t const ces[9] = { 0x29DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_384)
{
    // A80F 0062;	
    // (ꠏ) SYLOTI NAGRI LETTER JHO	[29DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA80F, 0x0062 };
    uint32_t const ces[9] = { 0x29DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_385)
{
    // A810 0021;	
    // (ꠐ) SYLOTI NAGRI LETTER TTO	[29DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA810, 0x0021 };
    uint32_t const ces[9] = { 0x29DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_386)
{
    // A810 003F;	
    // (ꠐ) SYLOTI NAGRI LETTER TTO	[29DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA810, 0x003F };
    uint32_t const ces[9] = { 0x29DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_387)
{
    // A810 0061;	
    // (ꠐ) SYLOTI NAGRI LETTER TTO	[29DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA810, 0x0061 };
    uint32_t const ces[9] = { 0x29DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_388)
{
    // A810 0041;	
    // (ꠐ) SYLOTI NAGRI LETTER TTO	[29DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA810, 0x0041 };
    uint32_t const ces[9] = { 0x29DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_389)
{
    // A810 0062;	
    // (ꠐ) SYLOTI NAGRI LETTER TTO	[29DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA810, 0x0062 };
    uint32_t const ces[9] = { 0x29DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_390)
{
    // A811 0021;	
    // (ꠑ) SYLOTI NAGRI LETTER TTHO	[29DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA811, 0x0021 };
    uint32_t const ces[9] = { 0x29DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_391)
{
    // A811 003F;	
    // (ꠑ) SYLOTI NAGRI LETTER TTHO	[29DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA811, 0x003F };
    uint32_t const ces[9] = { 0x29DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_392)
{
    // A811 0061;	
    // (ꠑ) SYLOTI NAGRI LETTER TTHO	[29DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA811, 0x0061 };
    uint32_t const ces[9] = { 0x29DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_393)
{
    // A811 0041;	
    // (ꠑ) SYLOTI NAGRI LETTER TTHO	[29DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA811, 0x0041 };
    uint32_t const ces[9] = { 0x29DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_394)
{
    // A811 0062;	
    // (ꠑ) SYLOTI NAGRI LETTER TTHO	[29DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA811, 0x0062 };
    uint32_t const ces[9] = { 0x29DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_395)
{
    // A812 0021;	
    // (ꠒ) SYLOTI NAGRI LETTER DDO	[29DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA812, 0x0021 };
    uint32_t const ces[9] = { 0x29DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_396)
{
    // A812 003F;	
    // (ꠒ) SYLOTI NAGRI LETTER DDO	[29DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA812, 0x003F };
    uint32_t const ces[9] = { 0x29DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_397)
{
    // A812 0061;	
    // (ꠒ) SYLOTI NAGRI LETTER DDO	[29DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA812, 0x0061 };
    uint32_t const ces[9] = { 0x29DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_398)
{
    // A812 0041;	
    // (ꠒ) SYLOTI NAGRI LETTER DDO	[29DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA812, 0x0041 };
    uint32_t const ces[9] = { 0x29DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_399)
{
    // A812 0062;	
    // (ꠒ) SYLOTI NAGRI LETTER DDO	[29DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA812, 0x0062 };
    uint32_t const ces[9] = { 0x29DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_400)
{
    // A813 0021;	
    // (ꠓ) SYLOTI NAGRI LETTER DDHO	[29E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA813, 0x0021 };
    uint32_t const ces[9] = { 0x29E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_401)
{
    // A813 003F;	
    // (ꠓ) SYLOTI NAGRI LETTER DDHO	[29E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA813, 0x003F };
    uint32_t const ces[9] = { 0x29E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_402)
{
    // A813 0061;	
    // (ꠓ) SYLOTI NAGRI LETTER DDHO	[29E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA813, 0x0061 };
    uint32_t const ces[9] = { 0x29E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_403)
{
    // A813 0041;	
    // (ꠓ) SYLOTI NAGRI LETTER DDHO	[29E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA813, 0x0041 };
    uint32_t const ces[9] = { 0x29E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_404)
{
    // A813 0062;	
    // (ꠓ) SYLOTI NAGRI LETTER DDHO	[29E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA813, 0x0062 };
    uint32_t const ces[9] = { 0x29E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_405)
{
    // A814 0021;	
    // (ꠔ) SYLOTI NAGRI LETTER TO	[29E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA814, 0x0021 };
    uint32_t const ces[9] = { 0x29E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_406)
{
    // A814 003F;	
    // (ꠔ) SYLOTI NAGRI LETTER TO	[29E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA814, 0x003F };
    uint32_t const ces[9] = { 0x29E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_407)
{
    // A814 0061;	
    // (ꠔ) SYLOTI NAGRI LETTER TO	[29E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA814, 0x0061 };
    uint32_t const ces[9] = { 0x29E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_408)
{
    // A814 0041;	
    // (ꠔ) SYLOTI NAGRI LETTER TO	[29E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA814, 0x0041 };
    uint32_t const ces[9] = { 0x29E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_409)
{
    // A814 0062;	
    // (ꠔ) SYLOTI NAGRI LETTER TO	[29E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA814, 0x0062 };
    uint32_t const ces[9] = { 0x29E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_410)
{
    // A815 0021;	
    // (ꠕ) SYLOTI NAGRI LETTER THO	[29E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA815, 0x0021 };
    uint32_t const ces[9] = { 0x29E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_411)
{
    // A815 003F;	
    // (ꠕ) SYLOTI NAGRI LETTER THO	[29E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA815, 0x003F };
    uint32_t const ces[9] = { 0x29E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_412)
{
    // A815 0061;	
    // (ꠕ) SYLOTI NAGRI LETTER THO	[29E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA815, 0x0061 };
    uint32_t const ces[9] = { 0x29E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_413)
{
    // A815 0041;	
    // (ꠕ) SYLOTI NAGRI LETTER THO	[29E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA815, 0x0041 };
    uint32_t const ces[9] = { 0x29E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_414)
{
    // A815 0062;	
    // (ꠕ) SYLOTI NAGRI LETTER THO	[29E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA815, 0x0062 };
    uint32_t const ces[9] = { 0x29E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_415)
{
    // A816 0021;	
    // (ꠖ) SYLOTI NAGRI LETTER DO	[29E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA816, 0x0021 };
    uint32_t const ces[9] = { 0x29E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_416)
{
    // A816 003F;	
    // (ꠖ) SYLOTI NAGRI LETTER DO	[29E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA816, 0x003F };
    uint32_t const ces[9] = { 0x29E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_417)
{
    // A816 0061;	
    // (ꠖ) SYLOTI NAGRI LETTER DO	[29E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA816, 0x0061 };
    uint32_t const ces[9] = { 0x29E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_418)
{
    // A816 0041;	
    // (ꠖ) SYLOTI NAGRI LETTER DO	[29E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA816, 0x0041 };
    uint32_t const ces[9] = { 0x29E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_419)
{
    // A816 0062;	
    // (ꠖ) SYLOTI NAGRI LETTER DO	[29E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA816, 0x0062 };
    uint32_t const ces[9] = { 0x29E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_420)
{
    // A817 0021;	
    // (ꠗ) SYLOTI NAGRI LETTER DHO	[29E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA817, 0x0021 };
    uint32_t const ces[9] = { 0x29E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_421)
{
    // A817 003F;	
    // (ꠗ) SYLOTI NAGRI LETTER DHO	[29E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA817, 0x003F };
    uint32_t const ces[9] = { 0x29E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_422)
{
    // A817 0061;	
    // (ꠗ) SYLOTI NAGRI LETTER DHO	[29E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA817, 0x0061 };
    uint32_t const ces[9] = { 0x29E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_423)
{
    // A817 0041;	
    // (ꠗ) SYLOTI NAGRI LETTER DHO	[29E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA817, 0x0041 };
    uint32_t const ces[9] = { 0x29E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_424)
{
    // A817 0062;	
    // (ꠗ) SYLOTI NAGRI LETTER DHO	[29E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA817, 0x0062 };
    uint32_t const ces[9] = { 0x29E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_425)
{
    // A818 0021;	
    // (ꠘ) SYLOTI NAGRI LETTER NO	[29E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA818, 0x0021 };
    uint32_t const ces[9] = { 0x29E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_426)
{
    // A818 003F;	
    // (ꠘ) SYLOTI NAGRI LETTER NO	[29E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA818, 0x003F };
    uint32_t const ces[9] = { 0x29E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_427)
{
    // A818 0061;	
    // (ꠘ) SYLOTI NAGRI LETTER NO	[29E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA818, 0x0061 };
    uint32_t const ces[9] = { 0x29E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_428)
{
    // A818 0041;	
    // (ꠘ) SYLOTI NAGRI LETTER NO	[29E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA818, 0x0041 };
    uint32_t const ces[9] = { 0x29E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_429)
{
    // A818 0062;	
    // (ꠘ) SYLOTI NAGRI LETTER NO	[29E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA818, 0x0062 };
    uint32_t const ces[9] = { 0x29E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_430)
{
    // A819 0021;	
    // (ꠙ) SYLOTI NAGRI LETTER PO	[29E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA819, 0x0021 };
    uint32_t const ces[9] = { 0x29E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_431)
{
    // A819 003F;	
    // (ꠙ) SYLOTI NAGRI LETTER PO	[29E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA819, 0x003F };
    uint32_t const ces[9] = { 0x29E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_432)
{
    // A819 0061;	
    // (ꠙ) SYLOTI NAGRI LETTER PO	[29E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA819, 0x0061 };
    uint32_t const ces[9] = { 0x29E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_433)
{
    // A819 0041;	
    // (ꠙ) SYLOTI NAGRI LETTER PO	[29E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA819, 0x0041 };
    uint32_t const ces[9] = { 0x29E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_434)
{
    // A819 0062;	
    // (ꠙ) SYLOTI NAGRI LETTER PO	[29E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA819, 0x0062 };
    uint32_t const ces[9] = { 0x29E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_435)
{
    // A81A 0021;	
    // (ꠚ) SYLOTI NAGRI LETTER PHO	[29E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81A, 0x0021 };
    uint32_t const ces[9] = { 0x29E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_436)
{
    // A81A 003F;	
    // (ꠚ) SYLOTI NAGRI LETTER PHO	[29E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81A, 0x003F };
    uint32_t const ces[9] = { 0x29E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_437)
{
    // A81A 0061;	
    // (ꠚ) SYLOTI NAGRI LETTER PHO	[29E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81A, 0x0061 };
    uint32_t const ces[9] = { 0x29E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_438)
{
    // A81A 0041;	
    // (ꠚ) SYLOTI NAGRI LETTER PHO	[29E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA81A, 0x0041 };
    uint32_t const ces[9] = { 0x29E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_439)
{
    // A81A 0062;	
    // (ꠚ) SYLOTI NAGRI LETTER PHO	[29E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81A, 0x0062 };
    uint32_t const ces[9] = { 0x29E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_440)
{
    // A81B 0021;	
    // (ꠛ) SYLOTI NAGRI LETTER BO	[29E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81B, 0x0021 };
    uint32_t const ces[9] = { 0x29E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_441)
{
    // A81B 003F;	
    // (ꠛ) SYLOTI NAGRI LETTER BO	[29E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81B, 0x003F };
    uint32_t const ces[9] = { 0x29E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_442)
{
    // A81B 0061;	
    // (ꠛ) SYLOTI NAGRI LETTER BO	[29E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81B, 0x0061 };
    uint32_t const ces[9] = { 0x29E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_443)
{
    // A81B 0041;	
    // (ꠛ) SYLOTI NAGRI LETTER BO	[29E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA81B, 0x0041 };
    uint32_t const ces[9] = { 0x29E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_444)
{
    // A81B 0062;	
    // (ꠛ) SYLOTI NAGRI LETTER BO	[29E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81B, 0x0062 };
    uint32_t const ces[9] = { 0x29E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_445)
{
    // A81C 0021;	
    // (ꠜ) SYLOTI NAGRI LETTER BHO	[29E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81C, 0x0021 };
    uint32_t const ces[9] = { 0x29E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_446)
{
    // A81C 003F;	
    // (ꠜ) SYLOTI NAGRI LETTER BHO	[29E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81C, 0x003F };
    uint32_t const ces[9] = { 0x29E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_447)
{
    // A81C 0061;	
    // (ꠜ) SYLOTI NAGRI LETTER BHO	[29E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81C, 0x0061 };
    uint32_t const ces[9] = { 0x29E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_448)
{
    // A81C 0041;	
    // (ꠜ) SYLOTI NAGRI LETTER BHO	[29E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA81C, 0x0041 };
    uint32_t const ces[9] = { 0x29E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_449)
{
    // A81C 0062;	
    // (ꠜ) SYLOTI NAGRI LETTER BHO	[29E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81C, 0x0062 };
    uint32_t const ces[9] = { 0x29E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_450)
{
    // A81D 0021;	
    // (ꠝ) SYLOTI NAGRI LETTER MO	[29EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81D, 0x0021 };
    uint32_t const ces[9] = { 0x29EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_451)
{
    // A81D 003F;	
    // (ꠝ) SYLOTI NAGRI LETTER MO	[29EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81D, 0x003F };
    uint32_t const ces[9] = { 0x29EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_452)
{
    // A81D 0061;	
    // (ꠝ) SYLOTI NAGRI LETTER MO	[29EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81D, 0x0061 };
    uint32_t const ces[9] = { 0x29EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_453)
{
    // A81D 0041;	
    // (ꠝ) SYLOTI NAGRI LETTER MO	[29EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA81D, 0x0041 };
    uint32_t const ces[9] = { 0x29EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_454)
{
    // A81D 0062;	
    // (ꠝ) SYLOTI NAGRI LETTER MO	[29EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81D, 0x0062 };
    uint32_t const ces[9] = { 0x29EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_455)
{
    // A81E 0021;	
    // (ꠞ) SYLOTI NAGRI LETTER RO	[29EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81E, 0x0021 };
    uint32_t const ces[9] = { 0x29EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_456)
{
    // A81E 003F;	
    // (ꠞ) SYLOTI NAGRI LETTER RO	[29EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81E, 0x003F };
    uint32_t const ces[9] = { 0x29EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_457)
{
    // A81E 0061;	
    // (ꠞ) SYLOTI NAGRI LETTER RO	[29EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81E, 0x0061 };
    uint32_t const ces[9] = { 0x29EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_458)
{
    // A81E 0041;	
    // (ꠞ) SYLOTI NAGRI LETTER RO	[29EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA81E, 0x0041 };
    uint32_t const ces[9] = { 0x29EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_459)
{
    // A81E 0062;	
    // (ꠞ) SYLOTI NAGRI LETTER RO	[29EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81E, 0x0062 };
    uint32_t const ces[9] = { 0x29EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_460)
{
    // A81F 0021;	
    // (ꠟ) SYLOTI NAGRI LETTER LO	[29EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81F, 0x0021 };
    uint32_t const ces[9] = { 0x29EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_461)
{
    // A81F 003F;	
    // (ꠟ) SYLOTI NAGRI LETTER LO	[29EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81F, 0x003F };
    uint32_t const ces[9] = { 0x29EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_462)
{
    // A81F 0061;	
    // (ꠟ) SYLOTI NAGRI LETTER LO	[29EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81F, 0x0061 };
    uint32_t const ces[9] = { 0x29EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_463)
{
    // A81F 0041;	
    // (ꠟ) SYLOTI NAGRI LETTER LO	[29EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA81F, 0x0041 };
    uint32_t const ces[9] = { 0x29EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_464)
{
    // A81F 0062;	
    // (ꠟ) SYLOTI NAGRI LETTER LO	[29EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA81F, 0x0062 };
    uint32_t const ces[9] = { 0x29EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_465)
{
    // A820 0021;	
    // (ꠠ) SYLOTI NAGRI LETTER RRO	[29ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA820, 0x0021 };
    uint32_t const ces[9] = { 0x29ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_466)
{
    // A820 003F;	
    // (ꠠ) SYLOTI NAGRI LETTER RRO	[29ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA820, 0x003F };
    uint32_t const ces[9] = { 0x29ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_467)
{
    // A820 0061;	
    // (ꠠ) SYLOTI NAGRI LETTER RRO	[29ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA820, 0x0061 };
    uint32_t const ces[9] = { 0x29ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_468)
{
    // A820 0041;	
    // (ꠠ) SYLOTI NAGRI LETTER RRO	[29ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA820, 0x0041 };
    uint32_t const ces[9] = { 0x29ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_469)
{
    // A820 0062;	
    // (ꠠ) SYLOTI NAGRI LETTER RRO	[29ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA820, 0x0062 };
    uint32_t const ces[9] = { 0x29ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_470)
{
    // A821 0021;	
    // (ꠡ) SYLOTI NAGRI LETTER SO	[29EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA821, 0x0021 };
    uint32_t const ces[9] = { 0x29EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_471)
{
    // A821 003F;	
    // (ꠡ) SYLOTI NAGRI LETTER SO	[29EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA821, 0x003F };
    uint32_t const ces[9] = { 0x29EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_472)
{
    // A821 0061;	
    // (ꠡ) SYLOTI NAGRI LETTER SO	[29EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA821, 0x0061 };
    uint32_t const ces[9] = { 0x29EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_473)
{
    // A821 0041;	
    // (ꠡ) SYLOTI NAGRI LETTER SO	[29EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA821, 0x0041 };
    uint32_t const ces[9] = { 0x29EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_474)
{
    // A821 0062;	
    // (ꠡ) SYLOTI NAGRI LETTER SO	[29EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA821, 0x0062 };
    uint32_t const ces[9] = { 0x29EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_475)
{
    // A822 0021;	
    // (ꠢ) SYLOTI NAGRI LETTER HO	[29EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA822, 0x0021 };
    uint32_t const ces[9] = { 0x29EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_476)
{
    // A822 003F;	
    // (ꠢ) SYLOTI NAGRI LETTER HO	[29EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA822, 0x003F };
    uint32_t const ces[9] = { 0x29EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_477)
{
    // A822 0061;	
    // (ꠢ) SYLOTI NAGRI LETTER HO	[29EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA822, 0x0061 };
    uint32_t const ces[9] = { 0x29EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_478)
{
    // A822 0041;	
    // (ꠢ) SYLOTI NAGRI LETTER HO	[29EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA822, 0x0041 };
    uint32_t const ces[9] = { 0x29EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_479)
{
    // A822 0062;	
    // (ꠢ) SYLOTI NAGRI LETTER HO	[29EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA822, 0x0062 };
    uint32_t const ces[9] = { 0x29EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_480)
{
    // A823 0021;	
    // (ꠣ) SYLOTI NAGRI VOWEL SIGN A	[29F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA823, 0x0021 };
    uint32_t const ces[9] = { 0x29F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_481)
{
    // A823 003F;	
    // (ꠣ) SYLOTI NAGRI VOWEL SIGN A	[29F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA823, 0x003F };
    uint32_t const ces[9] = { 0x29F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_482)
{
    // A823 0061;	
    // (ꠣ) SYLOTI NAGRI VOWEL SIGN A	[29F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA823, 0x0061 };
    uint32_t const ces[9] = { 0x29F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_483)
{
    // A823 0041;	
    // (ꠣ) SYLOTI NAGRI VOWEL SIGN A	[29F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA823, 0x0041 };
    uint32_t const ces[9] = { 0x29F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_484)
{
    // A823 0062;	
    // (ꠣ) SYLOTI NAGRI VOWEL SIGN A	[29F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA823, 0x0062 };
    uint32_t const ces[9] = { 0x29F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_485)
{
    // A824 0021;	
    // (ꠤ) SYLOTI NAGRI VOWEL SIGN I	[29F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA824, 0x0021 };
    uint32_t const ces[9] = { 0x29F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_486)
{
    // A824 003F;	
    // (ꠤ) SYLOTI NAGRI VOWEL SIGN I	[29F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA824, 0x003F };
    uint32_t const ces[9] = { 0x29F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_487)
{
    // A824 0061;	
    // (ꠤ) SYLOTI NAGRI VOWEL SIGN I	[29F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA824, 0x0061 };
    uint32_t const ces[9] = { 0x29F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_488)
{
    // A824 0041;	
    // (ꠤ) SYLOTI NAGRI VOWEL SIGN I	[29F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA824, 0x0041 };
    uint32_t const ces[9] = { 0x29F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_489)
{
    // A824 0062;	
    // (ꠤ) SYLOTI NAGRI VOWEL SIGN I	[29F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA824, 0x0062 };
    uint32_t const ces[9] = { 0x29F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_490)
{
    // A825 0021;	
    // (ꠥ) SYLOTI NAGRI VOWEL SIGN U	[29F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA825, 0x0021 };
    uint32_t const ces[9] = { 0x29F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_491)
{
    // A825 003F;	
    // (ꠥ) SYLOTI NAGRI VOWEL SIGN U	[29F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA825, 0x003F };
    uint32_t const ces[9] = { 0x29F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_492)
{
    // A825 0061;	
    // (ꠥ) SYLOTI NAGRI VOWEL SIGN U	[29F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA825, 0x0061 };
    uint32_t const ces[9] = { 0x29F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_493)
{
    // A825 0041;	
    // (ꠥ) SYLOTI NAGRI VOWEL SIGN U	[29F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA825, 0x0041 };
    uint32_t const ces[9] = { 0x29F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_494)
{
    // A825 0062;	
    // (ꠥ) SYLOTI NAGRI VOWEL SIGN U	[29F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA825, 0x0062 };
    uint32_t const ces[9] = { 0x29F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_495)
{
    // A826 0021;	
    // (ꠦ) SYLOTI NAGRI VOWEL SIGN E	[29F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA826, 0x0021 };
    uint32_t const ces[9] = { 0x29F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_496)
{
    // A826 003F;	
    // (ꠦ) SYLOTI NAGRI VOWEL SIGN E	[29F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA826, 0x003F };
    uint32_t const ces[9] = { 0x29F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_497)
{
    // A826 0061;	
    // (ꠦ) SYLOTI NAGRI VOWEL SIGN E	[29F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA826, 0x0061 };
    uint32_t const ces[9] = { 0x29F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_498)
{
    // A826 0041;	
    // (ꠦ) SYLOTI NAGRI VOWEL SIGN E	[29F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA826, 0x0041 };
    uint32_t const ces[9] = { 0x29F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_173_499)
{
    // A826 0062;	
    // (ꠦ) SYLOTI NAGRI VOWEL SIGN E	[29F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA826, 0x0062 };
    uint32_t const ces[9] = { 0x29F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

