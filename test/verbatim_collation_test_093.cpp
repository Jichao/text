// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_093_000)
{
    uint32_t const cps[2] = { 0xE003B, 0x0061 };

    // E003B 0061;	
    // ('\U000E003B') TAG SEMICOLON	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003B 0061;	
    // ('\U000E003B') TAG SEMICOLON	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_001)
{
    uint32_t const cps[2] = { 0xE003C, 0x0061 };

    // E003C 0061;	
    // ('\U000E003C') TAG LESS-THAN SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003C 0061;	
    // ('\U000E003C') TAG LESS-THAN SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_002)
{
    uint32_t const cps[2] = { 0xE003D, 0x0061 };

    // E003D 0061;	
    // ('\U000E003D') TAG EQUALS SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003D 0061;	
    // ('\U000E003D') TAG EQUALS SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_003)
{
    uint32_t const cps[2] = { 0xE003E, 0x0061 };

    // E003E 0061;	
    // ('\U000E003E') TAG GREATER-THAN SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003E 0061;	
    // ('\U000E003E') TAG GREATER-THAN SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_004)
{
    uint32_t const cps[2] = { 0xE003F, 0x0061 };

    // E003F 0061;	
    // ('\U000E003F') TAG QUESTION MARK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003F 0061;	
    // ('\U000E003F') TAG QUESTION MARK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_005)
{
    uint32_t const cps[2] = { 0xE0040, 0x0061 };

    // E0040 0061;	
    // ('\U000E0040') TAG COMMERCIAL AT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0040 0061;	
    // ('\U000E0040') TAG COMMERCIAL AT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_006)
{
    uint32_t const cps[2] = { 0xE0041, 0x0061 };

    // E0041 0061;	
    // ('\U000E0041') TAG LATIN CAPITAL LETTER A	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0041 0061;	
    // ('\U000E0041') TAG LATIN CAPITAL LETTER A	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_007)
{
    uint32_t const cps[2] = { 0xE0042, 0x0061 };

    // E0042 0061;	
    // ('\U000E0042') TAG LATIN CAPITAL LETTER B	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0042 0061;	
    // ('\U000E0042') TAG LATIN CAPITAL LETTER B	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_008)
{
    uint32_t const cps[2] = { 0xE0043, 0x0061 };

    // E0043 0061;	
    // ('\U000E0043') TAG LATIN CAPITAL LETTER C	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0043 0061;	
    // ('\U000E0043') TAG LATIN CAPITAL LETTER C	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_009)
{
    uint32_t const cps[2] = { 0xE0044, 0x0061 };

    // E0044 0061;	
    // ('\U000E0044') TAG LATIN CAPITAL LETTER D	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0044 0061;	
    // ('\U000E0044') TAG LATIN CAPITAL LETTER D	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_010)
{
    uint32_t const cps[2] = { 0xE0045, 0x0061 };

    // E0045 0061;	
    // ('\U000E0045') TAG LATIN CAPITAL LETTER E	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0045 0061;	
    // ('\U000E0045') TAG LATIN CAPITAL LETTER E	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_011)
{
    uint32_t const cps[2] = { 0xE0046, 0x0061 };

    // E0046 0061;	
    // ('\U000E0046') TAG LATIN CAPITAL LETTER F	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0046 0061;	
    // ('\U000E0046') TAG LATIN CAPITAL LETTER F	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_012)
{
    uint32_t const cps[2] = { 0xE0047, 0x0061 };

    // E0047 0061;	
    // ('\U000E0047') TAG LATIN CAPITAL LETTER G	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0047 0061;	
    // ('\U000E0047') TAG LATIN CAPITAL LETTER G	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_013)
{
    uint32_t const cps[2] = { 0xE0048, 0x0061 };

    // E0048 0061;	
    // ('\U000E0048') TAG LATIN CAPITAL LETTER H	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0048 0061;	
    // ('\U000E0048') TAG LATIN CAPITAL LETTER H	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_014)
{
    uint32_t const cps[2] = { 0xE0049, 0x0061 };

    // E0049 0061;	
    // ('\U000E0049') TAG LATIN CAPITAL LETTER I	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0049 0061;	
    // ('\U000E0049') TAG LATIN CAPITAL LETTER I	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_015)
{
    uint32_t const cps[2] = { 0xE004A, 0x0061 };

    // E004A 0061;	
    // ('\U000E004A') TAG LATIN CAPITAL LETTER J	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004A 0061;	
    // ('\U000E004A') TAG LATIN CAPITAL LETTER J	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_016)
{
    uint32_t const cps[2] = { 0xE004B, 0x0061 };

    // E004B 0061;	
    // ('\U000E004B') TAG LATIN CAPITAL LETTER K	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004B 0061;	
    // ('\U000E004B') TAG LATIN CAPITAL LETTER K	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_017)
{
    uint32_t const cps[2] = { 0xE004C, 0x0061 };

    // E004C 0061;	
    // ('\U000E004C') TAG LATIN CAPITAL LETTER L	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004C 0061;	
    // ('\U000E004C') TAG LATIN CAPITAL LETTER L	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_018)
{
    uint32_t const cps[2] = { 0xE004D, 0x0061 };

    // E004D 0061;	
    // ('\U000E004D') TAG LATIN CAPITAL LETTER M	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004D 0061;	
    // ('\U000E004D') TAG LATIN CAPITAL LETTER M	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_019)
{
    uint32_t const cps[2] = { 0xE004E, 0x0061 };

    // E004E 0061;	
    // ('\U000E004E') TAG LATIN CAPITAL LETTER N	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004E 0061;	
    // ('\U000E004E') TAG LATIN CAPITAL LETTER N	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_020)
{
    uint32_t const cps[2] = { 0xE004F, 0x0061 };

    // E004F 0061;	
    // ('\U000E004F') TAG LATIN CAPITAL LETTER O	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E004F 0061;	
    // ('\U000E004F') TAG LATIN CAPITAL LETTER O	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_021)
{
    uint32_t const cps[2] = { 0xE0050, 0x0061 };

    // E0050 0061;	
    // ('\U000E0050') TAG LATIN CAPITAL LETTER P	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0050 0061;	
    // ('\U000E0050') TAG LATIN CAPITAL LETTER P	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_022)
{
    uint32_t const cps[2] = { 0xE0051, 0x0061 };

    // E0051 0061;	
    // ('\U000E0051') TAG LATIN CAPITAL LETTER Q	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0051 0061;	
    // ('\U000E0051') TAG LATIN CAPITAL LETTER Q	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_023)
{
    uint32_t const cps[2] = { 0xE0052, 0x0061 };

    // E0052 0061;	
    // ('\U000E0052') TAG LATIN CAPITAL LETTER R	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0052 0061;	
    // ('\U000E0052') TAG LATIN CAPITAL LETTER R	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_024)
{
    uint32_t const cps[2] = { 0xE0053, 0x0061 };

    // E0053 0061;	
    // ('\U000E0053') TAG LATIN CAPITAL LETTER S	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0053 0061;	
    // ('\U000E0053') TAG LATIN CAPITAL LETTER S	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_025)
{
    uint32_t const cps[2] = { 0xE0054, 0x0061 };

    // E0054 0061;	
    // ('\U000E0054') TAG LATIN CAPITAL LETTER T	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0054 0061;	
    // ('\U000E0054') TAG LATIN CAPITAL LETTER T	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_026)
{
    uint32_t const cps[2] = { 0xE0055, 0x0061 };

    // E0055 0061;	
    // ('\U000E0055') TAG LATIN CAPITAL LETTER U	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0055 0061;	
    // ('\U000E0055') TAG LATIN CAPITAL LETTER U	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_027)
{
    uint32_t const cps[2] = { 0xE0056, 0x0061 };

    // E0056 0061;	
    // ('\U000E0056') TAG LATIN CAPITAL LETTER V	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0056 0061;	
    // ('\U000E0056') TAG LATIN CAPITAL LETTER V	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_028)
{
    uint32_t const cps[2] = { 0xE0057, 0x0061 };

    // E0057 0061;	
    // ('\U000E0057') TAG LATIN CAPITAL LETTER W	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0057 0061;	
    // ('\U000E0057') TAG LATIN CAPITAL LETTER W	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_029)
{
    uint32_t const cps[2] = { 0xE0058, 0x0061 };

    // E0058 0061;	
    // ('\U000E0058') TAG LATIN CAPITAL LETTER X	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0058 0061;	
    // ('\U000E0058') TAG LATIN CAPITAL LETTER X	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_030)
{
    uint32_t const cps[2] = { 0xE0059, 0x0061 };

    // E0059 0061;	
    // ('\U000E0059') TAG LATIN CAPITAL LETTER Y	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0059 0061;	
    // ('\U000E0059') TAG LATIN CAPITAL LETTER Y	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_031)
{
    uint32_t const cps[2] = { 0xE005A, 0x0061 };

    // E005A 0061;	
    // ('\U000E005A') TAG LATIN CAPITAL LETTER Z	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005A 0061;	
    // ('\U000E005A') TAG LATIN CAPITAL LETTER Z	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_032)
{
    uint32_t const cps[2] = { 0xE005B, 0x0061 };

    // E005B 0061;	
    // ('\U000E005B') TAG LEFT SQUARE BRACKET	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005B 0061;	
    // ('\U000E005B') TAG LEFT SQUARE BRACKET	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_033)
{
    uint32_t const cps[2] = { 0xE005C, 0x0061 };

    // E005C 0061;	
    // ('\U000E005C') TAG REVERSE SOLIDUS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005C 0061;	
    // ('\U000E005C') TAG REVERSE SOLIDUS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_034)
{
    uint32_t const cps[2] = { 0xE005D, 0x0061 };

    // E005D 0061;	
    // ('\U000E005D') TAG RIGHT SQUARE BRACKET	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005D 0061;	
    // ('\U000E005D') TAG RIGHT SQUARE BRACKET	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_035)
{
    uint32_t const cps[2] = { 0xE005E, 0x0061 };

    // E005E 0061;	
    // ('\U000E005E') TAG CIRCUMFLEX ACCENT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005E 0061;	
    // ('\U000E005E') TAG CIRCUMFLEX ACCENT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_036)
{
    uint32_t const cps[2] = { 0xE005F, 0x0061 };

    // E005F 0061;	
    // ('\U000E005F') TAG LOW LINE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E005F 0061;	
    // ('\U000E005F') TAG LOW LINE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_037)
{
    uint32_t const cps[2] = { 0xE0060, 0x0061 };

    // E0060 0061;	
    // ('\U000E0060') TAG GRAVE ACCENT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0060 0061;	
    // ('\U000E0060') TAG GRAVE ACCENT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_038)
{
    uint32_t const cps[2] = { 0xE0061, 0x0061 };

    // E0061 0061;	
    // ('\U000E0061') TAG LATIN SMALL LETTER A	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0061 0061;	
    // ('\U000E0061') TAG LATIN SMALL LETTER A	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_039)
{
    uint32_t const cps[2] = { 0xE0062, 0x0061 };

    // E0062 0061;	
    // ('\U000E0062') TAG LATIN SMALL LETTER B	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0062 0061;	
    // ('\U000E0062') TAG LATIN SMALL LETTER B	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_040)
{
    uint32_t const cps[2] = { 0xE0063, 0x0061 };

    // E0063 0061;	
    // ('\U000E0063') TAG LATIN SMALL LETTER C	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0063 0061;	
    // ('\U000E0063') TAG LATIN SMALL LETTER C	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_041)
{
    uint32_t const cps[2] = { 0xE0064, 0x0061 };

    // E0064 0061;	
    // ('\U000E0064') TAG LATIN SMALL LETTER D	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0064 0061;	
    // ('\U000E0064') TAG LATIN SMALL LETTER D	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_042)
{
    uint32_t const cps[2] = { 0xE0065, 0x0061 };

    // E0065 0061;	
    // ('\U000E0065') TAG LATIN SMALL LETTER E	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0065 0061;	
    // ('\U000E0065') TAG LATIN SMALL LETTER E	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_043)
{
    uint32_t const cps[2] = { 0xE0066, 0x0061 };

    // E0066 0061;	
    // ('\U000E0066') TAG LATIN SMALL LETTER F	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0066 0061;	
    // ('\U000E0066') TAG LATIN SMALL LETTER F	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_044)
{
    uint32_t const cps[2] = { 0xE0067, 0x0061 };

    // E0067 0061;	
    // ('\U000E0067') TAG LATIN SMALL LETTER G	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0067 0061;	
    // ('\U000E0067') TAG LATIN SMALL LETTER G	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_045)
{
    uint32_t const cps[2] = { 0xE0068, 0x0061 };

    // E0068 0061;	
    // ('\U000E0068') TAG LATIN SMALL LETTER H	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0068 0061;	
    // ('\U000E0068') TAG LATIN SMALL LETTER H	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_046)
{
    uint32_t const cps[2] = { 0xE0069, 0x0061 };

    // E0069 0061;	
    // ('\U000E0069') TAG LATIN SMALL LETTER I	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0069 0061;	
    // ('\U000E0069') TAG LATIN SMALL LETTER I	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_047)
{
    uint32_t const cps[2] = { 0xE006A, 0x0061 };

    // E006A 0061;	
    // ('\U000E006A') TAG LATIN SMALL LETTER J	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006A 0061;	
    // ('\U000E006A') TAG LATIN SMALL LETTER J	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_048)
{
    uint32_t const cps[2] = { 0xE006B, 0x0061 };

    // E006B 0061;	
    // ('\U000E006B') TAG LATIN SMALL LETTER K	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006B 0061;	
    // ('\U000E006B') TAG LATIN SMALL LETTER K	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_049)
{
    uint32_t const cps[2] = { 0xE006C, 0x0061 };

    // E006C 0061;	
    // ('\U000E006C') TAG LATIN SMALL LETTER L	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006C 0061;	
    // ('\U000E006C') TAG LATIN SMALL LETTER L	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_050)
{
    uint32_t const cps[2] = { 0xE006D, 0x0061 };

    // E006D 0061;	
    // ('\U000E006D') TAG LATIN SMALL LETTER M	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006D 0061;	
    // ('\U000E006D') TAG LATIN SMALL LETTER M	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_051)
{
    uint32_t const cps[2] = { 0xE006E, 0x0061 };

    // E006E 0061;	
    // ('\U000E006E') TAG LATIN SMALL LETTER N	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006E 0061;	
    // ('\U000E006E') TAG LATIN SMALL LETTER N	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_052)
{
    uint32_t const cps[2] = { 0xE006F, 0x0061 };

    // E006F 0061;	
    // ('\U000E006F') TAG LATIN SMALL LETTER O	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E006F 0061;	
    // ('\U000E006F') TAG LATIN SMALL LETTER O	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_053)
{
    uint32_t const cps[2] = { 0xE0070, 0x0061 };

    // E0070 0061;	
    // ('\U000E0070') TAG LATIN SMALL LETTER P	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0070 0061;	
    // ('\U000E0070') TAG LATIN SMALL LETTER P	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_054)
{
    uint32_t const cps[2] = { 0xE0071, 0x0061 };

    // E0071 0061;	
    // ('\U000E0071') TAG LATIN SMALL LETTER Q	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0071 0061;	
    // ('\U000E0071') TAG LATIN SMALL LETTER Q	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_055)
{
    uint32_t const cps[2] = { 0xE0072, 0x0061 };

    // E0072 0061;	
    // ('\U000E0072') TAG LATIN SMALL LETTER R	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0072 0061;	
    // ('\U000E0072') TAG LATIN SMALL LETTER R	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_056)
{
    uint32_t const cps[2] = { 0xE0073, 0x0061 };

    // E0073 0061;	
    // ('\U000E0073') TAG LATIN SMALL LETTER S	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0073 0061;	
    // ('\U000E0073') TAG LATIN SMALL LETTER S	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_057)
{
    uint32_t const cps[2] = { 0xE0074, 0x0061 };

    // E0074 0061;	
    // ('\U000E0074') TAG LATIN SMALL LETTER T	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0074 0061;	
    // ('\U000E0074') TAG LATIN SMALL LETTER T	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_058)
{
    uint32_t const cps[2] = { 0xE0075, 0x0061 };

    // E0075 0061;	
    // ('\U000E0075') TAG LATIN SMALL LETTER U	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0075 0061;	
    // ('\U000E0075') TAG LATIN SMALL LETTER U	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_059)
{
    uint32_t const cps[2] = { 0xE0076, 0x0061 };

    // E0076 0061;	
    // ('\U000E0076') TAG LATIN SMALL LETTER V	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0076 0061;	
    // ('\U000E0076') TAG LATIN SMALL LETTER V	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_060)
{
    uint32_t const cps[2] = { 0xE0077, 0x0061 };

    // E0077 0061;	
    // ('\U000E0077') TAG LATIN SMALL LETTER W	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0077 0061;	
    // ('\U000E0077') TAG LATIN SMALL LETTER W	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_061)
{
    uint32_t const cps[2] = { 0xE0078, 0x0061 };

    // E0078 0061;	
    // ('\U000E0078') TAG LATIN SMALL LETTER X	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0078 0061;	
    // ('\U000E0078') TAG LATIN SMALL LETTER X	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_062)
{
    uint32_t const cps[2] = { 0xE0079, 0x0061 };

    // E0079 0061;	
    // ('\U000E0079') TAG LATIN SMALL LETTER Y	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0079 0061;	
    // ('\U000E0079') TAG LATIN SMALL LETTER Y	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_063)
{
    uint32_t const cps[2] = { 0xE007A, 0x0061 };

    // E007A 0061;	
    // ('\U000E007A') TAG LATIN SMALL LETTER Z	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007A 0061;	
    // ('\U000E007A') TAG LATIN SMALL LETTER Z	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_064)
{
    uint32_t const cps[2] = { 0xE007B, 0x0061 };

    // E007B 0061;	
    // ('\U000E007B') TAG LEFT CURLY BRACKET	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007B 0061;	
    // ('\U000E007B') TAG LEFT CURLY BRACKET	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_065)
{
    uint32_t const cps[2] = { 0xE007C, 0x0061 };

    // E007C 0061;	
    // ('\U000E007C') TAG VERTICAL LINE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007C 0061;	
    // ('\U000E007C') TAG VERTICAL LINE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_066)
{
    uint32_t const cps[2] = { 0xE007D, 0x0061 };

    // E007D 0061;	
    // ('\U000E007D') TAG RIGHT CURLY BRACKET	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007D 0061;	
    // ('\U000E007D') TAG RIGHT CURLY BRACKET	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_067)
{
    uint32_t const cps[2] = { 0xE007E, 0x0061 };

    // E007E 0061;	
    // ('\U000E007E') TAG TILDE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007E 0061;	
    // ('\U000E007E') TAG TILDE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_068)
{
    uint32_t const cps[2] = { 0xE007F, 0x0061 };

    // E007F 0061;	
    // ('\U000E007F') CANCEL TAG	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E007F 0061;	
    // ('\U000E007F') CANCEL TAG	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_069)
{
    uint32_t const cps[2] = { 0xE0100, 0x0061 };

    // E0100 0061;	
    // (󠄀) VARIATION SELECTOR-17	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0100 0061;	
    // (󠄀) VARIATION SELECTOR-17	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_070)
{
    uint32_t const cps[2] = { 0xE0101, 0x0061 };

    // E0101 0061;	
    // (󠄁) VARIATION SELECTOR-18	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0101 0061;	
    // (󠄁) VARIATION SELECTOR-18	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_071)
{
    uint32_t const cps[2] = { 0xE0102, 0x0061 };

    // E0102 0061;	
    // (󠄂) VARIATION SELECTOR-19	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0102 0061;	
    // (󠄂) VARIATION SELECTOR-19	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_072)
{
    uint32_t const cps[2] = { 0xE0103, 0x0061 };

    // E0103 0061;	
    // (󠄃) VARIATION SELECTOR-20	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0103 0061;	
    // (󠄃) VARIATION SELECTOR-20	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_073)
{
    uint32_t const cps[2] = { 0xE0104, 0x0061 };

    // E0104 0061;	
    // (󠄄) VARIATION SELECTOR-21	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0104 0061;	
    // (󠄄) VARIATION SELECTOR-21	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_074)
{
    uint32_t const cps[2] = { 0xE0105, 0x0061 };

    // E0105 0061;	
    // (󠄅) VARIATION SELECTOR-22	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0105 0061;	
    // (󠄅) VARIATION SELECTOR-22	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_075)
{
    uint32_t const cps[2] = { 0xE0106, 0x0061 };

    // E0106 0061;	
    // (󠄆) VARIATION SELECTOR-23	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0106 0061;	
    // (󠄆) VARIATION SELECTOR-23	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_076)
{
    uint32_t const cps[2] = { 0xE0107, 0x0061 };

    // E0107 0061;	
    // (󠄇) VARIATION SELECTOR-24	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0107 0061;	
    // (󠄇) VARIATION SELECTOR-24	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_077)
{
    uint32_t const cps[2] = { 0xE0108, 0x0061 };

    // E0108 0061;	
    // (󠄈) VARIATION SELECTOR-25	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0108 0061;	
    // (󠄈) VARIATION SELECTOR-25	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_078)
{
    uint32_t const cps[2] = { 0xE0109, 0x0061 };

    // E0109 0061;	
    // (󠄉) VARIATION SELECTOR-26	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0109 0061;	
    // (󠄉) VARIATION SELECTOR-26	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_079)
{
    uint32_t const cps[2] = { 0xE010A, 0x0061 };

    // E010A 0061;	
    // (󠄊) VARIATION SELECTOR-27	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010A 0061;	
    // (󠄊) VARIATION SELECTOR-27	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_080)
{
    uint32_t const cps[2] = { 0xE010B, 0x0061 };

    // E010B 0061;	
    // (󠄋) VARIATION SELECTOR-28	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010B 0061;	
    // (󠄋) VARIATION SELECTOR-28	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_081)
{
    uint32_t const cps[2] = { 0xE010C, 0x0061 };

    // E010C 0061;	
    // (󠄌) VARIATION SELECTOR-29	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010C 0061;	
    // (󠄌) VARIATION SELECTOR-29	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_082)
{
    uint32_t const cps[2] = { 0xE010D, 0x0061 };

    // E010D 0061;	
    // (󠄍) VARIATION SELECTOR-30	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010D 0061;	
    // (󠄍) VARIATION SELECTOR-30	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_083)
{
    uint32_t const cps[2] = { 0xE010E, 0x0061 };

    // E010E 0061;	
    // (󠄎) VARIATION SELECTOR-31	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010E 0061;	
    // (󠄎) VARIATION SELECTOR-31	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_084)
{
    uint32_t const cps[2] = { 0xE010F, 0x0061 };

    // E010F 0061;	
    // (󠄏) VARIATION SELECTOR-32	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E010F 0061;	
    // (󠄏) VARIATION SELECTOR-32	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_085)
{
    uint32_t const cps[2] = { 0xE0110, 0x0061 };

    // E0110 0061;	
    // (󠄐) VARIATION SELECTOR-33	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0110 0061;	
    // (󠄐) VARIATION SELECTOR-33	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_086)
{
    uint32_t const cps[2] = { 0xE0111, 0x0061 };

    // E0111 0061;	
    // (󠄑) VARIATION SELECTOR-34	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0111 0061;	
    // (󠄑) VARIATION SELECTOR-34	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_087)
{
    uint32_t const cps[2] = { 0xE0112, 0x0061 };

    // E0112 0061;	
    // (󠄒) VARIATION SELECTOR-35	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0112 0061;	
    // (󠄒) VARIATION SELECTOR-35	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_088)
{
    uint32_t const cps[2] = { 0xE0113, 0x0061 };

    // E0113 0061;	
    // (󠄓) VARIATION SELECTOR-36	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0113 0061;	
    // (󠄓) VARIATION SELECTOR-36	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_089)
{
    uint32_t const cps[2] = { 0xE0114, 0x0061 };

    // E0114 0061;	
    // (󠄔) VARIATION SELECTOR-37	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0114 0061;	
    // (󠄔) VARIATION SELECTOR-37	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_090)
{
    uint32_t const cps[2] = { 0xE0115, 0x0061 };

    // E0115 0061;	
    // (󠄕) VARIATION SELECTOR-38	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0115 0061;	
    // (󠄕) VARIATION SELECTOR-38	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_091)
{
    uint32_t const cps[2] = { 0xE0116, 0x0061 };

    // E0116 0061;	
    // (󠄖) VARIATION SELECTOR-39	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0116 0061;	
    // (󠄖) VARIATION SELECTOR-39	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_092)
{
    uint32_t const cps[2] = { 0xE0117, 0x0061 };

    // E0117 0061;	
    // (󠄗) VARIATION SELECTOR-40	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0117 0061;	
    // (󠄗) VARIATION SELECTOR-40	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_093)
{
    uint32_t const cps[2] = { 0xE0118, 0x0061 };

    // E0118 0061;	
    // (󠄘) VARIATION SELECTOR-41	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0118 0061;	
    // (󠄘) VARIATION SELECTOR-41	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_094)
{
    uint32_t const cps[2] = { 0xE0119, 0x0061 };

    // E0119 0061;	
    // (󠄙) VARIATION SELECTOR-42	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0119 0061;	
    // (󠄙) VARIATION SELECTOR-42	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_095)
{
    uint32_t const cps[2] = { 0xE011A, 0x0061 };

    // E011A 0061;	
    // (󠄚) VARIATION SELECTOR-43	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011A 0061;	
    // (󠄚) VARIATION SELECTOR-43	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_096)
{
    uint32_t const cps[2] = { 0xE011B, 0x0061 };

    // E011B 0061;	
    // (󠄛) VARIATION SELECTOR-44	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011B 0061;	
    // (󠄛) VARIATION SELECTOR-44	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_097)
{
    uint32_t const cps[2] = { 0xE011C, 0x0061 };

    // E011C 0061;	
    // (󠄜) VARIATION SELECTOR-45	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011C 0061;	
    // (󠄜) VARIATION SELECTOR-45	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_098)
{
    uint32_t const cps[2] = { 0xE011D, 0x0061 };

    // E011D 0061;	
    // (󠄝) VARIATION SELECTOR-46	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011D 0061;	
    // (󠄝) VARIATION SELECTOR-46	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_099)
{
    uint32_t const cps[2] = { 0xE011E, 0x0061 };

    // E011E 0061;	
    // (󠄞) VARIATION SELECTOR-47	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011E 0061;	
    // (󠄞) VARIATION SELECTOR-47	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_100)
{
    uint32_t const cps[2] = { 0xE011F, 0x0061 };

    // E011F 0061;	
    // (󠄟) VARIATION SELECTOR-48	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E011F 0061;	
    // (󠄟) VARIATION SELECTOR-48	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_101)
{
    uint32_t const cps[2] = { 0xE0120, 0x0061 };

    // E0120 0061;	
    // (󠄠) VARIATION SELECTOR-49	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0120 0061;	
    // (󠄠) VARIATION SELECTOR-49	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_102)
{
    uint32_t const cps[2] = { 0xE0121, 0x0061 };

    // E0121 0061;	
    // (󠄡) VARIATION SELECTOR-50	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0121 0061;	
    // (󠄡) VARIATION SELECTOR-50	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_103)
{
    uint32_t const cps[2] = { 0xE0122, 0x0061 };

    // E0122 0061;	
    // (󠄢) VARIATION SELECTOR-51	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0122 0061;	
    // (󠄢) VARIATION SELECTOR-51	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_104)
{
    uint32_t const cps[2] = { 0xE0123, 0x0061 };

    // E0123 0061;	
    // (󠄣) VARIATION SELECTOR-52	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0123 0061;	
    // (󠄣) VARIATION SELECTOR-52	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_105)
{
    uint32_t const cps[2] = { 0xE0124, 0x0061 };

    // E0124 0061;	
    // (󠄤) VARIATION SELECTOR-53	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0124 0061;	
    // (󠄤) VARIATION SELECTOR-53	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_106)
{
    uint32_t const cps[2] = { 0xE0125, 0x0061 };

    // E0125 0061;	
    // (󠄥) VARIATION SELECTOR-54	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0125 0061;	
    // (󠄥) VARIATION SELECTOR-54	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_107)
{
    uint32_t const cps[2] = { 0xE0126, 0x0061 };

    // E0126 0061;	
    // (󠄦) VARIATION SELECTOR-55	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0126 0061;	
    // (󠄦) VARIATION SELECTOR-55	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_108)
{
    uint32_t const cps[2] = { 0xE0127, 0x0061 };

    // E0127 0061;	
    // (󠄧) VARIATION SELECTOR-56	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0127 0061;	
    // (󠄧) VARIATION SELECTOR-56	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_109)
{
    uint32_t const cps[2] = { 0xE0128, 0x0061 };

    // E0128 0061;	
    // (󠄨) VARIATION SELECTOR-57	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0128 0061;	
    // (󠄨) VARIATION SELECTOR-57	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_110)
{
    uint32_t const cps[2] = { 0xE0129, 0x0061 };

    // E0129 0061;	
    // (󠄩) VARIATION SELECTOR-58	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0129 0061;	
    // (󠄩) VARIATION SELECTOR-58	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_111)
{
    uint32_t const cps[2] = { 0xE012A, 0x0061 };

    // E012A 0061;	
    // (󠄪) VARIATION SELECTOR-59	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012A 0061;	
    // (󠄪) VARIATION SELECTOR-59	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_112)
{
    uint32_t const cps[2] = { 0xE012B, 0x0061 };

    // E012B 0061;	
    // (󠄫) VARIATION SELECTOR-60	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012B 0061;	
    // (󠄫) VARIATION SELECTOR-60	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_113)
{
    uint32_t const cps[2] = { 0xE012C, 0x0061 };

    // E012C 0061;	
    // (󠄬) VARIATION SELECTOR-61	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012C 0061;	
    // (󠄬) VARIATION SELECTOR-61	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_114)
{
    uint32_t const cps[2] = { 0xE012D, 0x0061 };

    // E012D 0061;	
    // (󠄭) VARIATION SELECTOR-62	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012D 0061;	
    // (󠄭) VARIATION SELECTOR-62	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_115)
{
    uint32_t const cps[2] = { 0xE012E, 0x0061 };

    // E012E 0061;	
    // (󠄮) VARIATION SELECTOR-63	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012E 0061;	
    // (󠄮) VARIATION SELECTOR-63	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_116)
{
    uint32_t const cps[2] = { 0xE012F, 0x0061 };

    // E012F 0061;	
    // (󠄯) VARIATION SELECTOR-64	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E012F 0061;	
    // (󠄯) VARIATION SELECTOR-64	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_117)
{
    uint32_t const cps[2] = { 0xE0130, 0x0061 };

    // E0130 0061;	
    // (󠄰) VARIATION SELECTOR-65	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0130 0061;	
    // (󠄰) VARIATION SELECTOR-65	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_118)
{
    uint32_t const cps[2] = { 0xE0131, 0x0061 };

    // E0131 0061;	
    // (󠄱) VARIATION SELECTOR-66	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0131 0061;	
    // (󠄱) VARIATION SELECTOR-66	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_119)
{
    uint32_t const cps[2] = { 0xE0132, 0x0061 };

    // E0132 0061;	
    // (󠄲) VARIATION SELECTOR-67	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0132 0061;	
    // (󠄲) VARIATION SELECTOR-67	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_120)
{
    uint32_t const cps[2] = { 0xE0133, 0x0061 };

    // E0133 0061;	
    // (󠄳) VARIATION SELECTOR-68	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0133 0061;	
    // (󠄳) VARIATION SELECTOR-68	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_121)
{
    uint32_t const cps[2] = { 0xE0134, 0x0061 };

    // E0134 0061;	
    // (󠄴) VARIATION SELECTOR-69	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0134 0061;	
    // (󠄴) VARIATION SELECTOR-69	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_122)
{
    uint32_t const cps[2] = { 0xE0135, 0x0061 };

    // E0135 0061;	
    // (󠄵) VARIATION SELECTOR-70	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0135 0061;	
    // (󠄵) VARIATION SELECTOR-70	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_123)
{
    uint32_t const cps[2] = { 0xE0136, 0x0061 };

    // E0136 0061;	
    // (󠄶) VARIATION SELECTOR-71	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0136 0061;	
    // (󠄶) VARIATION SELECTOR-71	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_124)
{
    uint32_t const cps[2] = { 0xE0137, 0x0061 };

    // E0137 0061;	
    // (󠄷) VARIATION SELECTOR-72	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0137 0061;	
    // (󠄷) VARIATION SELECTOR-72	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_125)
{
    uint32_t const cps[2] = { 0xE0138, 0x0061 };

    // E0138 0061;	
    // (󠄸) VARIATION SELECTOR-73	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0138 0061;	
    // (󠄸) VARIATION SELECTOR-73	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_126)
{
    uint32_t const cps[2] = { 0xE0139, 0x0061 };

    // E0139 0061;	
    // (󠄹) VARIATION SELECTOR-74	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0139 0061;	
    // (󠄹) VARIATION SELECTOR-74	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_127)
{
    uint32_t const cps[2] = { 0xE013A, 0x0061 };

    // E013A 0061;	
    // (󠄺) VARIATION SELECTOR-75	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013A 0061;	
    // (󠄺) VARIATION SELECTOR-75	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_128)
{
    uint32_t const cps[2] = { 0xE013B, 0x0061 };

    // E013B 0061;	
    // (󠄻) VARIATION SELECTOR-76	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013B 0061;	
    // (󠄻) VARIATION SELECTOR-76	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_129)
{
    uint32_t const cps[2] = { 0xE013C, 0x0061 };

    // E013C 0061;	
    // (󠄼) VARIATION SELECTOR-77	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013C 0061;	
    // (󠄼) VARIATION SELECTOR-77	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_130)
{
    uint32_t const cps[2] = { 0xE013D, 0x0061 };

    // E013D 0061;	
    // (󠄽) VARIATION SELECTOR-78	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013D 0061;	
    // (󠄽) VARIATION SELECTOR-78	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_131)
{
    uint32_t const cps[2] = { 0xE013E, 0x0061 };

    // E013E 0061;	
    // (󠄾) VARIATION SELECTOR-79	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013E 0061;	
    // (󠄾) VARIATION SELECTOR-79	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_132)
{
    uint32_t const cps[2] = { 0xE013F, 0x0061 };

    // E013F 0061;	
    // (󠄿) VARIATION SELECTOR-80	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E013F 0061;	
    // (󠄿) VARIATION SELECTOR-80	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_133)
{
    uint32_t const cps[2] = { 0xE0140, 0x0061 };

    // E0140 0061;	
    // (󠅀) VARIATION SELECTOR-81	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0140 0061;	
    // (󠅀) VARIATION SELECTOR-81	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_134)
{
    uint32_t const cps[2] = { 0xE0141, 0x0061 };

    // E0141 0061;	
    // (󠅁) VARIATION SELECTOR-82	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0141 0061;	
    // (󠅁) VARIATION SELECTOR-82	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_135)
{
    uint32_t const cps[2] = { 0xE0142, 0x0061 };

    // E0142 0061;	
    // (󠅂) VARIATION SELECTOR-83	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0142 0061;	
    // (󠅂) VARIATION SELECTOR-83	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_136)
{
    uint32_t const cps[2] = { 0xE0143, 0x0061 };

    // E0143 0061;	
    // (󠅃) VARIATION SELECTOR-84	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0143 0061;	
    // (󠅃) VARIATION SELECTOR-84	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_137)
{
    uint32_t const cps[2] = { 0xE0144, 0x0061 };

    // E0144 0061;	
    // (󠅄) VARIATION SELECTOR-85	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0144 0061;	
    // (󠅄) VARIATION SELECTOR-85	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_138)
{
    uint32_t const cps[2] = { 0xE0145, 0x0061 };

    // E0145 0061;	
    // (󠅅) VARIATION SELECTOR-86	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0145 0061;	
    // (󠅅) VARIATION SELECTOR-86	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_139)
{
    uint32_t const cps[2] = { 0xE0146, 0x0061 };

    // E0146 0061;	
    // (󠅆) VARIATION SELECTOR-87	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0146 0061;	
    // (󠅆) VARIATION SELECTOR-87	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_140)
{
    uint32_t const cps[2] = { 0xE0147, 0x0061 };

    // E0147 0061;	
    // (󠅇) VARIATION SELECTOR-88	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0147 0061;	
    // (󠅇) VARIATION SELECTOR-88	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_141)
{
    uint32_t const cps[2] = { 0xE0148, 0x0061 };

    // E0148 0061;	
    // (󠅈) VARIATION SELECTOR-89	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0148 0061;	
    // (󠅈) VARIATION SELECTOR-89	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_142)
{
    uint32_t const cps[2] = { 0xE0149, 0x0061 };

    // E0149 0061;	
    // (󠅉) VARIATION SELECTOR-90	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0149 0061;	
    // (󠅉) VARIATION SELECTOR-90	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_143)
{
    uint32_t const cps[2] = { 0xE014A, 0x0061 };

    // E014A 0061;	
    // (󠅊) VARIATION SELECTOR-91	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014A 0061;	
    // (󠅊) VARIATION SELECTOR-91	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_144)
{
    uint32_t const cps[2] = { 0xE014B, 0x0061 };

    // E014B 0061;	
    // (󠅋) VARIATION SELECTOR-92	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014B 0061;	
    // (󠅋) VARIATION SELECTOR-92	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_145)
{
    uint32_t const cps[2] = { 0xE014C, 0x0061 };

    // E014C 0061;	
    // (󠅌) VARIATION SELECTOR-93	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014C 0061;	
    // (󠅌) VARIATION SELECTOR-93	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_146)
{
    uint32_t const cps[2] = { 0xE014D, 0x0061 };

    // E014D 0061;	
    // (󠅍) VARIATION SELECTOR-94	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014D 0061;	
    // (󠅍) VARIATION SELECTOR-94	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_147)
{
    uint32_t const cps[2] = { 0xE014E, 0x0061 };

    // E014E 0061;	
    // (󠅎) VARIATION SELECTOR-95	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014E 0061;	
    // (󠅎) VARIATION SELECTOR-95	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_148)
{
    uint32_t const cps[2] = { 0xE014F, 0x0061 };

    // E014F 0061;	
    // (󠅏) VARIATION SELECTOR-96	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E014F 0061;	
    // (󠅏) VARIATION SELECTOR-96	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_149)
{
    uint32_t const cps[2] = { 0xE0150, 0x0061 };

    // E0150 0061;	
    // (󠅐) VARIATION SELECTOR-97	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0150 0061;	
    // (󠅐) VARIATION SELECTOR-97	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_150)
{
    uint32_t const cps[2] = { 0xE0151, 0x0061 };

    // E0151 0061;	
    // (󠅑) VARIATION SELECTOR-98	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0151 0061;	
    // (󠅑) VARIATION SELECTOR-98	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_151)
{
    uint32_t const cps[2] = { 0xE0152, 0x0061 };

    // E0152 0061;	
    // (󠅒) VARIATION SELECTOR-99	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0152 0061;	
    // (󠅒) VARIATION SELECTOR-99	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_152)
{
    uint32_t const cps[2] = { 0xE0153, 0x0061 };

    // E0153 0061;	
    // (󠅓) VARIATION SELECTOR-100	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0153 0061;	
    // (󠅓) VARIATION SELECTOR-100	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_153)
{
    uint32_t const cps[2] = { 0xE0154, 0x0061 };

    // E0154 0061;	
    // (󠅔) VARIATION SELECTOR-101	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0154 0061;	
    // (󠅔) VARIATION SELECTOR-101	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_154)
{
    uint32_t const cps[2] = { 0xE0155, 0x0061 };

    // E0155 0061;	
    // (󠅕) VARIATION SELECTOR-102	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0155 0061;	
    // (󠅕) VARIATION SELECTOR-102	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_155)
{
    uint32_t const cps[2] = { 0xE0156, 0x0061 };

    // E0156 0061;	
    // (󠅖) VARIATION SELECTOR-103	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0156 0061;	
    // (󠅖) VARIATION SELECTOR-103	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_156)
{
    uint32_t const cps[2] = { 0xE0157, 0x0061 };

    // E0157 0061;	
    // (󠅗) VARIATION SELECTOR-104	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0157 0061;	
    // (󠅗) VARIATION SELECTOR-104	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_157)
{
    uint32_t const cps[2] = { 0xE0158, 0x0061 };

    // E0158 0061;	
    // (󠅘) VARIATION SELECTOR-105	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0158 0061;	
    // (󠅘) VARIATION SELECTOR-105	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_158)
{
    uint32_t const cps[2] = { 0xE0159, 0x0061 };

    // E0159 0061;	
    // (󠅙) VARIATION SELECTOR-106	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0159 0061;	
    // (󠅙) VARIATION SELECTOR-106	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_159)
{
    uint32_t const cps[2] = { 0xE015A, 0x0061 };

    // E015A 0061;	
    // (󠅚) VARIATION SELECTOR-107	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015A 0061;	
    // (󠅚) VARIATION SELECTOR-107	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_160)
{
    uint32_t const cps[2] = { 0xE015B, 0x0061 };

    // E015B 0061;	
    // (󠅛) VARIATION SELECTOR-108	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015B 0061;	
    // (󠅛) VARIATION SELECTOR-108	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_161)
{
    uint32_t const cps[2] = { 0xE015C, 0x0061 };

    // E015C 0061;	
    // (󠅜) VARIATION SELECTOR-109	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015C 0061;	
    // (󠅜) VARIATION SELECTOR-109	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_162)
{
    uint32_t const cps[2] = { 0xE015D, 0x0061 };

    // E015D 0061;	
    // (󠅝) VARIATION SELECTOR-110	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015D 0061;	
    // (󠅝) VARIATION SELECTOR-110	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_163)
{
    uint32_t const cps[2] = { 0xE015E, 0x0061 };

    // E015E 0061;	
    // (󠅞) VARIATION SELECTOR-111	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015E 0061;	
    // (󠅞) VARIATION SELECTOR-111	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_164)
{
    uint32_t const cps[2] = { 0xE015F, 0x0061 };

    // E015F 0061;	
    // (󠅟) VARIATION SELECTOR-112	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E015F 0061;	
    // (󠅟) VARIATION SELECTOR-112	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_165)
{
    uint32_t const cps[2] = { 0xE0160, 0x0061 };

    // E0160 0061;	
    // (󠅠) VARIATION SELECTOR-113	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0160 0061;	
    // (󠅠) VARIATION SELECTOR-113	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_166)
{
    uint32_t const cps[2] = { 0xE0161, 0x0061 };

    // E0161 0061;	
    // (󠅡) VARIATION SELECTOR-114	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0161 0061;	
    // (󠅡) VARIATION SELECTOR-114	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_167)
{
    uint32_t const cps[2] = { 0xE0162, 0x0061 };

    // E0162 0061;	
    // (󠅢) VARIATION SELECTOR-115	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0162 0061;	
    // (󠅢) VARIATION SELECTOR-115	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_168)
{
    uint32_t const cps[2] = { 0xE0163, 0x0061 };

    // E0163 0061;	
    // (󠅣) VARIATION SELECTOR-116	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0163 0061;	
    // (󠅣) VARIATION SELECTOR-116	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_169)
{
    uint32_t const cps[2] = { 0xE0164, 0x0061 };

    // E0164 0061;	
    // (󠅤) VARIATION SELECTOR-117	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0164 0061;	
    // (󠅤) VARIATION SELECTOR-117	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_170)
{
    uint32_t const cps[2] = { 0xE0165, 0x0061 };

    // E0165 0061;	
    // (󠅥) VARIATION SELECTOR-118	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0165 0061;	
    // (󠅥) VARIATION SELECTOR-118	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_171)
{
    uint32_t const cps[2] = { 0xE0166, 0x0061 };

    // E0166 0061;	
    // (󠅦) VARIATION SELECTOR-119	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0166 0061;	
    // (󠅦) VARIATION SELECTOR-119	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_172)
{
    uint32_t const cps[2] = { 0xE0167, 0x0061 };

    // E0167 0061;	
    // (󠅧) VARIATION SELECTOR-120	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0167 0061;	
    // (󠅧) VARIATION SELECTOR-120	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_173)
{
    uint32_t const cps[2] = { 0xE0168, 0x0061 };

    // E0168 0061;	
    // (󠅨) VARIATION SELECTOR-121	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0168 0061;	
    // (󠅨) VARIATION SELECTOR-121	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_174)
{
    uint32_t const cps[2] = { 0xE0169, 0x0061 };

    // E0169 0061;	
    // (󠅩) VARIATION SELECTOR-122	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0169 0061;	
    // (󠅩) VARIATION SELECTOR-122	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_175)
{
    uint32_t const cps[2] = { 0xE016A, 0x0061 };

    // E016A 0061;	
    // (󠅪) VARIATION SELECTOR-123	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E016A 0061;	
    // (󠅪) VARIATION SELECTOR-123	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_176)
{
    uint32_t const cps[2] = { 0xE016B, 0x0061 };

    // E016B 0061;	
    // (󠅫) VARIATION SELECTOR-124	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E016B 0061;	
    // (󠅫) VARIATION SELECTOR-124	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_177)
{
    uint32_t const cps[2] = { 0xE016C, 0x0061 };

    // E016C 0061;	
    // (󠅬) VARIATION SELECTOR-125	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E016C 0061;	
    // (󠅬) VARIATION SELECTOR-125	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_178)
{
    uint32_t const cps[2] = { 0xE016D, 0x0061 };

    // E016D 0061;	
    // (󠅭) VARIATION SELECTOR-126	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E016D 0061;	
    // (󠅭) VARIATION SELECTOR-126	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_179)
{
    uint32_t const cps[2] = { 0xE016E, 0x0061 };

    // E016E 0061;	
    // (󠅮) VARIATION SELECTOR-127	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E016E 0061;	
    // (󠅮) VARIATION SELECTOR-127	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_180)
{
    uint32_t const cps[2] = { 0xE016F, 0x0061 };

    // E016F 0061;	
    // (󠅯) VARIATION SELECTOR-128	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E016F 0061;	
    // (󠅯) VARIATION SELECTOR-128	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_181)
{
    uint32_t const cps[2] = { 0xE0170, 0x0061 };

    // E0170 0061;	
    // (󠅰) VARIATION SELECTOR-129	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0170 0061;	
    // (󠅰) VARIATION SELECTOR-129	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_182)
{
    uint32_t const cps[2] = { 0xE0171, 0x0061 };

    // E0171 0061;	
    // (󠅱) VARIATION SELECTOR-130	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0171 0061;	
    // (󠅱) VARIATION SELECTOR-130	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_183)
{
    uint32_t const cps[2] = { 0xE0172, 0x0061 };

    // E0172 0061;	
    // (󠅲) VARIATION SELECTOR-131	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0172 0061;	
    // (󠅲) VARIATION SELECTOR-131	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_184)
{
    uint32_t const cps[2] = { 0xE0173, 0x0061 };

    // E0173 0061;	
    // (󠅳) VARIATION SELECTOR-132	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0173 0061;	
    // (󠅳) VARIATION SELECTOR-132	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_185)
{
    uint32_t const cps[2] = { 0xE0174, 0x0061 };

    // E0174 0061;	
    // (󠅴) VARIATION SELECTOR-133	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0174 0061;	
    // (󠅴) VARIATION SELECTOR-133	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_186)
{
    uint32_t const cps[2] = { 0xE0175, 0x0061 };

    // E0175 0061;	
    // (󠅵) VARIATION SELECTOR-134	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0175 0061;	
    // (󠅵) VARIATION SELECTOR-134	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_187)
{
    uint32_t const cps[2] = { 0xE0176, 0x0061 };

    // E0176 0061;	
    // (󠅶) VARIATION SELECTOR-135	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0176 0061;	
    // (󠅶) VARIATION SELECTOR-135	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_188)
{
    uint32_t const cps[2] = { 0xE0177, 0x0061 };

    // E0177 0061;	
    // (󠅷) VARIATION SELECTOR-136	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0177 0061;	
    // (󠅷) VARIATION SELECTOR-136	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_189)
{
    uint32_t const cps[2] = { 0xE0178, 0x0061 };

    // E0178 0061;	
    // (󠅸) VARIATION SELECTOR-137	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0178 0061;	
    // (󠅸) VARIATION SELECTOR-137	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_190)
{
    uint32_t const cps[2] = { 0xE0179, 0x0061 };

    // E0179 0061;	
    // (󠅹) VARIATION SELECTOR-138	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0179 0061;	
    // (󠅹) VARIATION SELECTOR-138	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_191)
{
    uint32_t const cps[2] = { 0xE017A, 0x0061 };

    // E017A 0061;	
    // (󠅺) VARIATION SELECTOR-139	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E017A 0061;	
    // (󠅺) VARIATION SELECTOR-139	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_192)
{
    uint32_t const cps[2] = { 0xE017B, 0x0061 };

    // E017B 0061;	
    // (󠅻) VARIATION SELECTOR-140	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E017B 0061;	
    // (󠅻) VARIATION SELECTOR-140	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_193)
{
    uint32_t const cps[2] = { 0xE017C, 0x0061 };

    // E017C 0061;	
    // (󠅼) VARIATION SELECTOR-141	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E017C 0061;	
    // (󠅼) VARIATION SELECTOR-141	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_194)
{
    uint32_t const cps[2] = { 0xE017D, 0x0061 };

    // E017D 0061;	
    // (󠅽) VARIATION SELECTOR-142	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E017D 0061;	
    // (󠅽) VARIATION SELECTOR-142	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_195)
{
    uint32_t const cps[2] = { 0xE017E, 0x0061 };

    // E017E 0061;	
    // (󠅾) VARIATION SELECTOR-143	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E017E 0061;	
    // (󠅾) VARIATION SELECTOR-143	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_196)
{
    uint32_t const cps[2] = { 0xE017F, 0x0061 };

    // E017F 0061;	
    // (󠅿) VARIATION SELECTOR-144	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E017F 0061;	
    // (󠅿) VARIATION SELECTOR-144	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_197)
{
    uint32_t const cps[2] = { 0xE0180, 0x0061 };

    // E0180 0061;	
    // (󠆀) VARIATION SELECTOR-145	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0180 0061;	
    // (󠆀) VARIATION SELECTOR-145	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_198)
{
    uint32_t const cps[2] = { 0xE0181, 0x0061 };

    // E0181 0061;	
    // (󠆁) VARIATION SELECTOR-146	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0181 0061;	
    // (󠆁) VARIATION SELECTOR-146	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_199)
{
    uint32_t const cps[2] = { 0xE0182, 0x0061 };

    // E0182 0061;	
    // (󠆂) VARIATION SELECTOR-147	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0182 0061;	
    // (󠆂) VARIATION SELECTOR-147	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_200)
{
    uint32_t const cps[2] = { 0xE0183, 0x0061 };

    // E0183 0061;	
    // (󠆃) VARIATION SELECTOR-148	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0183 0061;	
    // (󠆃) VARIATION SELECTOR-148	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_201)
{
    uint32_t const cps[2] = { 0xE0184, 0x0061 };

    // E0184 0061;	
    // (󠆄) VARIATION SELECTOR-149	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0184 0061;	
    // (󠆄) VARIATION SELECTOR-149	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_202)
{
    uint32_t const cps[2] = { 0xE0185, 0x0061 };

    // E0185 0061;	
    // (󠆅) VARIATION SELECTOR-150	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0185 0061;	
    // (󠆅) VARIATION SELECTOR-150	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_203)
{
    uint32_t const cps[2] = { 0xE0186, 0x0061 };

    // E0186 0061;	
    // (󠆆) VARIATION SELECTOR-151	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0186 0061;	
    // (󠆆) VARIATION SELECTOR-151	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_204)
{
    uint32_t const cps[2] = { 0xE0187, 0x0061 };

    // E0187 0061;	
    // (󠆇) VARIATION SELECTOR-152	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0187 0061;	
    // (󠆇) VARIATION SELECTOR-152	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_205)
{
    uint32_t const cps[2] = { 0xE0188, 0x0061 };

    // E0188 0061;	
    // (󠆈) VARIATION SELECTOR-153	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0188 0061;	
    // (󠆈) VARIATION SELECTOR-153	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_206)
{
    uint32_t const cps[2] = { 0xE0189, 0x0061 };

    // E0189 0061;	
    // (󠆉) VARIATION SELECTOR-154	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0189 0061;	
    // (󠆉) VARIATION SELECTOR-154	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_207)
{
    uint32_t const cps[2] = { 0xE018A, 0x0061 };

    // E018A 0061;	
    // (󠆊) VARIATION SELECTOR-155	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E018A 0061;	
    // (󠆊) VARIATION SELECTOR-155	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_208)
{
    uint32_t const cps[2] = { 0xE018B, 0x0061 };

    // E018B 0061;	
    // (󠆋) VARIATION SELECTOR-156	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E018B 0061;	
    // (󠆋) VARIATION SELECTOR-156	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_209)
{
    uint32_t const cps[2] = { 0xE018C, 0x0061 };

    // E018C 0061;	
    // (󠆌) VARIATION SELECTOR-157	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E018C 0061;	
    // (󠆌) VARIATION SELECTOR-157	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_210)
{
    uint32_t const cps[2] = { 0xE018D, 0x0061 };

    // E018D 0061;	
    // (󠆍) VARIATION SELECTOR-158	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E018D 0061;	
    // (󠆍) VARIATION SELECTOR-158	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_211)
{
    uint32_t const cps[2] = { 0xE018E, 0x0061 };

    // E018E 0061;	
    // (󠆎) VARIATION SELECTOR-159	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E018E 0061;	
    // (󠆎) VARIATION SELECTOR-159	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_212)
{
    uint32_t const cps[2] = { 0xE018F, 0x0061 };

    // E018F 0061;	
    // (󠆏) VARIATION SELECTOR-160	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E018F 0061;	
    // (󠆏) VARIATION SELECTOR-160	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_213)
{
    uint32_t const cps[2] = { 0xE0190, 0x0061 };

    // E0190 0061;	
    // (󠆐) VARIATION SELECTOR-161	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0190 0061;	
    // (󠆐) VARIATION SELECTOR-161	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_214)
{
    uint32_t const cps[2] = { 0xE0191, 0x0061 };

    // E0191 0061;	
    // (󠆑) VARIATION SELECTOR-162	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0191 0061;	
    // (󠆑) VARIATION SELECTOR-162	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_215)
{
    uint32_t const cps[2] = { 0xE0192, 0x0061 };

    // E0192 0061;	
    // (󠆒) VARIATION SELECTOR-163	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0192 0061;	
    // (󠆒) VARIATION SELECTOR-163	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_216)
{
    uint32_t const cps[2] = { 0xE0193, 0x0061 };

    // E0193 0061;	
    // (󠆓) VARIATION SELECTOR-164	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0193 0061;	
    // (󠆓) VARIATION SELECTOR-164	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_217)
{
    uint32_t const cps[2] = { 0xE0194, 0x0061 };

    // E0194 0061;	
    // (󠆔) VARIATION SELECTOR-165	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0194 0061;	
    // (󠆔) VARIATION SELECTOR-165	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_218)
{
    uint32_t const cps[2] = { 0xE0195, 0x0061 };

    // E0195 0061;	
    // (󠆕) VARIATION SELECTOR-166	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0195 0061;	
    // (󠆕) VARIATION SELECTOR-166	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_219)
{
    uint32_t const cps[2] = { 0xE0196, 0x0061 };

    // E0196 0061;	
    // (󠆖) VARIATION SELECTOR-167	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0196 0061;	
    // (󠆖) VARIATION SELECTOR-167	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_220)
{
    uint32_t const cps[2] = { 0xE0197, 0x0061 };

    // E0197 0061;	
    // (󠆗) VARIATION SELECTOR-168	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0197 0061;	
    // (󠆗) VARIATION SELECTOR-168	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_221)
{
    uint32_t const cps[2] = { 0xE0198, 0x0061 };

    // E0198 0061;	
    // (󠆘) VARIATION SELECTOR-169	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0198 0061;	
    // (󠆘) VARIATION SELECTOR-169	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_222)
{
    uint32_t const cps[2] = { 0xE0199, 0x0061 };

    // E0199 0061;	
    // (󠆙) VARIATION SELECTOR-170	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0199 0061;	
    // (󠆙) VARIATION SELECTOR-170	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_223)
{
    uint32_t const cps[2] = { 0xE019A, 0x0061 };

    // E019A 0061;	
    // (󠆚) VARIATION SELECTOR-171	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E019A 0061;	
    // (󠆚) VARIATION SELECTOR-171	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_224)
{
    uint32_t const cps[2] = { 0xE019B, 0x0061 };

    // E019B 0061;	
    // (󠆛) VARIATION SELECTOR-172	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E019B 0061;	
    // (󠆛) VARIATION SELECTOR-172	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_225)
{
    uint32_t const cps[2] = { 0xE019C, 0x0061 };

    // E019C 0061;	
    // (󠆜) VARIATION SELECTOR-173	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E019C 0061;	
    // (󠆜) VARIATION SELECTOR-173	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_226)
{
    uint32_t const cps[2] = { 0xE019D, 0x0061 };

    // E019D 0061;	
    // (󠆝) VARIATION SELECTOR-174	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E019D 0061;	
    // (󠆝) VARIATION SELECTOR-174	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_227)
{
    uint32_t const cps[2] = { 0xE019E, 0x0061 };

    // E019E 0061;	
    // (󠆞) VARIATION SELECTOR-175	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E019E 0061;	
    // (󠆞) VARIATION SELECTOR-175	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_228)
{
    uint32_t const cps[2] = { 0xE019F, 0x0061 };

    // E019F 0061;	
    // (󠆟) VARIATION SELECTOR-176	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E019F 0061;	
    // (󠆟) VARIATION SELECTOR-176	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_229)
{
    uint32_t const cps[2] = { 0xE01A0, 0x0061 };

    // E01A0 0061;	
    // (󠆠) VARIATION SELECTOR-177	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A0 0061;	
    // (󠆠) VARIATION SELECTOR-177	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_230)
{
    uint32_t const cps[2] = { 0xE01A1, 0x0061 };

    // E01A1 0061;	
    // (󠆡) VARIATION SELECTOR-178	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A1 0061;	
    // (󠆡) VARIATION SELECTOR-178	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_231)
{
    uint32_t const cps[2] = { 0xE01A2, 0x0061 };

    // E01A2 0061;	
    // (󠆢) VARIATION SELECTOR-179	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A2 0061;	
    // (󠆢) VARIATION SELECTOR-179	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_232)
{
    uint32_t const cps[2] = { 0xE01A3, 0x0061 };

    // E01A3 0061;	
    // (󠆣) VARIATION SELECTOR-180	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A3 0061;	
    // (󠆣) VARIATION SELECTOR-180	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_233)
{
    uint32_t const cps[2] = { 0xE01A4, 0x0061 };

    // E01A4 0061;	
    // (󠆤) VARIATION SELECTOR-181	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A4 0061;	
    // (󠆤) VARIATION SELECTOR-181	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_234)
{
    uint32_t const cps[2] = { 0xE01A5, 0x0061 };

    // E01A5 0061;	
    // (󠆥) VARIATION SELECTOR-182	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A5 0061;	
    // (󠆥) VARIATION SELECTOR-182	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_235)
{
    uint32_t const cps[2] = { 0xE01A6, 0x0061 };

    // E01A6 0061;	
    // (󠆦) VARIATION SELECTOR-183	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A6 0061;	
    // (󠆦) VARIATION SELECTOR-183	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_236)
{
    uint32_t const cps[2] = { 0xE01A7, 0x0061 };

    // E01A7 0061;	
    // (󠆧) VARIATION SELECTOR-184	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A7 0061;	
    // (󠆧) VARIATION SELECTOR-184	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_237)
{
    uint32_t const cps[2] = { 0xE01A8, 0x0061 };

    // E01A8 0061;	
    // (󠆨) VARIATION SELECTOR-185	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A8 0061;	
    // (󠆨) VARIATION SELECTOR-185	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_238)
{
    uint32_t const cps[2] = { 0xE01A9, 0x0061 };

    // E01A9 0061;	
    // (󠆩) VARIATION SELECTOR-186	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01A9 0061;	
    // (󠆩) VARIATION SELECTOR-186	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_239)
{
    uint32_t const cps[2] = { 0xE01AA, 0x0061 };

    // E01AA 0061;	
    // (󠆪) VARIATION SELECTOR-187	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01AA 0061;	
    // (󠆪) VARIATION SELECTOR-187	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_240)
{
    uint32_t const cps[2] = { 0xE01AB, 0x0061 };

    // E01AB 0061;	
    // (󠆫) VARIATION SELECTOR-188	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01AB 0061;	
    // (󠆫) VARIATION SELECTOR-188	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_241)
{
    uint32_t const cps[2] = { 0xE01AC, 0x0061 };

    // E01AC 0061;	
    // (󠆬) VARIATION SELECTOR-189	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01AC 0061;	
    // (󠆬) VARIATION SELECTOR-189	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_242)
{
    uint32_t const cps[2] = { 0xE01AD, 0x0061 };

    // E01AD 0061;	
    // (󠆭) VARIATION SELECTOR-190	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01AD 0061;	
    // (󠆭) VARIATION SELECTOR-190	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_243)
{
    uint32_t const cps[2] = { 0xE01AE, 0x0061 };

    // E01AE 0061;	
    // (󠆮) VARIATION SELECTOR-191	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01AE 0061;	
    // (󠆮) VARIATION SELECTOR-191	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_244)
{
    uint32_t const cps[2] = { 0xE01AF, 0x0061 };

    // E01AF 0061;	
    // (󠆯) VARIATION SELECTOR-192	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01AF 0061;	
    // (󠆯) VARIATION SELECTOR-192	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_245)
{
    uint32_t const cps[2] = { 0xE01B0, 0x0061 };

    // E01B0 0061;	
    // (󠆰) VARIATION SELECTOR-193	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B0 0061;	
    // (󠆰) VARIATION SELECTOR-193	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_246)
{
    uint32_t const cps[2] = { 0xE01B1, 0x0061 };

    // E01B1 0061;	
    // (󠆱) VARIATION SELECTOR-194	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B1 0061;	
    // (󠆱) VARIATION SELECTOR-194	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_247)
{
    uint32_t const cps[2] = { 0xE01B2, 0x0061 };

    // E01B2 0061;	
    // (󠆲) VARIATION SELECTOR-195	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B2 0061;	
    // (󠆲) VARIATION SELECTOR-195	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_248)
{
    uint32_t const cps[2] = { 0xE01B3, 0x0061 };

    // E01B3 0061;	
    // (󠆳) VARIATION SELECTOR-196	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B3 0061;	
    // (󠆳) VARIATION SELECTOR-196	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_249)
{
    uint32_t const cps[2] = { 0xE01B4, 0x0061 };

    // E01B4 0061;	
    // (󠆴) VARIATION SELECTOR-197	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B4 0061;	
    // (󠆴) VARIATION SELECTOR-197	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_250)
{
    uint32_t const cps[2] = { 0xE01B5, 0x0061 };

    // E01B5 0061;	
    // (󠆵) VARIATION SELECTOR-198	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B5 0061;	
    // (󠆵) VARIATION SELECTOR-198	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_251)
{
    uint32_t const cps[2] = { 0xE01B6, 0x0061 };

    // E01B6 0061;	
    // (󠆶) VARIATION SELECTOR-199	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B6 0061;	
    // (󠆶) VARIATION SELECTOR-199	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_252)
{
    uint32_t const cps[2] = { 0xE01B7, 0x0061 };

    // E01B7 0061;	
    // (󠆷) VARIATION SELECTOR-200	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B7 0061;	
    // (󠆷) VARIATION SELECTOR-200	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_253)
{
    uint32_t const cps[2] = { 0xE01B8, 0x0061 };

    // E01B8 0061;	
    // (󠆸) VARIATION SELECTOR-201	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B8 0061;	
    // (󠆸) VARIATION SELECTOR-201	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_254)
{
    uint32_t const cps[2] = { 0xE01B9, 0x0061 };

    // E01B9 0061;	
    // (󠆹) VARIATION SELECTOR-202	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01B9 0061;	
    // (󠆹) VARIATION SELECTOR-202	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_255)
{
    uint32_t const cps[2] = { 0xE01BA, 0x0061 };

    // E01BA 0061;	
    // (󠆺) VARIATION SELECTOR-203	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01BA 0061;	
    // (󠆺) VARIATION SELECTOR-203	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_256)
{
    uint32_t const cps[2] = { 0xE01BB, 0x0061 };

    // E01BB 0061;	
    // (󠆻) VARIATION SELECTOR-204	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01BB 0061;	
    // (󠆻) VARIATION SELECTOR-204	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_257)
{
    uint32_t const cps[2] = { 0xE01BC, 0x0061 };

    // E01BC 0061;	
    // (󠆼) VARIATION SELECTOR-205	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01BC 0061;	
    // (󠆼) VARIATION SELECTOR-205	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_258)
{
    uint32_t const cps[2] = { 0xE01BD, 0x0061 };

    // E01BD 0061;	
    // (󠆽) VARIATION SELECTOR-206	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01BD 0061;	
    // (󠆽) VARIATION SELECTOR-206	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_259)
{
    uint32_t const cps[2] = { 0xE01BE, 0x0061 };

    // E01BE 0061;	
    // (󠆾) VARIATION SELECTOR-207	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01BE 0061;	
    // (󠆾) VARIATION SELECTOR-207	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_260)
{
    uint32_t const cps[2] = { 0xE01BF, 0x0061 };

    // E01BF 0061;	
    // (󠆿) VARIATION SELECTOR-208	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01BF 0061;	
    // (󠆿) VARIATION SELECTOR-208	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_261)
{
    uint32_t const cps[2] = { 0xE01C0, 0x0061 };

    // E01C0 0061;	
    // (󠇀) VARIATION SELECTOR-209	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C0 0061;	
    // (󠇀) VARIATION SELECTOR-209	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_262)
{
    uint32_t const cps[2] = { 0xE01C1, 0x0061 };

    // E01C1 0061;	
    // (󠇁) VARIATION SELECTOR-210	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C1 0061;	
    // (󠇁) VARIATION SELECTOR-210	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_263)
{
    uint32_t const cps[2] = { 0xE01C2, 0x0061 };

    // E01C2 0061;	
    // (󠇂) VARIATION SELECTOR-211	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C2 0061;	
    // (󠇂) VARIATION SELECTOR-211	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_264)
{
    uint32_t const cps[2] = { 0xE01C3, 0x0061 };

    // E01C3 0061;	
    // (󠇃) VARIATION SELECTOR-212	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C3 0061;	
    // (󠇃) VARIATION SELECTOR-212	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_265)
{
    uint32_t const cps[2] = { 0xE01C4, 0x0061 };

    // E01C4 0061;	
    // (󠇄) VARIATION SELECTOR-213	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C4 0061;	
    // (󠇄) VARIATION SELECTOR-213	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_266)
{
    uint32_t const cps[2] = { 0xE01C5, 0x0061 };

    // E01C5 0061;	
    // (󠇅) VARIATION SELECTOR-214	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C5 0061;	
    // (󠇅) VARIATION SELECTOR-214	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_267)
{
    uint32_t const cps[2] = { 0xE01C6, 0x0061 };

    // E01C6 0061;	
    // (󠇆) VARIATION SELECTOR-215	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C6 0061;	
    // (󠇆) VARIATION SELECTOR-215	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_268)
{
    uint32_t const cps[2] = { 0xE01C7, 0x0061 };

    // E01C7 0061;	
    // (󠇇) VARIATION SELECTOR-216	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C7 0061;	
    // (󠇇) VARIATION SELECTOR-216	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_269)
{
    uint32_t const cps[2] = { 0xE01C8, 0x0061 };

    // E01C8 0061;	
    // (󠇈) VARIATION SELECTOR-217	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C8 0061;	
    // (󠇈) VARIATION SELECTOR-217	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_270)
{
    uint32_t const cps[2] = { 0xE01C9, 0x0061 };

    // E01C9 0061;	
    // (󠇉) VARIATION SELECTOR-218	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01C9 0061;	
    // (󠇉) VARIATION SELECTOR-218	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_271)
{
    uint32_t const cps[2] = { 0xE01CA, 0x0061 };

    // E01CA 0061;	
    // (󠇊) VARIATION SELECTOR-219	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01CA 0061;	
    // (󠇊) VARIATION SELECTOR-219	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_272)
{
    uint32_t const cps[2] = { 0xE01CB, 0x0061 };

    // E01CB 0061;	
    // (󠇋) VARIATION SELECTOR-220	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01CB 0061;	
    // (󠇋) VARIATION SELECTOR-220	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_273)
{
    uint32_t const cps[2] = { 0xE01CC, 0x0061 };

    // E01CC 0061;	
    // (󠇌) VARIATION SELECTOR-221	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01CC 0061;	
    // (󠇌) VARIATION SELECTOR-221	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_274)
{
    uint32_t const cps[2] = { 0xE01CD, 0x0061 };

    // E01CD 0061;	
    // (󠇍) VARIATION SELECTOR-222	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01CD 0061;	
    // (󠇍) VARIATION SELECTOR-222	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_275)
{
    uint32_t const cps[2] = { 0xE01CE, 0x0061 };

    // E01CE 0061;	
    // (󠇎) VARIATION SELECTOR-223	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01CE 0061;	
    // (󠇎) VARIATION SELECTOR-223	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_276)
{
    uint32_t const cps[2] = { 0xE01CF, 0x0061 };

    // E01CF 0061;	
    // (󠇏) VARIATION SELECTOR-224	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01CF 0061;	
    // (󠇏) VARIATION SELECTOR-224	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_277)
{
    uint32_t const cps[2] = { 0xE01D0, 0x0061 };

    // E01D0 0061;	
    // (󠇐) VARIATION SELECTOR-225	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D0 0061;	
    // (󠇐) VARIATION SELECTOR-225	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_278)
{
    uint32_t const cps[2] = { 0xE01D1, 0x0061 };

    // E01D1 0061;	
    // (󠇑) VARIATION SELECTOR-226	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D1 0061;	
    // (󠇑) VARIATION SELECTOR-226	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_279)
{
    uint32_t const cps[2] = { 0xE01D2, 0x0061 };

    // E01D2 0061;	
    // (󠇒) VARIATION SELECTOR-227	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D2 0061;	
    // (󠇒) VARIATION SELECTOR-227	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_280)
{
    uint32_t const cps[2] = { 0xE01D3, 0x0061 };

    // E01D3 0061;	
    // (󠇓) VARIATION SELECTOR-228	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D3 0061;	
    // (󠇓) VARIATION SELECTOR-228	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_281)
{
    uint32_t const cps[2] = { 0xE01D4, 0x0061 };

    // E01D4 0061;	
    // (󠇔) VARIATION SELECTOR-229	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D4 0061;	
    // (󠇔) VARIATION SELECTOR-229	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_282)
{
    uint32_t const cps[2] = { 0xE01D5, 0x0061 };

    // E01D5 0061;	
    // (󠇕) VARIATION SELECTOR-230	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D5 0061;	
    // (󠇕) VARIATION SELECTOR-230	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_283)
{
    uint32_t const cps[2] = { 0xE01D6, 0x0061 };

    // E01D6 0061;	
    // (󠇖) VARIATION SELECTOR-231	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D6 0061;	
    // (󠇖) VARIATION SELECTOR-231	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_284)
{
    uint32_t const cps[2] = { 0xE01D7, 0x0061 };

    // E01D7 0061;	
    // (󠇗) VARIATION SELECTOR-232	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D7 0061;	
    // (󠇗) VARIATION SELECTOR-232	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_285)
{
    uint32_t const cps[2] = { 0xE01D8, 0x0061 };

    // E01D8 0061;	
    // (󠇘) VARIATION SELECTOR-233	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D8 0061;	
    // (󠇘) VARIATION SELECTOR-233	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_286)
{
    uint32_t const cps[2] = { 0xE01D9, 0x0061 };

    // E01D9 0061;	
    // (󠇙) VARIATION SELECTOR-234	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01D9 0061;	
    // (󠇙) VARIATION SELECTOR-234	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_287)
{
    uint32_t const cps[2] = { 0xE01DA, 0x0061 };

    // E01DA 0061;	
    // (󠇚) VARIATION SELECTOR-235	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01DA 0061;	
    // (󠇚) VARIATION SELECTOR-235	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_288)
{
    uint32_t const cps[2] = { 0xE01DB, 0x0061 };

    // E01DB 0061;	
    // (󠇛) VARIATION SELECTOR-236	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01DB 0061;	
    // (󠇛) VARIATION SELECTOR-236	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_289)
{
    uint32_t const cps[2] = { 0xE01DC, 0x0061 };

    // E01DC 0061;	
    // (󠇜) VARIATION SELECTOR-237	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01DC 0061;	
    // (󠇜) VARIATION SELECTOR-237	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_290)
{
    uint32_t const cps[2] = { 0xE01DD, 0x0061 };

    // E01DD 0061;	
    // (󠇝) VARIATION SELECTOR-238	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01DD 0061;	
    // (󠇝) VARIATION SELECTOR-238	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_291)
{
    uint32_t const cps[2] = { 0xE01DE, 0x0061 };

    // E01DE 0061;	
    // (󠇞) VARIATION SELECTOR-239	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01DE 0061;	
    // (󠇞) VARIATION SELECTOR-239	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_292)
{
    uint32_t const cps[2] = { 0xE01DF, 0x0061 };

    // E01DF 0061;	
    // (󠇟) VARIATION SELECTOR-240	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01DF 0061;	
    // (󠇟) VARIATION SELECTOR-240	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_293)
{
    uint32_t const cps[2] = { 0xE01E0, 0x0061 };

    // E01E0 0061;	
    // (󠇠) VARIATION SELECTOR-241	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E0 0061;	
    // (󠇠) VARIATION SELECTOR-241	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_294)
{
    uint32_t const cps[2] = { 0xE01E1, 0x0061 };

    // E01E1 0061;	
    // (󠇡) VARIATION SELECTOR-242	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E1 0061;	
    // (󠇡) VARIATION SELECTOR-242	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_295)
{
    uint32_t const cps[2] = { 0xE01E2, 0x0061 };

    // E01E2 0061;	
    // (󠇢) VARIATION SELECTOR-243	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E2 0061;	
    // (󠇢) VARIATION SELECTOR-243	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_296)
{
    uint32_t const cps[2] = { 0xE01E3, 0x0061 };

    // E01E3 0061;	
    // (󠇣) VARIATION SELECTOR-244	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E3 0061;	
    // (󠇣) VARIATION SELECTOR-244	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_297)
{
    uint32_t const cps[2] = { 0xE01E4, 0x0061 };

    // E01E4 0061;	
    // (󠇤) VARIATION SELECTOR-245	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E4 0061;	
    // (󠇤) VARIATION SELECTOR-245	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_298)
{
    uint32_t const cps[2] = { 0xE01E5, 0x0061 };

    // E01E5 0061;	
    // (󠇥) VARIATION SELECTOR-246	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E5 0061;	
    // (󠇥) VARIATION SELECTOR-246	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_299)
{
    uint32_t const cps[2] = { 0xE01E6, 0x0061 };

    // E01E6 0061;	
    // (󠇦) VARIATION SELECTOR-247	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E6 0061;	
    // (󠇦) VARIATION SELECTOR-247	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_300)
{
    uint32_t const cps[2] = { 0xE01E7, 0x0061 };

    // E01E7 0061;	
    // (󠇧) VARIATION SELECTOR-248	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E7 0061;	
    // (󠇧) VARIATION SELECTOR-248	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_301)
{
    uint32_t const cps[2] = { 0xE01E8, 0x0061 };

    // E01E8 0061;	
    // (󠇨) VARIATION SELECTOR-249	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E8 0061;	
    // (󠇨) VARIATION SELECTOR-249	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_302)
{
    uint32_t const cps[2] = { 0xE01E9, 0x0061 };

    // E01E9 0061;	
    // (󠇩) VARIATION SELECTOR-250	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01E9 0061;	
    // (󠇩) VARIATION SELECTOR-250	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_303)
{
    uint32_t const cps[2] = { 0xE01EA, 0x0061 };

    // E01EA 0061;	
    // (󠇪) VARIATION SELECTOR-251	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01EA 0061;	
    // (󠇪) VARIATION SELECTOR-251	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_304)
{
    uint32_t const cps[2] = { 0xE01EB, 0x0061 };

    // E01EB 0061;	
    // (󠇫) VARIATION SELECTOR-252	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01EB 0061;	
    // (󠇫) VARIATION SELECTOR-252	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_305)
{
    uint32_t const cps[2] = { 0xE01EC, 0x0061 };

    // E01EC 0061;	
    // (󠇬) VARIATION SELECTOR-253	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01EC 0061;	
    // (󠇬) VARIATION SELECTOR-253	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_306)
{
    uint32_t const cps[2] = { 0xE01ED, 0x0061 };

    // E01ED 0061;	
    // (󠇭) VARIATION SELECTOR-254	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01ED 0061;	
    // (󠇭) VARIATION SELECTOR-254	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_307)
{
    uint32_t const cps[2] = { 0xE01EE, 0x0061 };

    // E01EE 0061;	
    // (󠇮) VARIATION SELECTOR-255	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01EE 0061;	
    // (󠇮) VARIATION SELECTOR-255	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_308)
{
    uint32_t const cps[2] = { 0xE01EF, 0x0061 };

    // E01EF 0061;	
    // (󠇯) VARIATION SELECTOR-256	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E01EF 0061;	
    // (󠇯) VARIATION SELECTOR-256	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_309)
{
    uint32_t const cps[2] = { 0x0000, 0x0041 };

    // 0000 0041;	
    // ('\u0000') <NULL>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0000 0041;	
    // ('\u0000') <NULL>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_310)
{
    uint32_t const cps[2] = { 0x0001, 0x0041 };

    // 0001 0041;	
    // ('\u0001') <START OF HEADING>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0001 0041;	
    // ('\u0001') <START OF HEADING>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_311)
{
    uint32_t const cps[2] = { 0x0002, 0x0041 };

    // 0002 0041;	
    // ('\u0002') <START OF TEXT>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0002 0041;	
    // ('\u0002') <START OF TEXT>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_312)
{
    uint32_t const cps[2] = { 0x0003, 0x0041 };

    // 0003 0041;	
    // ('\u0003') <END OF TEXT>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0003 0041;	
    // ('\u0003') <END OF TEXT>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_313)
{
    uint32_t const cps[2] = { 0x0004, 0x0041 };

    // 0004 0041;	
    // ('\u0004') <END OF TRANSMISSION>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0004 0041;	
    // ('\u0004') <END OF TRANSMISSION>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_314)
{
    uint32_t const cps[2] = { 0x0005, 0x0041 };

    // 0005 0041;	
    // ('\u0005') <ENQUIRY>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0005 0041;	
    // ('\u0005') <ENQUIRY>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_315)
{
    uint32_t const cps[2] = { 0x0006, 0x0041 };

    // 0006 0041;	
    // ('\u0006') <ACKNOWLEDGE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0006 0041;	
    // ('\u0006') <ACKNOWLEDGE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_316)
{
    uint32_t const cps[2] = { 0x0007, 0x0041 };

    // 0007 0041;	
    // ('\u0007') <BELL>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0007 0041;	
    // ('\u0007') <BELL>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_317)
{
    uint32_t const cps[2] = { 0x0008, 0x0041 };

    // 0008 0041;	
    // ('\u0008') <BACKSPACE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0008 0041;	
    // ('\u0008') <BACKSPACE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_318)
{
    uint32_t const cps[2] = { 0x000E, 0x0041 };

    // 000E 0041;	
    // ('\u000E') <SHIFT OUT>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 000E 0041;	
    // ('\u000E') <SHIFT OUT>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_319)
{
    uint32_t const cps[2] = { 0x000F, 0x0041 };

    // 000F 0041;	
    // ('\u000F') <SHIFT IN>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 000F 0041;	
    // ('\u000F') <SHIFT IN>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_320)
{
    uint32_t const cps[2] = { 0x0010, 0x0041 };

    // 0010 0041;	
    // ('\u0010') <DATA LINK ESCAPE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0010 0041;	
    // ('\u0010') <DATA LINK ESCAPE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_321)
{
    uint32_t const cps[2] = { 0x0011, 0x0041 };

    // 0011 0041;	
    // ('\u0011') <DEVICE CONTROL ONE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0011 0041;	
    // ('\u0011') <DEVICE CONTROL ONE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_322)
{
    uint32_t const cps[2] = { 0x0012, 0x0041 };

    // 0012 0041;	
    // ('\u0012') <DEVICE CONTROL TWO>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0012 0041;	
    // ('\u0012') <DEVICE CONTROL TWO>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_323)
{
    uint32_t const cps[2] = { 0x0013, 0x0041 };

    // 0013 0041;	
    // ('\u0013') <DEVICE CONTROL THREE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0013 0041;	
    // ('\u0013') <DEVICE CONTROL THREE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_324)
{
    uint32_t const cps[2] = { 0x0014, 0x0041 };

    // 0014 0041;	
    // ('\u0014') <DEVICE CONTROL FOUR>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0014 0041;	
    // ('\u0014') <DEVICE CONTROL FOUR>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_325)
{
    uint32_t const cps[2] = { 0x0015, 0x0041 };

    // 0015 0041;	
    // ('\u0015') <NEGATIVE ACKNOWLEDGE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0015 0041;	
    // ('\u0015') <NEGATIVE ACKNOWLEDGE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_326)
{
    uint32_t const cps[2] = { 0x0016, 0x0041 };

    // 0016 0041;	
    // ('\u0016') <SYNCHRONOUS IDLE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0016 0041;	
    // ('\u0016') <SYNCHRONOUS IDLE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_327)
{
    uint32_t const cps[2] = { 0x0017, 0x0041 };

    // 0017 0041;	
    // ('\u0017') <END OF TRANSMISSION BLOCK>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0017 0041;	
    // ('\u0017') <END OF TRANSMISSION BLOCK>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_328)
{
    uint32_t const cps[2] = { 0x0018, 0x0041 };

    // 0018 0041;	
    // ('\u0018') <CANCEL>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0018 0041;	
    // ('\u0018') <CANCEL>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_329)
{
    uint32_t const cps[2] = { 0x0019, 0x0041 };

    // 0019 0041;	
    // ('\u0019') <END OF MEDIUM>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0019 0041;	
    // ('\u0019') <END OF MEDIUM>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_330)
{
    uint32_t const cps[2] = { 0x001A, 0x0041 };

    // 001A 0041;	
    // ('\u001A') <SUBSTITUTE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 001A 0041;	
    // ('\u001A') <SUBSTITUTE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_331)
{
    uint32_t const cps[2] = { 0x001B, 0x0041 };

    // 001B 0041;	
    // ('\u001B') <ESCAPE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 001B 0041;	
    // ('\u001B') <ESCAPE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_332)
{
    uint32_t const cps[2] = { 0x001C, 0x0041 };

    // 001C 0041;	
    // ('\u001C') <INFORMATION SEPARATOR FOUR>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 001C 0041;	
    // ('\u001C') <INFORMATION SEPARATOR FOUR>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_333)
{
    uint32_t const cps[2] = { 0x001D, 0x0041 };

    // 001D 0041;	
    // ('\u001D') <INFORMATION SEPARATOR THREE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 001D 0041;	
    // ('\u001D') <INFORMATION SEPARATOR THREE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_334)
{
    uint32_t const cps[2] = { 0x001E, 0x0041 };

    // 001E 0041;	
    // ('\u001E') <INFORMATION SEPARATOR TWO>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 001E 0041;	
    // ('\u001E') <INFORMATION SEPARATOR TWO>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_335)
{
    uint32_t const cps[2] = { 0x001F, 0x0041 };

    // 001F 0041;	
    // ('\u001F') <INFORMATION SEPARATOR ONE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 001F 0041;	
    // ('\u001F') <INFORMATION SEPARATOR ONE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_336)
{
    uint32_t const cps[2] = { 0x007F, 0x0041 };

    // 007F 0041;	
    // ('\u007F') <DELETE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 007F 0041;	
    // ('\u007F') <DELETE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_337)
{
    uint32_t const cps[2] = { 0x0080, 0x0041 };

    // 0080 0041;	
    // ('\u0080') <control>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0080 0041;	
    // ('\u0080') <control>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_338)
{
    uint32_t const cps[2] = { 0x0081, 0x0041 };

    // 0081 0041;	
    // ('\u0081') <control>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0081 0041;	
    // ('\u0081') <control>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_339)
{
    uint32_t const cps[2] = { 0x0082, 0x0041 };

    // 0082 0041;	
    // ('\u0082') <BREAK PERMITTED HERE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0082 0041;	
    // ('\u0082') <BREAK PERMITTED HERE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_340)
{
    uint32_t const cps[2] = { 0x0083, 0x0041 };

    // 0083 0041;	
    // ('\u0083') <NO BREAK HERE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0083 0041;	
    // ('\u0083') <NO BREAK HERE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_341)
{
    uint32_t const cps[2] = { 0x0084, 0x0041 };

    // 0084 0041;	
    // ('\u0084') <control>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0084 0041;	
    // ('\u0084') <control>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_342)
{
    uint32_t const cps[2] = { 0x0086, 0x0041 };

    // 0086 0041;	
    // ('\u0086') <START OF SELECTED AREA>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0086 0041;	
    // ('\u0086') <START OF SELECTED AREA>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_343)
{
    uint32_t const cps[2] = { 0x0087, 0x0041 };

    // 0087 0041;	
    // ('\u0087') <END OF SELECTED AREA>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0087 0041;	
    // ('\u0087') <END OF SELECTED AREA>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_344)
{
    uint32_t const cps[2] = { 0x0088, 0x0041 };

    // 0088 0041;	
    // ('\u0088') <CHARACTER TABULATION SET>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0088 0041;	
    // ('\u0088') <CHARACTER TABULATION SET>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_345)
{
    uint32_t const cps[2] = { 0x0089, 0x0041 };

    // 0089 0041;	
    // ('\u0089') <CHARACTER TABULATION WITH JUSTIFICATION>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0089 0041;	
    // ('\u0089') <CHARACTER TABULATION WITH JUSTIFICATION>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_346)
{
    uint32_t const cps[2] = { 0x008A, 0x0041 };

    // 008A 0041;	
    // ('\u008A') <LINE TABULATION SET>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008A 0041;	
    // ('\u008A') <LINE TABULATION SET>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_347)
{
    uint32_t const cps[2] = { 0x008B, 0x0041 };

    // 008B 0041;	
    // ('\u008B') <PARTIAL LINE FORWARD>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008B 0041;	
    // ('\u008B') <PARTIAL LINE FORWARD>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_348)
{
    uint32_t const cps[2] = { 0x008C, 0x0041 };

    // 008C 0041;	
    // ('\u008C') <PARTIAL LINE BACKWARD>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008C 0041;	
    // ('\u008C') <PARTIAL LINE BACKWARD>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_349)
{
    uint32_t const cps[2] = { 0x008D, 0x0041 };

    // 008D 0041;	
    // ('\u008D') <REVERSE LINE FEED>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008D 0041;	
    // ('\u008D') <REVERSE LINE FEED>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_350)
{
    uint32_t const cps[2] = { 0x008E, 0x0041 };

    // 008E 0041;	
    // ('\u008E') <SINGLE SHIFT TWO>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008E 0041;	
    // ('\u008E') <SINGLE SHIFT TWO>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_351)
{
    uint32_t const cps[2] = { 0x008F, 0x0041 };

    // 008F 0041;	
    // ('\u008F') <SINGLE SHIFT THREE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008F 0041;	
    // ('\u008F') <SINGLE SHIFT THREE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_352)
{
    uint32_t const cps[2] = { 0x0090, 0x0041 };

    // 0090 0041;	
    // ('\u0090') <DEVICE CONTROL STRING>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0090 0041;	
    // ('\u0090') <DEVICE CONTROL STRING>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_353)
{
    uint32_t const cps[2] = { 0x0091, 0x0041 };

    // 0091 0041;	
    // ('\u0091') <PRIVATE USE ONE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0091 0041;	
    // ('\u0091') <PRIVATE USE ONE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_354)
{
    uint32_t const cps[2] = { 0x0092, 0x0041 };

    // 0092 0041;	
    // ('\u0092') <PRIVATE USE TWO>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0092 0041;	
    // ('\u0092') <PRIVATE USE TWO>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_355)
{
    uint32_t const cps[2] = { 0x0093, 0x0041 };

    // 0093 0041;	
    // ('\u0093') <SET TRANSMIT STATE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0093 0041;	
    // ('\u0093') <SET TRANSMIT STATE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_356)
{
    uint32_t const cps[2] = { 0x0094, 0x0041 };

    // 0094 0041;	
    // ('\u0094') <CANCEL CHARACTER>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0094 0041;	
    // ('\u0094') <CANCEL CHARACTER>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_357)
{
    uint32_t const cps[2] = { 0x0095, 0x0041 };

    // 0095 0041;	
    // ('\u0095') <MESSAGE WAITING>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0095 0041;	
    // ('\u0095') <MESSAGE WAITING>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_358)
{
    uint32_t const cps[2] = { 0x0096, 0x0041 };

    // 0096 0041;	
    // ('\u0096') <START OF GUARDED AREA>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0096 0041;	
    // ('\u0096') <START OF GUARDED AREA>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_359)
{
    uint32_t const cps[2] = { 0x0097, 0x0041 };

    // 0097 0041;	
    // ('\u0097') <END OF GUARDED AREA>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0097 0041;	
    // ('\u0097') <END OF GUARDED AREA>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_360)
{
    uint32_t const cps[2] = { 0x0098, 0x0041 };

    // 0098 0041;	
    // ('\u0098') <START OF STRING>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0098 0041;	
    // ('\u0098') <START OF STRING>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_361)
{
    uint32_t const cps[2] = { 0x0099, 0x0041 };

    // 0099 0041;	
    // ('\u0099') <control>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0099 0041;	
    // ('\u0099') <control>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_362)
{
    uint32_t const cps[2] = { 0x009A, 0x0041 };

    // 009A 0041;	
    // ('\u009A') <SINGLE CHARACTER INTRODUCER>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009A 0041;	
    // ('\u009A') <SINGLE CHARACTER INTRODUCER>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_363)
{
    uint32_t const cps[2] = { 0x009B, 0x0041 };

    // 009B 0041;	
    // ('\u009B') <CONTROL SEQUENCE INTRODUCER>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009B 0041;	
    // ('\u009B') <CONTROL SEQUENCE INTRODUCER>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_364)
{
    uint32_t const cps[2] = { 0x009C, 0x0041 };

    // 009C 0041;	
    // ('\u009C') <STRING TERMINATOR>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009C 0041;	
    // ('\u009C') <STRING TERMINATOR>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_365)
{
    uint32_t const cps[2] = { 0x009D, 0x0041 };

    // 009D 0041;	
    // ('\u009D') <OPERATING SYSTEM COMMAND>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009D 0041;	
    // ('\u009D') <OPERATING SYSTEM COMMAND>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_366)
{
    uint32_t const cps[2] = { 0x009E, 0x0041 };

    // 009E 0041;	
    // ('\u009E') <PRIVACY MESSAGE>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009E 0041;	
    // ('\u009E') <PRIVACY MESSAGE>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_367)
{
    uint32_t const cps[2] = { 0x009F, 0x0041 };

    // 009F 0041;	
    // ('\u009F') <APPLICATION PROGRAM COMMAND>	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009F 0041;	
    // ('\u009F') <APPLICATION PROGRAM COMMAND>	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_368)
{
    uint32_t const cps[2] = { 0x00AD, 0x0041 };

    // 00AD 0041;	
    // ('\u00AD') SOFT HYPHEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00AD 0041;	
    // ('\u00AD') SOFT HYPHEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_369)
{
    uint32_t const cps[2] = { 0x034F, 0x0041 };

    // 034F 0041;	
    // (͏) COMBINING GRAPHEME JOINER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 034F 0041;	
    // (͏) COMBINING GRAPHEME JOINER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_370)
{
    uint32_t const cps[2] = { 0x0488, 0x0041 };

    // 0488 0041;	
    // (҈) COMBINING CYRILLIC HUNDRED THOUSANDS SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0488 0041;	
    // (҈) COMBINING CYRILLIC HUNDRED THOUSANDS SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_371)
{
    uint32_t const cps[2] = { 0x0489, 0x0041 };

    // 0489 0041;	
    // (҉) COMBINING CYRILLIC MILLIONS SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0489 0041;	
    // (҉) COMBINING CYRILLIC MILLIONS SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_372)
{
    uint32_t const cps[2] = { 0x0591, 0x0041 };

    // 0591 0041;	
    // (֑) HEBREW ACCENT ETNAHTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0591 0041;	
    // (֑) HEBREW ACCENT ETNAHTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_373)
{
    uint32_t const cps[2] = { 0x0592, 0x0041 };

    // 0592 0041;	
    // (֒) HEBREW ACCENT SEGOL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0592 0041;	
    // (֒) HEBREW ACCENT SEGOL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_374)
{
    uint32_t const cps[2] = { 0x0593, 0x0041 };

    // 0593 0041;	
    // (֓) HEBREW ACCENT SHALSHELET	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0593 0041;	
    // (֓) HEBREW ACCENT SHALSHELET	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_375)
{
    uint32_t const cps[2] = { 0x0594, 0x0041 };

    // 0594 0041;	
    // (֔) HEBREW ACCENT ZAQEF QATAN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0594 0041;	
    // (֔) HEBREW ACCENT ZAQEF QATAN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_376)
{
    uint32_t const cps[2] = { 0x0595, 0x0041 };

    // 0595 0041;	
    // (֕) HEBREW ACCENT ZAQEF GADOL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0595 0041;	
    // (֕) HEBREW ACCENT ZAQEF GADOL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_377)
{
    uint32_t const cps[2] = { 0x0596, 0x0041 };

    // 0596 0041;	
    // (֖) HEBREW ACCENT TIPEHA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0596 0041;	
    // (֖) HEBREW ACCENT TIPEHA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_378)
{
    uint32_t const cps[2] = { 0x0597, 0x0041 };

    // 0597 0041;	
    // (֗) HEBREW ACCENT REVIA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0597 0041;	
    // (֗) HEBREW ACCENT REVIA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_379)
{
    uint32_t const cps[2] = { 0x0598, 0x0041 };

    // 0598 0041;	
    // (֘) HEBREW ACCENT ZARQA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0598 0041;	
    // (֘) HEBREW ACCENT ZARQA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_380)
{
    uint32_t const cps[2] = { 0x0599, 0x0041 };

    // 0599 0041;	
    // (֙) HEBREW ACCENT PASHTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0599 0041;	
    // (֙) HEBREW ACCENT PASHTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_381)
{
    uint32_t const cps[2] = { 0x059A, 0x0041 };

    // 059A 0041;	
    // (֚) HEBREW ACCENT YETIV	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059A 0041;	
    // (֚) HEBREW ACCENT YETIV	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_382)
{
    uint32_t const cps[2] = { 0x059B, 0x0041 };

    // 059B 0041;	
    // (֛) HEBREW ACCENT TEVIR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059B 0041;	
    // (֛) HEBREW ACCENT TEVIR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_383)
{
    uint32_t const cps[2] = { 0x059C, 0x0041 };

    // 059C 0041;	
    // (֜) HEBREW ACCENT GERESH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059C 0041;	
    // (֜) HEBREW ACCENT GERESH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_384)
{
    uint32_t const cps[2] = { 0x059D, 0x0041 };

    // 059D 0041;	
    // (֝) HEBREW ACCENT GERESH MUQDAM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059D 0041;	
    // (֝) HEBREW ACCENT GERESH MUQDAM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_385)
{
    uint32_t const cps[2] = { 0x059E, 0x0041 };

    // 059E 0041;	
    // (֞) HEBREW ACCENT GERSHAYIM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059E 0041;	
    // (֞) HEBREW ACCENT GERSHAYIM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_386)
{
    uint32_t const cps[2] = { 0x059F, 0x0041 };

    // 059F 0041;	
    // (֟) HEBREW ACCENT QARNEY PARA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059F 0041;	
    // (֟) HEBREW ACCENT QARNEY PARA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_387)
{
    uint32_t const cps[2] = { 0x05A0, 0x0041 };

    // 05A0 0041;	
    // (֠) HEBREW ACCENT TELISHA GEDOLA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A0 0041;	
    // (֠) HEBREW ACCENT TELISHA GEDOLA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_388)
{
    uint32_t const cps[2] = { 0x05A1, 0x0041 };

    // 05A1 0041;	
    // (֡) HEBREW ACCENT PAZER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A1 0041;	
    // (֡) HEBREW ACCENT PAZER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_389)
{
    uint32_t const cps[2] = { 0x05A2, 0x0041 };

    // 05A2 0041;	
    // (֢) HEBREW ACCENT ATNAH HAFUKH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A2 0041;	
    // (֢) HEBREW ACCENT ATNAH HAFUKH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_390)
{
    uint32_t const cps[2] = { 0x05A3, 0x0041 };

    // 05A3 0041;	
    // (֣) HEBREW ACCENT MUNAH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A3 0041;	
    // (֣) HEBREW ACCENT MUNAH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_391)
{
    uint32_t const cps[2] = { 0x05A4, 0x0041 };

    // 05A4 0041;	
    // (֤) HEBREW ACCENT MAHAPAKH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A4 0041;	
    // (֤) HEBREW ACCENT MAHAPAKH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_392)
{
    uint32_t const cps[2] = { 0x05A5, 0x0041 };

    // 05A5 0041;	
    // (֥) HEBREW ACCENT MERKHA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A5 0041;	
    // (֥) HEBREW ACCENT MERKHA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_393)
{
    uint32_t const cps[2] = { 0x05A6, 0x0041 };

    // 05A6 0041;	
    // (֦) HEBREW ACCENT MERKHA KEFULA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A6 0041;	
    // (֦) HEBREW ACCENT MERKHA KEFULA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_394)
{
    uint32_t const cps[2] = { 0x05A7, 0x0041 };

    // 05A7 0041;	
    // (֧) HEBREW ACCENT DARGA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A7 0041;	
    // (֧) HEBREW ACCENT DARGA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_395)
{
    uint32_t const cps[2] = { 0x05A8, 0x0041 };

    // 05A8 0041;	
    // (֨) HEBREW ACCENT QADMA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A8 0041;	
    // (֨) HEBREW ACCENT QADMA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_396)
{
    uint32_t const cps[2] = { 0x05A9, 0x0041 };

    // 05A9 0041;	
    // (֩) HEBREW ACCENT TELISHA QETANA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A9 0041;	
    // (֩) HEBREW ACCENT TELISHA QETANA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_397)
{
    uint32_t const cps[2] = { 0x05AA, 0x0041 };

    // 05AA 0041;	
    // (֪) HEBREW ACCENT YERAH BEN YOMO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AA 0041;	
    // (֪) HEBREW ACCENT YERAH BEN YOMO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_398)
{
    uint32_t const cps[2] = { 0x05AB, 0x0041 };

    // 05AB 0041;	
    // (֫) HEBREW ACCENT OLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AB 0041;	
    // (֫) HEBREW ACCENT OLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_399)
{
    uint32_t const cps[2] = { 0x05AC, 0x0041 };

    // 05AC 0041;	
    // (֬) HEBREW ACCENT ILUY	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AC 0041;	
    // (֬) HEBREW ACCENT ILUY	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_400)
{
    uint32_t const cps[2] = { 0x05AD, 0x0041 };

    // 05AD 0041;	
    // (֭) HEBREW ACCENT DEHI	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AD 0041;	
    // (֭) HEBREW ACCENT DEHI	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_401)
{
    uint32_t const cps[2] = { 0x05AE, 0x0041 };

    // 05AE 0041;	
    // (֮) HEBREW ACCENT ZINOR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AE 0041;	
    // (֮) HEBREW ACCENT ZINOR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_402)
{
    uint32_t const cps[2] = { 0x05AF, 0x0041 };

    // 05AF 0041;	
    // (֯) HEBREW MARK MASORA CIRCLE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AF 0041;	
    // (֯) HEBREW MARK MASORA CIRCLE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_403)
{
    uint32_t const cps[2] = { 0x05BD, 0x0041 };

    // 05BD 0041;	
    // (ֽ) HEBREW POINT METEG	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05BD 0041;	
    // (ֽ) HEBREW POINT METEG	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_404)
{
    uint32_t const cps[2] = { 0x05C4, 0x0041 };

    // 05C4 0041;	
    // (ׄ) HEBREW MARK UPPER DOT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05C4 0041;	
    // (ׄ) HEBREW MARK UPPER DOT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_405)
{
    uint32_t const cps[2] = { 0x05C5, 0x0041 };

    // 05C5 0041;	
    // (ׅ) HEBREW MARK LOWER DOT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05C5 0041;	
    // (ׅ) HEBREW MARK LOWER DOT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_406)
{
    uint32_t const cps[2] = { 0x0600, 0x0041 };

    // 0600 0041;	
    // ('\u0600') ARABIC NUMBER SIGN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0600 0041;	
    // ('\u0600') ARABIC NUMBER SIGN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_407)
{
    uint32_t const cps[2] = { 0x0601, 0x0041 };

    // 0601 0041;	
    // ('\u0601') ARABIC SIGN SANAH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0601 0041;	
    // ('\u0601') ARABIC SIGN SANAH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_408)
{
    uint32_t const cps[2] = { 0x0602, 0x0041 };

    // 0602 0041;	
    // ('\u0602') ARABIC FOOTNOTE MARKER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0602 0041;	
    // ('\u0602') ARABIC FOOTNOTE MARKER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_409)
{
    uint32_t const cps[2] = { 0x0603, 0x0041 };

    // 0603 0041;	
    // ('\u0603') ARABIC SIGN SAFHA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0603 0041;	
    // ('\u0603') ARABIC SIGN SAFHA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_410)
{
    uint32_t const cps[2] = { 0x0604, 0x0041 };

    // 0604 0041;	
    // ('\u0604') ARABIC SIGN SAMVAT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0604 0041;	
    // ('\u0604') ARABIC SIGN SAMVAT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_411)
{
    uint32_t const cps[2] = { 0x0605, 0x0041 };

    // 0605 0041;	
    // ('\u0605') ARABIC NUMBER MARK ABOVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0605 0041;	
    // ('\u0605') ARABIC NUMBER MARK ABOVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_412)
{
    uint32_t const cps[2] = { 0x0610, 0x0041 };

    // 0610 0041;	
    // (ؐ) ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0610 0041;	
    // (ؐ) ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_413)
{
    uint32_t const cps[2] = { 0x0611, 0x0041 };

    // 0611 0041;	
    // (ؑ) ARABIC SIGN ALAYHE ASSALLAM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0611 0041;	
    // (ؑ) ARABIC SIGN ALAYHE ASSALLAM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_414)
{
    uint32_t const cps[2] = { 0x0612, 0x0041 };

    // 0612 0041;	
    // (ؒ) ARABIC SIGN RAHMATULLAH ALAYHE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0612 0041;	
    // (ؒ) ARABIC SIGN RAHMATULLAH ALAYHE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_415)
{
    uint32_t const cps[2] = { 0x0613, 0x0041 };

    // 0613 0041;	
    // (ؓ) ARABIC SIGN RADI ALLAHOU ANHU	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0613 0041;	
    // (ؓ) ARABIC SIGN RADI ALLAHOU ANHU	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_416)
{
    uint32_t const cps[2] = { 0x0614, 0x0041 };

    // 0614 0041;	
    // (ؔ) ARABIC SIGN TAKHALLUS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0614 0041;	
    // (ؔ) ARABIC SIGN TAKHALLUS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_417)
{
    uint32_t const cps[2] = { 0x0615, 0x0041 };

    // 0615 0041;	
    // (ؕ) ARABIC SMALL HIGH TAH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0615 0041;	
    // (ؕ) ARABIC SMALL HIGH TAH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_418)
{
    uint32_t const cps[2] = { 0x0616, 0x0041 };

    // 0616 0041;	
    // (ؖ) ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0616 0041;	
    // (ؖ) ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_419)
{
    uint32_t const cps[2] = { 0x0617, 0x0041 };

    // 0617 0041;	
    // (ؗ) ARABIC SMALL HIGH ZAIN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0617 0041;	
    // (ؗ) ARABIC SMALL HIGH ZAIN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_420)
{
    uint32_t const cps[2] = { 0x0618, 0x0041 };

    // 0618 0041;	
    // (ؘ) ARABIC SMALL FATHA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0618 0041;	
    // (ؘ) ARABIC SMALL FATHA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_421)
{
    uint32_t const cps[2] = { 0x0619, 0x0041 };

    // 0619 0041;	
    // (ؙ) ARABIC SMALL DAMMA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0619 0041;	
    // (ؙ) ARABIC SMALL DAMMA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_422)
{
    uint32_t const cps[2] = { 0x061A, 0x0041 };

    // 061A 0041;	
    // (ؚ) ARABIC SMALL KASRA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 061A 0041;	
    // (ؚ) ARABIC SMALL KASRA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_423)
{
    uint32_t const cps[2] = { 0x061C, 0x0041 };

    // 061C 0041;	
    // ('\u061C') ARABIC LETTER MARK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 061C 0041;	
    // ('\u061C') ARABIC LETTER MARK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_424)
{
    uint32_t const cps[2] = { 0x0640, 0x0041 };

    // 0640 0041;	
    // (‎‎ـ‎‎) ARABIC TATWEEL	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0640 0041;	
    // (‎‎ـ‎‎) ARABIC TATWEEL	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_425)
{
    uint32_t const cps[2] = { 0x06D6, 0x0041 };

    // 06D6 0041;	
    // (ۖ) ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D6 0041;	
    // (ۖ) ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_426)
{
    uint32_t const cps[2] = { 0x06D7, 0x0041 };

    // 06D7 0041;	
    // (ۗ) ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D7 0041;	
    // (ۗ) ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_427)
{
    uint32_t const cps[2] = { 0x06D8, 0x0041 };

    // 06D8 0041;	
    // (ۘ) ARABIC SMALL HIGH MEEM INITIAL FORM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D8 0041;	
    // (ۘ) ARABIC SMALL HIGH MEEM INITIAL FORM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_428)
{
    uint32_t const cps[2] = { 0x06D9, 0x0041 };

    // 06D9 0041;	
    // (ۙ) ARABIC SMALL HIGH LAM ALEF	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D9 0041;	
    // (ۙ) ARABIC SMALL HIGH LAM ALEF	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_429)
{
    uint32_t const cps[2] = { 0x06DA, 0x0041 };

    // 06DA 0041;	
    // (ۚ) ARABIC SMALL HIGH JEEM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DA 0041;	
    // (ۚ) ARABIC SMALL HIGH JEEM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_430)
{
    uint32_t const cps[2] = { 0x06DB, 0x0041 };

    // 06DB 0041;	
    // (ۛ) ARABIC SMALL HIGH THREE DOTS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DB 0041;	
    // (ۛ) ARABIC SMALL HIGH THREE DOTS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_431)
{
    uint32_t const cps[2] = { 0x06DC, 0x0041 };

    // 06DC 0041;	
    // (ۜ) ARABIC SMALL HIGH SEEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DC 0041;	
    // (ۜ) ARABIC SMALL HIGH SEEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_432)
{
    uint32_t const cps[2] = { 0x06DD, 0x0041 };

    // 06DD 0041;	
    // ('\u06DD') ARABIC END OF AYAH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DD 0041;	
    // ('\u06DD') ARABIC END OF AYAH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_433)
{
    uint32_t const cps[2] = { 0x06DF, 0x0041 };

    // 06DF 0041;	
    // (۟) ARABIC SMALL HIGH ROUNDED ZERO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DF 0041;	
    // (۟) ARABIC SMALL HIGH ROUNDED ZERO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_434)
{
    uint32_t const cps[2] = { 0x06E0, 0x0041 };

    // 06E0 0041;	
    // (۠) ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E0 0041;	
    // (۠) ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_435)
{
    uint32_t const cps[2] = { 0x06E1, 0x0041 };

    // 06E1 0041;	
    // (ۡ) ARABIC SMALL HIGH DOTLESS HEAD OF KHAH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E1 0041;	
    // (ۡ) ARABIC SMALL HIGH DOTLESS HEAD OF KHAH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_436)
{
    uint32_t const cps[2] = { 0x06E2, 0x0041 };

    // 06E2 0041;	
    // (ۢ) ARABIC SMALL HIGH MEEM ISOLATED FORM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E2 0041;	
    // (ۢ) ARABIC SMALL HIGH MEEM ISOLATED FORM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_437)
{
    uint32_t const cps[2] = { 0x06E3, 0x0041 };

    // 06E3 0041;	
    // (ۣ) ARABIC SMALL LOW SEEN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E3 0041;	
    // (ۣ) ARABIC SMALL LOW SEEN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_438)
{
    uint32_t const cps[2] = { 0x06E4, 0x0041 };

    // 06E4 0041;	
    // (ۤ) ARABIC SMALL HIGH MADDA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E4 0041;	
    // (ۤ) ARABIC SMALL HIGH MADDA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_439)
{
    uint32_t const cps[2] = { 0x06E7, 0x0041 };

    // 06E7 0041;	
    // (ۧ) ARABIC SMALL HIGH YEH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E7 0041;	
    // (ۧ) ARABIC SMALL HIGH YEH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_440)
{
    uint32_t const cps[2] = { 0x06E8, 0x0041 };

    // 06E8 0041;	
    // (ۨ) ARABIC SMALL HIGH NOON	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E8 0041;	
    // (ۨ) ARABIC SMALL HIGH NOON	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_441)
{
    uint32_t const cps[2] = { 0x06EA, 0x0041 };

    // 06EA 0041;	
    // (۪) ARABIC EMPTY CENTRE LOW STOP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06EA 0041;	
    // (۪) ARABIC EMPTY CENTRE LOW STOP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_442)
{
    uint32_t const cps[2] = { 0x06EB, 0x0041 };

    // 06EB 0041;	
    // (۫) ARABIC EMPTY CENTRE HIGH STOP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06EB 0041;	
    // (۫) ARABIC EMPTY CENTRE HIGH STOP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_443)
{
    uint32_t const cps[2] = { 0x06EC, 0x0041 };

    // 06EC 0041;	
    // (۬) ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06EC 0041;	
    // (۬) ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_444)
{
    uint32_t const cps[2] = { 0x06ED, 0x0041 };

    // 06ED 0041;	
    // (ۭ) ARABIC SMALL LOW MEEM	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06ED 0041;	
    // (ۭ) ARABIC SMALL LOW MEEM	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_445)
{
    uint32_t const cps[2] = { 0x070F, 0x0041 };

    // 070F 0041;	
    // ('\u070F') SYRIAC ABBREVIATION MARK	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 070F 0041;	
    // ('\u070F') SYRIAC ABBREVIATION MARK	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_446)
{
    uint32_t const cps[2] = { 0x0740, 0x0041 };

    // 0740 0041;	
    // (݀) SYRIAC FEMININE DOT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0740 0041;	
    // (݀) SYRIAC FEMININE DOT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_447)
{
    uint32_t const cps[2] = { 0x0743, 0x0041 };

    // 0743 0041;	
    // (݃) SYRIAC TWO VERTICAL DOTS ABOVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0743 0041;	
    // (݃) SYRIAC TWO VERTICAL DOTS ABOVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_448)
{
    uint32_t const cps[2] = { 0x0744, 0x0041 };

    // 0744 0041;	
    // (݄) SYRIAC TWO VERTICAL DOTS BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0744 0041;	
    // (݄) SYRIAC TWO VERTICAL DOTS BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_449)
{
    uint32_t const cps[2] = { 0x0747, 0x0041 };

    // 0747 0041;	
    // (݇) SYRIAC OBLIQUE LINE ABOVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0747 0041;	
    // (݇) SYRIAC OBLIQUE LINE ABOVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_450)
{
    uint32_t const cps[2] = { 0x0748, 0x0041 };

    // 0748 0041;	
    // (݈) SYRIAC OBLIQUE LINE BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0748 0041;	
    // (݈) SYRIAC OBLIQUE LINE BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_451)
{
    uint32_t const cps[2] = { 0x0749, 0x0041 };

    // 0749 0041;	
    // (݉) SYRIAC MUSIC	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0749 0041;	
    // (݉) SYRIAC MUSIC	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_452)
{
    uint32_t const cps[2] = { 0x074A, 0x0041 };

    // 074A 0041;	
    // (݊) SYRIAC BARREKH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 074A 0041;	
    // (݊) SYRIAC BARREKH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_453)
{
    uint32_t const cps[2] = { 0x07FA, 0x0041 };

    // 07FA 0041;	
    // (‎‎ߺ‎‎) NKO LAJANYALAN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 07FA 0041;	
    // (‎‎ߺ‎‎) NKO LAJANYALAN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_454)
{
    uint32_t const cps[2] = { 0x08D4, 0x0041 };

    // 08D4 0041;	
    // (ࣔ) ARABIC SMALL HIGH WORD AR-RUB	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D4 0041;	
    // (ࣔ) ARABIC SMALL HIGH WORD AR-RUB	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_455)
{
    uint32_t const cps[2] = { 0x08D5, 0x0041 };

    // 08D5 0041;	
    // (ࣕ) ARABIC SMALL HIGH SAD	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D5 0041;	
    // (ࣕ) ARABIC SMALL HIGH SAD	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_456)
{
    uint32_t const cps[2] = { 0x08D6, 0x0041 };

    // 08D6 0041;	
    // (ࣖ) ARABIC SMALL HIGH AIN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D6 0041;	
    // (ࣖ) ARABIC SMALL HIGH AIN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_457)
{
    uint32_t const cps[2] = { 0x08D7, 0x0041 };

    // 08D7 0041;	
    // (ࣗ) ARABIC SMALL HIGH QAF	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D7 0041;	
    // (ࣗ) ARABIC SMALL HIGH QAF	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_458)
{
    uint32_t const cps[2] = { 0x08D8, 0x0041 };

    // 08D8 0041;	
    // (ࣘ) ARABIC SMALL HIGH NOON WITH KASRA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D8 0041;	
    // (ࣘ) ARABIC SMALL HIGH NOON WITH KASRA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_459)
{
    uint32_t const cps[2] = { 0x08D9, 0x0041 };

    // 08D9 0041;	
    // (ࣙ) ARABIC SMALL LOW NOON WITH KASRA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D9 0041;	
    // (ࣙ) ARABIC SMALL LOW NOON WITH KASRA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_460)
{
    uint32_t const cps[2] = { 0x08DA, 0x0041 };

    // 08DA 0041;	
    // (ࣚ) ARABIC SMALL HIGH WORD ATH-THALATHA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DA 0041;	
    // (ࣚ) ARABIC SMALL HIGH WORD ATH-THALATHA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_461)
{
    uint32_t const cps[2] = { 0x08DB, 0x0041 };

    // 08DB 0041;	
    // (ࣛ) ARABIC SMALL HIGH WORD AS-SAJDA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DB 0041;	
    // (ࣛ) ARABIC SMALL HIGH WORD AS-SAJDA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_462)
{
    uint32_t const cps[2] = { 0x08DC, 0x0041 };

    // 08DC 0041;	
    // (ࣜ) ARABIC SMALL HIGH WORD AN-NISF	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DC 0041;	
    // (ࣜ) ARABIC SMALL HIGH WORD AN-NISF	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_463)
{
    uint32_t const cps[2] = { 0x08DD, 0x0041 };

    // 08DD 0041;	
    // (ࣝ) ARABIC SMALL HIGH WORD SAKTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DD 0041;	
    // (ࣝ) ARABIC SMALL HIGH WORD SAKTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_464)
{
    uint32_t const cps[2] = { 0x08DE, 0x0041 };

    // 08DE 0041;	
    // (ࣞ) ARABIC SMALL HIGH WORD QIF	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DE 0041;	
    // (ࣞ) ARABIC SMALL HIGH WORD QIF	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_465)
{
    uint32_t const cps[2] = { 0x08DF, 0x0041 };

    // 08DF 0041;	
    // (ࣟ) ARABIC SMALL HIGH WORD WAQFA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DF 0041;	
    // (ࣟ) ARABIC SMALL HIGH WORD WAQFA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_466)
{
    uint32_t const cps[2] = { 0x08E0, 0x0041 };

    // 08E0 0041;	
    // (࣠) ARABIC SMALL HIGH FOOTNOTE MARKER	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08E0 0041;	
    // (࣠) ARABIC SMALL HIGH FOOTNOTE MARKER	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_467)
{
    uint32_t const cps[2] = { 0x08E1, 0x0041 };

    // 08E1 0041;	
    // (࣡) ARABIC SMALL HIGH SIGN SAFHA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08E1 0041;	
    // (࣡) ARABIC SMALL HIGH SIGN SAFHA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_468)
{
    uint32_t const cps[2] = { 0x08E2, 0x0041 };

    // 08E2 0041;	
    // ('\u08E2') ARABIC DISPUTED END OF AYAH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08E2 0041;	
    // ('\u08E2') ARABIC DISPUTED END OF AYAH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_469)
{
    uint32_t const cps[2] = { 0x08EA, 0x0041 };

    // 08EA 0041;	
    // (࣪) ARABIC TONE ONE DOT ABOVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EA 0041;	
    // (࣪) ARABIC TONE ONE DOT ABOVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_470)
{
    uint32_t const cps[2] = { 0x08EB, 0x0041 };

    // 08EB 0041;	
    // (࣫) ARABIC TONE TWO DOTS ABOVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EB 0041;	
    // (࣫) ARABIC TONE TWO DOTS ABOVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_471)
{
    uint32_t const cps[2] = { 0x08EC, 0x0041 };

    // 08EC 0041;	
    // (࣬) ARABIC TONE LOOP ABOVE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EC 0041;	
    // (࣬) ARABIC TONE LOOP ABOVE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_472)
{
    uint32_t const cps[2] = { 0x08ED, 0x0041 };

    // 08ED 0041;	
    // (࣭) ARABIC TONE ONE DOT BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08ED 0041;	
    // (࣭) ARABIC TONE ONE DOT BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_473)
{
    uint32_t const cps[2] = { 0x08EE, 0x0041 };

    // 08EE 0041;	
    // (࣮) ARABIC TONE TWO DOTS BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EE 0041;	
    // (࣮) ARABIC TONE TWO DOTS BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_474)
{
    uint32_t const cps[2] = { 0x08EF, 0x0041 };

    // 08EF 0041;	
    // (࣯) ARABIC TONE LOOP BELOW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EF 0041;	
    // (࣯) ARABIC TONE LOOP BELOW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_475)
{
    uint32_t const cps[2] = { 0x08F3, 0x0041 };

    // 08F3 0041;	
    // (ࣳ) ARABIC SMALL HIGH WAW	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08F3 0041;	
    // (ࣳ) ARABIC SMALL HIGH WAW	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_476)
{
    uint32_t const cps[2] = { 0x0951, 0x0041 };

    // 0951 0041;	
    // (॑) DEVANAGARI STRESS SIGN UDATTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0951 0041;	
    // (॑) DEVANAGARI STRESS SIGN UDATTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_477)
{
    uint32_t const cps[2] = { 0x0952, 0x0041 };

    // 0952 0041;	
    // (॒) DEVANAGARI STRESS SIGN ANUDATTA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0952 0041;	
    // (॒) DEVANAGARI STRESS SIGN ANUDATTA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_478)
{
    uint32_t const cps[2] = { 0x0F18, 0x0041 };

    // 0F18 0041;	
    // (༘) TIBETAN ASTROLOGICAL SIGN -KHYUD PA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F18 0041;	
    // (༘) TIBETAN ASTROLOGICAL SIGN -KHYUD PA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_479)
{
    uint32_t const cps[2] = { 0x0F19, 0x0041 };

    // 0F19 0041;	
    // (༙) TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F19 0041;	
    // (༙) TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_480)
{
    uint32_t const cps[2] = { 0x0F35, 0x0041 };

    // 0F35 0041;	
    // (༵) TIBETAN MARK NGAS BZUNG NYI ZLA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F35 0041;	
    // (༵) TIBETAN MARK NGAS BZUNG NYI ZLA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_481)
{
    uint32_t const cps[2] = { 0x0F37, 0x0041 };

    // 0F37 0041;	
    // (༷) TIBETAN MARK NGAS BZUNG SGOR RTAGS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F37 0041;	
    // (༷) TIBETAN MARK NGAS BZUNG SGOR RTAGS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_482)
{
    uint32_t const cps[2] = { 0x0F3E, 0x0041 };

    // 0F3E 0041;	
    // (༾) TIBETAN SIGN YAR TSHES	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F3E 0041;	
    // (༾) TIBETAN SIGN YAR TSHES	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_483)
{
    uint32_t const cps[2] = { 0x0F3F, 0x0041 };

    // 0F3F 0041;	
    // (༿) TIBETAN SIGN MAR TSHES	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F3F 0041;	
    // (༿) TIBETAN SIGN MAR TSHES	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_484)
{
    uint32_t const cps[2] = { 0x0F82, 0x0041 };

    // 0F82 0041;	
    // (ྂ) TIBETAN SIGN NYI ZLA NAA DA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F82 0041;	
    // (ྂ) TIBETAN SIGN NYI ZLA NAA DA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_485)
{
    uint32_t const cps[2] = { 0x0F83, 0x0041 };

    // 0F83 0041;	
    // (ྃ) TIBETAN SIGN SNA LDAN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F83 0041;	
    // (ྃ) TIBETAN SIGN SNA LDAN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_486)
{
    uint32_t const cps[2] = { 0x0F86, 0x0041 };

    // 0F86 0041;	
    // (྆) TIBETAN SIGN LCI RTAGS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F86 0041;	
    // (྆) TIBETAN SIGN LCI RTAGS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_487)
{
    uint32_t const cps[2] = { 0x0F87, 0x0041 };

    // 0F87 0041;	
    // (྇) TIBETAN SIGN YANG RTAGS	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F87 0041;	
    // (྇) TIBETAN SIGN YANG RTAGS	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_488)
{
    uint32_t const cps[2] = { 0x0FC6, 0x0041 };

    // 0FC6 0041;	
    // (࿆) TIBETAN SYMBOL PADMA GDAN	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0FC6 0041;	
    // (࿆) TIBETAN SYMBOL PADMA GDAN	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_489)
{
    uint32_t const cps[2] = { 0x17B4, 0x0041 };

    // 17B4 0041;	
    // (឴) KHMER VOWEL INHERENT AQ	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17B4 0041;	
    // (឴) KHMER VOWEL INHERENT AQ	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_490)
{
    uint32_t const cps[2] = { 0x17B5, 0x0041 };

    // 17B5 0041;	
    // (឵) KHMER VOWEL INHERENT AA	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17B5 0041;	
    // (឵) KHMER VOWEL INHERENT AA	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_491)
{
    uint32_t const cps[2] = { 0x17D3, 0x0041 };

    // 17D3 0041;	
    // (៓) KHMER SIGN BATHAMASAT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17D3 0041;	
    // (៓) KHMER SIGN BATHAMASAT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_492)
{
    uint32_t const cps[2] = { 0x180A, 0x0041 };

    // 180A 0041;	
    // (᠊) MONGOLIAN NIRUGU	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180A 0041;	
    // (᠊) MONGOLIAN NIRUGU	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_493)
{
    uint32_t const cps[2] = { 0x180B, 0x0041 };

    // 180B 0041;	
    // (᠋) MONGOLIAN FREE VARIATION SELECTOR ONE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180B 0041;	
    // (᠋) MONGOLIAN FREE VARIATION SELECTOR ONE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_494)
{
    uint32_t const cps[2] = { 0x180C, 0x0041 };

    // 180C 0041;	
    // (᠌) MONGOLIAN FREE VARIATION SELECTOR TWO	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180C 0041;	
    // (᠌) MONGOLIAN FREE VARIATION SELECTOR TWO	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_495)
{
    uint32_t const cps[2] = { 0x180D, 0x0041 };

    // 180D 0041;	
    // (᠍) MONGOLIAN FREE VARIATION SELECTOR THREE	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180D 0041;	
    // (᠍) MONGOLIAN FREE VARIATION SELECTOR THREE	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_496)
{
    uint32_t const cps[2] = { 0x180E, 0x0041 };

    // 180E 0041;	
    // ('\u180E') MONGOLIAN VOWEL SEPARATOR	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180E 0041;	
    // ('\u180E') MONGOLIAN VOWEL SEPARATOR	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_497)
{
    uint32_t const cps[2] = { 0x1A7F, 0x0041 };

    // 1A7F 0041;	
    // (᩿) TAI THAM COMBINING CRYPTOGRAMMIC DOT	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A7F 0041;	
    // (᩿) TAI THAM COMBINING CRYPTOGRAMMIC DOT	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_498)
{
    uint32_t const cps[2] = { 0x1B6B, 0x0041 };

    // 1B6B 0041;	
    // (᭫) BALINESE MUSICAL SYMBOL COMBINING TEGEH	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6B 0041;	
    // (᭫) BALINESE MUSICAL SYMBOL COMBINING TEGEH	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_093_499)
{
    uint32_t const cps[2] = { 0x1B6C, 0x0041 };

    // 1B6C 0041;	
    // (᭬) BALINESE MUSICAL SYMBOL COMBINING ENDEP	[1CAD | 0020 | 0008 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6C 0041;	
    // (᭬) BALINESE MUSICAL SYMBOL COMBINING ENDEP	[1CAD | 0020 | 0008 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

