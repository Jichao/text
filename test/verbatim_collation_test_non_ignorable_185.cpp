// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_185_000)
{
    // 11C38 0061;	
    // (𑰸) BHAIKSUKI VOWEL SIGN E	[2E1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C38, 0x0061 };
    uint32_t const ces[9] = { 0x2E1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_001)
{
    // 11C38 0041;	
    // (𑰸) BHAIKSUKI VOWEL SIGN E	[2E1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C38, 0x0041 };
    uint32_t const ces[9] = { 0x2E1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_002)
{
    // 11C38 0062;	
    // (𑰸) BHAIKSUKI VOWEL SIGN E	[2E1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C38, 0x0062 };
    uint32_t const ces[9] = { 0x2E1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_003)
{
    // 11C39 0021;	
    // (𑰹) BHAIKSUKI VOWEL SIGN AI	[2E1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C39, 0x0021 };
    uint32_t const ces[9] = { 0x2E1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_004)
{
    // 11C39 003F;	
    // (𑰹) BHAIKSUKI VOWEL SIGN AI	[2E1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C39, 0x003F };
    uint32_t const ces[9] = { 0x2E1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_005)
{
    // 11C39 0061;	
    // (𑰹) BHAIKSUKI VOWEL SIGN AI	[2E1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C39, 0x0061 };
    uint32_t const ces[9] = { 0x2E1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_006)
{
    // 11C39 0041;	
    // (𑰹) BHAIKSUKI VOWEL SIGN AI	[2E1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C39, 0x0041 };
    uint32_t const ces[9] = { 0x2E1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_007)
{
    // 11C39 0062;	
    // (𑰹) BHAIKSUKI VOWEL SIGN AI	[2E1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C39, 0x0062 };
    uint32_t const ces[9] = { 0x2E1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_008)
{
    // 11C3A 0021;	
    // (𑰺) BHAIKSUKI VOWEL SIGN O	[2E1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3A, 0x0021 };
    uint32_t const ces[9] = { 0x2E1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_009)
{
    // 11C3A 003F;	
    // (𑰺) BHAIKSUKI VOWEL SIGN O	[2E1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3A, 0x003F };
    uint32_t const ces[9] = { 0x2E1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_010)
{
    // 11C3A 0061;	
    // (𑰺) BHAIKSUKI VOWEL SIGN O	[2E1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3A, 0x0061 };
    uint32_t const ces[9] = { 0x2E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_011)
{
    // 11C3A 0041;	
    // (𑰺) BHAIKSUKI VOWEL SIGN O	[2E1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C3A, 0x0041 };
    uint32_t const ces[9] = { 0x2E1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_012)
{
    // 11C3A 0062;	
    // (𑰺) BHAIKSUKI VOWEL SIGN O	[2E1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3A, 0x0062 };
    uint32_t const ces[9] = { 0x2E1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_013)
{
    // 11C3B 0021;	
    // (𑰻) BHAIKSUKI VOWEL SIGN AU	[2E1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3B, 0x0021 };
    uint32_t const ces[9] = { 0x2E1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_014)
{
    // 11C3B 003F;	
    // (𑰻) BHAIKSUKI VOWEL SIGN AU	[2E1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3B, 0x003F };
    uint32_t const ces[9] = { 0x2E1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_015)
{
    // 11C3B 0061;	
    // (𑰻) BHAIKSUKI VOWEL SIGN AU	[2E1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3B, 0x0061 };
    uint32_t const ces[9] = { 0x2E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_016)
{
    // 11C3B 0041;	
    // (𑰻) BHAIKSUKI VOWEL SIGN AU	[2E1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C3B, 0x0041 };
    uint32_t const ces[9] = { 0x2E1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_017)
{
    // 11C3B 0062;	
    // (𑰻) BHAIKSUKI VOWEL SIGN AU	[2E1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3B, 0x0062 };
    uint32_t const ces[9] = { 0x2E1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_018)
{
    // 0334 11C3F;	
    // (𑰿) BHAIKSUKI SIGN VIRAMA	[2E1F | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x11C3F };
    uint32_t const ces[8] = { 0x2E1F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_019)
{
    // 11C3F 0334;	
    // (𑰿) BHAIKSUKI SIGN VIRAMA	[2E1F | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3F, 0x0334 };
    uint32_t const ces[8] = { 0x2E1F, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_020)
{
    // 11C3F 0021;	
    // (𑰿) BHAIKSUKI SIGN VIRAMA	[2E1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3F, 0x0021 };
    uint32_t const ces[9] = { 0x2E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_021)
{
    // 11C3F 003F;	
    // (𑰿) BHAIKSUKI SIGN VIRAMA	[2E1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3F, 0x003F };
    uint32_t const ces[9] = { 0x2E1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_022)
{
    // 11C3F 0061;	
    // (𑰿) BHAIKSUKI SIGN VIRAMA	[2E1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3F, 0x0061 };
    uint32_t const ces[9] = { 0x2E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_023)
{
    // 11C3F 0041;	
    // (𑰿) BHAIKSUKI SIGN VIRAMA	[2E1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C3F, 0x0041 };
    uint32_t const ces[9] = { 0x2E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_024)
{
    // 11C3F 0062;	
    // (𑰿) BHAIKSUKI SIGN VIRAMA	[2E1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C3F, 0x0062 };
    uint32_t const ces[9] = { 0x2E1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_025)
{
    // 0E01 0021;	
    // (ก) THAI CHARACTER KO KAI	[2E20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E01, 0x0021 };
    uint32_t const ces[9] = { 0x2E20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_026)
{
    // 0E01 003F;	
    // (ก) THAI CHARACTER KO KAI	[2E20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E01, 0x003F };
    uint32_t const ces[9] = { 0x2E20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_027)
{
    // 0E01 0061;	
    // (ก) THAI CHARACTER KO KAI	[2E20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E01, 0x0061 };
    uint32_t const ces[9] = { 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_028)
{
    // 0E01 0041;	
    // (ก) THAI CHARACTER KO KAI	[2E20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E01, 0x0041 };
    uint32_t const ces[9] = { 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_029)
{
    // 0E01 0062;	
    // (ก) THAI CHARACTER KO KAI	[2E20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E01, 0x0062 };
    uint32_t const ces[9] = { 0x2E20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_030)
{
    // 0E40 0E01 0021;	
    // (เก) THAI CHARACTER SARA E, THAI CHARACTER KO KAI	[2E20 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E01, 0x0021 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_031)
{
    // 0E40 0E01 003F;	
    // (เก) THAI CHARACTER SARA E, THAI CHARACTER KO KAI	[2E20 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E01, 0x003F };
    uint32_t const ces[12] = { 0x2E20, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_032)
{
    // 0E40 0E01 0061;	
    // (เก) THAI CHARACTER SARA E, THAI CHARACTER KO KAI	[2E20 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_033)
{
    // 0E40 0E01 0041;	
    // (เก) THAI CHARACTER SARA E, THAI CHARACTER KO KAI	[2E20 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E01, 0x0041 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_034)
{
    // 0E40 0E01 0062;	
    // (เก) THAI CHARACTER SARA E, THAI CHARACTER KO KAI	[2E20 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E01, 0x0062 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_035)
{
    // 0E41 0E01 0021;	
    // (แก) THAI CHARACTER SARA AE, THAI CHARACTER KO KAI	[2E20 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E01, 0x0021 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_036)
{
    // 0E41 0E01 003F;	
    // (แก) THAI CHARACTER SARA AE, THAI CHARACTER KO KAI	[2E20 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E01, 0x003F };
    uint32_t const ces[12] = { 0x2E20, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_037)
{
    // 0E41 0E01 0061;	
    // (แก) THAI CHARACTER SARA AE, THAI CHARACTER KO KAI	[2E20 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_038)
{
    // 0E41 0E01 0041;	
    // (แก) THAI CHARACTER SARA AE, THAI CHARACTER KO KAI	[2E20 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E01, 0x0041 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_039)
{
    // 0E41 0E01 0062;	
    // (แก) THAI CHARACTER SARA AE, THAI CHARACTER KO KAI	[2E20 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E01, 0x0062 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_040)
{
    // 0E42 0E01 0021;	
    // (โก) THAI CHARACTER SARA O, THAI CHARACTER KO KAI	[2E20 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E01, 0x0021 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_041)
{
    // 0E42 0E01 003F;	
    // (โก) THAI CHARACTER SARA O, THAI CHARACTER KO KAI	[2E20 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E01, 0x003F };
    uint32_t const ces[12] = { 0x2E20, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_042)
{
    // 0E42 0E01 0061;	
    // (โก) THAI CHARACTER SARA O, THAI CHARACTER KO KAI	[2E20 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_043)
{
    // 0E42 0E01 0041;	
    // (โก) THAI CHARACTER SARA O, THAI CHARACTER KO KAI	[2E20 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E01, 0x0041 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_044)
{
    // 0E42 0E01 0062;	
    // (โก) THAI CHARACTER SARA O, THAI CHARACTER KO KAI	[2E20 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E01, 0x0062 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_045)
{
    // 0E43 0E01 0021;	
    // (ใก) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KO KAI	[2E20 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E01, 0x0021 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_046)
{
    // 0E43 0E01 003F;	
    // (ใก) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KO KAI	[2E20 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E01, 0x003F };
    uint32_t const ces[12] = { 0x2E20, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_047)
{
    // 0E43 0E01 0061;	
    // (ใก) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KO KAI	[2E20 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_048)
{
    // 0E43 0E01 0041;	
    // (ใก) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KO KAI	[2E20 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E01, 0x0041 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_049)
{
    // 0E43 0E01 0062;	
    // (ใก) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KO KAI	[2E20 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E01, 0x0062 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_050)
{
    // 0E44 0E01 0021;	
    // (ไก) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KO KAI	[2E20 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E01, 0x0021 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_051)
{
    // 0E44 0E01 003F;	
    // (ไก) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KO KAI	[2E20 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E01, 0x003F };
    uint32_t const ces[12] = { 0x2E20, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_052)
{
    // 0E44 0E01 0061;	
    // (ไก) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KO KAI	[2E20 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_053)
{
    // 0E44 0E01 0041;	
    // (ไก) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KO KAI	[2E20 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E01, 0x0041 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_054)
{
    // 0E44 0E01 0062;	
    // (ไก) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KO KAI	[2E20 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E01, 0x0062 };
    uint32_t const ces[12] = { 0x2E20, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_055)
{
    // 0E02 0021;	
    // (ข) THAI CHARACTER KHO KHAI	[2E21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E02, 0x0021 };
    uint32_t const ces[9] = { 0x2E21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_056)
{
    // 0E02 003F;	
    // (ข) THAI CHARACTER KHO KHAI	[2E21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E02, 0x003F };
    uint32_t const ces[9] = { 0x2E21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_057)
{
    // 0E02 0061;	
    // (ข) THAI CHARACTER KHO KHAI	[2E21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E02, 0x0061 };
    uint32_t const ces[9] = { 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_058)
{
    // 0E02 0041;	
    // (ข) THAI CHARACTER KHO KHAI	[2E21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E02, 0x0041 };
    uint32_t const ces[9] = { 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_059)
{
    // 0E02 0062;	
    // (ข) THAI CHARACTER KHO KHAI	[2E21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E02, 0x0062 };
    uint32_t const ces[9] = { 0x2E21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_060)
{
    // 0E40 0E02 0021;	
    // (เข) THAI CHARACTER SARA E, THAI CHARACTER KHO KHAI	[2E21 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E02, 0x0021 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_061)
{
    // 0E40 0E02 003F;	
    // (เข) THAI CHARACTER SARA E, THAI CHARACTER KHO KHAI	[2E21 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E02, 0x003F };
    uint32_t const ces[12] = { 0x2E21, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_062)
{
    // 0E40 0E02 0061;	
    // (เข) THAI CHARACTER SARA E, THAI CHARACTER KHO KHAI	[2E21 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_063)
{
    // 0E40 0E02 0041;	
    // (เข) THAI CHARACTER SARA E, THAI CHARACTER KHO KHAI	[2E21 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E02, 0x0041 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_064)
{
    // 0E40 0E02 0062;	
    // (เข) THAI CHARACTER SARA E, THAI CHARACTER KHO KHAI	[2E21 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E02, 0x0062 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_065)
{
    // 0E41 0E02 0021;	
    // (แข) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHAI	[2E21 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E02, 0x0021 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_066)
{
    // 0E41 0E02 003F;	
    // (แข) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHAI	[2E21 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E02, 0x003F };
    uint32_t const ces[12] = { 0x2E21, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_067)
{
    // 0E41 0E02 0061;	
    // (แข) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHAI	[2E21 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_068)
{
    // 0E41 0E02 0041;	
    // (แข) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHAI	[2E21 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E02, 0x0041 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_069)
{
    // 0E41 0E02 0062;	
    // (แข) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHAI	[2E21 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E02, 0x0062 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_070)
{
    // 0E42 0E02 0021;	
    // (โข) THAI CHARACTER SARA O, THAI CHARACTER KHO KHAI	[2E21 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E02, 0x0021 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_071)
{
    // 0E42 0E02 003F;	
    // (โข) THAI CHARACTER SARA O, THAI CHARACTER KHO KHAI	[2E21 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E02, 0x003F };
    uint32_t const ces[12] = { 0x2E21, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_072)
{
    // 0E42 0E02 0061;	
    // (โข) THAI CHARACTER SARA O, THAI CHARACTER KHO KHAI	[2E21 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_073)
{
    // 0E42 0E02 0041;	
    // (โข) THAI CHARACTER SARA O, THAI CHARACTER KHO KHAI	[2E21 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E02, 0x0041 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_074)
{
    // 0E42 0E02 0062;	
    // (โข) THAI CHARACTER SARA O, THAI CHARACTER KHO KHAI	[2E21 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E02, 0x0062 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_075)
{
    // 0E43 0E02 0021;	
    // (ใข) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHAI	[2E21 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E02, 0x0021 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_076)
{
    // 0E43 0E02 003F;	
    // (ใข) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHAI	[2E21 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E02, 0x003F };
    uint32_t const ces[12] = { 0x2E21, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_077)
{
    // 0E43 0E02 0061;	
    // (ใข) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHAI	[2E21 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_078)
{
    // 0E43 0E02 0041;	
    // (ใข) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHAI	[2E21 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E02, 0x0041 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_079)
{
    // 0E43 0E02 0062;	
    // (ใข) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHAI	[2E21 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E02, 0x0062 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_080)
{
    // 0E44 0E02 0021;	
    // (ไข) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHAI	[2E21 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E02, 0x0021 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_081)
{
    // 0E44 0E02 003F;	
    // (ไข) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHAI	[2E21 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E02, 0x003F };
    uint32_t const ces[12] = { 0x2E21, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_082)
{
    // 0E44 0E02 0061;	
    // (ไข) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHAI	[2E21 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_083)
{
    // 0E44 0E02 0041;	
    // (ไข) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHAI	[2E21 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E02, 0x0041 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_084)
{
    // 0E44 0E02 0062;	
    // (ไข) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHAI	[2E21 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E02, 0x0062 };
    uint32_t const ces[12] = { 0x2E21, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_085)
{
    // 0E03 0021;	
    // (ฃ) THAI CHARACTER KHO KHUAT	[2E22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E03, 0x0021 };
    uint32_t const ces[9] = { 0x2E22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_086)
{
    // 0E03 003F;	
    // (ฃ) THAI CHARACTER KHO KHUAT	[2E22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E03, 0x003F };
    uint32_t const ces[9] = { 0x2E22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_087)
{
    // 0E03 0061;	
    // (ฃ) THAI CHARACTER KHO KHUAT	[2E22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E03, 0x0061 };
    uint32_t const ces[9] = { 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_088)
{
    // 0E03 0041;	
    // (ฃ) THAI CHARACTER KHO KHUAT	[2E22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E03, 0x0041 };
    uint32_t const ces[9] = { 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_089)
{
    // 0E03 0062;	
    // (ฃ) THAI CHARACTER KHO KHUAT	[2E22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E03, 0x0062 };
    uint32_t const ces[9] = { 0x2E22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_090)
{
    // 0E40 0E03 0021;	
    // (เฃ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHUAT	[2E22 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E03, 0x0021 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_091)
{
    // 0E40 0E03 003F;	
    // (เฃ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHUAT	[2E22 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E03, 0x003F };
    uint32_t const ces[12] = { 0x2E22, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_092)
{
    // 0E40 0E03 0061;	
    // (เฃ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHUAT	[2E22 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_093)
{
    // 0E40 0E03 0041;	
    // (เฃ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHUAT	[2E22 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E03, 0x0041 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_094)
{
    // 0E40 0E03 0062;	
    // (เฃ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHUAT	[2E22 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E03, 0x0062 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_095)
{
    // 0E41 0E03 0021;	
    // (แฃ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHUAT	[2E22 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E03, 0x0021 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_096)
{
    // 0E41 0E03 003F;	
    // (แฃ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHUAT	[2E22 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E03, 0x003F };
    uint32_t const ces[12] = { 0x2E22, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_097)
{
    // 0E41 0E03 0061;	
    // (แฃ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHUAT	[2E22 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_098)
{
    // 0E41 0E03 0041;	
    // (แฃ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHUAT	[2E22 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E03, 0x0041 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_099)
{
    // 0E41 0E03 0062;	
    // (แฃ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHUAT	[2E22 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E03, 0x0062 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_100)
{
    // 0E42 0E03 0021;	
    // (โฃ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHUAT	[2E22 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E03, 0x0021 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_101)
{
    // 0E42 0E03 003F;	
    // (โฃ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHUAT	[2E22 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E03, 0x003F };
    uint32_t const ces[12] = { 0x2E22, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_102)
{
    // 0E42 0E03 0061;	
    // (โฃ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHUAT	[2E22 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_103)
{
    // 0E42 0E03 0041;	
    // (โฃ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHUAT	[2E22 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E03, 0x0041 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_104)
{
    // 0E42 0E03 0062;	
    // (โฃ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHUAT	[2E22 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E03, 0x0062 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_105)
{
    // 0E43 0E03 0021;	
    // (ใฃ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHUAT	[2E22 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E03, 0x0021 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_106)
{
    // 0E43 0E03 003F;	
    // (ใฃ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHUAT	[2E22 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E03, 0x003F };
    uint32_t const ces[12] = { 0x2E22, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_107)
{
    // 0E43 0E03 0061;	
    // (ใฃ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHUAT	[2E22 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_108)
{
    // 0E43 0E03 0041;	
    // (ใฃ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHUAT	[2E22 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E03, 0x0041 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_109)
{
    // 0E43 0E03 0062;	
    // (ใฃ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHUAT	[2E22 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E03, 0x0062 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_110)
{
    // 0E44 0E03 0021;	
    // (ไฃ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHUAT	[2E22 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E03, 0x0021 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_111)
{
    // 0E44 0E03 003F;	
    // (ไฃ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHUAT	[2E22 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E03, 0x003F };
    uint32_t const ces[12] = { 0x2E22, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_112)
{
    // 0E44 0E03 0061;	
    // (ไฃ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHUAT	[2E22 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_113)
{
    // 0E44 0E03 0041;	
    // (ไฃ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHUAT	[2E22 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E03, 0x0041 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_114)
{
    // 0E44 0E03 0062;	
    // (ไฃ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHUAT	[2E22 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E03, 0x0062 };
    uint32_t const ces[12] = { 0x2E22, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_115)
{
    // 0E04 0021;	
    // (ค) THAI CHARACTER KHO KHWAI	[2E23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E04, 0x0021 };
    uint32_t const ces[9] = { 0x2E23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_116)
{
    // 0E04 003F;	
    // (ค) THAI CHARACTER KHO KHWAI	[2E23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E04, 0x003F };
    uint32_t const ces[9] = { 0x2E23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_117)
{
    // 0E04 0061;	
    // (ค) THAI CHARACTER KHO KHWAI	[2E23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E04, 0x0061 };
    uint32_t const ces[9] = { 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_118)
{
    // 0E04 0041;	
    // (ค) THAI CHARACTER KHO KHWAI	[2E23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E04, 0x0041 };
    uint32_t const ces[9] = { 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_119)
{
    // 0E04 0062;	
    // (ค) THAI CHARACTER KHO KHWAI	[2E23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E04, 0x0062 };
    uint32_t const ces[9] = { 0x2E23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_120)
{
    // 0E40 0E04 0021;	
    // (เค) THAI CHARACTER SARA E, THAI CHARACTER KHO KHWAI	[2E23 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E04, 0x0021 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_121)
{
    // 0E40 0E04 003F;	
    // (เค) THAI CHARACTER SARA E, THAI CHARACTER KHO KHWAI	[2E23 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E04, 0x003F };
    uint32_t const ces[12] = { 0x2E23, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_122)
{
    // 0E40 0E04 0061;	
    // (เค) THAI CHARACTER SARA E, THAI CHARACTER KHO KHWAI	[2E23 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_123)
{
    // 0E40 0E04 0041;	
    // (เค) THAI CHARACTER SARA E, THAI CHARACTER KHO KHWAI	[2E23 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E04, 0x0041 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_124)
{
    // 0E40 0E04 0062;	
    // (เค) THAI CHARACTER SARA E, THAI CHARACTER KHO KHWAI	[2E23 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E04, 0x0062 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_125)
{
    // 0E41 0E04 0021;	
    // (แค) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHWAI	[2E23 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E04, 0x0021 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_126)
{
    // 0E41 0E04 003F;	
    // (แค) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHWAI	[2E23 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E04, 0x003F };
    uint32_t const ces[12] = { 0x2E23, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_127)
{
    // 0E41 0E04 0061;	
    // (แค) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHWAI	[2E23 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_128)
{
    // 0E41 0E04 0041;	
    // (แค) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHWAI	[2E23 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E04, 0x0041 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_129)
{
    // 0E41 0E04 0062;	
    // (แค) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHWAI	[2E23 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E04, 0x0062 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_130)
{
    // 0E42 0E04 0021;	
    // (โค) THAI CHARACTER SARA O, THAI CHARACTER KHO KHWAI	[2E23 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E04, 0x0021 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_131)
{
    // 0E42 0E04 003F;	
    // (โค) THAI CHARACTER SARA O, THAI CHARACTER KHO KHWAI	[2E23 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E04, 0x003F };
    uint32_t const ces[12] = { 0x2E23, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_132)
{
    // 0E42 0E04 0061;	
    // (โค) THAI CHARACTER SARA O, THAI CHARACTER KHO KHWAI	[2E23 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_133)
{
    // 0E42 0E04 0041;	
    // (โค) THAI CHARACTER SARA O, THAI CHARACTER KHO KHWAI	[2E23 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E04, 0x0041 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_134)
{
    // 0E42 0E04 0062;	
    // (โค) THAI CHARACTER SARA O, THAI CHARACTER KHO KHWAI	[2E23 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E04, 0x0062 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_135)
{
    // 0E43 0E04 0021;	
    // (ใค) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHWAI	[2E23 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E04, 0x0021 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_136)
{
    // 0E43 0E04 003F;	
    // (ใค) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHWAI	[2E23 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E04, 0x003F };
    uint32_t const ces[12] = { 0x2E23, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_137)
{
    // 0E43 0E04 0061;	
    // (ใค) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHWAI	[2E23 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_138)
{
    // 0E43 0E04 0041;	
    // (ใค) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHWAI	[2E23 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E04, 0x0041 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_139)
{
    // 0E43 0E04 0062;	
    // (ใค) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHWAI	[2E23 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E04, 0x0062 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_140)
{
    // 0E44 0E04 0021;	
    // (ไค) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHWAI	[2E23 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E04, 0x0021 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_141)
{
    // 0E44 0E04 003F;	
    // (ไค) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHWAI	[2E23 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E04, 0x003F };
    uint32_t const ces[12] = { 0x2E23, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_142)
{
    // 0E44 0E04 0061;	
    // (ไค) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHWAI	[2E23 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_143)
{
    // 0E44 0E04 0041;	
    // (ไค) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHWAI	[2E23 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E04, 0x0041 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_144)
{
    // 0E44 0E04 0062;	
    // (ไค) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHWAI	[2E23 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E04, 0x0062 };
    uint32_t const ces[12] = { 0x2E23, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_145)
{
    // 0E05 0021;	
    // (ฅ) THAI CHARACTER KHO KHON	[2E24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E05, 0x0021 };
    uint32_t const ces[9] = { 0x2E24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_146)
{
    // 0E05 003F;	
    // (ฅ) THAI CHARACTER KHO KHON	[2E24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E05, 0x003F };
    uint32_t const ces[9] = { 0x2E24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_147)
{
    // 0E05 0061;	
    // (ฅ) THAI CHARACTER KHO KHON	[2E24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E05, 0x0061 };
    uint32_t const ces[9] = { 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_148)
{
    // 0E05 0041;	
    // (ฅ) THAI CHARACTER KHO KHON	[2E24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E05, 0x0041 };
    uint32_t const ces[9] = { 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_149)
{
    // 0E05 0062;	
    // (ฅ) THAI CHARACTER KHO KHON	[2E24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E05, 0x0062 };
    uint32_t const ces[9] = { 0x2E24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_150)
{
    // 0E40 0E05 0021;	
    // (เฅ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHON	[2E24 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E05, 0x0021 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_151)
{
    // 0E40 0E05 003F;	
    // (เฅ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHON	[2E24 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E05, 0x003F };
    uint32_t const ces[12] = { 0x2E24, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_152)
{
    // 0E40 0E05 0061;	
    // (เฅ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHON	[2E24 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_153)
{
    // 0E40 0E05 0041;	
    // (เฅ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHON	[2E24 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E05, 0x0041 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_154)
{
    // 0E40 0E05 0062;	
    // (เฅ) THAI CHARACTER SARA E, THAI CHARACTER KHO KHON	[2E24 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E05, 0x0062 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_155)
{
    // 0E41 0E05 0021;	
    // (แฅ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHON	[2E24 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E05, 0x0021 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_156)
{
    // 0E41 0E05 003F;	
    // (แฅ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHON	[2E24 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E05, 0x003F };
    uint32_t const ces[12] = { 0x2E24, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_157)
{
    // 0E41 0E05 0061;	
    // (แฅ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHON	[2E24 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_158)
{
    // 0E41 0E05 0041;	
    // (แฅ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHON	[2E24 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E05, 0x0041 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_159)
{
    // 0E41 0E05 0062;	
    // (แฅ) THAI CHARACTER SARA AE, THAI CHARACTER KHO KHON	[2E24 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E05, 0x0062 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_160)
{
    // 0E42 0E05 0021;	
    // (โฅ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHON	[2E24 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E05, 0x0021 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_161)
{
    // 0E42 0E05 003F;	
    // (โฅ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHON	[2E24 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E05, 0x003F };
    uint32_t const ces[12] = { 0x2E24, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_162)
{
    // 0E42 0E05 0061;	
    // (โฅ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHON	[2E24 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_163)
{
    // 0E42 0E05 0041;	
    // (โฅ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHON	[2E24 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E05, 0x0041 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_164)
{
    // 0E42 0E05 0062;	
    // (โฅ) THAI CHARACTER SARA O, THAI CHARACTER KHO KHON	[2E24 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E05, 0x0062 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_165)
{
    // 0E43 0E05 0021;	
    // (ใฅ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHON	[2E24 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E05, 0x0021 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_166)
{
    // 0E43 0E05 003F;	
    // (ใฅ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHON	[2E24 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E05, 0x003F };
    uint32_t const ces[12] = { 0x2E24, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_167)
{
    // 0E43 0E05 0061;	
    // (ใฅ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHON	[2E24 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_168)
{
    // 0E43 0E05 0041;	
    // (ใฅ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHON	[2E24 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E05, 0x0041 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_169)
{
    // 0E43 0E05 0062;	
    // (ใฅ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO KHON	[2E24 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E05, 0x0062 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_170)
{
    // 0E44 0E05 0021;	
    // (ไฅ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHON	[2E24 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E05, 0x0021 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_171)
{
    // 0E44 0E05 003F;	
    // (ไฅ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHON	[2E24 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E05, 0x003F };
    uint32_t const ces[12] = { 0x2E24, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_172)
{
    // 0E44 0E05 0061;	
    // (ไฅ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHON	[2E24 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_173)
{
    // 0E44 0E05 0041;	
    // (ไฅ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHON	[2E24 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E05, 0x0041 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_174)
{
    // 0E44 0E05 0062;	
    // (ไฅ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO KHON	[2E24 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E05, 0x0062 };
    uint32_t const ces[12] = { 0x2E24, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_175)
{
    // 0E06 0021;	
    // (ฆ) THAI CHARACTER KHO RAKHANG	[2E25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E06, 0x0021 };
    uint32_t const ces[9] = { 0x2E25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_176)
{
    // 0E06 003F;	
    // (ฆ) THAI CHARACTER KHO RAKHANG	[2E25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E06, 0x003F };
    uint32_t const ces[9] = { 0x2E25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_177)
{
    // 0E06 0061;	
    // (ฆ) THAI CHARACTER KHO RAKHANG	[2E25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E06, 0x0061 };
    uint32_t const ces[9] = { 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_178)
{
    // 0E06 0041;	
    // (ฆ) THAI CHARACTER KHO RAKHANG	[2E25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E06, 0x0041 };
    uint32_t const ces[9] = { 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_179)
{
    // 0E06 0062;	
    // (ฆ) THAI CHARACTER KHO RAKHANG	[2E25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E06, 0x0062 };
    uint32_t const ces[9] = { 0x2E25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_180)
{
    // 0E40 0E06 0021;	
    // (เฆ) THAI CHARACTER SARA E, THAI CHARACTER KHO RAKHANG	[2E25 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E06, 0x0021 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_181)
{
    // 0E40 0E06 003F;	
    // (เฆ) THAI CHARACTER SARA E, THAI CHARACTER KHO RAKHANG	[2E25 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E06, 0x003F };
    uint32_t const ces[12] = { 0x2E25, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_182)
{
    // 0E40 0E06 0061;	
    // (เฆ) THAI CHARACTER SARA E, THAI CHARACTER KHO RAKHANG	[2E25 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_183)
{
    // 0E40 0E06 0041;	
    // (เฆ) THAI CHARACTER SARA E, THAI CHARACTER KHO RAKHANG	[2E25 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E06, 0x0041 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_184)
{
    // 0E40 0E06 0062;	
    // (เฆ) THAI CHARACTER SARA E, THAI CHARACTER KHO RAKHANG	[2E25 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E06, 0x0062 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_185)
{
    // 0E41 0E06 0021;	
    // (แฆ) THAI CHARACTER SARA AE, THAI CHARACTER KHO RAKHANG	[2E25 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E06, 0x0021 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_186)
{
    // 0E41 0E06 003F;	
    // (แฆ) THAI CHARACTER SARA AE, THAI CHARACTER KHO RAKHANG	[2E25 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E06, 0x003F };
    uint32_t const ces[12] = { 0x2E25, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_187)
{
    // 0E41 0E06 0061;	
    // (แฆ) THAI CHARACTER SARA AE, THAI CHARACTER KHO RAKHANG	[2E25 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_188)
{
    // 0E41 0E06 0041;	
    // (แฆ) THAI CHARACTER SARA AE, THAI CHARACTER KHO RAKHANG	[2E25 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E06, 0x0041 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_189)
{
    // 0E41 0E06 0062;	
    // (แฆ) THAI CHARACTER SARA AE, THAI CHARACTER KHO RAKHANG	[2E25 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E06, 0x0062 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_190)
{
    // 0E42 0E06 0021;	
    // (โฆ) THAI CHARACTER SARA O, THAI CHARACTER KHO RAKHANG	[2E25 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E06, 0x0021 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_191)
{
    // 0E42 0E06 003F;	
    // (โฆ) THAI CHARACTER SARA O, THAI CHARACTER KHO RAKHANG	[2E25 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E06, 0x003F };
    uint32_t const ces[12] = { 0x2E25, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_192)
{
    // 0E42 0E06 0061;	
    // (โฆ) THAI CHARACTER SARA O, THAI CHARACTER KHO RAKHANG	[2E25 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_193)
{
    // 0E42 0E06 0041;	
    // (โฆ) THAI CHARACTER SARA O, THAI CHARACTER KHO RAKHANG	[2E25 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E06, 0x0041 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_194)
{
    // 0E42 0E06 0062;	
    // (โฆ) THAI CHARACTER SARA O, THAI CHARACTER KHO RAKHANG	[2E25 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E06, 0x0062 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_195)
{
    // 0E43 0E06 0021;	
    // (ใฆ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO RAKHANG	[2E25 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E06, 0x0021 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_196)
{
    // 0E43 0E06 003F;	
    // (ใฆ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO RAKHANG	[2E25 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E06, 0x003F };
    uint32_t const ces[12] = { 0x2E25, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_197)
{
    // 0E43 0E06 0061;	
    // (ใฆ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO RAKHANG	[2E25 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_198)
{
    // 0E43 0E06 0041;	
    // (ใฆ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO RAKHANG	[2E25 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E06, 0x0041 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_199)
{
    // 0E43 0E06 0062;	
    // (ใฆ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER KHO RAKHANG	[2E25 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E06, 0x0062 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_200)
{
    // 0E44 0E06 0021;	
    // (ไฆ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO RAKHANG	[2E25 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E06, 0x0021 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_201)
{
    // 0E44 0E06 003F;	
    // (ไฆ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO RAKHANG	[2E25 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E06, 0x003F };
    uint32_t const ces[12] = { 0x2E25, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_202)
{
    // 0E44 0E06 0061;	
    // (ไฆ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO RAKHANG	[2E25 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_203)
{
    // 0E44 0E06 0041;	
    // (ไฆ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO RAKHANG	[2E25 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E06, 0x0041 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_204)
{
    // 0E44 0E06 0062;	
    // (ไฆ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER KHO RAKHANG	[2E25 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E06, 0x0062 };
    uint32_t const ces[12] = { 0x2E25, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_205)
{
    // 0E07 0021;	
    // (ง) THAI CHARACTER NGO NGU	[2E26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E07, 0x0021 };
    uint32_t const ces[9] = { 0x2E26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_206)
{
    // 0E07 003F;	
    // (ง) THAI CHARACTER NGO NGU	[2E26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E07, 0x003F };
    uint32_t const ces[9] = { 0x2E26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_207)
{
    // 0E07 0061;	
    // (ง) THAI CHARACTER NGO NGU	[2E26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E07, 0x0061 };
    uint32_t const ces[9] = { 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_208)
{
    // 0E07 0041;	
    // (ง) THAI CHARACTER NGO NGU	[2E26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E07, 0x0041 };
    uint32_t const ces[9] = { 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_209)
{
    // 0E07 0062;	
    // (ง) THAI CHARACTER NGO NGU	[2E26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E07, 0x0062 };
    uint32_t const ces[9] = { 0x2E26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_210)
{
    // 0E40 0E07 0021;	
    // (เง) THAI CHARACTER SARA E, THAI CHARACTER NGO NGU	[2E26 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E07, 0x0021 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_211)
{
    // 0E40 0E07 003F;	
    // (เง) THAI CHARACTER SARA E, THAI CHARACTER NGO NGU	[2E26 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E07, 0x003F };
    uint32_t const ces[12] = { 0x2E26, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_212)
{
    // 0E40 0E07 0061;	
    // (เง) THAI CHARACTER SARA E, THAI CHARACTER NGO NGU	[2E26 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_213)
{
    // 0E40 0E07 0041;	
    // (เง) THAI CHARACTER SARA E, THAI CHARACTER NGO NGU	[2E26 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E07, 0x0041 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_214)
{
    // 0E40 0E07 0062;	
    // (เง) THAI CHARACTER SARA E, THAI CHARACTER NGO NGU	[2E26 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E07, 0x0062 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_215)
{
    // 0E41 0E07 0021;	
    // (แง) THAI CHARACTER SARA AE, THAI CHARACTER NGO NGU	[2E26 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E07, 0x0021 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_216)
{
    // 0E41 0E07 003F;	
    // (แง) THAI CHARACTER SARA AE, THAI CHARACTER NGO NGU	[2E26 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E07, 0x003F };
    uint32_t const ces[12] = { 0x2E26, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_217)
{
    // 0E41 0E07 0061;	
    // (แง) THAI CHARACTER SARA AE, THAI CHARACTER NGO NGU	[2E26 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_218)
{
    // 0E41 0E07 0041;	
    // (แง) THAI CHARACTER SARA AE, THAI CHARACTER NGO NGU	[2E26 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E07, 0x0041 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_219)
{
    // 0E41 0E07 0062;	
    // (แง) THAI CHARACTER SARA AE, THAI CHARACTER NGO NGU	[2E26 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E07, 0x0062 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_220)
{
    // 0E42 0E07 0021;	
    // (โง) THAI CHARACTER SARA O, THAI CHARACTER NGO NGU	[2E26 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E07, 0x0021 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_221)
{
    // 0E42 0E07 003F;	
    // (โง) THAI CHARACTER SARA O, THAI CHARACTER NGO NGU	[2E26 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E07, 0x003F };
    uint32_t const ces[12] = { 0x2E26, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_222)
{
    // 0E42 0E07 0061;	
    // (โง) THAI CHARACTER SARA O, THAI CHARACTER NGO NGU	[2E26 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_223)
{
    // 0E42 0E07 0041;	
    // (โง) THAI CHARACTER SARA O, THAI CHARACTER NGO NGU	[2E26 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E07, 0x0041 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_224)
{
    // 0E42 0E07 0062;	
    // (โง) THAI CHARACTER SARA O, THAI CHARACTER NGO NGU	[2E26 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E07, 0x0062 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_225)
{
    // 0E43 0E07 0021;	
    // (ใง) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NGO NGU	[2E26 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E07, 0x0021 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_226)
{
    // 0E43 0E07 003F;	
    // (ใง) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NGO NGU	[2E26 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E07, 0x003F };
    uint32_t const ces[12] = { 0x2E26, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_227)
{
    // 0E43 0E07 0061;	
    // (ใง) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NGO NGU	[2E26 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_228)
{
    // 0E43 0E07 0041;	
    // (ใง) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NGO NGU	[2E26 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E07, 0x0041 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_229)
{
    // 0E43 0E07 0062;	
    // (ใง) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER NGO NGU	[2E26 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E07, 0x0062 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_230)
{
    // 0E44 0E07 0021;	
    // (ไง) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NGO NGU	[2E26 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E07, 0x0021 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_231)
{
    // 0E44 0E07 003F;	
    // (ไง) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NGO NGU	[2E26 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E07, 0x003F };
    uint32_t const ces[12] = { 0x2E26, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_232)
{
    // 0E44 0E07 0061;	
    // (ไง) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NGO NGU	[2E26 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_233)
{
    // 0E44 0E07 0041;	
    // (ไง) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NGO NGU	[2E26 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E07, 0x0041 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_234)
{
    // 0E44 0E07 0062;	
    // (ไง) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER NGO NGU	[2E26 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E07, 0x0062 };
    uint32_t const ces[12] = { 0x2E26, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_235)
{
    // 0E08 0021;	
    // (จ) THAI CHARACTER CHO CHAN	[2E27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E08, 0x0021 };
    uint32_t const ces[9] = { 0x2E27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_236)
{
    // 0E08 003F;	
    // (จ) THAI CHARACTER CHO CHAN	[2E27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E08, 0x003F };
    uint32_t const ces[9] = { 0x2E27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_237)
{
    // 0E08 0061;	
    // (จ) THAI CHARACTER CHO CHAN	[2E27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E08, 0x0061 };
    uint32_t const ces[9] = { 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_238)
{
    // 0E08 0041;	
    // (จ) THAI CHARACTER CHO CHAN	[2E27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E08, 0x0041 };
    uint32_t const ces[9] = { 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_239)
{
    // 0E08 0062;	
    // (จ) THAI CHARACTER CHO CHAN	[2E27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E08, 0x0062 };
    uint32_t const ces[9] = { 0x2E27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_240)
{
    // 0E40 0E08 0021;	
    // (เจ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHAN	[2E27 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E08, 0x0021 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_241)
{
    // 0E40 0E08 003F;	
    // (เจ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHAN	[2E27 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E08, 0x003F };
    uint32_t const ces[12] = { 0x2E27, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_242)
{
    // 0E40 0E08 0061;	
    // (เจ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHAN	[2E27 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_243)
{
    // 0E40 0E08 0041;	
    // (เจ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHAN	[2E27 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E08, 0x0041 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_244)
{
    // 0E40 0E08 0062;	
    // (เจ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHAN	[2E27 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E08, 0x0062 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_245)
{
    // 0E41 0E08 0021;	
    // (แจ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHAN	[2E27 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E08, 0x0021 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_246)
{
    // 0E41 0E08 003F;	
    // (แจ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHAN	[2E27 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E08, 0x003F };
    uint32_t const ces[12] = { 0x2E27, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_247)
{
    // 0E41 0E08 0061;	
    // (แจ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHAN	[2E27 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_248)
{
    // 0E41 0E08 0041;	
    // (แจ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHAN	[2E27 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E08, 0x0041 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_249)
{
    // 0E41 0E08 0062;	
    // (แจ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHAN	[2E27 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E08, 0x0062 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_250)
{
    // 0E42 0E08 0021;	
    // (โจ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHAN	[2E27 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E08, 0x0021 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_251)
{
    // 0E42 0E08 003F;	
    // (โจ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHAN	[2E27 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E08, 0x003F };
    uint32_t const ces[12] = { 0x2E27, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_252)
{
    // 0E42 0E08 0061;	
    // (โจ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHAN	[2E27 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_253)
{
    // 0E42 0E08 0041;	
    // (โจ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHAN	[2E27 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E08, 0x0041 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_254)
{
    // 0E42 0E08 0062;	
    // (โจ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHAN	[2E27 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E08, 0x0062 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_255)
{
    // 0E43 0E08 0021;	
    // (ใจ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHAN	[2E27 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E08, 0x0021 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_256)
{
    // 0E43 0E08 003F;	
    // (ใจ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHAN	[2E27 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E08, 0x003F };
    uint32_t const ces[12] = { 0x2E27, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_257)
{
    // 0E43 0E08 0061;	
    // (ใจ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHAN	[2E27 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_258)
{
    // 0E43 0E08 0041;	
    // (ใจ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHAN	[2E27 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E08, 0x0041 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_259)
{
    // 0E43 0E08 0062;	
    // (ใจ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHAN	[2E27 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E08, 0x0062 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_260)
{
    // 0E44 0E08 0021;	
    // (ไจ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHAN	[2E27 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E08, 0x0021 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_261)
{
    // 0E44 0E08 003F;	
    // (ไจ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHAN	[2E27 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E08, 0x003F };
    uint32_t const ces[12] = { 0x2E27, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_262)
{
    // 0E44 0E08 0061;	
    // (ไจ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHAN	[2E27 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_263)
{
    // 0E44 0E08 0041;	
    // (ไจ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHAN	[2E27 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E08, 0x0041 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_264)
{
    // 0E44 0E08 0062;	
    // (ไจ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHAN	[2E27 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E08, 0x0062 };
    uint32_t const ces[12] = { 0x2E27, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_265)
{
    // 0E09 0021;	
    // (ฉ) THAI CHARACTER CHO CHING	[2E28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E09, 0x0021 };
    uint32_t const ces[9] = { 0x2E28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_266)
{
    // 0E09 003F;	
    // (ฉ) THAI CHARACTER CHO CHING	[2E28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E09, 0x003F };
    uint32_t const ces[9] = { 0x2E28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_267)
{
    // 0E09 0061;	
    // (ฉ) THAI CHARACTER CHO CHING	[2E28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E09, 0x0061 };
    uint32_t const ces[9] = { 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_268)
{
    // 0E09 0041;	
    // (ฉ) THAI CHARACTER CHO CHING	[2E28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E09, 0x0041 };
    uint32_t const ces[9] = { 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_269)
{
    // 0E09 0062;	
    // (ฉ) THAI CHARACTER CHO CHING	[2E28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E09, 0x0062 };
    uint32_t const ces[9] = { 0x2E28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_270)
{
    // 0E40 0E09 0021;	
    // (เฉ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHING	[2E28 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E09, 0x0021 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_271)
{
    // 0E40 0E09 003F;	
    // (เฉ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHING	[2E28 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E09, 0x003F };
    uint32_t const ces[12] = { 0x2E28, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_272)
{
    // 0E40 0E09 0061;	
    // (เฉ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHING	[2E28 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_273)
{
    // 0E40 0E09 0041;	
    // (เฉ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHING	[2E28 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E09, 0x0041 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_274)
{
    // 0E40 0E09 0062;	
    // (เฉ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHING	[2E28 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E09, 0x0062 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_275)
{
    // 0E41 0E09 0021;	
    // (แฉ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHING	[2E28 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E09, 0x0021 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_276)
{
    // 0E41 0E09 003F;	
    // (แฉ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHING	[2E28 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E09, 0x003F };
    uint32_t const ces[12] = { 0x2E28, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_277)
{
    // 0E41 0E09 0061;	
    // (แฉ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHING	[2E28 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_278)
{
    // 0E41 0E09 0041;	
    // (แฉ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHING	[2E28 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E09, 0x0041 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_279)
{
    // 0E41 0E09 0062;	
    // (แฉ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHING	[2E28 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E09, 0x0062 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_280)
{
    // 0E42 0E09 0021;	
    // (โฉ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHING	[2E28 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E09, 0x0021 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_281)
{
    // 0E42 0E09 003F;	
    // (โฉ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHING	[2E28 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E09, 0x003F };
    uint32_t const ces[12] = { 0x2E28, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_282)
{
    // 0E42 0E09 0061;	
    // (โฉ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHING	[2E28 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_283)
{
    // 0E42 0E09 0041;	
    // (โฉ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHING	[2E28 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E09, 0x0041 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_284)
{
    // 0E42 0E09 0062;	
    // (โฉ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHING	[2E28 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E09, 0x0062 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_285)
{
    // 0E43 0E09 0021;	
    // (ใฉ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHING	[2E28 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E09, 0x0021 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_286)
{
    // 0E43 0E09 003F;	
    // (ใฉ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHING	[2E28 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E09, 0x003F };
    uint32_t const ces[12] = { 0x2E28, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_287)
{
    // 0E43 0E09 0061;	
    // (ใฉ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHING	[2E28 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_288)
{
    // 0E43 0E09 0041;	
    // (ใฉ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHING	[2E28 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E09, 0x0041 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_289)
{
    // 0E43 0E09 0062;	
    // (ใฉ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHING	[2E28 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E09, 0x0062 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_290)
{
    // 0E44 0E09 0021;	
    // (ไฉ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHING	[2E28 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E09, 0x0021 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_291)
{
    // 0E44 0E09 003F;	
    // (ไฉ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHING	[2E28 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E09, 0x003F };
    uint32_t const ces[12] = { 0x2E28, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_292)
{
    // 0E44 0E09 0061;	
    // (ไฉ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHING	[2E28 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_293)
{
    // 0E44 0E09 0041;	
    // (ไฉ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHING	[2E28 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E09, 0x0041 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_294)
{
    // 0E44 0E09 0062;	
    // (ไฉ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHING	[2E28 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E09, 0x0062 };
    uint32_t const ces[12] = { 0x2E28, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_295)
{
    // 0E0A 0021;	
    // (ช) THAI CHARACTER CHO CHANG	[2E29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0A, 0x0021 };
    uint32_t const ces[9] = { 0x2E29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_296)
{
    // 0E0A 003F;	
    // (ช) THAI CHARACTER CHO CHANG	[2E29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0A, 0x003F };
    uint32_t const ces[9] = { 0x2E29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_297)
{
    // 0E0A 0061;	
    // (ช) THAI CHARACTER CHO CHANG	[2E29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0A, 0x0061 };
    uint32_t const ces[9] = { 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_298)
{
    // 0E0A 0041;	
    // (ช) THAI CHARACTER CHO CHANG	[2E29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E0A, 0x0041 };
    uint32_t const ces[9] = { 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_299)
{
    // 0E0A 0062;	
    // (ช) THAI CHARACTER CHO CHANG	[2E29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0A, 0x0062 };
    uint32_t const ces[9] = { 0x2E29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_300)
{
    // 0E40 0E0A 0021;	
    // (เช) THAI CHARACTER SARA E, THAI CHARACTER CHO CHANG	[2E29 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0A, 0x0021 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_301)
{
    // 0E40 0E0A 003F;	
    // (เช) THAI CHARACTER SARA E, THAI CHARACTER CHO CHANG	[2E29 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0A, 0x003F };
    uint32_t const ces[12] = { 0x2E29, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_302)
{
    // 0E40 0E0A 0061;	
    // (เช) THAI CHARACTER SARA E, THAI CHARACTER CHO CHANG	[2E29 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_303)
{
    // 0E40 0E0A 0041;	
    // (เช) THAI CHARACTER SARA E, THAI CHARACTER CHO CHANG	[2E29 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0A, 0x0041 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_304)
{
    // 0E40 0E0A 0062;	
    // (เช) THAI CHARACTER SARA E, THAI CHARACTER CHO CHANG	[2E29 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0A, 0x0062 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_305)
{
    // 0E41 0E0A 0021;	
    // (แช) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHANG	[2E29 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0A, 0x0021 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_306)
{
    // 0E41 0E0A 003F;	
    // (แช) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHANG	[2E29 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0A, 0x003F };
    uint32_t const ces[12] = { 0x2E29, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_307)
{
    // 0E41 0E0A 0061;	
    // (แช) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHANG	[2E29 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_308)
{
    // 0E41 0E0A 0041;	
    // (แช) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHANG	[2E29 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0A, 0x0041 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_309)
{
    // 0E41 0E0A 0062;	
    // (แช) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHANG	[2E29 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0A, 0x0062 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_310)
{
    // 0E42 0E0A 0021;	
    // (โช) THAI CHARACTER SARA O, THAI CHARACTER CHO CHANG	[2E29 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0A, 0x0021 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_311)
{
    // 0E42 0E0A 003F;	
    // (โช) THAI CHARACTER SARA O, THAI CHARACTER CHO CHANG	[2E29 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0A, 0x003F };
    uint32_t const ces[12] = { 0x2E29, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_312)
{
    // 0E42 0E0A 0061;	
    // (โช) THAI CHARACTER SARA O, THAI CHARACTER CHO CHANG	[2E29 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_313)
{
    // 0E42 0E0A 0041;	
    // (โช) THAI CHARACTER SARA O, THAI CHARACTER CHO CHANG	[2E29 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0A, 0x0041 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_314)
{
    // 0E42 0E0A 0062;	
    // (โช) THAI CHARACTER SARA O, THAI CHARACTER CHO CHANG	[2E29 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0A, 0x0062 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_315)
{
    // 0E43 0E0A 0021;	
    // (ใช) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHANG	[2E29 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0A, 0x0021 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_316)
{
    // 0E43 0E0A 003F;	
    // (ใช) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHANG	[2E29 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0A, 0x003F };
    uint32_t const ces[12] = { 0x2E29, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_317)
{
    // 0E43 0E0A 0061;	
    // (ใช) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHANG	[2E29 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_318)
{
    // 0E43 0E0A 0041;	
    // (ใช) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHANG	[2E29 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0A, 0x0041 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_319)
{
    // 0E43 0E0A 0062;	
    // (ใช) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHANG	[2E29 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0A, 0x0062 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_320)
{
    // 0E44 0E0A 0021;	
    // (ไช) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHANG	[2E29 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0A, 0x0021 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_321)
{
    // 0E44 0E0A 003F;	
    // (ไช) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHANG	[2E29 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0A, 0x003F };
    uint32_t const ces[12] = { 0x2E29, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_322)
{
    // 0E44 0E0A 0061;	
    // (ไช) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHANG	[2E29 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_323)
{
    // 0E44 0E0A 0041;	
    // (ไช) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHANG	[2E29 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0A, 0x0041 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_324)
{
    // 0E44 0E0A 0062;	
    // (ไช) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHANG	[2E29 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0A, 0x0062 };
    uint32_t const ces[12] = { 0x2E29, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_325)
{
    // 0E0B 0021;	
    // (ซ) THAI CHARACTER SO SO	[2E2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0B, 0x0021 };
    uint32_t const ces[9] = { 0x2E2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_326)
{
    // 0E0B 003F;	
    // (ซ) THAI CHARACTER SO SO	[2E2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0B, 0x003F };
    uint32_t const ces[9] = { 0x2E2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_327)
{
    // 0E0B 0061;	
    // (ซ) THAI CHARACTER SO SO	[2E2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0B, 0x0061 };
    uint32_t const ces[9] = { 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_328)
{
    // 0E0B 0041;	
    // (ซ) THAI CHARACTER SO SO	[2E2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E0B, 0x0041 };
    uint32_t const ces[9] = { 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_329)
{
    // 0E0B 0062;	
    // (ซ) THAI CHARACTER SO SO	[2E2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0B, 0x0062 };
    uint32_t const ces[9] = { 0x2E2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_330)
{
    // 0E40 0E0B 0021;	
    // (เซ) THAI CHARACTER SARA E, THAI CHARACTER SO SO	[2E2A 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0B, 0x0021 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_331)
{
    // 0E40 0E0B 003F;	
    // (เซ) THAI CHARACTER SARA E, THAI CHARACTER SO SO	[2E2A 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0B, 0x003F };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_332)
{
    // 0E40 0E0B 0061;	
    // (เซ) THAI CHARACTER SARA E, THAI CHARACTER SO SO	[2E2A 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_333)
{
    // 0E40 0E0B 0041;	
    // (เซ) THAI CHARACTER SARA E, THAI CHARACTER SO SO	[2E2A 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0B, 0x0041 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_334)
{
    // 0E40 0E0B 0062;	
    // (เซ) THAI CHARACTER SARA E, THAI CHARACTER SO SO	[2E2A 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0B, 0x0062 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_335)
{
    // 0E41 0E0B 0021;	
    // (แซ) THAI CHARACTER SARA AE, THAI CHARACTER SO SO	[2E2A 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0B, 0x0021 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_336)
{
    // 0E41 0E0B 003F;	
    // (แซ) THAI CHARACTER SARA AE, THAI CHARACTER SO SO	[2E2A 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0B, 0x003F };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_337)
{
    // 0E41 0E0B 0061;	
    // (แซ) THAI CHARACTER SARA AE, THAI CHARACTER SO SO	[2E2A 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_338)
{
    // 0E41 0E0B 0041;	
    // (แซ) THAI CHARACTER SARA AE, THAI CHARACTER SO SO	[2E2A 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0B, 0x0041 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_339)
{
    // 0E41 0E0B 0062;	
    // (แซ) THAI CHARACTER SARA AE, THAI CHARACTER SO SO	[2E2A 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0B, 0x0062 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_340)
{
    // 0E42 0E0B 0021;	
    // (โซ) THAI CHARACTER SARA O, THAI CHARACTER SO SO	[2E2A 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0B, 0x0021 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_341)
{
    // 0E42 0E0B 003F;	
    // (โซ) THAI CHARACTER SARA O, THAI CHARACTER SO SO	[2E2A 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0B, 0x003F };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_342)
{
    // 0E42 0E0B 0061;	
    // (โซ) THAI CHARACTER SARA O, THAI CHARACTER SO SO	[2E2A 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_343)
{
    // 0E42 0E0B 0041;	
    // (โซ) THAI CHARACTER SARA O, THAI CHARACTER SO SO	[2E2A 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0B, 0x0041 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_344)
{
    // 0E42 0E0B 0062;	
    // (โซ) THAI CHARACTER SARA O, THAI CHARACTER SO SO	[2E2A 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0B, 0x0062 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_345)
{
    // 0E43 0E0B 0021;	
    // (ใซ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER SO SO	[2E2A 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0B, 0x0021 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_346)
{
    // 0E43 0E0B 003F;	
    // (ใซ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER SO SO	[2E2A 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0B, 0x003F };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_347)
{
    // 0E43 0E0B 0061;	
    // (ใซ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER SO SO	[2E2A 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_348)
{
    // 0E43 0E0B 0041;	
    // (ใซ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER SO SO	[2E2A 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0B, 0x0041 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_349)
{
    // 0E43 0E0B 0062;	
    // (ใซ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER SO SO	[2E2A 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0B, 0x0062 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_350)
{
    // 0E44 0E0B 0021;	
    // (ไซ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER SO SO	[2E2A 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0B, 0x0021 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_351)
{
    // 0E44 0E0B 003F;	
    // (ไซ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER SO SO	[2E2A 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0B, 0x003F };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_352)
{
    // 0E44 0E0B 0061;	
    // (ไซ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER SO SO	[2E2A 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_353)
{
    // 0E44 0E0B 0041;	
    // (ไซ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER SO SO	[2E2A 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0B, 0x0041 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_354)
{
    // 0E44 0E0B 0062;	
    // (ไซ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER SO SO	[2E2A 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0B, 0x0062 };
    uint32_t const ces[12] = { 0x2E2A, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_355)
{
    // 0E0C 0021;	
    // (ฌ) THAI CHARACTER CHO CHOE	[2E2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0C, 0x0021 };
    uint32_t const ces[9] = { 0x2E2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_356)
{
    // 0E0C 003F;	
    // (ฌ) THAI CHARACTER CHO CHOE	[2E2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0C, 0x003F };
    uint32_t const ces[9] = { 0x2E2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_357)
{
    // 0E0C 0061;	
    // (ฌ) THAI CHARACTER CHO CHOE	[2E2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0C, 0x0061 };
    uint32_t const ces[9] = { 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_358)
{
    // 0E0C 0041;	
    // (ฌ) THAI CHARACTER CHO CHOE	[2E2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E0C, 0x0041 };
    uint32_t const ces[9] = { 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_359)
{
    // 0E0C 0062;	
    // (ฌ) THAI CHARACTER CHO CHOE	[2E2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0C, 0x0062 };
    uint32_t const ces[9] = { 0x2E2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_360)
{
    // 0E40 0E0C 0021;	
    // (เฌ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHOE	[2E2B 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0C, 0x0021 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_361)
{
    // 0E40 0E0C 003F;	
    // (เฌ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHOE	[2E2B 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0C, 0x003F };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_362)
{
    // 0E40 0E0C 0061;	
    // (เฌ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHOE	[2E2B 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_363)
{
    // 0E40 0E0C 0041;	
    // (เฌ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHOE	[2E2B 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0C, 0x0041 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_364)
{
    // 0E40 0E0C 0062;	
    // (เฌ) THAI CHARACTER SARA E, THAI CHARACTER CHO CHOE	[2E2B 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0C, 0x0062 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_365)
{
    // 0E41 0E0C 0021;	
    // (แฌ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHOE	[2E2B 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0C, 0x0021 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_366)
{
    // 0E41 0E0C 003F;	
    // (แฌ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHOE	[2E2B 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0C, 0x003F };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_367)
{
    // 0E41 0E0C 0061;	
    // (แฌ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHOE	[2E2B 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_368)
{
    // 0E41 0E0C 0041;	
    // (แฌ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHOE	[2E2B 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0C, 0x0041 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_369)
{
    // 0E41 0E0C 0062;	
    // (แฌ) THAI CHARACTER SARA AE, THAI CHARACTER CHO CHOE	[2E2B 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0C, 0x0062 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_370)
{
    // 0E42 0E0C 0021;	
    // (โฌ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHOE	[2E2B 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0C, 0x0021 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_371)
{
    // 0E42 0E0C 003F;	
    // (โฌ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHOE	[2E2B 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0C, 0x003F };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_372)
{
    // 0E42 0E0C 0061;	
    // (โฌ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHOE	[2E2B 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_373)
{
    // 0E42 0E0C 0041;	
    // (โฌ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHOE	[2E2B 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0C, 0x0041 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_374)
{
    // 0E42 0E0C 0062;	
    // (โฌ) THAI CHARACTER SARA O, THAI CHARACTER CHO CHOE	[2E2B 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0C, 0x0062 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_375)
{
    // 0E43 0E0C 0021;	
    // (ใฌ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHOE	[2E2B 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0C, 0x0021 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_376)
{
    // 0E43 0E0C 003F;	
    // (ใฌ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHOE	[2E2B 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0C, 0x003F };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_377)
{
    // 0E43 0E0C 0061;	
    // (ใฌ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHOE	[2E2B 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_378)
{
    // 0E43 0E0C 0041;	
    // (ใฌ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHOE	[2E2B 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0C, 0x0041 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_379)
{
    // 0E43 0E0C 0062;	
    // (ใฌ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER CHO CHOE	[2E2B 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0C, 0x0062 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_380)
{
    // 0E44 0E0C 0021;	
    // (ไฌ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHOE	[2E2B 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0C, 0x0021 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_381)
{
    // 0E44 0E0C 003F;	
    // (ไฌ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHOE	[2E2B 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0C, 0x003F };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_382)
{
    // 0E44 0E0C 0061;	
    // (ไฌ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHOE	[2E2B 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_383)
{
    // 0E44 0E0C 0041;	
    // (ไฌ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHOE	[2E2B 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0C, 0x0041 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_384)
{
    // 0E44 0E0C 0062;	
    // (ไฌ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER CHO CHOE	[2E2B 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0C, 0x0062 };
    uint32_t const ces[12] = { 0x2E2B, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_385)
{
    // 0E0D 0021;	
    // (ญ) THAI CHARACTER YO YING	[2E2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0D, 0x0021 };
    uint32_t const ces[9] = { 0x2E2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_386)
{
    // 0E0D 003F;	
    // (ญ) THAI CHARACTER YO YING	[2E2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0D, 0x003F };
    uint32_t const ces[9] = { 0x2E2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_387)
{
    // 0E0D 0061;	
    // (ญ) THAI CHARACTER YO YING	[2E2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0D, 0x0061 };
    uint32_t const ces[9] = { 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_388)
{
    // 0E0D 0041;	
    // (ญ) THAI CHARACTER YO YING	[2E2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E0D, 0x0041 };
    uint32_t const ces[9] = { 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_389)
{
    // 0E0D 0062;	
    // (ญ) THAI CHARACTER YO YING	[2E2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0D, 0x0062 };
    uint32_t const ces[9] = { 0x2E2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_390)
{
    // 0E40 0E0D 0021;	
    // (เญ) THAI CHARACTER SARA E, THAI CHARACTER YO YING	[2E2C 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0D, 0x0021 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_391)
{
    // 0E40 0E0D 003F;	
    // (เญ) THAI CHARACTER SARA E, THAI CHARACTER YO YING	[2E2C 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0D, 0x003F };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_392)
{
    // 0E40 0E0D 0061;	
    // (เญ) THAI CHARACTER SARA E, THAI CHARACTER YO YING	[2E2C 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_393)
{
    // 0E40 0E0D 0041;	
    // (เญ) THAI CHARACTER SARA E, THAI CHARACTER YO YING	[2E2C 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0D, 0x0041 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_394)
{
    // 0E40 0E0D 0062;	
    // (เญ) THAI CHARACTER SARA E, THAI CHARACTER YO YING	[2E2C 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0D, 0x0062 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_395)
{
    // 0E41 0E0D 0021;	
    // (แญ) THAI CHARACTER SARA AE, THAI CHARACTER YO YING	[2E2C 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0D, 0x0021 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_396)
{
    // 0E41 0E0D 003F;	
    // (แญ) THAI CHARACTER SARA AE, THAI CHARACTER YO YING	[2E2C 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0D, 0x003F };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_397)
{
    // 0E41 0E0D 0061;	
    // (แญ) THAI CHARACTER SARA AE, THAI CHARACTER YO YING	[2E2C 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_398)
{
    // 0E41 0E0D 0041;	
    // (แญ) THAI CHARACTER SARA AE, THAI CHARACTER YO YING	[2E2C 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0D, 0x0041 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_399)
{
    // 0E41 0E0D 0062;	
    // (แญ) THAI CHARACTER SARA AE, THAI CHARACTER YO YING	[2E2C 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0D, 0x0062 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_400)
{
    // 0E42 0E0D 0021;	
    // (โญ) THAI CHARACTER SARA O, THAI CHARACTER YO YING	[2E2C 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0D, 0x0021 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_401)
{
    // 0E42 0E0D 003F;	
    // (โญ) THAI CHARACTER SARA O, THAI CHARACTER YO YING	[2E2C 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0D, 0x003F };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_402)
{
    // 0E42 0E0D 0061;	
    // (โญ) THAI CHARACTER SARA O, THAI CHARACTER YO YING	[2E2C 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_403)
{
    // 0E42 0E0D 0041;	
    // (โญ) THAI CHARACTER SARA O, THAI CHARACTER YO YING	[2E2C 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0D, 0x0041 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_404)
{
    // 0E42 0E0D 0062;	
    // (โญ) THAI CHARACTER SARA O, THAI CHARACTER YO YING	[2E2C 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0D, 0x0062 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_405)
{
    // 0E43 0E0D 0021;	
    // (ใญ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER YO YING	[2E2C 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0D, 0x0021 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_406)
{
    // 0E43 0E0D 003F;	
    // (ใญ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER YO YING	[2E2C 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0D, 0x003F };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_407)
{
    // 0E43 0E0D 0061;	
    // (ใญ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER YO YING	[2E2C 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_408)
{
    // 0E43 0E0D 0041;	
    // (ใญ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER YO YING	[2E2C 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0D, 0x0041 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_409)
{
    // 0E43 0E0D 0062;	
    // (ใญ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER YO YING	[2E2C 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0D, 0x0062 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_410)
{
    // 0E44 0E0D 0021;	
    // (ไญ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER YO YING	[2E2C 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0D, 0x0021 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_411)
{
    // 0E44 0E0D 003F;	
    // (ไญ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER YO YING	[2E2C 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0D, 0x003F };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_412)
{
    // 0E44 0E0D 0061;	
    // (ไญ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER YO YING	[2E2C 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_413)
{
    // 0E44 0E0D 0041;	
    // (ไญ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER YO YING	[2E2C 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0D, 0x0041 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_414)
{
    // 0E44 0E0D 0062;	
    // (ไญ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER YO YING	[2E2C 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0D, 0x0062 };
    uint32_t const ces[12] = { 0x2E2C, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_415)
{
    // 0E0E 0021;	
    // (ฎ) THAI CHARACTER DO CHADA	[2E2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0E, 0x0021 };
    uint32_t const ces[9] = { 0x2E2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_416)
{
    // 0E0E 003F;	
    // (ฎ) THAI CHARACTER DO CHADA	[2E2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0E, 0x003F };
    uint32_t const ces[9] = { 0x2E2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_417)
{
    // 0E0E 0061;	
    // (ฎ) THAI CHARACTER DO CHADA	[2E2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0E, 0x0061 };
    uint32_t const ces[9] = { 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_418)
{
    // 0E0E 0041;	
    // (ฎ) THAI CHARACTER DO CHADA	[2E2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E0E, 0x0041 };
    uint32_t const ces[9] = { 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_419)
{
    // 0E0E 0062;	
    // (ฎ) THAI CHARACTER DO CHADA	[2E2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0E, 0x0062 };
    uint32_t const ces[9] = { 0x2E2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_420)
{
    // 0E40 0E0E 0021;	
    // (เฎ) THAI CHARACTER SARA E, THAI CHARACTER DO CHADA	[2E2D 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0E, 0x0021 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_421)
{
    // 0E40 0E0E 003F;	
    // (เฎ) THAI CHARACTER SARA E, THAI CHARACTER DO CHADA	[2E2D 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0E, 0x003F };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_422)
{
    // 0E40 0E0E 0061;	
    // (เฎ) THAI CHARACTER SARA E, THAI CHARACTER DO CHADA	[2E2D 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_423)
{
    // 0E40 0E0E 0041;	
    // (เฎ) THAI CHARACTER SARA E, THAI CHARACTER DO CHADA	[2E2D 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0E, 0x0041 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_424)
{
    // 0E40 0E0E 0062;	
    // (เฎ) THAI CHARACTER SARA E, THAI CHARACTER DO CHADA	[2E2D 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0E, 0x0062 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_425)
{
    // 0E41 0E0E 0021;	
    // (แฎ) THAI CHARACTER SARA AE, THAI CHARACTER DO CHADA	[2E2D 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0E, 0x0021 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_426)
{
    // 0E41 0E0E 003F;	
    // (แฎ) THAI CHARACTER SARA AE, THAI CHARACTER DO CHADA	[2E2D 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0E, 0x003F };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_427)
{
    // 0E41 0E0E 0061;	
    // (แฎ) THAI CHARACTER SARA AE, THAI CHARACTER DO CHADA	[2E2D 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_428)
{
    // 0E41 0E0E 0041;	
    // (แฎ) THAI CHARACTER SARA AE, THAI CHARACTER DO CHADA	[2E2D 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0E, 0x0041 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_429)
{
    // 0E41 0E0E 0062;	
    // (แฎ) THAI CHARACTER SARA AE, THAI CHARACTER DO CHADA	[2E2D 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0E, 0x0062 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_430)
{
    // 0E42 0E0E 0021;	
    // (โฎ) THAI CHARACTER SARA O, THAI CHARACTER DO CHADA	[2E2D 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0E, 0x0021 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_431)
{
    // 0E42 0E0E 003F;	
    // (โฎ) THAI CHARACTER SARA O, THAI CHARACTER DO CHADA	[2E2D 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0E, 0x003F };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_432)
{
    // 0E42 0E0E 0061;	
    // (โฎ) THAI CHARACTER SARA O, THAI CHARACTER DO CHADA	[2E2D 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_433)
{
    // 0E42 0E0E 0041;	
    // (โฎ) THAI CHARACTER SARA O, THAI CHARACTER DO CHADA	[2E2D 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0E, 0x0041 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_434)
{
    // 0E42 0E0E 0062;	
    // (โฎ) THAI CHARACTER SARA O, THAI CHARACTER DO CHADA	[2E2D 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0E, 0x0062 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_435)
{
    // 0E43 0E0E 0021;	
    // (ใฎ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO CHADA	[2E2D 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0E, 0x0021 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_436)
{
    // 0E43 0E0E 003F;	
    // (ใฎ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO CHADA	[2E2D 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0E, 0x003F };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_437)
{
    // 0E43 0E0E 0061;	
    // (ใฎ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO CHADA	[2E2D 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_438)
{
    // 0E43 0E0E 0041;	
    // (ใฎ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO CHADA	[2E2D 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0E, 0x0041 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_439)
{
    // 0E43 0E0E 0062;	
    // (ใฎ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER DO CHADA	[2E2D 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0E, 0x0062 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_440)
{
    // 0E44 0E0E 0021;	
    // (ไฎ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO CHADA	[2E2D 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0E, 0x0021 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_441)
{
    // 0E44 0E0E 003F;	
    // (ไฎ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO CHADA	[2E2D 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0E, 0x003F };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_442)
{
    // 0E44 0E0E 0061;	
    // (ไฎ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO CHADA	[2E2D 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_443)
{
    // 0E44 0E0E 0041;	
    // (ไฎ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO CHADA	[2E2D 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0E, 0x0041 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_444)
{
    // 0E44 0E0E 0062;	
    // (ไฎ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER DO CHADA	[2E2D 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0E, 0x0062 };
    uint32_t const ces[12] = { 0x2E2D, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_445)
{
    // 0E0F 0021;	
    // (ฏ) THAI CHARACTER TO PATAK	[2E2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0F, 0x0021 };
    uint32_t const ces[9] = { 0x2E2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_446)
{
    // 0E0F 003F;	
    // (ฏ) THAI CHARACTER TO PATAK	[2E2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0F, 0x003F };
    uint32_t const ces[9] = { 0x2E2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_447)
{
    // 0E0F 0061;	
    // (ฏ) THAI CHARACTER TO PATAK	[2E2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0F, 0x0061 };
    uint32_t const ces[9] = { 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_448)
{
    // 0E0F 0041;	
    // (ฏ) THAI CHARACTER TO PATAK	[2E2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E0F, 0x0041 };
    uint32_t const ces[9] = { 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_449)
{
    // 0E0F 0062;	
    // (ฏ) THAI CHARACTER TO PATAK	[2E2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E0F, 0x0062 };
    uint32_t const ces[9] = { 0x2E2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_450)
{
    // 0E40 0E0F 0021;	
    // (เฏ) THAI CHARACTER SARA E, THAI CHARACTER TO PATAK	[2E2E 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0F, 0x0021 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_451)
{
    // 0E40 0E0F 003F;	
    // (เฏ) THAI CHARACTER SARA E, THAI CHARACTER TO PATAK	[2E2E 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0F, 0x003F };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_452)
{
    // 0E40 0E0F 0061;	
    // (เฏ) THAI CHARACTER SARA E, THAI CHARACTER TO PATAK	[2E2E 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_453)
{
    // 0E40 0E0F 0041;	
    // (เฏ) THAI CHARACTER SARA E, THAI CHARACTER TO PATAK	[2E2E 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0F, 0x0041 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_454)
{
    // 0E40 0E0F 0062;	
    // (เฏ) THAI CHARACTER SARA E, THAI CHARACTER TO PATAK	[2E2E 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E0F, 0x0062 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_455)
{
    // 0E41 0E0F 0021;	
    // (แฏ) THAI CHARACTER SARA AE, THAI CHARACTER TO PATAK	[2E2E 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0F, 0x0021 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_456)
{
    // 0E41 0E0F 003F;	
    // (แฏ) THAI CHARACTER SARA AE, THAI CHARACTER TO PATAK	[2E2E 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0F, 0x003F };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_457)
{
    // 0E41 0E0F 0061;	
    // (แฏ) THAI CHARACTER SARA AE, THAI CHARACTER TO PATAK	[2E2E 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_458)
{
    // 0E41 0E0F 0041;	
    // (แฏ) THAI CHARACTER SARA AE, THAI CHARACTER TO PATAK	[2E2E 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0F, 0x0041 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_459)
{
    // 0E41 0E0F 0062;	
    // (แฏ) THAI CHARACTER SARA AE, THAI CHARACTER TO PATAK	[2E2E 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E0F, 0x0062 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_460)
{
    // 0E42 0E0F 0021;	
    // (โฏ) THAI CHARACTER SARA O, THAI CHARACTER TO PATAK	[2E2E 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0F, 0x0021 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_461)
{
    // 0E42 0E0F 003F;	
    // (โฏ) THAI CHARACTER SARA O, THAI CHARACTER TO PATAK	[2E2E 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0F, 0x003F };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_462)
{
    // 0E42 0E0F 0061;	
    // (โฏ) THAI CHARACTER SARA O, THAI CHARACTER TO PATAK	[2E2E 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_463)
{
    // 0E42 0E0F 0041;	
    // (โฏ) THAI CHARACTER SARA O, THAI CHARACTER TO PATAK	[2E2E 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0F, 0x0041 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_464)
{
    // 0E42 0E0F 0062;	
    // (โฏ) THAI CHARACTER SARA O, THAI CHARACTER TO PATAK	[2E2E 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E0F, 0x0062 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_465)
{
    // 0E43 0E0F 0021;	
    // (ใฏ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO PATAK	[2E2E 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0F, 0x0021 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_466)
{
    // 0E43 0E0F 003F;	
    // (ใฏ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO PATAK	[2E2E 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0F, 0x003F };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_467)
{
    // 0E43 0E0F 0061;	
    // (ใฏ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO PATAK	[2E2E 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_468)
{
    // 0E43 0E0F 0041;	
    // (ใฏ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO PATAK	[2E2E 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0F, 0x0041 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_469)
{
    // 0E43 0E0F 0062;	
    // (ใฏ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER TO PATAK	[2E2E 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E0F, 0x0062 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_470)
{
    // 0E44 0E0F 0021;	
    // (ไฏ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO PATAK	[2E2E 2E5E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0F, 0x0021 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_471)
{
    // 0E44 0E0F 003F;	
    // (ไฏ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO PATAK	[2E2E 2E5E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0F, 0x003F };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_472)
{
    // 0E44 0E0F 0061;	
    // (ไฏ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO PATAK	[2E2E 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_473)
{
    // 0E44 0E0F 0041;	
    // (ไฏ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO PATAK	[2E2E 2E5E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0F, 0x0041 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_474)
{
    // 0E44 0E0F 0062;	
    // (ไฏ) THAI CHARACTER SARA AI MAIMALAI, THAI CHARACTER TO PATAK	[2E2E 2E5E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E44, 0x0E0F, 0x0062 };
    uint32_t const ces[12] = { 0x2E2E, 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_475)
{
    // 0E10 0021;	
    // (ฐ) THAI CHARACTER THO THAN	[2E2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E10, 0x0021 };
    uint32_t const ces[9] = { 0x2E2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_476)
{
    // 0E10 003F;	
    // (ฐ) THAI CHARACTER THO THAN	[2E2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E10, 0x003F };
    uint32_t const ces[9] = { 0x2E2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_477)
{
    // 0E10 0061;	
    // (ฐ) THAI CHARACTER THO THAN	[2E2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E10, 0x0061 };
    uint32_t const ces[9] = { 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_478)
{
    // 0E10 0041;	
    // (ฐ) THAI CHARACTER THO THAN	[2E2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E10, 0x0041 };
    uint32_t const ces[9] = { 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_479)
{
    // 0E10 0062;	
    // (ฐ) THAI CHARACTER THO THAN	[2E2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E10, 0x0062 };
    uint32_t const ces[9] = { 0x2E2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_480)
{
    // 0E40 0E10 0021;	
    // (เฐ) THAI CHARACTER SARA E, THAI CHARACTER THO THAN	[2E2F 2E5A 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E10, 0x0021 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_481)
{
    // 0E40 0E10 003F;	
    // (เฐ) THAI CHARACTER SARA E, THAI CHARACTER THO THAN	[2E2F 2E5A 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E10, 0x003F };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_482)
{
    // 0E40 0E10 0061;	
    // (เฐ) THAI CHARACTER SARA E, THAI CHARACTER THO THAN	[2E2F 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_483)
{
    // 0E40 0E10 0041;	
    // (เฐ) THAI CHARACTER SARA E, THAI CHARACTER THO THAN	[2E2F 2E5A 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E40, 0x0E10, 0x0041 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_484)
{
    // 0E40 0E10 0062;	
    // (เฐ) THAI CHARACTER SARA E, THAI CHARACTER THO THAN	[2E2F 2E5A 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E40, 0x0E10, 0x0062 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_485)
{
    // 0E41 0E10 0021;	
    // (แฐ) THAI CHARACTER SARA AE, THAI CHARACTER THO THAN	[2E2F 2E5B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E10, 0x0021 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_486)
{
    // 0E41 0E10 003F;	
    // (แฐ) THAI CHARACTER SARA AE, THAI CHARACTER THO THAN	[2E2F 2E5B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E10, 0x003F };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_487)
{
    // 0E41 0E10 0061;	
    // (แฐ) THAI CHARACTER SARA AE, THAI CHARACTER THO THAN	[2E2F 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_488)
{
    // 0E41 0E10 0041;	
    // (แฐ) THAI CHARACTER SARA AE, THAI CHARACTER THO THAN	[2E2F 2E5B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E41, 0x0E10, 0x0041 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_489)
{
    // 0E41 0E10 0062;	
    // (แฐ) THAI CHARACTER SARA AE, THAI CHARACTER THO THAN	[2E2F 2E5B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E41, 0x0E10, 0x0062 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_490)
{
    // 0E42 0E10 0021;	
    // (โฐ) THAI CHARACTER SARA O, THAI CHARACTER THO THAN	[2E2F 2E5C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E10, 0x0021 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_491)
{
    // 0E42 0E10 003F;	
    // (โฐ) THAI CHARACTER SARA O, THAI CHARACTER THO THAN	[2E2F 2E5C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E10, 0x003F };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_492)
{
    // 0E42 0E10 0061;	
    // (โฐ) THAI CHARACTER SARA O, THAI CHARACTER THO THAN	[2E2F 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_493)
{
    // 0E42 0E10 0041;	
    // (โฐ) THAI CHARACTER SARA O, THAI CHARACTER THO THAN	[2E2F 2E5C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E42, 0x0E10, 0x0041 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_494)
{
    // 0E42 0E10 0062;	
    // (โฐ) THAI CHARACTER SARA O, THAI CHARACTER THO THAN	[2E2F 2E5C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E42, 0x0E10, 0x0062 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_495)
{
    // 0E43 0E10 0021;	
    // (ใฐ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAN	[2E2F 2E5D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E10, 0x0021 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_496)
{
    // 0E43 0E10 003F;	
    // (ใฐ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAN	[2E2F 2E5D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E10, 0x003F };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_497)
{
    // 0E43 0E10 0061;	
    // (ใฐ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAN	[2E2F 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_498)
{
    // 0E43 0E10 0041;	
    // (ใฐ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAN	[2E2F 2E5D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0E43, 0x0E10, 0x0041 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_185_499)
{
    // 0E43 0E10 0062;	
    // (ใฐ) THAI CHARACTER SARA AI MAIMUAN, THAI CHARACTER THO THAN	[2E2F 2E5D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0E43, 0x0E10, 0x0062 };
    uint32_t const ces[12] = { 0x2E2F, 0x2E5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

