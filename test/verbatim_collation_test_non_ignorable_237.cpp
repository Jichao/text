// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_237_000)
{
    // 16A06 0041;	
    // (𖨆) BAMUM LETTER PHASE-F EE	[3BD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A06, 0x0041 };
    uint32_t const ces[9] = { 0x3BD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_001)
{
    // 16A06 0062;	
    // (𖨆) BAMUM LETTER PHASE-F EE	[3BD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A06, 0x0062 };
    uint32_t const ces[9] = { 0x3BD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_002)
{
    // 16A07 0021;	
    // (𖨇) BAMUM LETTER PHASE-F REE	[3BD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A07, 0x0021 };
    uint32_t const ces[9] = { 0x3BD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_003)
{
    // 16A07 003F;	
    // (𖨇) BAMUM LETTER PHASE-F REE	[3BD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A07, 0x003F };
    uint32_t const ces[9] = { 0x3BD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_004)
{
    // 16A07 0061;	
    // (𖨇) BAMUM LETTER PHASE-F REE	[3BD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A07, 0x0061 };
    uint32_t const ces[9] = { 0x3BD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_005)
{
    // 16A07 0041;	
    // (𖨇) BAMUM LETTER PHASE-F REE	[3BD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A07, 0x0041 };
    uint32_t const ces[9] = { 0x3BD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_006)
{
    // 16A07 0062;	
    // (𖨇) BAMUM LETTER PHASE-F REE	[3BD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A07, 0x0062 };
    uint32_t const ces[9] = { 0x3BD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_007)
{
    // 16A08 0021;	
    // (𖨈) BAMUM LETTER PHASE-F TAE	[3BD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A08, 0x0021 };
    uint32_t const ces[9] = { 0x3BD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_008)
{
    // 16A08 003F;	
    // (𖨈) BAMUM LETTER PHASE-F TAE	[3BD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A08, 0x003F };
    uint32_t const ces[9] = { 0x3BD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_009)
{
    // 16A08 0061;	
    // (𖨈) BAMUM LETTER PHASE-F TAE	[3BD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A08, 0x0061 };
    uint32_t const ces[9] = { 0x3BD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_010)
{
    // 16A08 0041;	
    // (𖨈) BAMUM LETTER PHASE-F TAE	[3BD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A08, 0x0041 };
    uint32_t const ces[9] = { 0x3BD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_011)
{
    // 16A08 0062;	
    // (𖨈) BAMUM LETTER PHASE-F TAE	[3BD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A08, 0x0062 };
    uint32_t const ces[9] = { 0x3BD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_012)
{
    // 16A09 0021;	
    // (𖨉) BAMUM LETTER PHASE-F NYI	[3BD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A09, 0x0021 };
    uint32_t const ces[9] = { 0x3BD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_013)
{
    // 16A09 003F;	
    // (𖨉) BAMUM LETTER PHASE-F NYI	[3BD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A09, 0x003F };
    uint32_t const ces[9] = { 0x3BD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_014)
{
    // 16A09 0061;	
    // (𖨉) BAMUM LETTER PHASE-F NYI	[3BD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A09, 0x0061 };
    uint32_t const ces[9] = { 0x3BD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_015)
{
    // 16A09 0041;	
    // (𖨉) BAMUM LETTER PHASE-F NYI	[3BD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A09, 0x0041 };
    uint32_t const ces[9] = { 0x3BD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_016)
{
    // 16A09 0062;	
    // (𖨉) BAMUM LETTER PHASE-F NYI	[3BD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A09, 0x0062 };
    uint32_t const ces[9] = { 0x3BD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_017)
{
    // 16A0A 0021;	
    // (𖨊) BAMUM LETTER PHASE-F LA	[3BD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0A, 0x0021 };
    uint32_t const ces[9] = { 0x3BD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_018)
{
    // 16A0A 003F;	
    // (𖨊) BAMUM LETTER PHASE-F LA	[3BD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0A, 0x003F };
    uint32_t const ces[9] = { 0x3BD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_019)
{
    // 16A0A 0061;	
    // (𖨊) BAMUM LETTER PHASE-F LA	[3BD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0A, 0x0061 };
    uint32_t const ces[9] = { 0x3BD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_020)
{
    // 16A0A 0041;	
    // (𖨊) BAMUM LETTER PHASE-F LA	[3BD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A0A, 0x0041 };
    uint32_t const ces[9] = { 0x3BD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_021)
{
    // 16A0A 0062;	
    // (𖨊) BAMUM LETTER PHASE-F LA	[3BD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0A, 0x0062 };
    uint32_t const ces[9] = { 0x3BD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_022)
{
    // 16A0B 0021;	
    // (𖨋) BAMUM LETTER PHASE-F RII	[3BD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0B, 0x0021 };
    uint32_t const ces[9] = { 0x3BD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_023)
{
    // 16A0B 003F;	
    // (𖨋) BAMUM LETTER PHASE-F RII	[3BD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0B, 0x003F };
    uint32_t const ces[9] = { 0x3BD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_024)
{
    // 16A0B 0061;	
    // (𖨋) BAMUM LETTER PHASE-F RII	[3BD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0B, 0x0061 };
    uint32_t const ces[9] = { 0x3BD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_025)
{
    // 16A0B 0041;	
    // (𖨋) BAMUM LETTER PHASE-F RII	[3BD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A0B, 0x0041 };
    uint32_t const ces[9] = { 0x3BD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_026)
{
    // 16A0B 0062;	
    // (𖨋) BAMUM LETTER PHASE-F RII	[3BD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0B, 0x0062 };
    uint32_t const ces[9] = { 0x3BD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_027)
{
    // 16A0C 0021;	
    // (𖨌) BAMUM LETTER PHASE-F RIEE	[3BDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0C, 0x0021 };
    uint32_t const ces[9] = { 0x3BDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_028)
{
    // 16A0C 003F;	
    // (𖨌) BAMUM LETTER PHASE-F RIEE	[3BDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0C, 0x003F };
    uint32_t const ces[9] = { 0x3BDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_029)
{
    // 16A0C 0061;	
    // (𖨌) BAMUM LETTER PHASE-F RIEE	[3BDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0C, 0x0061 };
    uint32_t const ces[9] = { 0x3BDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_030)
{
    // 16A0C 0041;	
    // (𖨌) BAMUM LETTER PHASE-F RIEE	[3BDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A0C, 0x0041 };
    uint32_t const ces[9] = { 0x3BDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_031)
{
    // 16A0C 0062;	
    // (𖨌) BAMUM LETTER PHASE-F RIEE	[3BDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0C, 0x0062 };
    uint32_t const ces[9] = { 0x3BDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_032)
{
    // 16A0D 0021;	
    // (𖨍) BAMUM LETTER PHASE-F MEEEE	[3BDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0D, 0x0021 };
    uint32_t const ces[9] = { 0x3BDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_033)
{
    // 16A0D 003F;	
    // (𖨍) BAMUM LETTER PHASE-F MEEEE	[3BDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0D, 0x003F };
    uint32_t const ces[9] = { 0x3BDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_034)
{
    // 16A0D 0061;	
    // (𖨍) BAMUM LETTER PHASE-F MEEEE	[3BDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0D, 0x0061 };
    uint32_t const ces[9] = { 0x3BDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_035)
{
    // 16A0D 0041;	
    // (𖨍) BAMUM LETTER PHASE-F MEEEE	[3BDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A0D, 0x0041 };
    uint32_t const ces[9] = { 0x3BDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_036)
{
    // 16A0D 0062;	
    // (𖨍) BAMUM LETTER PHASE-F MEEEE	[3BDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0D, 0x0062 };
    uint32_t const ces[9] = { 0x3BDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_037)
{
    // 16A0E 0021;	
    // (𖨎) BAMUM LETTER PHASE-F TAA	[3BDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0E, 0x0021 };
    uint32_t const ces[9] = { 0x3BDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_038)
{
    // 16A0E 003F;	
    // (𖨎) BAMUM LETTER PHASE-F TAA	[3BDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0E, 0x003F };
    uint32_t const ces[9] = { 0x3BDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_039)
{
    // 16A0E 0061;	
    // (𖨎) BAMUM LETTER PHASE-F TAA	[3BDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0E, 0x0061 };
    uint32_t const ces[9] = { 0x3BDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_040)
{
    // 16A0E 0041;	
    // (𖨎) BAMUM LETTER PHASE-F TAA	[3BDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A0E, 0x0041 };
    uint32_t const ces[9] = { 0x3BDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_041)
{
    // 16A0E 0062;	
    // (𖨎) BAMUM LETTER PHASE-F TAA	[3BDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0E, 0x0062 };
    uint32_t const ces[9] = { 0x3BDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_042)
{
    // 16A0F 0021;	
    // (𖨏) BAMUM LETTER PHASE-F NDAA	[3BDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0F, 0x0021 };
    uint32_t const ces[9] = { 0x3BDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_043)
{
    // 16A0F 003F;	
    // (𖨏) BAMUM LETTER PHASE-F NDAA	[3BDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0F, 0x003F };
    uint32_t const ces[9] = { 0x3BDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_044)
{
    // 16A0F 0061;	
    // (𖨏) BAMUM LETTER PHASE-F NDAA	[3BDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0F, 0x0061 };
    uint32_t const ces[9] = { 0x3BDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_045)
{
    // 16A0F 0041;	
    // (𖨏) BAMUM LETTER PHASE-F NDAA	[3BDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A0F, 0x0041 };
    uint32_t const ces[9] = { 0x3BDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_046)
{
    // 16A0F 0062;	
    // (𖨏) BAMUM LETTER PHASE-F NDAA	[3BDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A0F, 0x0062 };
    uint32_t const ces[9] = { 0x3BDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_047)
{
    // 16A10 0021;	
    // (𖨐) BAMUM LETTER PHASE-F NJAEM	[3BDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A10, 0x0021 };
    uint32_t const ces[9] = { 0x3BDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_048)
{
    // 16A10 003F;	
    // (𖨐) BAMUM LETTER PHASE-F NJAEM	[3BDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A10, 0x003F };
    uint32_t const ces[9] = { 0x3BDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_049)
{
    // 16A10 0061;	
    // (𖨐) BAMUM LETTER PHASE-F NJAEM	[3BDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A10, 0x0061 };
    uint32_t const ces[9] = { 0x3BDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_050)
{
    // 16A10 0041;	
    // (𖨐) BAMUM LETTER PHASE-F NJAEM	[3BDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A10, 0x0041 };
    uint32_t const ces[9] = { 0x3BDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_051)
{
    // 16A10 0062;	
    // (𖨐) BAMUM LETTER PHASE-F NJAEM	[3BDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A10, 0x0062 };
    uint32_t const ces[9] = { 0x3BDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_052)
{
    // 16A11 0021;	
    // (𖨑) BAMUM LETTER PHASE-F M	[3BDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A11, 0x0021 };
    uint32_t const ces[9] = { 0x3BDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_053)
{
    // 16A11 003F;	
    // (𖨑) BAMUM LETTER PHASE-F M	[3BDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A11, 0x003F };
    uint32_t const ces[9] = { 0x3BDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_054)
{
    // 16A11 0061;	
    // (𖨑) BAMUM LETTER PHASE-F M	[3BDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A11, 0x0061 };
    uint32_t const ces[9] = { 0x3BDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_055)
{
    // 16A11 0041;	
    // (𖨑) BAMUM LETTER PHASE-F M	[3BDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A11, 0x0041 };
    uint32_t const ces[9] = { 0x3BDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_056)
{
    // 16A11 0062;	
    // (𖨑) BAMUM LETTER PHASE-F M	[3BDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A11, 0x0062 };
    uint32_t const ces[9] = { 0x3BDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_057)
{
    // 16A12 0021;	
    // (𖨒) BAMUM LETTER PHASE-F SUU	[3BE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A12, 0x0021 };
    uint32_t const ces[9] = { 0x3BE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_058)
{
    // 16A12 003F;	
    // (𖨒) BAMUM LETTER PHASE-F SUU	[3BE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A12, 0x003F };
    uint32_t const ces[9] = { 0x3BE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_059)
{
    // 16A12 0061;	
    // (𖨒) BAMUM LETTER PHASE-F SUU	[3BE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A12, 0x0061 };
    uint32_t const ces[9] = { 0x3BE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_060)
{
    // 16A12 0041;	
    // (𖨒) BAMUM LETTER PHASE-F SUU	[3BE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A12, 0x0041 };
    uint32_t const ces[9] = { 0x3BE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_061)
{
    // 16A12 0062;	
    // (𖨒) BAMUM LETTER PHASE-F SUU	[3BE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A12, 0x0062 };
    uint32_t const ces[9] = { 0x3BE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_062)
{
    // 16A13 0021;	
    // (𖨓) BAMUM LETTER PHASE-F SHII	[3BE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A13, 0x0021 };
    uint32_t const ces[9] = { 0x3BE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_063)
{
    // 16A13 003F;	
    // (𖨓) BAMUM LETTER PHASE-F SHII	[3BE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A13, 0x003F };
    uint32_t const ces[9] = { 0x3BE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_064)
{
    // 16A13 0061;	
    // (𖨓) BAMUM LETTER PHASE-F SHII	[3BE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A13, 0x0061 };
    uint32_t const ces[9] = { 0x3BE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_065)
{
    // 16A13 0041;	
    // (𖨓) BAMUM LETTER PHASE-F SHII	[3BE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A13, 0x0041 };
    uint32_t const ces[9] = { 0x3BE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_066)
{
    // 16A13 0062;	
    // (𖨓) BAMUM LETTER PHASE-F SHII	[3BE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A13, 0x0062 };
    uint32_t const ces[9] = { 0x3BE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_067)
{
    // 16A14 0021;	
    // (𖨔) BAMUM LETTER PHASE-F SI	[3BE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A14, 0x0021 };
    uint32_t const ces[9] = { 0x3BE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_068)
{
    // 16A14 003F;	
    // (𖨔) BAMUM LETTER PHASE-F SI	[3BE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A14, 0x003F };
    uint32_t const ces[9] = { 0x3BE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_069)
{
    // 16A14 0061;	
    // (𖨔) BAMUM LETTER PHASE-F SI	[3BE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A14, 0x0061 };
    uint32_t const ces[9] = { 0x3BE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_070)
{
    // 16A14 0041;	
    // (𖨔) BAMUM LETTER PHASE-F SI	[3BE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A14, 0x0041 };
    uint32_t const ces[9] = { 0x3BE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_071)
{
    // 16A14 0062;	
    // (𖨔) BAMUM LETTER PHASE-F SI	[3BE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A14, 0x0062 };
    uint32_t const ces[9] = { 0x3BE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_072)
{
    // 16A15 0021;	
    // (𖨕) BAMUM LETTER PHASE-F SEUX	[3BE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A15, 0x0021 };
    uint32_t const ces[9] = { 0x3BE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_073)
{
    // 16A15 003F;	
    // (𖨕) BAMUM LETTER PHASE-F SEUX	[3BE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A15, 0x003F };
    uint32_t const ces[9] = { 0x3BE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_074)
{
    // 16A15 0061;	
    // (𖨕) BAMUM LETTER PHASE-F SEUX	[3BE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A15, 0x0061 };
    uint32_t const ces[9] = { 0x3BE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_075)
{
    // 16A15 0041;	
    // (𖨕) BAMUM LETTER PHASE-F SEUX	[3BE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A15, 0x0041 };
    uint32_t const ces[9] = { 0x3BE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_076)
{
    // 16A15 0062;	
    // (𖨕) BAMUM LETTER PHASE-F SEUX	[3BE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A15, 0x0062 };
    uint32_t const ces[9] = { 0x3BE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_077)
{
    // 16A16 0021;	
    // (𖨖) BAMUM LETTER PHASE-F KYEE	[3BE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A16, 0x0021 };
    uint32_t const ces[9] = { 0x3BE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_078)
{
    // 16A16 003F;	
    // (𖨖) BAMUM LETTER PHASE-F KYEE	[3BE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A16, 0x003F };
    uint32_t const ces[9] = { 0x3BE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_079)
{
    // 16A16 0061;	
    // (𖨖) BAMUM LETTER PHASE-F KYEE	[3BE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A16, 0x0061 };
    uint32_t const ces[9] = { 0x3BE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_080)
{
    // 16A16 0041;	
    // (𖨖) BAMUM LETTER PHASE-F KYEE	[3BE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A16, 0x0041 };
    uint32_t const ces[9] = { 0x3BE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_081)
{
    // 16A16 0062;	
    // (𖨖) BAMUM LETTER PHASE-F KYEE	[3BE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A16, 0x0062 };
    uint32_t const ces[9] = { 0x3BE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_082)
{
    // 16A17 0021;	
    // (𖨗) BAMUM LETTER PHASE-F KET	[3BE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A17, 0x0021 };
    uint32_t const ces[9] = { 0x3BE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_083)
{
    // 16A17 003F;	
    // (𖨗) BAMUM LETTER PHASE-F KET	[3BE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A17, 0x003F };
    uint32_t const ces[9] = { 0x3BE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_084)
{
    // 16A17 0061;	
    // (𖨗) BAMUM LETTER PHASE-F KET	[3BE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A17, 0x0061 };
    uint32_t const ces[9] = { 0x3BE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_085)
{
    // 16A17 0041;	
    // (𖨗) BAMUM LETTER PHASE-F KET	[3BE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A17, 0x0041 };
    uint32_t const ces[9] = { 0x3BE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_086)
{
    // 16A17 0062;	
    // (𖨗) BAMUM LETTER PHASE-F KET	[3BE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A17, 0x0062 };
    uint32_t const ces[9] = { 0x3BE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_087)
{
    // 16A18 0021;	
    // (𖨘) BAMUM LETTER PHASE-F NUAE	[3BE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A18, 0x0021 };
    uint32_t const ces[9] = { 0x3BE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_088)
{
    // 16A18 003F;	
    // (𖨘) BAMUM LETTER PHASE-F NUAE	[3BE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A18, 0x003F };
    uint32_t const ces[9] = { 0x3BE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_089)
{
    // 16A18 0061;	
    // (𖨘) BAMUM LETTER PHASE-F NUAE	[3BE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A18, 0x0061 };
    uint32_t const ces[9] = { 0x3BE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_090)
{
    // 16A18 0041;	
    // (𖨘) BAMUM LETTER PHASE-F NUAE	[3BE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A18, 0x0041 };
    uint32_t const ces[9] = { 0x3BE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_091)
{
    // 16A18 0062;	
    // (𖨘) BAMUM LETTER PHASE-F NUAE	[3BE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A18, 0x0062 };
    uint32_t const ces[9] = { 0x3BE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_092)
{
    // 16A19 0021;	
    // (𖨙) BAMUM LETTER PHASE-F NU	[3BE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A19, 0x0021 };
    uint32_t const ces[9] = { 0x3BE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_093)
{
    // 16A19 003F;	
    // (𖨙) BAMUM LETTER PHASE-F NU	[3BE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A19, 0x003F };
    uint32_t const ces[9] = { 0x3BE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_094)
{
    // 16A19 0061;	
    // (𖨙) BAMUM LETTER PHASE-F NU	[3BE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A19, 0x0061 };
    uint32_t const ces[9] = { 0x3BE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_095)
{
    // 16A19 0041;	
    // (𖨙) BAMUM LETTER PHASE-F NU	[3BE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A19, 0x0041 };
    uint32_t const ces[9] = { 0x3BE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_096)
{
    // 16A19 0062;	
    // (𖨙) BAMUM LETTER PHASE-F NU	[3BE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A19, 0x0062 };
    uint32_t const ces[9] = { 0x3BE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_097)
{
    // 16A1A 0021;	
    // (𖨚) BAMUM LETTER PHASE-F NJUAE	[3BE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1A, 0x0021 };
    uint32_t const ces[9] = { 0x3BE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_098)
{
    // 16A1A 003F;	
    // (𖨚) BAMUM LETTER PHASE-F NJUAE	[3BE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1A, 0x003F };
    uint32_t const ces[9] = { 0x3BE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_099)
{
    // 16A1A 0061;	
    // (𖨚) BAMUM LETTER PHASE-F NJUAE	[3BE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1A, 0x0061 };
    uint32_t const ces[9] = { 0x3BE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_100)
{
    // 16A1A 0041;	
    // (𖨚) BAMUM LETTER PHASE-F NJUAE	[3BE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A1A, 0x0041 };
    uint32_t const ces[9] = { 0x3BE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_101)
{
    // 16A1A 0062;	
    // (𖨚) BAMUM LETTER PHASE-F NJUAE	[3BE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1A, 0x0062 };
    uint32_t const ces[9] = { 0x3BE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_102)
{
    // 16A1B 0021;	
    // (𖨛) BAMUM LETTER PHASE-F YOQ	[3BE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1B, 0x0021 };
    uint32_t const ces[9] = { 0x3BE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_103)
{
    // 16A1B 003F;	
    // (𖨛) BAMUM LETTER PHASE-F YOQ	[3BE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1B, 0x003F };
    uint32_t const ces[9] = { 0x3BE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_104)
{
    // 16A1B 0061;	
    // (𖨛) BAMUM LETTER PHASE-F YOQ	[3BE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1B, 0x0061 };
    uint32_t const ces[9] = { 0x3BE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_105)
{
    // 16A1B 0041;	
    // (𖨛) BAMUM LETTER PHASE-F YOQ	[3BE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A1B, 0x0041 };
    uint32_t const ces[9] = { 0x3BE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_106)
{
    // 16A1B 0062;	
    // (𖨛) BAMUM LETTER PHASE-F YOQ	[3BE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1B, 0x0062 };
    uint32_t const ces[9] = { 0x3BE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_107)
{
    // 16A1C 0021;	
    // (𖨜) BAMUM LETTER PHASE-F SHU	[3BEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1C, 0x0021 };
    uint32_t const ces[9] = { 0x3BEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_108)
{
    // 16A1C 003F;	
    // (𖨜) BAMUM LETTER PHASE-F SHU	[3BEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1C, 0x003F };
    uint32_t const ces[9] = { 0x3BEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_109)
{
    // 16A1C 0061;	
    // (𖨜) BAMUM LETTER PHASE-F SHU	[3BEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1C, 0x0061 };
    uint32_t const ces[9] = { 0x3BEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_110)
{
    // 16A1C 0041;	
    // (𖨜) BAMUM LETTER PHASE-F SHU	[3BEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A1C, 0x0041 };
    uint32_t const ces[9] = { 0x3BEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_111)
{
    // 16A1C 0062;	
    // (𖨜) BAMUM LETTER PHASE-F SHU	[3BEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1C, 0x0062 };
    uint32_t const ces[9] = { 0x3BEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_112)
{
    // 16A1D 0021;	
    // (𖨝) BAMUM LETTER PHASE-F YA	[3BEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1D, 0x0021 };
    uint32_t const ces[9] = { 0x3BEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_113)
{
    // 16A1D 003F;	
    // (𖨝) BAMUM LETTER PHASE-F YA	[3BEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1D, 0x003F };
    uint32_t const ces[9] = { 0x3BEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_114)
{
    // 16A1D 0061;	
    // (𖨝) BAMUM LETTER PHASE-F YA	[3BEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1D, 0x0061 };
    uint32_t const ces[9] = { 0x3BEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_115)
{
    // 16A1D 0041;	
    // (𖨝) BAMUM LETTER PHASE-F YA	[3BEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A1D, 0x0041 };
    uint32_t const ces[9] = { 0x3BEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_116)
{
    // 16A1D 0062;	
    // (𖨝) BAMUM LETTER PHASE-F YA	[3BEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1D, 0x0062 };
    uint32_t const ces[9] = { 0x3BEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_117)
{
    // 16A1E 0021;	
    // (𖨞) BAMUM LETTER PHASE-F NSHA	[3BEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1E, 0x0021 };
    uint32_t const ces[9] = { 0x3BEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_118)
{
    // 16A1E 003F;	
    // (𖨞) BAMUM LETTER PHASE-F NSHA	[3BEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1E, 0x003F };
    uint32_t const ces[9] = { 0x3BEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_119)
{
    // 16A1E 0061;	
    // (𖨞) BAMUM LETTER PHASE-F NSHA	[3BEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1E, 0x0061 };
    uint32_t const ces[9] = { 0x3BEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_120)
{
    // 16A1E 0041;	
    // (𖨞) BAMUM LETTER PHASE-F NSHA	[3BEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A1E, 0x0041 };
    uint32_t const ces[9] = { 0x3BEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_121)
{
    // 16A1E 0062;	
    // (𖨞) BAMUM LETTER PHASE-F NSHA	[3BEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1E, 0x0062 };
    uint32_t const ces[9] = { 0x3BEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_122)
{
    // 16A1F 0021;	
    // (𖨟) BAMUM LETTER PHASE-F PEUX	[3BED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1F, 0x0021 };
    uint32_t const ces[9] = { 0x3BED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_123)
{
    // 16A1F 003F;	
    // (𖨟) BAMUM LETTER PHASE-F PEUX	[3BED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1F, 0x003F };
    uint32_t const ces[9] = { 0x3BED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_124)
{
    // 16A1F 0061;	
    // (𖨟) BAMUM LETTER PHASE-F PEUX	[3BED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1F, 0x0061 };
    uint32_t const ces[9] = { 0x3BED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_125)
{
    // 16A1F 0041;	
    // (𖨟) BAMUM LETTER PHASE-F PEUX	[3BED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A1F, 0x0041 };
    uint32_t const ces[9] = { 0x3BED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_126)
{
    // 16A1F 0062;	
    // (𖨟) BAMUM LETTER PHASE-F PEUX	[3BED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A1F, 0x0062 };
    uint32_t const ces[9] = { 0x3BED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_127)
{
    // 16A20 0021;	
    // (𖨠) BAMUM LETTER PHASE-F NTEE	[3BEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A20, 0x0021 };
    uint32_t const ces[9] = { 0x3BEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_128)
{
    // 16A20 003F;	
    // (𖨠) BAMUM LETTER PHASE-F NTEE	[3BEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A20, 0x003F };
    uint32_t const ces[9] = { 0x3BEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_129)
{
    // 16A20 0061;	
    // (𖨠) BAMUM LETTER PHASE-F NTEE	[3BEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A20, 0x0061 };
    uint32_t const ces[9] = { 0x3BEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_130)
{
    // 16A20 0041;	
    // (𖨠) BAMUM LETTER PHASE-F NTEE	[3BEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A20, 0x0041 };
    uint32_t const ces[9] = { 0x3BEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_131)
{
    // 16A20 0062;	
    // (𖨠) BAMUM LETTER PHASE-F NTEE	[3BEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A20, 0x0062 };
    uint32_t const ces[9] = { 0x3BEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_132)
{
    // 16A21 0021;	
    // (𖨡) BAMUM LETTER PHASE-F WUE	[3BEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A21, 0x0021 };
    uint32_t const ces[9] = { 0x3BEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_133)
{
    // 16A21 003F;	
    // (𖨡) BAMUM LETTER PHASE-F WUE	[3BEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A21, 0x003F };
    uint32_t const ces[9] = { 0x3BEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_134)
{
    // 16A21 0061;	
    // (𖨡) BAMUM LETTER PHASE-F WUE	[3BEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A21, 0x0061 };
    uint32_t const ces[9] = { 0x3BEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_135)
{
    // 16A21 0041;	
    // (𖨡) BAMUM LETTER PHASE-F WUE	[3BEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A21, 0x0041 };
    uint32_t const ces[9] = { 0x3BEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_136)
{
    // 16A21 0062;	
    // (𖨡) BAMUM LETTER PHASE-F WUE	[3BEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A21, 0x0062 };
    uint32_t const ces[9] = { 0x3BEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_137)
{
    // 16A22 0021;	
    // (𖨢) BAMUM LETTER PHASE-F PEE	[3BF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A22, 0x0021 };
    uint32_t const ces[9] = { 0x3BF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_138)
{
    // 16A22 003F;	
    // (𖨢) BAMUM LETTER PHASE-F PEE	[3BF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A22, 0x003F };
    uint32_t const ces[9] = { 0x3BF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_139)
{
    // 16A22 0061;	
    // (𖨢) BAMUM LETTER PHASE-F PEE	[3BF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A22, 0x0061 };
    uint32_t const ces[9] = { 0x3BF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_140)
{
    // 16A22 0041;	
    // (𖨢) BAMUM LETTER PHASE-F PEE	[3BF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A22, 0x0041 };
    uint32_t const ces[9] = { 0x3BF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_141)
{
    // 16A22 0062;	
    // (𖨢) BAMUM LETTER PHASE-F PEE	[3BF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A22, 0x0062 };
    uint32_t const ces[9] = { 0x3BF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_142)
{
    // 16A23 0021;	
    // (𖨣) BAMUM LETTER PHASE-F RU	[3BF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A23, 0x0021 };
    uint32_t const ces[9] = { 0x3BF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_143)
{
    // 16A23 003F;	
    // (𖨣) BAMUM LETTER PHASE-F RU	[3BF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A23, 0x003F };
    uint32_t const ces[9] = { 0x3BF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_144)
{
    // 16A23 0061;	
    // (𖨣) BAMUM LETTER PHASE-F RU	[3BF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A23, 0x0061 };
    uint32_t const ces[9] = { 0x3BF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_145)
{
    // 16A23 0041;	
    // (𖨣) BAMUM LETTER PHASE-F RU	[3BF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A23, 0x0041 };
    uint32_t const ces[9] = { 0x3BF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_146)
{
    // 16A23 0062;	
    // (𖨣) BAMUM LETTER PHASE-F RU	[3BF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A23, 0x0062 };
    uint32_t const ces[9] = { 0x3BF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_147)
{
    // 16A24 0021;	
    // (𖨤) BAMUM LETTER PHASE-F NI	[3BF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A24, 0x0021 };
    uint32_t const ces[9] = { 0x3BF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_148)
{
    // 16A24 003F;	
    // (𖨤) BAMUM LETTER PHASE-F NI	[3BF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A24, 0x003F };
    uint32_t const ces[9] = { 0x3BF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_149)
{
    // 16A24 0061;	
    // (𖨤) BAMUM LETTER PHASE-F NI	[3BF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A24, 0x0061 };
    uint32_t const ces[9] = { 0x3BF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_150)
{
    // 16A24 0041;	
    // (𖨤) BAMUM LETTER PHASE-F NI	[3BF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A24, 0x0041 };
    uint32_t const ces[9] = { 0x3BF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_151)
{
    // 16A24 0062;	
    // (𖨤) BAMUM LETTER PHASE-F NI	[3BF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A24, 0x0062 };
    uint32_t const ces[9] = { 0x3BF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_152)
{
    // 16A25 0021;	
    // (𖨥) BAMUM LETTER PHASE-F REUX	[3BF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A25, 0x0021 };
    uint32_t const ces[9] = { 0x3BF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_153)
{
    // 16A25 003F;	
    // (𖨥) BAMUM LETTER PHASE-F REUX	[3BF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A25, 0x003F };
    uint32_t const ces[9] = { 0x3BF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_154)
{
    // 16A25 0061;	
    // (𖨥) BAMUM LETTER PHASE-F REUX	[3BF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A25, 0x0061 };
    uint32_t const ces[9] = { 0x3BF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_155)
{
    // 16A25 0041;	
    // (𖨥) BAMUM LETTER PHASE-F REUX	[3BF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A25, 0x0041 };
    uint32_t const ces[9] = { 0x3BF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_156)
{
    // 16A25 0062;	
    // (𖨥) BAMUM LETTER PHASE-F REUX	[3BF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A25, 0x0062 };
    uint32_t const ces[9] = { 0x3BF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_157)
{
    // 16A26 0021;	
    // (𖨦) BAMUM LETTER PHASE-F KEN	[3BF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A26, 0x0021 };
    uint32_t const ces[9] = { 0x3BF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_158)
{
    // 16A26 003F;	
    // (𖨦) BAMUM LETTER PHASE-F KEN	[3BF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A26, 0x003F };
    uint32_t const ces[9] = { 0x3BF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_159)
{
    // 16A26 0061;	
    // (𖨦) BAMUM LETTER PHASE-F KEN	[3BF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A26, 0x0061 };
    uint32_t const ces[9] = { 0x3BF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_160)
{
    // 16A26 0041;	
    // (𖨦) BAMUM LETTER PHASE-F KEN	[3BF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A26, 0x0041 };
    uint32_t const ces[9] = { 0x3BF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_161)
{
    // 16A26 0062;	
    // (𖨦) BAMUM LETTER PHASE-F KEN	[3BF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A26, 0x0062 };
    uint32_t const ces[9] = { 0x3BF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_162)
{
    // 16A27 0021;	
    // (𖨧) BAMUM LETTER PHASE-F NGKWAEN	[3BF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A27, 0x0021 };
    uint32_t const ces[9] = { 0x3BF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_163)
{
    // 16A27 003F;	
    // (𖨧) BAMUM LETTER PHASE-F NGKWAEN	[3BF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A27, 0x003F };
    uint32_t const ces[9] = { 0x3BF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_164)
{
    // 16A27 0061;	
    // (𖨧) BAMUM LETTER PHASE-F NGKWAEN	[3BF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A27, 0x0061 };
    uint32_t const ces[9] = { 0x3BF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_165)
{
    // 16A27 0041;	
    // (𖨧) BAMUM LETTER PHASE-F NGKWAEN	[3BF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A27, 0x0041 };
    uint32_t const ces[9] = { 0x3BF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_166)
{
    // 16A27 0062;	
    // (𖨧) BAMUM LETTER PHASE-F NGKWAEN	[3BF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A27, 0x0062 };
    uint32_t const ces[9] = { 0x3BF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_167)
{
    // 16A28 0021;	
    // (𖨨) BAMUM LETTER PHASE-F NGGA	[3BF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A28, 0x0021 };
    uint32_t const ces[9] = { 0x3BF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_168)
{
    // 16A28 003F;	
    // (𖨨) BAMUM LETTER PHASE-F NGGA	[3BF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A28, 0x003F };
    uint32_t const ces[9] = { 0x3BF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_169)
{
    // 16A28 0061;	
    // (𖨨) BAMUM LETTER PHASE-F NGGA	[3BF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A28, 0x0061 };
    uint32_t const ces[9] = { 0x3BF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_170)
{
    // 16A28 0041;	
    // (𖨨) BAMUM LETTER PHASE-F NGGA	[3BF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A28, 0x0041 };
    uint32_t const ces[9] = { 0x3BF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_171)
{
    // 16A28 0062;	
    // (𖨨) BAMUM LETTER PHASE-F NGGA	[3BF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A28, 0x0062 };
    uint32_t const ces[9] = { 0x3BF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_172)
{
    // 16A29 0021;	
    // (𖨩) BAMUM LETTER PHASE-F SHO	[3BF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A29, 0x0021 };
    uint32_t const ces[9] = { 0x3BF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_173)
{
    // 16A29 003F;	
    // (𖨩) BAMUM LETTER PHASE-F SHO	[3BF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A29, 0x003F };
    uint32_t const ces[9] = { 0x3BF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_174)
{
    // 16A29 0061;	
    // (𖨩) BAMUM LETTER PHASE-F SHO	[3BF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A29, 0x0061 };
    uint32_t const ces[9] = { 0x3BF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_175)
{
    // 16A29 0041;	
    // (𖨩) BAMUM LETTER PHASE-F SHO	[3BF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A29, 0x0041 };
    uint32_t const ces[9] = { 0x3BF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_176)
{
    // 16A29 0062;	
    // (𖨩) BAMUM LETTER PHASE-F SHO	[3BF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A29, 0x0062 };
    uint32_t const ces[9] = { 0x3BF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_177)
{
    // 16A2A 0021;	
    // (𖨪) BAMUM LETTER PHASE-F PUAE	[3BF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2A, 0x0021 };
    uint32_t const ces[9] = { 0x3BF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_178)
{
    // 16A2A 003F;	
    // (𖨪) BAMUM LETTER PHASE-F PUAE	[3BF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2A, 0x003F };
    uint32_t const ces[9] = { 0x3BF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_179)
{
    // 16A2A 0061;	
    // (𖨪) BAMUM LETTER PHASE-F PUAE	[3BF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2A, 0x0061 };
    uint32_t const ces[9] = { 0x3BF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_180)
{
    // 16A2A 0041;	
    // (𖨪) BAMUM LETTER PHASE-F PUAE	[3BF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A2A, 0x0041 };
    uint32_t const ces[9] = { 0x3BF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_181)
{
    // 16A2A 0062;	
    // (𖨪) BAMUM LETTER PHASE-F PUAE	[3BF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2A, 0x0062 };
    uint32_t const ces[9] = { 0x3BF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_182)
{
    // 16A2B 0021;	
    // (𖨫) BAMUM LETTER PHASE-F FOM	[3BF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2B, 0x0021 };
    uint32_t const ces[9] = { 0x3BF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_183)
{
    // 16A2B 003F;	
    // (𖨫) BAMUM LETTER PHASE-F FOM	[3BF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2B, 0x003F };
    uint32_t const ces[9] = { 0x3BF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_184)
{
    // 16A2B 0061;	
    // (𖨫) BAMUM LETTER PHASE-F FOM	[3BF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2B, 0x0061 };
    uint32_t const ces[9] = { 0x3BF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_185)
{
    // 16A2B 0041;	
    // (𖨫) BAMUM LETTER PHASE-F FOM	[3BF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A2B, 0x0041 };
    uint32_t const ces[9] = { 0x3BF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_186)
{
    // 16A2B 0062;	
    // (𖨫) BAMUM LETTER PHASE-F FOM	[3BF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2B, 0x0062 };
    uint32_t const ces[9] = { 0x3BF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_187)
{
    // 16A2C 0021;	
    // (𖨬) BAMUM LETTER PHASE-F WA	[3BFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2C, 0x0021 };
    uint32_t const ces[9] = { 0x3BFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_188)
{
    // 16A2C 003F;	
    // (𖨬) BAMUM LETTER PHASE-F WA	[3BFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2C, 0x003F };
    uint32_t const ces[9] = { 0x3BFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_189)
{
    // 16A2C 0061;	
    // (𖨬) BAMUM LETTER PHASE-F WA	[3BFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2C, 0x0061 };
    uint32_t const ces[9] = { 0x3BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_190)
{
    // 16A2C 0041;	
    // (𖨬) BAMUM LETTER PHASE-F WA	[3BFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A2C, 0x0041 };
    uint32_t const ces[9] = { 0x3BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_191)
{
    // 16A2C 0062;	
    // (𖨬) BAMUM LETTER PHASE-F WA	[3BFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2C, 0x0062 };
    uint32_t const ces[9] = { 0x3BFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_192)
{
    // 16A2D 0021;	
    // (𖨭) BAMUM LETTER PHASE-F LI	[3BFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2D, 0x0021 };
    uint32_t const ces[9] = { 0x3BFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_193)
{
    // 16A2D 003F;	
    // (𖨭) BAMUM LETTER PHASE-F LI	[3BFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2D, 0x003F };
    uint32_t const ces[9] = { 0x3BFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_194)
{
    // 16A2D 0061;	
    // (𖨭) BAMUM LETTER PHASE-F LI	[3BFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2D, 0x0061 };
    uint32_t const ces[9] = { 0x3BFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_195)
{
    // 16A2D 0041;	
    // (𖨭) BAMUM LETTER PHASE-F LI	[3BFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A2D, 0x0041 };
    uint32_t const ces[9] = { 0x3BFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_196)
{
    // 16A2D 0062;	
    // (𖨭) BAMUM LETTER PHASE-F LI	[3BFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2D, 0x0062 };
    uint32_t const ces[9] = { 0x3BFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_197)
{
    // 16A2E 0021;	
    // (𖨮) BAMUM LETTER PHASE-F LOQ	[3BFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2E, 0x0021 };
    uint32_t const ces[9] = { 0x3BFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_198)
{
    // 16A2E 003F;	
    // (𖨮) BAMUM LETTER PHASE-F LOQ	[3BFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2E, 0x003F };
    uint32_t const ces[9] = { 0x3BFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_199)
{
    // 16A2E 0061;	
    // (𖨮) BAMUM LETTER PHASE-F LOQ	[3BFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2E, 0x0061 };
    uint32_t const ces[9] = { 0x3BFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_200)
{
    // 16A2E 0041;	
    // (𖨮) BAMUM LETTER PHASE-F LOQ	[3BFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A2E, 0x0041 };
    uint32_t const ces[9] = { 0x3BFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_201)
{
    // 16A2E 0062;	
    // (𖨮) BAMUM LETTER PHASE-F LOQ	[3BFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2E, 0x0062 };
    uint32_t const ces[9] = { 0x3BFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_202)
{
    // 16A2F 0021;	
    // (𖨯) BAMUM LETTER PHASE-F KO	[3BFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2F, 0x0021 };
    uint32_t const ces[9] = { 0x3BFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_203)
{
    // 16A2F 003F;	
    // (𖨯) BAMUM LETTER PHASE-F KO	[3BFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2F, 0x003F };
    uint32_t const ces[9] = { 0x3BFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_204)
{
    // 16A2F 0061;	
    // (𖨯) BAMUM LETTER PHASE-F KO	[3BFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2F, 0x0061 };
    uint32_t const ces[9] = { 0x3BFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_205)
{
    // 16A2F 0041;	
    // (𖨯) BAMUM LETTER PHASE-F KO	[3BFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A2F, 0x0041 };
    uint32_t const ces[9] = { 0x3BFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_206)
{
    // 16A2F 0062;	
    // (𖨯) BAMUM LETTER PHASE-F KO	[3BFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A2F, 0x0062 };
    uint32_t const ces[9] = { 0x3BFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_207)
{
    // 16A30 0021;	
    // (𖨰) BAMUM LETTER PHASE-F MBEN	[3BFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A30, 0x0021 };
    uint32_t const ces[9] = { 0x3BFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_208)
{
    // 16A30 003F;	
    // (𖨰) BAMUM LETTER PHASE-F MBEN	[3BFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A30, 0x003F };
    uint32_t const ces[9] = { 0x3BFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_209)
{
    // 16A30 0061;	
    // (𖨰) BAMUM LETTER PHASE-F MBEN	[3BFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A30, 0x0061 };
    uint32_t const ces[9] = { 0x3BFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_210)
{
    // 16A30 0041;	
    // (𖨰) BAMUM LETTER PHASE-F MBEN	[3BFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A30, 0x0041 };
    uint32_t const ces[9] = { 0x3BFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_211)
{
    // 16A30 0062;	
    // (𖨰) BAMUM LETTER PHASE-F MBEN	[3BFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A30, 0x0062 };
    uint32_t const ces[9] = { 0x3BFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_212)
{
    // 16A31 0021;	
    // (𖨱) BAMUM LETTER PHASE-F REN	[3BFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A31, 0x0021 };
    uint32_t const ces[9] = { 0x3BFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_213)
{
    // 16A31 003F;	
    // (𖨱) BAMUM LETTER PHASE-F REN	[3BFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A31, 0x003F };
    uint32_t const ces[9] = { 0x3BFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_214)
{
    // 16A31 0061;	
    // (𖨱) BAMUM LETTER PHASE-F REN	[3BFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A31, 0x0061 };
    uint32_t const ces[9] = { 0x3BFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_215)
{
    // 16A31 0041;	
    // (𖨱) BAMUM LETTER PHASE-F REN	[3BFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A31, 0x0041 };
    uint32_t const ces[9] = { 0x3BFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_216)
{
    // 16A31 0062;	
    // (𖨱) BAMUM LETTER PHASE-F REN	[3BFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A31, 0x0062 };
    uint32_t const ces[9] = { 0x3BFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_217)
{
    // 16A32 0021;	
    // (𖨲) BAMUM LETTER PHASE-F MA	[3C00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A32, 0x0021 };
    uint32_t const ces[9] = { 0x3C00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_218)
{
    // 16A32 003F;	
    // (𖨲) BAMUM LETTER PHASE-F MA	[3C00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A32, 0x003F };
    uint32_t const ces[9] = { 0x3C00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_219)
{
    // 16A32 0061;	
    // (𖨲) BAMUM LETTER PHASE-F MA	[3C00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A32, 0x0061 };
    uint32_t const ces[9] = { 0x3C00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_220)
{
    // 16A32 0041;	
    // (𖨲) BAMUM LETTER PHASE-F MA	[3C00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A32, 0x0041 };
    uint32_t const ces[9] = { 0x3C00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_221)
{
    // 16A32 0062;	
    // (𖨲) BAMUM LETTER PHASE-F MA	[3C00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A32, 0x0062 };
    uint32_t const ces[9] = { 0x3C00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_222)
{
    // 16A33 0021;	
    // (𖨳) BAMUM LETTER PHASE-F MO	[3C01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A33, 0x0021 };
    uint32_t const ces[9] = { 0x3C01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_223)
{
    // 16A33 003F;	
    // (𖨳) BAMUM LETTER PHASE-F MO	[3C01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A33, 0x003F };
    uint32_t const ces[9] = { 0x3C01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_224)
{
    // 16A33 0061;	
    // (𖨳) BAMUM LETTER PHASE-F MO	[3C01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A33, 0x0061 };
    uint32_t const ces[9] = { 0x3C01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_225)
{
    // 16A33 0041;	
    // (𖨳) BAMUM LETTER PHASE-F MO	[3C01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A33, 0x0041 };
    uint32_t const ces[9] = { 0x3C01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_226)
{
    // 16A33 0062;	
    // (𖨳) BAMUM LETTER PHASE-F MO	[3C01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A33, 0x0062 };
    uint32_t const ces[9] = { 0x3C01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_227)
{
    // 16A34 0021;	
    // (𖨴) BAMUM LETTER PHASE-F MBAA	[3C02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A34, 0x0021 };
    uint32_t const ces[9] = { 0x3C02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_228)
{
    // 16A34 003F;	
    // (𖨴) BAMUM LETTER PHASE-F MBAA	[3C02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A34, 0x003F };
    uint32_t const ces[9] = { 0x3C02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_229)
{
    // 16A34 0061;	
    // (𖨴) BAMUM LETTER PHASE-F MBAA	[3C02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A34, 0x0061 };
    uint32_t const ces[9] = { 0x3C02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_230)
{
    // 16A34 0041;	
    // (𖨴) BAMUM LETTER PHASE-F MBAA	[3C02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A34, 0x0041 };
    uint32_t const ces[9] = { 0x3C02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_231)
{
    // 16A34 0062;	
    // (𖨴) BAMUM LETTER PHASE-F MBAA	[3C02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A34, 0x0062 };
    uint32_t const ces[9] = { 0x3C02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_232)
{
    // 16A35 0021;	
    // (𖨵) BAMUM LETTER PHASE-F TET	[3C03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A35, 0x0021 };
    uint32_t const ces[9] = { 0x3C03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_233)
{
    // 16A35 003F;	
    // (𖨵) BAMUM LETTER PHASE-F TET	[3C03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A35, 0x003F };
    uint32_t const ces[9] = { 0x3C03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_234)
{
    // 16A35 0061;	
    // (𖨵) BAMUM LETTER PHASE-F TET	[3C03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A35, 0x0061 };
    uint32_t const ces[9] = { 0x3C03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_235)
{
    // 16A35 0041;	
    // (𖨵) BAMUM LETTER PHASE-F TET	[3C03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A35, 0x0041 };
    uint32_t const ces[9] = { 0x3C03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_236)
{
    // 16A35 0062;	
    // (𖨵) BAMUM LETTER PHASE-F TET	[3C03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A35, 0x0062 };
    uint32_t const ces[9] = { 0x3C03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_237)
{
    // 16A36 0021;	
    // (𖨶) BAMUM LETTER PHASE-F KPA	[3C04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A36, 0x0021 };
    uint32_t const ces[9] = { 0x3C04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_238)
{
    // 16A36 003F;	
    // (𖨶) BAMUM LETTER PHASE-F KPA	[3C04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A36, 0x003F };
    uint32_t const ces[9] = { 0x3C04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_239)
{
    // 16A36 0061;	
    // (𖨶) BAMUM LETTER PHASE-F KPA	[3C04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A36, 0x0061 };
    uint32_t const ces[9] = { 0x3C04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_240)
{
    // 16A36 0041;	
    // (𖨶) BAMUM LETTER PHASE-F KPA	[3C04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A36, 0x0041 };
    uint32_t const ces[9] = { 0x3C04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_241)
{
    // 16A36 0062;	
    // (𖨶) BAMUM LETTER PHASE-F KPA	[3C04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A36, 0x0062 };
    uint32_t const ces[9] = { 0x3C04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_242)
{
    // 16A37 0021;	
    // (𖨷) BAMUM LETTER PHASE-F SAMBA	[3C05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A37, 0x0021 };
    uint32_t const ces[9] = { 0x3C05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_243)
{
    // 16A37 003F;	
    // (𖨷) BAMUM LETTER PHASE-F SAMBA	[3C05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A37, 0x003F };
    uint32_t const ces[9] = { 0x3C05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_244)
{
    // 16A37 0061;	
    // (𖨷) BAMUM LETTER PHASE-F SAMBA	[3C05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A37, 0x0061 };
    uint32_t const ces[9] = { 0x3C05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_245)
{
    // 16A37 0041;	
    // (𖨷) BAMUM LETTER PHASE-F SAMBA	[3C05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A37, 0x0041 };
    uint32_t const ces[9] = { 0x3C05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_246)
{
    // 16A37 0062;	
    // (𖨷) BAMUM LETTER PHASE-F SAMBA	[3C05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A37, 0x0062 };
    uint32_t const ces[9] = { 0x3C05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_247)
{
    // 16A38 0021;	
    // (𖨸) BAMUM LETTER PHASE-F VUEQ	[3C06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A38, 0x0021 };
    uint32_t const ces[9] = { 0x3C06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_248)
{
    // 16A38 003F;	
    // (𖨸) BAMUM LETTER PHASE-F VUEQ	[3C06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A38, 0x003F };
    uint32_t const ces[9] = { 0x3C06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_249)
{
    // 16A38 0061;	
    // (𖨸) BAMUM LETTER PHASE-F VUEQ	[3C06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A38, 0x0061 };
    uint32_t const ces[9] = { 0x3C06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_250)
{
    // 16A38 0041;	
    // (𖨸) BAMUM LETTER PHASE-F VUEQ	[3C06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16A38, 0x0041 };
    uint32_t const ces[9] = { 0x3C06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_251)
{
    // 16A38 0062;	
    // (𖨸) BAMUM LETTER PHASE-F VUEQ	[3C06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16A38, 0x0062 };
    uint32_t const ces[9] = { 0x3C06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_252)
{
    // 16AD0 0021;	
    // (𖫐) BASSA VAH LETTER ENNI	[3C07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD0, 0x0021 };
    uint32_t const ces[9] = { 0x3C07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_253)
{
    // 16AD0 003F;	
    // (𖫐) BASSA VAH LETTER ENNI	[3C07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD0, 0x003F };
    uint32_t const ces[9] = { 0x3C07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_254)
{
    // 16AD0 0061;	
    // (𖫐) BASSA VAH LETTER ENNI	[3C07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD0, 0x0061 };
    uint32_t const ces[9] = { 0x3C07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_255)
{
    // 16AD0 0041;	
    // (𖫐) BASSA VAH LETTER ENNI	[3C07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD0, 0x0041 };
    uint32_t const ces[9] = { 0x3C07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_256)
{
    // 16AD0 0062;	
    // (𖫐) BASSA VAH LETTER ENNI	[3C07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD0, 0x0062 };
    uint32_t const ces[9] = { 0x3C07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_257)
{
    // 16AD1 0021;	
    // (𖫑) BASSA VAH LETTER KA	[3C08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD1, 0x0021 };
    uint32_t const ces[9] = { 0x3C08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_258)
{
    // 16AD1 003F;	
    // (𖫑) BASSA VAH LETTER KA	[3C08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD1, 0x003F };
    uint32_t const ces[9] = { 0x3C08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_259)
{
    // 16AD1 0061;	
    // (𖫑) BASSA VAH LETTER KA	[3C08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD1, 0x0061 };
    uint32_t const ces[9] = { 0x3C08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_260)
{
    // 16AD1 0041;	
    // (𖫑) BASSA VAH LETTER KA	[3C08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD1, 0x0041 };
    uint32_t const ces[9] = { 0x3C08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_261)
{
    // 16AD1 0062;	
    // (𖫑) BASSA VAH LETTER KA	[3C08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD1, 0x0062 };
    uint32_t const ces[9] = { 0x3C08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_262)
{
    // 16AD2 0021;	
    // (𖫒) BASSA VAH LETTER SE	[3C09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD2, 0x0021 };
    uint32_t const ces[9] = { 0x3C09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_263)
{
    // 16AD2 003F;	
    // (𖫒) BASSA VAH LETTER SE	[3C09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD2, 0x003F };
    uint32_t const ces[9] = { 0x3C09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_264)
{
    // 16AD2 0061;	
    // (𖫒) BASSA VAH LETTER SE	[3C09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD2, 0x0061 };
    uint32_t const ces[9] = { 0x3C09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_265)
{
    // 16AD2 0041;	
    // (𖫒) BASSA VAH LETTER SE	[3C09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD2, 0x0041 };
    uint32_t const ces[9] = { 0x3C09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_266)
{
    // 16AD2 0062;	
    // (𖫒) BASSA VAH LETTER SE	[3C09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD2, 0x0062 };
    uint32_t const ces[9] = { 0x3C09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_267)
{
    // 16AD3 0021;	
    // (𖫓) BASSA VAH LETTER FA	[3C0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD3, 0x0021 };
    uint32_t const ces[9] = { 0x3C0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_268)
{
    // 16AD3 003F;	
    // (𖫓) BASSA VAH LETTER FA	[3C0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD3, 0x003F };
    uint32_t const ces[9] = { 0x3C0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_269)
{
    // 16AD3 0061;	
    // (𖫓) BASSA VAH LETTER FA	[3C0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD3, 0x0061 };
    uint32_t const ces[9] = { 0x3C0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_270)
{
    // 16AD3 0041;	
    // (𖫓) BASSA VAH LETTER FA	[3C0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD3, 0x0041 };
    uint32_t const ces[9] = { 0x3C0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_271)
{
    // 16AD3 0062;	
    // (𖫓) BASSA VAH LETTER FA	[3C0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD3, 0x0062 };
    uint32_t const ces[9] = { 0x3C0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_272)
{
    // 16AD4 0021;	
    // (𖫔) BASSA VAH LETTER MBE	[3C0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD4, 0x0021 };
    uint32_t const ces[9] = { 0x3C0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_273)
{
    // 16AD4 003F;	
    // (𖫔) BASSA VAH LETTER MBE	[3C0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD4, 0x003F };
    uint32_t const ces[9] = { 0x3C0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_274)
{
    // 16AD4 0061;	
    // (𖫔) BASSA VAH LETTER MBE	[3C0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD4, 0x0061 };
    uint32_t const ces[9] = { 0x3C0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_275)
{
    // 16AD4 0041;	
    // (𖫔) BASSA VAH LETTER MBE	[3C0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD4, 0x0041 };
    uint32_t const ces[9] = { 0x3C0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_276)
{
    // 16AD4 0062;	
    // (𖫔) BASSA VAH LETTER MBE	[3C0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD4, 0x0062 };
    uint32_t const ces[9] = { 0x3C0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_277)
{
    // 16AD5 0021;	
    // (𖫕) BASSA VAH LETTER YIE	[3C0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD5, 0x0021 };
    uint32_t const ces[9] = { 0x3C0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_278)
{
    // 16AD5 003F;	
    // (𖫕) BASSA VAH LETTER YIE	[3C0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD5, 0x003F };
    uint32_t const ces[9] = { 0x3C0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_279)
{
    // 16AD5 0061;	
    // (𖫕) BASSA VAH LETTER YIE	[3C0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD5, 0x0061 };
    uint32_t const ces[9] = { 0x3C0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_280)
{
    // 16AD5 0041;	
    // (𖫕) BASSA VAH LETTER YIE	[3C0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD5, 0x0041 };
    uint32_t const ces[9] = { 0x3C0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_281)
{
    // 16AD5 0062;	
    // (𖫕) BASSA VAH LETTER YIE	[3C0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD5, 0x0062 };
    uint32_t const ces[9] = { 0x3C0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_282)
{
    // 16AD6 0021;	
    // (𖫖) BASSA VAH LETTER GAH	[3C0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD6, 0x0021 };
    uint32_t const ces[9] = { 0x3C0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_283)
{
    // 16AD6 003F;	
    // (𖫖) BASSA VAH LETTER GAH	[3C0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD6, 0x003F };
    uint32_t const ces[9] = { 0x3C0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_284)
{
    // 16AD6 0061;	
    // (𖫖) BASSA VAH LETTER GAH	[3C0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD6, 0x0061 };
    uint32_t const ces[9] = { 0x3C0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_285)
{
    // 16AD6 0041;	
    // (𖫖) BASSA VAH LETTER GAH	[3C0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD6, 0x0041 };
    uint32_t const ces[9] = { 0x3C0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_286)
{
    // 16AD6 0062;	
    // (𖫖) BASSA VAH LETTER GAH	[3C0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD6, 0x0062 };
    uint32_t const ces[9] = { 0x3C0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_287)
{
    // 16AD7 0021;	
    // (𖫗) BASSA VAH LETTER DHII	[3C0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD7, 0x0021 };
    uint32_t const ces[9] = { 0x3C0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_288)
{
    // 16AD7 003F;	
    // (𖫗) BASSA VAH LETTER DHII	[3C0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD7, 0x003F };
    uint32_t const ces[9] = { 0x3C0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_289)
{
    // 16AD7 0061;	
    // (𖫗) BASSA VAH LETTER DHII	[3C0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD7, 0x0061 };
    uint32_t const ces[9] = { 0x3C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_290)
{
    // 16AD7 0041;	
    // (𖫗) BASSA VAH LETTER DHII	[3C0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD7, 0x0041 };
    uint32_t const ces[9] = { 0x3C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_291)
{
    // 16AD7 0062;	
    // (𖫗) BASSA VAH LETTER DHII	[3C0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD7, 0x0062 };
    uint32_t const ces[9] = { 0x3C0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_292)
{
    // 16AD8 0021;	
    // (𖫘) BASSA VAH LETTER KPAH	[3C0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD8, 0x0021 };
    uint32_t const ces[9] = { 0x3C0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_293)
{
    // 16AD8 003F;	
    // (𖫘) BASSA VAH LETTER KPAH	[3C0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD8, 0x003F };
    uint32_t const ces[9] = { 0x3C0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_294)
{
    // 16AD8 0061;	
    // (𖫘) BASSA VAH LETTER KPAH	[3C0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD8, 0x0061 };
    uint32_t const ces[9] = { 0x3C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_295)
{
    // 16AD8 0041;	
    // (𖫘) BASSA VAH LETTER KPAH	[3C0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD8, 0x0041 };
    uint32_t const ces[9] = { 0x3C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_296)
{
    // 16AD8 0062;	
    // (𖫘) BASSA VAH LETTER KPAH	[3C0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD8, 0x0062 };
    uint32_t const ces[9] = { 0x3C0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_297)
{
    // 16AD9 0021;	
    // (𖫙) BASSA VAH LETTER JO	[3C10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD9, 0x0021 };
    uint32_t const ces[9] = { 0x3C10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_298)
{
    // 16AD9 003F;	
    // (𖫙) BASSA VAH LETTER JO	[3C10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD9, 0x003F };
    uint32_t const ces[9] = { 0x3C10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_299)
{
    // 16AD9 0061;	
    // (𖫙) BASSA VAH LETTER JO	[3C10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD9, 0x0061 };
    uint32_t const ces[9] = { 0x3C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_300)
{
    // 16AD9 0041;	
    // (𖫙) BASSA VAH LETTER JO	[3C10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AD9, 0x0041 };
    uint32_t const ces[9] = { 0x3C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_301)
{
    // 16AD9 0062;	
    // (𖫙) BASSA VAH LETTER JO	[3C10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AD9, 0x0062 };
    uint32_t const ces[9] = { 0x3C10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_302)
{
    // 16ADA 0021;	
    // (𖫚) BASSA VAH LETTER HWAH	[3C11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADA, 0x0021 };
    uint32_t const ces[9] = { 0x3C11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_303)
{
    // 16ADA 003F;	
    // (𖫚) BASSA VAH LETTER HWAH	[3C11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADA, 0x003F };
    uint32_t const ces[9] = { 0x3C11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_304)
{
    // 16ADA 0061;	
    // (𖫚) BASSA VAH LETTER HWAH	[3C11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADA, 0x0061 };
    uint32_t const ces[9] = { 0x3C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_305)
{
    // 16ADA 0041;	
    // (𖫚) BASSA VAH LETTER HWAH	[3C11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16ADA, 0x0041 };
    uint32_t const ces[9] = { 0x3C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_306)
{
    // 16ADA 0062;	
    // (𖫚) BASSA VAH LETTER HWAH	[3C11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADA, 0x0062 };
    uint32_t const ces[9] = { 0x3C11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_307)
{
    // 16ADB 0021;	
    // (𖫛) BASSA VAH LETTER WA	[3C12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADB, 0x0021 };
    uint32_t const ces[9] = { 0x3C12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_308)
{
    // 16ADB 003F;	
    // (𖫛) BASSA VAH LETTER WA	[3C12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADB, 0x003F };
    uint32_t const ces[9] = { 0x3C12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_309)
{
    // 16ADB 0061;	
    // (𖫛) BASSA VAH LETTER WA	[3C12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADB, 0x0061 };
    uint32_t const ces[9] = { 0x3C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_310)
{
    // 16ADB 0041;	
    // (𖫛) BASSA VAH LETTER WA	[3C12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16ADB, 0x0041 };
    uint32_t const ces[9] = { 0x3C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_311)
{
    // 16ADB 0062;	
    // (𖫛) BASSA VAH LETTER WA	[3C12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADB, 0x0062 };
    uint32_t const ces[9] = { 0x3C12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_312)
{
    // 16ADC 0021;	
    // (𖫜) BASSA VAH LETTER ZO	[3C13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADC, 0x0021 };
    uint32_t const ces[9] = { 0x3C13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_313)
{
    // 16ADC 003F;	
    // (𖫜) BASSA VAH LETTER ZO	[3C13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADC, 0x003F };
    uint32_t const ces[9] = { 0x3C13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_314)
{
    // 16ADC 0061;	
    // (𖫜) BASSA VAH LETTER ZO	[3C13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADC, 0x0061 };
    uint32_t const ces[9] = { 0x3C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_315)
{
    // 16ADC 0041;	
    // (𖫜) BASSA VAH LETTER ZO	[3C13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16ADC, 0x0041 };
    uint32_t const ces[9] = { 0x3C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_316)
{
    // 16ADC 0062;	
    // (𖫜) BASSA VAH LETTER ZO	[3C13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADC, 0x0062 };
    uint32_t const ces[9] = { 0x3C13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_317)
{
    // 16ADD 0021;	
    // (𖫝) BASSA VAH LETTER GBU	[3C14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADD, 0x0021 };
    uint32_t const ces[9] = { 0x3C14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_318)
{
    // 16ADD 003F;	
    // (𖫝) BASSA VAH LETTER GBU	[3C14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADD, 0x003F };
    uint32_t const ces[9] = { 0x3C14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_319)
{
    // 16ADD 0061;	
    // (𖫝) BASSA VAH LETTER GBU	[3C14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADD, 0x0061 };
    uint32_t const ces[9] = { 0x3C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_320)
{
    // 16ADD 0041;	
    // (𖫝) BASSA VAH LETTER GBU	[3C14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16ADD, 0x0041 };
    uint32_t const ces[9] = { 0x3C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_321)
{
    // 16ADD 0062;	
    // (𖫝) BASSA VAH LETTER GBU	[3C14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADD, 0x0062 };
    uint32_t const ces[9] = { 0x3C14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_322)
{
    // 16ADE 0021;	
    // (𖫞) BASSA VAH LETTER DO	[3C15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADE, 0x0021 };
    uint32_t const ces[9] = { 0x3C15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_323)
{
    // 16ADE 003F;	
    // (𖫞) BASSA VAH LETTER DO	[3C15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADE, 0x003F };
    uint32_t const ces[9] = { 0x3C15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_324)
{
    // 16ADE 0061;	
    // (𖫞) BASSA VAH LETTER DO	[3C15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADE, 0x0061 };
    uint32_t const ces[9] = { 0x3C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_325)
{
    // 16ADE 0041;	
    // (𖫞) BASSA VAH LETTER DO	[3C15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16ADE, 0x0041 };
    uint32_t const ces[9] = { 0x3C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_326)
{
    // 16ADE 0062;	
    // (𖫞) BASSA VAH LETTER DO	[3C15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADE, 0x0062 };
    uint32_t const ces[9] = { 0x3C15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_327)
{
    // 16ADF 0021;	
    // (𖫟) BASSA VAH LETTER CE	[3C16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADF, 0x0021 };
    uint32_t const ces[9] = { 0x3C16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_328)
{
    // 16ADF 003F;	
    // (𖫟) BASSA VAH LETTER CE	[3C16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADF, 0x003F };
    uint32_t const ces[9] = { 0x3C16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_329)
{
    // 16ADF 0061;	
    // (𖫟) BASSA VAH LETTER CE	[3C16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADF, 0x0061 };
    uint32_t const ces[9] = { 0x3C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_330)
{
    // 16ADF 0041;	
    // (𖫟) BASSA VAH LETTER CE	[3C16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16ADF, 0x0041 };
    uint32_t const ces[9] = { 0x3C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_331)
{
    // 16ADF 0062;	
    // (𖫟) BASSA VAH LETTER CE	[3C16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16ADF, 0x0062 };
    uint32_t const ces[9] = { 0x3C16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_332)
{
    // 16AE0 0021;	
    // (𖫠) BASSA VAH LETTER UWU	[3C17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE0, 0x0021 };
    uint32_t const ces[9] = { 0x3C17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_333)
{
    // 16AE0 003F;	
    // (𖫠) BASSA VAH LETTER UWU	[3C17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE0, 0x003F };
    uint32_t const ces[9] = { 0x3C17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_334)
{
    // 16AE0 0061;	
    // (𖫠) BASSA VAH LETTER UWU	[3C17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE0, 0x0061 };
    uint32_t const ces[9] = { 0x3C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_335)
{
    // 16AE0 0041;	
    // (𖫠) BASSA VAH LETTER UWU	[3C17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE0, 0x0041 };
    uint32_t const ces[9] = { 0x3C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_336)
{
    // 16AE0 0062;	
    // (𖫠) BASSA VAH LETTER UWU	[3C17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE0, 0x0062 };
    uint32_t const ces[9] = { 0x3C17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_337)
{
    // 16AE1 0021;	
    // (𖫡) BASSA VAH LETTER TO	[3C18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE1, 0x0021 };
    uint32_t const ces[9] = { 0x3C18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_338)
{
    // 16AE1 003F;	
    // (𖫡) BASSA VAH LETTER TO	[3C18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE1, 0x003F };
    uint32_t const ces[9] = { 0x3C18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_339)
{
    // 16AE1 0061;	
    // (𖫡) BASSA VAH LETTER TO	[3C18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE1, 0x0061 };
    uint32_t const ces[9] = { 0x3C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_340)
{
    // 16AE1 0041;	
    // (𖫡) BASSA VAH LETTER TO	[3C18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE1, 0x0041 };
    uint32_t const ces[9] = { 0x3C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_341)
{
    // 16AE1 0062;	
    // (𖫡) BASSA VAH LETTER TO	[3C18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE1, 0x0062 };
    uint32_t const ces[9] = { 0x3C18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_342)
{
    // 16AE2 0021;	
    // (𖫢) BASSA VAH LETTER BA	[3C19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE2, 0x0021 };
    uint32_t const ces[9] = { 0x3C19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_343)
{
    // 16AE2 003F;	
    // (𖫢) BASSA VAH LETTER BA	[3C19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE2, 0x003F };
    uint32_t const ces[9] = { 0x3C19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_344)
{
    // 16AE2 0061;	
    // (𖫢) BASSA VAH LETTER BA	[3C19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE2, 0x0061 };
    uint32_t const ces[9] = { 0x3C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_345)
{
    // 16AE2 0041;	
    // (𖫢) BASSA VAH LETTER BA	[3C19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE2, 0x0041 };
    uint32_t const ces[9] = { 0x3C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_346)
{
    // 16AE2 0062;	
    // (𖫢) BASSA VAH LETTER BA	[3C19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE2, 0x0062 };
    uint32_t const ces[9] = { 0x3C19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_347)
{
    // 16AE3 0021;	
    // (𖫣) BASSA VAH LETTER VU	[3C1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE3, 0x0021 };
    uint32_t const ces[9] = { 0x3C1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_348)
{
    // 16AE3 003F;	
    // (𖫣) BASSA VAH LETTER VU	[3C1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE3, 0x003F };
    uint32_t const ces[9] = { 0x3C1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_349)
{
    // 16AE3 0061;	
    // (𖫣) BASSA VAH LETTER VU	[3C1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE3, 0x0061 };
    uint32_t const ces[9] = { 0x3C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_350)
{
    // 16AE3 0041;	
    // (𖫣) BASSA VAH LETTER VU	[3C1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE3, 0x0041 };
    uint32_t const ces[9] = { 0x3C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_351)
{
    // 16AE3 0062;	
    // (𖫣) BASSA VAH LETTER VU	[3C1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE3, 0x0062 };
    uint32_t const ces[9] = { 0x3C1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_352)
{
    // 16AE4 0021;	
    // (𖫤) BASSA VAH LETTER YEIN	[3C1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE4, 0x0021 };
    uint32_t const ces[9] = { 0x3C1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_353)
{
    // 16AE4 003F;	
    // (𖫤) BASSA VAH LETTER YEIN	[3C1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE4, 0x003F };
    uint32_t const ces[9] = { 0x3C1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_354)
{
    // 16AE4 0061;	
    // (𖫤) BASSA VAH LETTER YEIN	[3C1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE4, 0x0061 };
    uint32_t const ces[9] = { 0x3C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_355)
{
    // 16AE4 0041;	
    // (𖫤) BASSA VAH LETTER YEIN	[3C1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE4, 0x0041 };
    uint32_t const ces[9] = { 0x3C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_356)
{
    // 16AE4 0062;	
    // (𖫤) BASSA VAH LETTER YEIN	[3C1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE4, 0x0062 };
    uint32_t const ces[9] = { 0x3C1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_357)
{
    // 16AE5 0021;	
    // (𖫥) BASSA VAH LETTER PA	[3C1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE5, 0x0021 };
    uint32_t const ces[9] = { 0x3C1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_358)
{
    // 16AE5 003F;	
    // (𖫥) BASSA VAH LETTER PA	[3C1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE5, 0x003F };
    uint32_t const ces[9] = { 0x3C1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_359)
{
    // 16AE5 0061;	
    // (𖫥) BASSA VAH LETTER PA	[3C1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE5, 0x0061 };
    uint32_t const ces[9] = { 0x3C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_360)
{
    // 16AE5 0041;	
    // (𖫥) BASSA VAH LETTER PA	[3C1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE5, 0x0041 };
    uint32_t const ces[9] = { 0x3C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_361)
{
    // 16AE5 0062;	
    // (𖫥) BASSA VAH LETTER PA	[3C1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE5, 0x0062 };
    uint32_t const ces[9] = { 0x3C1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_362)
{
    // 16AE6 0021;	
    // (𖫦) BASSA VAH LETTER WADDA	[3C1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE6, 0x0021 };
    uint32_t const ces[9] = { 0x3C1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_363)
{
    // 16AE6 003F;	
    // (𖫦) BASSA VAH LETTER WADDA	[3C1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE6, 0x003F };
    uint32_t const ces[9] = { 0x3C1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_364)
{
    // 16AE6 0061;	
    // (𖫦) BASSA VAH LETTER WADDA	[3C1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE6, 0x0061 };
    uint32_t const ces[9] = { 0x3C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_365)
{
    // 16AE6 0041;	
    // (𖫦) BASSA VAH LETTER WADDA	[3C1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE6, 0x0041 };
    uint32_t const ces[9] = { 0x3C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_366)
{
    // 16AE6 0062;	
    // (𖫦) BASSA VAH LETTER WADDA	[3C1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE6, 0x0062 };
    uint32_t const ces[9] = { 0x3C1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_367)
{
    // 16AE7 0021;	
    // (𖫧) BASSA VAH LETTER A	[3C1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE7, 0x0021 };
    uint32_t const ces[9] = { 0x3C1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_368)
{
    // 16AE7 003F;	
    // (𖫧) BASSA VAH LETTER A	[3C1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE7, 0x003F };
    uint32_t const ces[9] = { 0x3C1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_369)
{
    // 16AE7 0061;	
    // (𖫧) BASSA VAH LETTER A	[3C1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE7, 0x0061 };
    uint32_t const ces[9] = { 0x3C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_370)
{
    // 16AE7 0041;	
    // (𖫧) BASSA VAH LETTER A	[3C1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE7, 0x0041 };
    uint32_t const ces[9] = { 0x3C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_371)
{
    // 16AE7 0062;	
    // (𖫧) BASSA VAH LETTER A	[3C1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE7, 0x0062 };
    uint32_t const ces[9] = { 0x3C1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_372)
{
    // 16AE8 0021;	
    // (𖫨) BASSA VAH LETTER O	[3C1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE8, 0x0021 };
    uint32_t const ces[9] = { 0x3C1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_373)
{
    // 16AE8 003F;	
    // (𖫨) BASSA VAH LETTER O	[3C1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE8, 0x003F };
    uint32_t const ces[9] = { 0x3C1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_374)
{
    // 16AE8 0061;	
    // (𖫨) BASSA VAH LETTER O	[3C1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE8, 0x0061 };
    uint32_t const ces[9] = { 0x3C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_375)
{
    // 16AE8 0041;	
    // (𖫨) BASSA VAH LETTER O	[3C1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE8, 0x0041 };
    uint32_t const ces[9] = { 0x3C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_376)
{
    // 16AE8 0062;	
    // (𖫨) BASSA VAH LETTER O	[3C1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE8, 0x0062 };
    uint32_t const ces[9] = { 0x3C1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_377)
{
    // 16AE9 0021;	
    // (𖫩) BASSA VAH LETTER OO	[3C20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE9, 0x0021 };
    uint32_t const ces[9] = { 0x3C20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_378)
{
    // 16AE9 003F;	
    // (𖫩) BASSA VAH LETTER OO	[3C20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE9, 0x003F };
    uint32_t const ces[9] = { 0x3C20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_379)
{
    // 16AE9 0061;	
    // (𖫩) BASSA VAH LETTER OO	[3C20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE9, 0x0061 };
    uint32_t const ces[9] = { 0x3C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_380)
{
    // 16AE9 0041;	
    // (𖫩) BASSA VAH LETTER OO	[3C20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AE9, 0x0041 };
    uint32_t const ces[9] = { 0x3C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_381)
{
    // 16AE9 0062;	
    // (𖫩) BASSA VAH LETTER OO	[3C20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AE9, 0x0062 };
    uint32_t const ces[9] = { 0x3C20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_382)
{
    // 16AEA 0021;	
    // (𖫪) BASSA VAH LETTER U	[3C21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEA, 0x0021 };
    uint32_t const ces[9] = { 0x3C21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_383)
{
    // 16AEA 003F;	
    // (𖫪) BASSA VAH LETTER U	[3C21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEA, 0x003F };
    uint32_t const ces[9] = { 0x3C21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_384)
{
    // 16AEA 0061;	
    // (𖫪) BASSA VAH LETTER U	[3C21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEA, 0x0061 };
    uint32_t const ces[9] = { 0x3C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_385)
{
    // 16AEA 0041;	
    // (𖫪) BASSA VAH LETTER U	[3C21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AEA, 0x0041 };
    uint32_t const ces[9] = { 0x3C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_386)
{
    // 16AEA 0062;	
    // (𖫪) BASSA VAH LETTER U	[3C21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEA, 0x0062 };
    uint32_t const ces[9] = { 0x3C21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_387)
{
    // 16AEB 0021;	
    // (𖫫) BASSA VAH LETTER EE	[3C22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEB, 0x0021 };
    uint32_t const ces[9] = { 0x3C22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_388)
{
    // 16AEB 003F;	
    // (𖫫) BASSA VAH LETTER EE	[3C22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEB, 0x003F };
    uint32_t const ces[9] = { 0x3C22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_389)
{
    // 16AEB 0061;	
    // (𖫫) BASSA VAH LETTER EE	[3C22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEB, 0x0061 };
    uint32_t const ces[9] = { 0x3C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_390)
{
    // 16AEB 0041;	
    // (𖫫) BASSA VAH LETTER EE	[3C22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AEB, 0x0041 };
    uint32_t const ces[9] = { 0x3C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_391)
{
    // 16AEB 0062;	
    // (𖫫) BASSA VAH LETTER EE	[3C22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEB, 0x0062 };
    uint32_t const ces[9] = { 0x3C22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_392)
{
    // 16AEC 0021;	
    // (𖫬) BASSA VAH LETTER E	[3C23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEC, 0x0021 };
    uint32_t const ces[9] = { 0x3C23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_393)
{
    // 16AEC 003F;	
    // (𖫬) BASSA VAH LETTER E	[3C23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEC, 0x003F };
    uint32_t const ces[9] = { 0x3C23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_394)
{
    // 16AEC 0061;	
    // (𖫬) BASSA VAH LETTER E	[3C23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEC, 0x0061 };
    uint32_t const ces[9] = { 0x3C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_395)
{
    // 16AEC 0041;	
    // (𖫬) BASSA VAH LETTER E	[3C23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AEC, 0x0041 };
    uint32_t const ces[9] = { 0x3C23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_396)
{
    // 16AEC 0062;	
    // (𖫬) BASSA VAH LETTER E	[3C23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AEC, 0x0062 };
    uint32_t const ces[9] = { 0x3C23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_397)
{
    // 16AED 0021;	
    // (𖫭) BASSA VAH LETTER I	[3C24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AED, 0x0021 };
    uint32_t const ces[9] = { 0x3C24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_398)
{
    // 16AED 003F;	
    // (𖫭) BASSA VAH LETTER I	[3C24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AED, 0x003F };
    uint32_t const ces[9] = { 0x3C24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_399)
{
    // 16AED 0061;	
    // (𖫭) BASSA VAH LETTER I	[3C24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AED, 0x0061 };
    uint32_t const ces[9] = { 0x3C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_400)
{
    // 16AED 0041;	
    // (𖫭) BASSA VAH LETTER I	[3C24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16AED, 0x0041 };
    uint32_t const ces[9] = { 0x3C24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_401)
{
    // 16AED 0062;	
    // (𖫭) BASSA VAH LETTER I	[3C24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16AED, 0x0062 };
    uint32_t const ces[9] = { 0x3C24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_402)
{
    // 1E800 0021;	
    // (‎‎𞠀‎‎) MENDE KIKAKUI SYLLABLE M001 KI	[3C25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E800, 0x0021 };
    uint32_t const ces[9] = { 0x3C25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_403)
{
    // 1E800 003F;	
    // (‎‎𞠀‎‎) MENDE KIKAKUI SYLLABLE M001 KI	[3C25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E800, 0x003F };
    uint32_t const ces[9] = { 0x3C25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_404)
{
    // 1E800 0061;	
    // (‎‎𞠀‎‎) MENDE KIKAKUI SYLLABLE M001 KI	[3C25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E800, 0x0061 };
    uint32_t const ces[9] = { 0x3C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_405)
{
    // 1E800 0041;	
    // (‎‎𞠀‎‎) MENDE KIKAKUI SYLLABLE M001 KI	[3C25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E800, 0x0041 };
    uint32_t const ces[9] = { 0x3C25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_406)
{
    // 1E800 0062;	
    // (‎‎𞠀‎‎) MENDE KIKAKUI SYLLABLE M001 KI	[3C25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E800, 0x0062 };
    uint32_t const ces[9] = { 0x3C25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_407)
{
    // 1E801 0021;	
    // (‎‎𞠁‎‎) MENDE KIKAKUI SYLLABLE M002 KA	[3C26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E801, 0x0021 };
    uint32_t const ces[9] = { 0x3C26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_408)
{
    // 1E801 003F;	
    // (‎‎𞠁‎‎) MENDE KIKAKUI SYLLABLE M002 KA	[3C26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E801, 0x003F };
    uint32_t const ces[9] = { 0x3C26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_409)
{
    // 1E801 0061;	
    // (‎‎𞠁‎‎) MENDE KIKAKUI SYLLABLE M002 KA	[3C26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E801, 0x0061 };
    uint32_t const ces[9] = { 0x3C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_410)
{
    // 1E801 0041;	
    // (‎‎𞠁‎‎) MENDE KIKAKUI SYLLABLE M002 KA	[3C26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E801, 0x0041 };
    uint32_t const ces[9] = { 0x3C26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_411)
{
    // 1E801 0062;	
    // (‎‎𞠁‎‎) MENDE KIKAKUI SYLLABLE M002 KA	[3C26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E801, 0x0062 };
    uint32_t const ces[9] = { 0x3C26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_412)
{
    // 1E802 0021;	
    // (‎‎𞠂‎‎) MENDE KIKAKUI SYLLABLE M003 KU	[3C27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E802, 0x0021 };
    uint32_t const ces[9] = { 0x3C27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_413)
{
    // 1E802 003F;	
    // (‎‎𞠂‎‎) MENDE KIKAKUI SYLLABLE M003 KU	[3C27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E802, 0x003F };
    uint32_t const ces[9] = { 0x3C27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_414)
{
    // 1E802 0061;	
    // (‎‎𞠂‎‎) MENDE KIKAKUI SYLLABLE M003 KU	[3C27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E802, 0x0061 };
    uint32_t const ces[9] = { 0x3C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_415)
{
    // 1E802 0041;	
    // (‎‎𞠂‎‎) MENDE KIKAKUI SYLLABLE M003 KU	[3C27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E802, 0x0041 };
    uint32_t const ces[9] = { 0x3C27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_416)
{
    // 1E802 0062;	
    // (‎‎𞠂‎‎) MENDE KIKAKUI SYLLABLE M003 KU	[3C27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E802, 0x0062 };
    uint32_t const ces[9] = { 0x3C27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_417)
{
    // 1E803 0021;	
    // (‎‎𞠃‎‎) MENDE KIKAKUI SYLLABLE M065 KEE	[3C28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E803, 0x0021 };
    uint32_t const ces[9] = { 0x3C28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_418)
{
    // 1E803 003F;	
    // (‎‎𞠃‎‎) MENDE KIKAKUI SYLLABLE M065 KEE	[3C28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E803, 0x003F };
    uint32_t const ces[9] = { 0x3C28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_419)
{
    // 1E803 0061;	
    // (‎‎𞠃‎‎) MENDE KIKAKUI SYLLABLE M065 KEE	[3C28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E803, 0x0061 };
    uint32_t const ces[9] = { 0x3C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_420)
{
    // 1E803 0041;	
    // (‎‎𞠃‎‎) MENDE KIKAKUI SYLLABLE M065 KEE	[3C28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E803, 0x0041 };
    uint32_t const ces[9] = { 0x3C28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_421)
{
    // 1E803 0062;	
    // (‎‎𞠃‎‎) MENDE KIKAKUI SYLLABLE M065 KEE	[3C28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E803, 0x0062 };
    uint32_t const ces[9] = { 0x3C28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_422)
{
    // 1E804 0021;	
    // (‎‎𞠄‎‎) MENDE KIKAKUI SYLLABLE M095 KE	[3C29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E804, 0x0021 };
    uint32_t const ces[9] = { 0x3C29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_423)
{
    // 1E804 003F;	
    // (‎‎𞠄‎‎) MENDE KIKAKUI SYLLABLE M095 KE	[3C29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E804, 0x003F };
    uint32_t const ces[9] = { 0x3C29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_424)
{
    // 1E804 0061;	
    // (‎‎𞠄‎‎) MENDE KIKAKUI SYLLABLE M095 KE	[3C29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E804, 0x0061 };
    uint32_t const ces[9] = { 0x3C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_425)
{
    // 1E804 0041;	
    // (‎‎𞠄‎‎) MENDE KIKAKUI SYLLABLE M095 KE	[3C29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E804, 0x0041 };
    uint32_t const ces[9] = { 0x3C29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_426)
{
    // 1E804 0062;	
    // (‎‎𞠄‎‎) MENDE KIKAKUI SYLLABLE M095 KE	[3C29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E804, 0x0062 };
    uint32_t const ces[9] = { 0x3C29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_427)
{
    // 1E805 0021;	
    // (‎‎𞠅‎‎) MENDE KIKAKUI SYLLABLE M076 KOO	[3C2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E805, 0x0021 };
    uint32_t const ces[9] = { 0x3C2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_428)
{
    // 1E805 003F;	
    // (‎‎𞠅‎‎) MENDE KIKAKUI SYLLABLE M076 KOO	[3C2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E805, 0x003F };
    uint32_t const ces[9] = { 0x3C2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_429)
{
    // 1E805 0061;	
    // (‎‎𞠅‎‎) MENDE KIKAKUI SYLLABLE M076 KOO	[3C2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E805, 0x0061 };
    uint32_t const ces[9] = { 0x3C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_430)
{
    // 1E805 0041;	
    // (‎‎𞠅‎‎) MENDE KIKAKUI SYLLABLE M076 KOO	[3C2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E805, 0x0041 };
    uint32_t const ces[9] = { 0x3C2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_431)
{
    // 1E805 0062;	
    // (‎‎𞠅‎‎) MENDE KIKAKUI SYLLABLE M076 KOO	[3C2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E805, 0x0062 };
    uint32_t const ces[9] = { 0x3C2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_432)
{
    // 1E806 0021;	
    // (‎‎𞠆‎‎) MENDE KIKAKUI SYLLABLE M048 KO	[3C2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E806, 0x0021 };
    uint32_t const ces[9] = { 0x3C2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_433)
{
    // 1E806 003F;	
    // (‎‎𞠆‎‎) MENDE KIKAKUI SYLLABLE M048 KO	[3C2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E806, 0x003F };
    uint32_t const ces[9] = { 0x3C2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_434)
{
    // 1E806 0061;	
    // (‎‎𞠆‎‎) MENDE KIKAKUI SYLLABLE M048 KO	[3C2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E806, 0x0061 };
    uint32_t const ces[9] = { 0x3C2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_435)
{
    // 1E806 0041;	
    // (‎‎𞠆‎‎) MENDE KIKAKUI SYLLABLE M048 KO	[3C2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E806, 0x0041 };
    uint32_t const ces[9] = { 0x3C2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_436)
{
    // 1E806 0062;	
    // (‎‎𞠆‎‎) MENDE KIKAKUI SYLLABLE M048 KO	[3C2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E806, 0x0062 };
    uint32_t const ces[9] = { 0x3C2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_437)
{
    // 1E807 0021;	
    // (‎‎𞠇‎‎) MENDE KIKAKUI SYLLABLE M179 KUA	[3C2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E807, 0x0021 };
    uint32_t const ces[9] = { 0x3C2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_438)
{
    // 1E807 003F;	
    // (‎‎𞠇‎‎) MENDE KIKAKUI SYLLABLE M179 KUA	[3C2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E807, 0x003F };
    uint32_t const ces[9] = { 0x3C2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_439)
{
    // 1E807 0061;	
    // (‎‎𞠇‎‎) MENDE KIKAKUI SYLLABLE M179 KUA	[3C2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E807, 0x0061 };
    uint32_t const ces[9] = { 0x3C2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_440)
{
    // 1E807 0041;	
    // (‎‎𞠇‎‎) MENDE KIKAKUI SYLLABLE M179 KUA	[3C2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E807, 0x0041 };
    uint32_t const ces[9] = { 0x3C2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_441)
{
    // 1E807 0062;	
    // (‎‎𞠇‎‎) MENDE KIKAKUI SYLLABLE M179 KUA	[3C2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E807, 0x0062 };
    uint32_t const ces[9] = { 0x3C2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_442)
{
    // 1E808 0021;	
    // (‎‎𞠈‎‎) MENDE KIKAKUI SYLLABLE M004 WI	[3C2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E808, 0x0021 };
    uint32_t const ces[9] = { 0x3C2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_443)
{
    // 1E808 003F;	
    // (‎‎𞠈‎‎) MENDE KIKAKUI SYLLABLE M004 WI	[3C2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E808, 0x003F };
    uint32_t const ces[9] = { 0x3C2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_444)
{
    // 1E808 0061;	
    // (‎‎𞠈‎‎) MENDE KIKAKUI SYLLABLE M004 WI	[3C2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E808, 0x0061 };
    uint32_t const ces[9] = { 0x3C2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_445)
{
    // 1E808 0041;	
    // (‎‎𞠈‎‎) MENDE KIKAKUI SYLLABLE M004 WI	[3C2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E808, 0x0041 };
    uint32_t const ces[9] = { 0x3C2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_446)
{
    // 1E808 0062;	
    // (‎‎𞠈‎‎) MENDE KIKAKUI SYLLABLE M004 WI	[3C2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E808, 0x0062 };
    uint32_t const ces[9] = { 0x3C2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_447)
{
    // 1E809 0021;	
    // (‎‎𞠉‎‎) MENDE KIKAKUI SYLLABLE M005 WA	[3C2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E809, 0x0021 };
    uint32_t const ces[9] = { 0x3C2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_448)
{
    // 1E809 003F;	
    // (‎‎𞠉‎‎) MENDE KIKAKUI SYLLABLE M005 WA	[3C2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E809, 0x003F };
    uint32_t const ces[9] = { 0x3C2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_449)
{
    // 1E809 0061;	
    // (‎‎𞠉‎‎) MENDE KIKAKUI SYLLABLE M005 WA	[3C2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E809, 0x0061 };
    uint32_t const ces[9] = { 0x3C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_450)
{
    // 1E809 0041;	
    // (‎‎𞠉‎‎) MENDE KIKAKUI SYLLABLE M005 WA	[3C2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E809, 0x0041 };
    uint32_t const ces[9] = { 0x3C2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_451)
{
    // 1E809 0062;	
    // (‎‎𞠉‎‎) MENDE KIKAKUI SYLLABLE M005 WA	[3C2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E809, 0x0062 };
    uint32_t const ces[9] = { 0x3C2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_452)
{
    // 1E80A 0021;	
    // (‎‎𞠊‎‎) MENDE KIKAKUI SYLLABLE M006 WU	[3C2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80A, 0x0021 };
    uint32_t const ces[9] = { 0x3C2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_453)
{
    // 1E80A 003F;	
    // (‎‎𞠊‎‎) MENDE KIKAKUI SYLLABLE M006 WU	[3C2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80A, 0x003F };
    uint32_t const ces[9] = { 0x3C2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_454)
{
    // 1E80A 0061;	
    // (‎‎𞠊‎‎) MENDE KIKAKUI SYLLABLE M006 WU	[3C2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80A, 0x0061 };
    uint32_t const ces[9] = { 0x3C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_455)
{
    // 1E80A 0041;	
    // (‎‎𞠊‎‎) MENDE KIKAKUI SYLLABLE M006 WU	[3C2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E80A, 0x0041 };
    uint32_t const ces[9] = { 0x3C2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_456)
{
    // 1E80A 0062;	
    // (‎‎𞠊‎‎) MENDE KIKAKUI SYLLABLE M006 WU	[3C2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80A, 0x0062 };
    uint32_t const ces[9] = { 0x3C2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_457)
{
    // 1E80B 0021;	
    // (‎‎𞠋‎‎) MENDE KIKAKUI SYLLABLE M126 WEE	[3C30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80B, 0x0021 };
    uint32_t const ces[9] = { 0x3C30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_458)
{
    // 1E80B 003F;	
    // (‎‎𞠋‎‎) MENDE KIKAKUI SYLLABLE M126 WEE	[3C30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80B, 0x003F };
    uint32_t const ces[9] = { 0x3C30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_459)
{
    // 1E80B 0061;	
    // (‎‎𞠋‎‎) MENDE KIKAKUI SYLLABLE M126 WEE	[3C30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80B, 0x0061 };
    uint32_t const ces[9] = { 0x3C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_460)
{
    // 1E80B 0041;	
    // (‎‎𞠋‎‎) MENDE KIKAKUI SYLLABLE M126 WEE	[3C30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E80B, 0x0041 };
    uint32_t const ces[9] = { 0x3C30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_461)
{
    // 1E80B 0062;	
    // (‎‎𞠋‎‎) MENDE KIKAKUI SYLLABLE M126 WEE	[3C30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80B, 0x0062 };
    uint32_t const ces[9] = { 0x3C30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_462)
{
    // 1E80C 0021;	
    // (‎‎𞠌‎‎) MENDE KIKAKUI SYLLABLE M118 WE	[3C31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80C, 0x0021 };
    uint32_t const ces[9] = { 0x3C31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_463)
{
    // 1E80C 003F;	
    // (‎‎𞠌‎‎) MENDE KIKAKUI SYLLABLE M118 WE	[3C31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80C, 0x003F };
    uint32_t const ces[9] = { 0x3C31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_464)
{
    // 1E80C 0061;	
    // (‎‎𞠌‎‎) MENDE KIKAKUI SYLLABLE M118 WE	[3C31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80C, 0x0061 };
    uint32_t const ces[9] = { 0x3C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_465)
{
    // 1E80C 0041;	
    // (‎‎𞠌‎‎) MENDE KIKAKUI SYLLABLE M118 WE	[3C31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E80C, 0x0041 };
    uint32_t const ces[9] = { 0x3C31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_466)
{
    // 1E80C 0062;	
    // (‎‎𞠌‎‎) MENDE KIKAKUI SYLLABLE M118 WE	[3C31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80C, 0x0062 };
    uint32_t const ces[9] = { 0x3C31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_467)
{
    // 1E80D 0021;	
    // (‎‎𞠍‎‎) MENDE KIKAKUI SYLLABLE M114 WOO	[3C32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80D, 0x0021 };
    uint32_t const ces[9] = { 0x3C32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_468)
{
    // 1E80D 003F;	
    // (‎‎𞠍‎‎) MENDE KIKAKUI SYLLABLE M114 WOO	[3C32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80D, 0x003F };
    uint32_t const ces[9] = { 0x3C32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_469)
{
    // 1E80D 0061;	
    // (‎‎𞠍‎‎) MENDE KIKAKUI SYLLABLE M114 WOO	[3C32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80D, 0x0061 };
    uint32_t const ces[9] = { 0x3C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_470)
{
    // 1E80D 0041;	
    // (‎‎𞠍‎‎) MENDE KIKAKUI SYLLABLE M114 WOO	[3C32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E80D, 0x0041 };
    uint32_t const ces[9] = { 0x3C32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_471)
{
    // 1E80D 0062;	
    // (‎‎𞠍‎‎) MENDE KIKAKUI SYLLABLE M114 WOO	[3C32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80D, 0x0062 };
    uint32_t const ces[9] = { 0x3C32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_472)
{
    // 1E80E 0021;	
    // (‎‎𞠎‎‎) MENDE KIKAKUI SYLLABLE M045 WO	[3C33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80E, 0x0021 };
    uint32_t const ces[9] = { 0x3C33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_473)
{
    // 1E80E 003F;	
    // (‎‎𞠎‎‎) MENDE KIKAKUI SYLLABLE M045 WO	[3C33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80E, 0x003F };
    uint32_t const ces[9] = { 0x3C33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_474)
{
    // 1E80E 0061;	
    // (‎‎𞠎‎‎) MENDE KIKAKUI SYLLABLE M045 WO	[3C33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80E, 0x0061 };
    uint32_t const ces[9] = { 0x3C33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_475)
{
    // 1E80E 0041;	
    // (‎‎𞠎‎‎) MENDE KIKAKUI SYLLABLE M045 WO	[3C33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E80E, 0x0041 };
    uint32_t const ces[9] = { 0x3C33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_476)
{
    // 1E80E 0062;	
    // (‎‎𞠎‎‎) MENDE KIKAKUI SYLLABLE M045 WO	[3C33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80E, 0x0062 };
    uint32_t const ces[9] = { 0x3C33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_477)
{
    // 1E80F 0021;	
    // (‎‎𞠏‎‎) MENDE KIKAKUI SYLLABLE M194 WUI	[3C34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80F, 0x0021 };
    uint32_t const ces[9] = { 0x3C34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_478)
{
    // 1E80F 003F;	
    // (‎‎𞠏‎‎) MENDE KIKAKUI SYLLABLE M194 WUI	[3C34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80F, 0x003F };
    uint32_t const ces[9] = { 0x3C34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_479)
{
    // 1E80F 0061;	
    // (‎‎𞠏‎‎) MENDE KIKAKUI SYLLABLE M194 WUI	[3C34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80F, 0x0061 };
    uint32_t const ces[9] = { 0x3C34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_480)
{
    // 1E80F 0041;	
    // (‎‎𞠏‎‎) MENDE KIKAKUI SYLLABLE M194 WUI	[3C34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E80F, 0x0041 };
    uint32_t const ces[9] = { 0x3C34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_481)
{
    // 1E80F 0062;	
    // (‎‎𞠏‎‎) MENDE KIKAKUI SYLLABLE M194 WUI	[3C34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E80F, 0x0062 };
    uint32_t const ces[9] = { 0x3C34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_482)
{
    // 1E810 0021;	
    // (‎‎𞠐‎‎) MENDE KIKAKUI SYLLABLE M143 WEI	[3C35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E810, 0x0021 };
    uint32_t const ces[9] = { 0x3C35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_483)
{
    // 1E810 003F;	
    // (‎‎𞠐‎‎) MENDE KIKAKUI SYLLABLE M143 WEI	[3C35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E810, 0x003F };
    uint32_t const ces[9] = { 0x3C35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_484)
{
    // 1E810 0061;	
    // (‎‎𞠐‎‎) MENDE KIKAKUI SYLLABLE M143 WEI	[3C35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E810, 0x0061 };
    uint32_t const ces[9] = { 0x3C35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_485)
{
    // 1E810 0041;	
    // (‎‎𞠐‎‎) MENDE KIKAKUI SYLLABLE M143 WEI	[3C35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E810, 0x0041 };
    uint32_t const ces[9] = { 0x3C35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_486)
{
    // 1E810 0062;	
    // (‎‎𞠐‎‎) MENDE KIKAKUI SYLLABLE M143 WEI	[3C35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E810, 0x0062 };
    uint32_t const ces[9] = { 0x3C35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_487)
{
    // 1E811 0021;	
    // (‎‎𞠑‎‎) MENDE KIKAKUI SYLLABLE M061 WVI	[3C36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E811, 0x0021 };
    uint32_t const ces[9] = { 0x3C36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_488)
{
    // 1E811 003F;	
    // (‎‎𞠑‎‎) MENDE KIKAKUI SYLLABLE M061 WVI	[3C36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E811, 0x003F };
    uint32_t const ces[9] = { 0x3C36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_489)
{
    // 1E811 0061;	
    // (‎‎𞠑‎‎) MENDE KIKAKUI SYLLABLE M061 WVI	[3C36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E811, 0x0061 };
    uint32_t const ces[9] = { 0x3C36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_490)
{
    // 1E811 0041;	
    // (‎‎𞠑‎‎) MENDE KIKAKUI SYLLABLE M061 WVI	[3C36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E811, 0x0041 };
    uint32_t const ces[9] = { 0x3C36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_491)
{
    // 1E811 0062;	
    // (‎‎𞠑‎‎) MENDE KIKAKUI SYLLABLE M061 WVI	[3C36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E811, 0x0062 };
    uint32_t const ces[9] = { 0x3C36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_492)
{
    // 1E812 0021;	
    // (‎‎𞠒‎‎) MENDE KIKAKUI SYLLABLE M049 WVA	[3C37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E812, 0x0021 };
    uint32_t const ces[9] = { 0x3C37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_493)
{
    // 1E812 003F;	
    // (‎‎𞠒‎‎) MENDE KIKAKUI SYLLABLE M049 WVA	[3C37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E812, 0x003F };
    uint32_t const ces[9] = { 0x3C37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_494)
{
    // 1E812 0061;	
    // (‎‎𞠒‎‎) MENDE KIKAKUI SYLLABLE M049 WVA	[3C37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E812, 0x0061 };
    uint32_t const ces[9] = { 0x3C37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_495)
{
    // 1E812 0041;	
    // (‎‎𞠒‎‎) MENDE KIKAKUI SYLLABLE M049 WVA	[3C37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1E812, 0x0041 };
    uint32_t const ces[9] = { 0x3C37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_496)
{
    // 1E812 0062;	
    // (‎‎𞠒‎‎) MENDE KIKAKUI SYLLABLE M049 WVA	[3C37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E812, 0x0062 };
    uint32_t const ces[9] = { 0x3C37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_497)
{
    // 1E813 0021;	
    // (‎‎𞠓‎‎) MENDE KIKAKUI SYLLABLE M139 WVE	[3C38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E813, 0x0021 };
    uint32_t const ces[9] = { 0x3C38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_498)
{
    // 1E813 003F;	
    // (‎‎𞠓‎‎) MENDE KIKAKUI SYLLABLE M139 WVE	[3C38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E813, 0x003F };
    uint32_t const ces[9] = { 0x3C38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_237_499)
{
    // 1E813 0061;	
    // (‎‎𞠓‎‎) MENDE KIKAKUI SYLLABLE M139 WVE	[3C38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1E813, 0x0061 };
    uint32_t const ces[9] = { 0x3C38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

