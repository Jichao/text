// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_335_000)
{
    // 3734 003F;	
    // (㜴) CJK UNIFIED IDEOGRAPH-3734	[FB80 B734 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3734, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB734, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_001)
{
    // 3734 0061;	
    // (㜴) CJK UNIFIED IDEOGRAPH-3734	[FB80 B734 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3734, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_002)
{
    // 3734 0041;	
    // (㜴) CJK UNIFIED IDEOGRAPH-3734	[FB80 B734 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3734, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB734, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_003)
{
    // 3734 0062;	
    // (㜴) CJK UNIFIED IDEOGRAPH-3734	[FB80 B734 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3734, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB734, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_004)
{
    // 3735 0021;	
    // (㜵) CJK UNIFIED IDEOGRAPH-3735	[FB80 B735 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3735, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB735, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_005)
{
    // 3735 003F;	
    // (㜵) CJK UNIFIED IDEOGRAPH-3735	[FB80 B735 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3735, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB735, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_006)
{
    // 3735 0061;	
    // (㜵) CJK UNIFIED IDEOGRAPH-3735	[FB80 B735 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3735, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_007)
{
    // 3735 0041;	
    // (㜵) CJK UNIFIED IDEOGRAPH-3735	[FB80 B735 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3735, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_008)
{
    // 3735 0062;	
    // (㜵) CJK UNIFIED IDEOGRAPH-3735	[FB80 B735 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3735, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB735, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_009)
{
    // 3736 0021;	
    // (㜶) CJK UNIFIED IDEOGRAPH-3736	[FB80 B736 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3736, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB736, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_010)
{
    // 3736 003F;	
    // (㜶) CJK UNIFIED IDEOGRAPH-3736	[FB80 B736 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3736, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB736, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_011)
{
    // 3736 0061;	
    // (㜶) CJK UNIFIED IDEOGRAPH-3736	[FB80 B736 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3736, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_012)
{
    // 3736 0041;	
    // (㜶) CJK UNIFIED IDEOGRAPH-3736	[FB80 B736 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3736, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB736, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_013)
{
    // 3736 0062;	
    // (㜶) CJK UNIFIED IDEOGRAPH-3736	[FB80 B736 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3736, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB736, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_014)
{
    // 3737 0021;	
    // (㜷) CJK UNIFIED IDEOGRAPH-3737	[FB80 B737 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3737, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB737, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_015)
{
    // 3737 003F;	
    // (㜷) CJK UNIFIED IDEOGRAPH-3737	[FB80 B737 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3737, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB737, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_016)
{
    // 3737 0061;	
    // (㜷) CJK UNIFIED IDEOGRAPH-3737	[FB80 B737 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3737, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_017)
{
    // 3737 0041;	
    // (㜷) CJK UNIFIED IDEOGRAPH-3737	[FB80 B737 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3737, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB737, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_018)
{
    // 3737 0062;	
    // (㜷) CJK UNIFIED IDEOGRAPH-3737	[FB80 B737 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3737, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB737, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_019)
{
    // 3738 0021;	
    // (㜸) CJK UNIFIED IDEOGRAPH-3738	[FB80 B738 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3738, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB738, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_020)
{
    // 3738 003F;	
    // (㜸) CJK UNIFIED IDEOGRAPH-3738	[FB80 B738 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3738, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB738, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_021)
{
    // 3738 0061;	
    // (㜸) CJK UNIFIED IDEOGRAPH-3738	[FB80 B738 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3738, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_022)
{
    // 3738 0041;	
    // (㜸) CJK UNIFIED IDEOGRAPH-3738	[FB80 B738 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3738, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB738, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_023)
{
    // 3738 0062;	
    // (㜸) CJK UNIFIED IDEOGRAPH-3738	[FB80 B738 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3738, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB738, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_024)
{
    // 3739 0021;	
    // (㜹) CJK UNIFIED IDEOGRAPH-3739	[FB80 B739 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3739, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB739, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_025)
{
    // 3739 003F;	
    // (㜹) CJK UNIFIED IDEOGRAPH-3739	[FB80 B739 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3739, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB739, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_026)
{
    // 3739 0061;	
    // (㜹) CJK UNIFIED IDEOGRAPH-3739	[FB80 B739 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3739, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_027)
{
    // 3739 0041;	
    // (㜹) CJK UNIFIED IDEOGRAPH-3739	[FB80 B739 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3739, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB739, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_028)
{
    // 3739 0062;	
    // (㜹) CJK UNIFIED IDEOGRAPH-3739	[FB80 B739 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3739, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB739, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_029)
{
    // 373A 0021;	
    // (㜺) CJK UNIFIED IDEOGRAPH-373A	[FB80 B73A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB73A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_030)
{
    // 373A 003F;	
    // (㜺) CJK UNIFIED IDEOGRAPH-373A	[FB80 B73A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB73A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_031)
{
    // 373A 0061;	
    // (㜺) CJK UNIFIED IDEOGRAPH-373A	[FB80 B73A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB73A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_032)
{
    // 373A 0041;	
    // (㜺) CJK UNIFIED IDEOGRAPH-373A	[FB80 B73A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x373A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB73A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_033)
{
    // 373A 0062;	
    // (㜺) CJK UNIFIED IDEOGRAPH-373A	[FB80 B73A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB73A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_034)
{
    // 373B 0021;	
    // (㜻) CJK UNIFIED IDEOGRAPH-373B	[FB80 B73B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB73B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_035)
{
    // 373B 003F;	
    // (㜻) CJK UNIFIED IDEOGRAPH-373B	[FB80 B73B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB73B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_036)
{
    // 373B 0061;	
    // (㜻) CJK UNIFIED IDEOGRAPH-373B	[FB80 B73B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB73B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_037)
{
    // 373B 0041;	
    // (㜻) CJK UNIFIED IDEOGRAPH-373B	[FB80 B73B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x373B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB73B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_038)
{
    // 373B 0062;	
    // (㜻) CJK UNIFIED IDEOGRAPH-373B	[FB80 B73B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB73B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_039)
{
    // 373C 0021;	
    // (㜼) CJK UNIFIED IDEOGRAPH-373C	[FB80 B73C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB73C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_040)
{
    // 373C 003F;	
    // (㜼) CJK UNIFIED IDEOGRAPH-373C	[FB80 B73C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB73C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_041)
{
    // 373C 0061;	
    // (㜼) CJK UNIFIED IDEOGRAPH-373C	[FB80 B73C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB73C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_042)
{
    // 373C 0041;	
    // (㜼) CJK UNIFIED IDEOGRAPH-373C	[FB80 B73C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x373C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB73C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_043)
{
    // 373C 0062;	
    // (㜼) CJK UNIFIED IDEOGRAPH-373C	[FB80 B73C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB73C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_044)
{
    // 373D 0021;	
    // (㜽) CJK UNIFIED IDEOGRAPH-373D	[FB80 B73D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB73D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_045)
{
    // 373D 003F;	
    // (㜽) CJK UNIFIED IDEOGRAPH-373D	[FB80 B73D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB73D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_046)
{
    // 373D 0061;	
    // (㜽) CJK UNIFIED IDEOGRAPH-373D	[FB80 B73D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB73D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_047)
{
    // 373D 0041;	
    // (㜽) CJK UNIFIED IDEOGRAPH-373D	[FB80 B73D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x373D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB73D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_048)
{
    // 373D 0062;	
    // (㜽) CJK UNIFIED IDEOGRAPH-373D	[FB80 B73D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB73D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_049)
{
    // 373E 0021;	
    // (㜾) CJK UNIFIED IDEOGRAPH-373E	[FB80 B73E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB73E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_050)
{
    // 373E 003F;	
    // (㜾) CJK UNIFIED IDEOGRAPH-373E	[FB80 B73E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB73E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_051)
{
    // 373E 0061;	
    // (㜾) CJK UNIFIED IDEOGRAPH-373E	[FB80 B73E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB73E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_052)
{
    // 373E 0041;	
    // (㜾) CJK UNIFIED IDEOGRAPH-373E	[FB80 B73E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x373E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB73E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_053)
{
    // 373E 0062;	
    // (㜾) CJK UNIFIED IDEOGRAPH-373E	[FB80 B73E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB73E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_054)
{
    // 373F 0021;	
    // (㜿) CJK UNIFIED IDEOGRAPH-373F	[FB80 B73F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB73F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_055)
{
    // 373F 003F;	
    // (㜿) CJK UNIFIED IDEOGRAPH-373F	[FB80 B73F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB73F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_056)
{
    // 373F 0061;	
    // (㜿) CJK UNIFIED IDEOGRAPH-373F	[FB80 B73F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB73F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_057)
{
    // 373F 0041;	
    // (㜿) CJK UNIFIED IDEOGRAPH-373F	[FB80 B73F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x373F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB73F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_058)
{
    // 373F 0062;	
    // (㜿) CJK UNIFIED IDEOGRAPH-373F	[FB80 B73F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x373F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB73F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_059)
{
    // 3740 0021;	
    // (㝀) CJK UNIFIED IDEOGRAPH-3740	[FB80 B740 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3740, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB740, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_060)
{
    // 3740 003F;	
    // (㝀) CJK UNIFIED IDEOGRAPH-3740	[FB80 B740 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3740, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB740, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_061)
{
    // 3740 0061;	
    // (㝀) CJK UNIFIED IDEOGRAPH-3740	[FB80 B740 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3740, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_062)
{
    // 3740 0041;	
    // (㝀) CJK UNIFIED IDEOGRAPH-3740	[FB80 B740 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3740, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB740, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_063)
{
    // 3740 0062;	
    // (㝀) CJK UNIFIED IDEOGRAPH-3740	[FB80 B740 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3740, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB740, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_064)
{
    // 3741 0021;	
    // (㝁) CJK UNIFIED IDEOGRAPH-3741	[FB80 B741 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3741, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB741, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_065)
{
    // 3741 003F;	
    // (㝁) CJK UNIFIED IDEOGRAPH-3741	[FB80 B741 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3741, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB741, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_066)
{
    // 3741 0061;	
    // (㝁) CJK UNIFIED IDEOGRAPH-3741	[FB80 B741 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3741, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_067)
{
    // 3741 0041;	
    // (㝁) CJK UNIFIED IDEOGRAPH-3741	[FB80 B741 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3741, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB741, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_068)
{
    // 3741 0062;	
    // (㝁) CJK UNIFIED IDEOGRAPH-3741	[FB80 B741 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3741, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB741, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_069)
{
    // 3742 0021;	
    // (㝂) CJK UNIFIED IDEOGRAPH-3742	[FB80 B742 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3742, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB742, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_070)
{
    // 3742 003F;	
    // (㝂) CJK UNIFIED IDEOGRAPH-3742	[FB80 B742 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3742, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB742, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_071)
{
    // 3742 0061;	
    // (㝂) CJK UNIFIED IDEOGRAPH-3742	[FB80 B742 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3742, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_072)
{
    // 3742 0041;	
    // (㝂) CJK UNIFIED IDEOGRAPH-3742	[FB80 B742 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3742, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB742, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_073)
{
    // 3742 0062;	
    // (㝂) CJK UNIFIED IDEOGRAPH-3742	[FB80 B742 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3742, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB742, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_074)
{
    // 3743 0021;	
    // (㝃) CJK UNIFIED IDEOGRAPH-3743	[FB80 B743 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3743, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB743, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_075)
{
    // 3743 003F;	
    // (㝃) CJK UNIFIED IDEOGRAPH-3743	[FB80 B743 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3743, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB743, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_076)
{
    // 3743 0061;	
    // (㝃) CJK UNIFIED IDEOGRAPH-3743	[FB80 B743 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3743, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_077)
{
    // 3743 0041;	
    // (㝃) CJK UNIFIED IDEOGRAPH-3743	[FB80 B743 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3743, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB743, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_078)
{
    // 3743 0062;	
    // (㝃) CJK UNIFIED IDEOGRAPH-3743	[FB80 B743 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3743, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB743, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_079)
{
    // 3744 0021;	
    // (㝄) CJK UNIFIED IDEOGRAPH-3744	[FB80 B744 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3744, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB744, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_080)
{
    // 3744 003F;	
    // (㝄) CJK UNIFIED IDEOGRAPH-3744	[FB80 B744 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3744, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB744, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_081)
{
    // 3744 0061;	
    // (㝄) CJK UNIFIED IDEOGRAPH-3744	[FB80 B744 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3744, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_082)
{
    // 3744 0041;	
    // (㝄) CJK UNIFIED IDEOGRAPH-3744	[FB80 B744 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3744, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB744, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_083)
{
    // 3744 0062;	
    // (㝄) CJK UNIFIED IDEOGRAPH-3744	[FB80 B744 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3744, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB744, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_084)
{
    // 3745 0021;	
    // (㝅) CJK UNIFIED IDEOGRAPH-3745	[FB80 B745 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3745, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB745, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_085)
{
    // 3745 003F;	
    // (㝅) CJK UNIFIED IDEOGRAPH-3745	[FB80 B745 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3745, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB745, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_086)
{
    // 3745 0061;	
    // (㝅) CJK UNIFIED IDEOGRAPH-3745	[FB80 B745 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3745, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_087)
{
    // 3745 0041;	
    // (㝅) CJK UNIFIED IDEOGRAPH-3745	[FB80 B745 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3745, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB745, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_088)
{
    // 3745 0062;	
    // (㝅) CJK UNIFIED IDEOGRAPH-3745	[FB80 B745 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3745, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB745, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_089)
{
    // 3746 0021;	
    // (㝆) CJK UNIFIED IDEOGRAPH-3746	[FB80 B746 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3746, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB746, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_090)
{
    // 3746 003F;	
    // (㝆) CJK UNIFIED IDEOGRAPH-3746	[FB80 B746 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3746, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB746, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_091)
{
    // 3746 0061;	
    // (㝆) CJK UNIFIED IDEOGRAPH-3746	[FB80 B746 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3746, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_092)
{
    // 3746 0041;	
    // (㝆) CJK UNIFIED IDEOGRAPH-3746	[FB80 B746 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3746, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB746, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_093)
{
    // 3746 0062;	
    // (㝆) CJK UNIFIED IDEOGRAPH-3746	[FB80 B746 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3746, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB746, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_094)
{
    // 3747 0021;	
    // (㝇) CJK UNIFIED IDEOGRAPH-3747	[FB80 B747 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3747, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB747, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_095)
{
    // 3747 003F;	
    // (㝇) CJK UNIFIED IDEOGRAPH-3747	[FB80 B747 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3747, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB747, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_096)
{
    // 3747 0061;	
    // (㝇) CJK UNIFIED IDEOGRAPH-3747	[FB80 B747 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3747, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_097)
{
    // 3747 0041;	
    // (㝇) CJK UNIFIED IDEOGRAPH-3747	[FB80 B747 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3747, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB747, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_098)
{
    // 3747 0062;	
    // (㝇) CJK UNIFIED IDEOGRAPH-3747	[FB80 B747 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3747, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB747, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_099)
{
    // 3748 0021;	
    // (㝈) CJK UNIFIED IDEOGRAPH-3748	[FB80 B748 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3748, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB748, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_100)
{
    // 3748 003F;	
    // (㝈) CJK UNIFIED IDEOGRAPH-3748	[FB80 B748 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3748, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB748, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_101)
{
    // 3748 0061;	
    // (㝈) CJK UNIFIED IDEOGRAPH-3748	[FB80 B748 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3748, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_102)
{
    // 3748 0041;	
    // (㝈) CJK UNIFIED IDEOGRAPH-3748	[FB80 B748 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3748, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB748, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_103)
{
    // 3748 0062;	
    // (㝈) CJK UNIFIED IDEOGRAPH-3748	[FB80 B748 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3748, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB748, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_104)
{
    // 3749 0021;	
    // (㝉) CJK UNIFIED IDEOGRAPH-3749	[FB80 B749 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3749, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB749, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_105)
{
    // 3749 003F;	
    // (㝉) CJK UNIFIED IDEOGRAPH-3749	[FB80 B749 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3749, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB749, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_106)
{
    // 3749 0061;	
    // (㝉) CJK UNIFIED IDEOGRAPH-3749	[FB80 B749 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3749, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_107)
{
    // 3749 0041;	
    // (㝉) CJK UNIFIED IDEOGRAPH-3749	[FB80 B749 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3749, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB749, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_108)
{
    // 3749 0062;	
    // (㝉) CJK UNIFIED IDEOGRAPH-3749	[FB80 B749 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3749, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB749, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_109)
{
    // 374A 0021;	
    // (㝊) CJK UNIFIED IDEOGRAPH-374A	[FB80 B74A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB74A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_110)
{
    // 374A 003F;	
    // (㝊) CJK UNIFIED IDEOGRAPH-374A	[FB80 B74A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB74A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_111)
{
    // 374A 0061;	
    // (㝊) CJK UNIFIED IDEOGRAPH-374A	[FB80 B74A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB74A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_112)
{
    // 374A 0041;	
    // (㝊) CJK UNIFIED IDEOGRAPH-374A	[FB80 B74A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x374A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB74A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_113)
{
    // 374A 0062;	
    // (㝊) CJK UNIFIED IDEOGRAPH-374A	[FB80 B74A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB74A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_114)
{
    // 374B 0021;	
    // (㝋) CJK UNIFIED IDEOGRAPH-374B	[FB80 B74B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB74B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_115)
{
    // 374B 003F;	
    // (㝋) CJK UNIFIED IDEOGRAPH-374B	[FB80 B74B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB74B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_116)
{
    // 374B 0061;	
    // (㝋) CJK UNIFIED IDEOGRAPH-374B	[FB80 B74B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB74B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_117)
{
    // 374B 0041;	
    // (㝋) CJK UNIFIED IDEOGRAPH-374B	[FB80 B74B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x374B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB74B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_118)
{
    // 374B 0062;	
    // (㝋) CJK UNIFIED IDEOGRAPH-374B	[FB80 B74B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB74B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_119)
{
    // 374C 0021;	
    // (㝌) CJK UNIFIED IDEOGRAPH-374C	[FB80 B74C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB74C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_120)
{
    // 374C 003F;	
    // (㝌) CJK UNIFIED IDEOGRAPH-374C	[FB80 B74C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB74C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_121)
{
    // 374C 0061;	
    // (㝌) CJK UNIFIED IDEOGRAPH-374C	[FB80 B74C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB74C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_122)
{
    // 374C 0041;	
    // (㝌) CJK UNIFIED IDEOGRAPH-374C	[FB80 B74C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x374C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB74C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_123)
{
    // 374C 0062;	
    // (㝌) CJK UNIFIED IDEOGRAPH-374C	[FB80 B74C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB74C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_124)
{
    // 374D 0021;	
    // (㝍) CJK UNIFIED IDEOGRAPH-374D	[FB80 B74D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB74D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_125)
{
    // 374D 003F;	
    // (㝍) CJK UNIFIED IDEOGRAPH-374D	[FB80 B74D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB74D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_126)
{
    // 374D 0061;	
    // (㝍) CJK UNIFIED IDEOGRAPH-374D	[FB80 B74D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB74D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_127)
{
    // 374D 0041;	
    // (㝍) CJK UNIFIED IDEOGRAPH-374D	[FB80 B74D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x374D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB74D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_128)
{
    // 374D 0062;	
    // (㝍) CJK UNIFIED IDEOGRAPH-374D	[FB80 B74D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB74D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_129)
{
    // 374E 0021;	
    // (㝎) CJK UNIFIED IDEOGRAPH-374E	[FB80 B74E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB74E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_130)
{
    // 374E 003F;	
    // (㝎) CJK UNIFIED IDEOGRAPH-374E	[FB80 B74E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB74E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_131)
{
    // 374E 0061;	
    // (㝎) CJK UNIFIED IDEOGRAPH-374E	[FB80 B74E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB74E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_132)
{
    // 374E 0041;	
    // (㝎) CJK UNIFIED IDEOGRAPH-374E	[FB80 B74E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x374E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB74E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_133)
{
    // 374E 0062;	
    // (㝎) CJK UNIFIED IDEOGRAPH-374E	[FB80 B74E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB74E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_134)
{
    // 374F 0021;	
    // (㝏) CJK UNIFIED IDEOGRAPH-374F	[FB80 B74F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB74F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_135)
{
    // 374F 003F;	
    // (㝏) CJK UNIFIED IDEOGRAPH-374F	[FB80 B74F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB74F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_136)
{
    // 374F 0061;	
    // (㝏) CJK UNIFIED IDEOGRAPH-374F	[FB80 B74F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB74F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_137)
{
    // 374F 0041;	
    // (㝏) CJK UNIFIED IDEOGRAPH-374F	[FB80 B74F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x374F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB74F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_138)
{
    // 374F 0062;	
    // (㝏) CJK UNIFIED IDEOGRAPH-374F	[FB80 B74F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x374F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB74F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_139)
{
    // 3750 0021;	
    // (㝐) CJK UNIFIED IDEOGRAPH-3750	[FB80 B750 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3750, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB750, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_140)
{
    // 3750 003F;	
    // (㝐) CJK UNIFIED IDEOGRAPH-3750	[FB80 B750 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3750, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB750, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_141)
{
    // 3750 0061;	
    // (㝐) CJK UNIFIED IDEOGRAPH-3750	[FB80 B750 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3750, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_142)
{
    // 3750 0041;	
    // (㝐) CJK UNIFIED IDEOGRAPH-3750	[FB80 B750 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3750, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB750, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_143)
{
    // 3750 0062;	
    // (㝐) CJK UNIFIED IDEOGRAPH-3750	[FB80 B750 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3750, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB750, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_144)
{
    // 3751 0021;	
    // (㝑) CJK UNIFIED IDEOGRAPH-3751	[FB80 B751 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3751, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB751, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_145)
{
    // 3751 003F;	
    // (㝑) CJK UNIFIED IDEOGRAPH-3751	[FB80 B751 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3751, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB751, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_146)
{
    // 3751 0061;	
    // (㝑) CJK UNIFIED IDEOGRAPH-3751	[FB80 B751 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3751, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_147)
{
    // 3751 0041;	
    // (㝑) CJK UNIFIED IDEOGRAPH-3751	[FB80 B751 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3751, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB751, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_148)
{
    // 3751 0062;	
    // (㝑) CJK UNIFIED IDEOGRAPH-3751	[FB80 B751 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3751, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB751, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_149)
{
    // 3752 0021;	
    // (㝒) CJK UNIFIED IDEOGRAPH-3752	[FB80 B752 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3752, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB752, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_150)
{
    // 3752 003F;	
    // (㝒) CJK UNIFIED IDEOGRAPH-3752	[FB80 B752 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3752, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB752, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_151)
{
    // 3752 0061;	
    // (㝒) CJK UNIFIED IDEOGRAPH-3752	[FB80 B752 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3752, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_152)
{
    // 3752 0041;	
    // (㝒) CJK UNIFIED IDEOGRAPH-3752	[FB80 B752 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3752, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB752, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_153)
{
    // 3752 0062;	
    // (㝒) CJK UNIFIED IDEOGRAPH-3752	[FB80 B752 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3752, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB752, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_154)
{
    // 3753 0021;	
    // (㝓) CJK UNIFIED IDEOGRAPH-3753	[FB80 B753 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3753, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB753, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_155)
{
    // 3753 003F;	
    // (㝓) CJK UNIFIED IDEOGRAPH-3753	[FB80 B753 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3753, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB753, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_156)
{
    // 3753 0061;	
    // (㝓) CJK UNIFIED IDEOGRAPH-3753	[FB80 B753 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3753, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_157)
{
    // 3753 0041;	
    // (㝓) CJK UNIFIED IDEOGRAPH-3753	[FB80 B753 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3753, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_158)
{
    // 3753 0062;	
    // (㝓) CJK UNIFIED IDEOGRAPH-3753	[FB80 B753 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3753, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB753, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_159)
{
    // 3754 0021;	
    // (㝔) CJK UNIFIED IDEOGRAPH-3754	[FB80 B754 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3754, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB754, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_160)
{
    // 3754 003F;	
    // (㝔) CJK UNIFIED IDEOGRAPH-3754	[FB80 B754 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3754, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB754, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_161)
{
    // 3754 0061;	
    // (㝔) CJK UNIFIED IDEOGRAPH-3754	[FB80 B754 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3754, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_162)
{
    // 3754 0041;	
    // (㝔) CJK UNIFIED IDEOGRAPH-3754	[FB80 B754 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3754, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB754, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_163)
{
    // 3754 0062;	
    // (㝔) CJK UNIFIED IDEOGRAPH-3754	[FB80 B754 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3754, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB754, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_164)
{
    // 3755 0021;	
    // (㝕) CJK UNIFIED IDEOGRAPH-3755	[FB80 B755 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3755, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB755, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_165)
{
    // 3755 003F;	
    // (㝕) CJK UNIFIED IDEOGRAPH-3755	[FB80 B755 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3755, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB755, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_166)
{
    // 3755 0061;	
    // (㝕) CJK UNIFIED IDEOGRAPH-3755	[FB80 B755 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3755, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_167)
{
    // 3755 0041;	
    // (㝕) CJK UNIFIED IDEOGRAPH-3755	[FB80 B755 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3755, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB755, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_168)
{
    // 3755 0062;	
    // (㝕) CJK UNIFIED IDEOGRAPH-3755	[FB80 B755 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3755, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB755, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_169)
{
    // 3756 0021;	
    // (㝖) CJK UNIFIED IDEOGRAPH-3756	[FB80 B756 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3756, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB756, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_170)
{
    // 3756 003F;	
    // (㝖) CJK UNIFIED IDEOGRAPH-3756	[FB80 B756 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3756, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB756, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_171)
{
    // 3756 0061;	
    // (㝖) CJK UNIFIED IDEOGRAPH-3756	[FB80 B756 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3756, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_172)
{
    // 3756 0041;	
    // (㝖) CJK UNIFIED IDEOGRAPH-3756	[FB80 B756 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3756, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_173)
{
    // 3756 0062;	
    // (㝖) CJK UNIFIED IDEOGRAPH-3756	[FB80 B756 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3756, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB756, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_174)
{
    // 3757 0021;	
    // (㝗) CJK UNIFIED IDEOGRAPH-3757	[FB80 B757 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3757, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB757, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_175)
{
    // 3757 003F;	
    // (㝗) CJK UNIFIED IDEOGRAPH-3757	[FB80 B757 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3757, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB757, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_176)
{
    // 3757 0061;	
    // (㝗) CJK UNIFIED IDEOGRAPH-3757	[FB80 B757 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3757, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_177)
{
    // 3757 0041;	
    // (㝗) CJK UNIFIED IDEOGRAPH-3757	[FB80 B757 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3757, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB757, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_178)
{
    // 3757 0062;	
    // (㝗) CJK UNIFIED IDEOGRAPH-3757	[FB80 B757 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3757, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB757, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_179)
{
    // 3758 0021;	
    // (㝘) CJK UNIFIED IDEOGRAPH-3758	[FB80 B758 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3758, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB758, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_180)
{
    // 3758 003F;	
    // (㝘) CJK UNIFIED IDEOGRAPH-3758	[FB80 B758 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3758, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB758, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_181)
{
    // 3758 0061;	
    // (㝘) CJK UNIFIED IDEOGRAPH-3758	[FB80 B758 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3758, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_182)
{
    // 3758 0041;	
    // (㝘) CJK UNIFIED IDEOGRAPH-3758	[FB80 B758 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3758, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB758, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_183)
{
    // 3758 0062;	
    // (㝘) CJK UNIFIED IDEOGRAPH-3758	[FB80 B758 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3758, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB758, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_184)
{
    // 3759 0021;	
    // (㝙) CJK UNIFIED IDEOGRAPH-3759	[FB80 B759 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3759, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB759, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_185)
{
    // 3759 003F;	
    // (㝙) CJK UNIFIED IDEOGRAPH-3759	[FB80 B759 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3759, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB759, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_186)
{
    // 3759 0061;	
    // (㝙) CJK UNIFIED IDEOGRAPH-3759	[FB80 B759 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3759, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_187)
{
    // 3759 0041;	
    // (㝙) CJK UNIFIED IDEOGRAPH-3759	[FB80 B759 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3759, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB759, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_188)
{
    // 3759 0062;	
    // (㝙) CJK UNIFIED IDEOGRAPH-3759	[FB80 B759 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3759, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB759, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_189)
{
    // 375A 0021;	
    // (㝚) CJK UNIFIED IDEOGRAPH-375A	[FB80 B75A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB75A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_190)
{
    // 375A 003F;	
    // (㝚) CJK UNIFIED IDEOGRAPH-375A	[FB80 B75A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB75A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_191)
{
    // 375A 0061;	
    // (㝚) CJK UNIFIED IDEOGRAPH-375A	[FB80 B75A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB75A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_192)
{
    // 375A 0041;	
    // (㝚) CJK UNIFIED IDEOGRAPH-375A	[FB80 B75A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x375A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB75A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_193)
{
    // 375A 0062;	
    // (㝚) CJK UNIFIED IDEOGRAPH-375A	[FB80 B75A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB75A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_194)
{
    // 375B 0021;	
    // (㝛) CJK UNIFIED IDEOGRAPH-375B	[FB80 B75B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB75B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_195)
{
    // 375B 003F;	
    // (㝛) CJK UNIFIED IDEOGRAPH-375B	[FB80 B75B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB75B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_196)
{
    // 375B 0061;	
    // (㝛) CJK UNIFIED IDEOGRAPH-375B	[FB80 B75B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB75B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_197)
{
    // 375B 0041;	
    // (㝛) CJK UNIFIED IDEOGRAPH-375B	[FB80 B75B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x375B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB75B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_198)
{
    // 375B 0062;	
    // (㝛) CJK UNIFIED IDEOGRAPH-375B	[FB80 B75B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB75B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_199)
{
    // 375C 0021;	
    // (㝜) CJK UNIFIED IDEOGRAPH-375C	[FB80 B75C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB75C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_200)
{
    // 375C 003F;	
    // (㝜) CJK UNIFIED IDEOGRAPH-375C	[FB80 B75C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB75C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_201)
{
    // 375C 0061;	
    // (㝜) CJK UNIFIED IDEOGRAPH-375C	[FB80 B75C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB75C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_202)
{
    // 375C 0041;	
    // (㝜) CJK UNIFIED IDEOGRAPH-375C	[FB80 B75C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x375C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB75C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_203)
{
    // 375C 0062;	
    // (㝜) CJK UNIFIED IDEOGRAPH-375C	[FB80 B75C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB75C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_204)
{
    // 375D 0021;	
    // (㝝) CJK UNIFIED IDEOGRAPH-375D	[FB80 B75D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB75D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_205)
{
    // 375D 003F;	
    // (㝝) CJK UNIFIED IDEOGRAPH-375D	[FB80 B75D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB75D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_206)
{
    // 375D 0061;	
    // (㝝) CJK UNIFIED IDEOGRAPH-375D	[FB80 B75D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB75D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_207)
{
    // 375D 0041;	
    // (㝝) CJK UNIFIED IDEOGRAPH-375D	[FB80 B75D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x375D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB75D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_208)
{
    // 375D 0062;	
    // (㝝) CJK UNIFIED IDEOGRAPH-375D	[FB80 B75D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB75D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_209)
{
    // 375E 0021;	
    // (㝞) CJK UNIFIED IDEOGRAPH-375E	[FB80 B75E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB75E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_210)
{
    // 375E 003F;	
    // (㝞) CJK UNIFIED IDEOGRAPH-375E	[FB80 B75E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB75E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_211)
{
    // 375E 0061;	
    // (㝞) CJK UNIFIED IDEOGRAPH-375E	[FB80 B75E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB75E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_212)
{
    // 375E 0041;	
    // (㝞) CJK UNIFIED IDEOGRAPH-375E	[FB80 B75E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x375E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB75E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_213)
{
    // 375E 0062;	
    // (㝞) CJK UNIFIED IDEOGRAPH-375E	[FB80 B75E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB75E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_214)
{
    // 375F 0021;	
    // (㝟) CJK UNIFIED IDEOGRAPH-375F	[FB80 B75F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB75F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_215)
{
    // 375F 003F;	
    // (㝟) CJK UNIFIED IDEOGRAPH-375F	[FB80 B75F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB75F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_216)
{
    // 375F 0061;	
    // (㝟) CJK UNIFIED IDEOGRAPH-375F	[FB80 B75F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB75F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_217)
{
    // 375F 0041;	
    // (㝟) CJK UNIFIED IDEOGRAPH-375F	[FB80 B75F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x375F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB75F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_218)
{
    // 375F 0062;	
    // (㝟) CJK UNIFIED IDEOGRAPH-375F	[FB80 B75F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x375F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB75F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_219)
{
    // 3760 0021;	
    // (㝠) CJK UNIFIED IDEOGRAPH-3760	[FB80 B760 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3760, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB760, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_220)
{
    // 3760 003F;	
    // (㝠) CJK UNIFIED IDEOGRAPH-3760	[FB80 B760 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3760, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB760, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_221)
{
    // 3760 0061;	
    // (㝠) CJK UNIFIED IDEOGRAPH-3760	[FB80 B760 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3760, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_222)
{
    // 3760 0041;	
    // (㝠) CJK UNIFIED IDEOGRAPH-3760	[FB80 B760 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3760, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB760, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_223)
{
    // 3760 0062;	
    // (㝠) CJK UNIFIED IDEOGRAPH-3760	[FB80 B760 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3760, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB760, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_224)
{
    // 3761 0021;	
    // (㝡) CJK UNIFIED IDEOGRAPH-3761	[FB80 B761 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3761, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB761, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_225)
{
    // 3761 003F;	
    // (㝡) CJK UNIFIED IDEOGRAPH-3761	[FB80 B761 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3761, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB761, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_226)
{
    // 3761 0061;	
    // (㝡) CJK UNIFIED IDEOGRAPH-3761	[FB80 B761 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3761, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_227)
{
    // 3761 0041;	
    // (㝡) CJK UNIFIED IDEOGRAPH-3761	[FB80 B761 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3761, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB761, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_228)
{
    // 3761 0062;	
    // (㝡) CJK UNIFIED IDEOGRAPH-3761	[FB80 B761 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3761, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB761, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_229)
{
    // 3762 0021;	
    // (㝢) CJK UNIFIED IDEOGRAPH-3762	[FB80 B762 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3762, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB762, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_230)
{
    // 3762 003F;	
    // (㝢) CJK UNIFIED IDEOGRAPH-3762	[FB80 B762 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3762, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB762, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_231)
{
    // 3762 0061;	
    // (㝢) CJK UNIFIED IDEOGRAPH-3762	[FB80 B762 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3762, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_232)
{
    // 3762 0041;	
    // (㝢) CJK UNIFIED IDEOGRAPH-3762	[FB80 B762 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3762, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB762, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_233)
{
    // 3762 0062;	
    // (㝢) CJK UNIFIED IDEOGRAPH-3762	[FB80 B762 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3762, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB762, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_234)
{
    // 3763 0021;	
    // (㝣) CJK UNIFIED IDEOGRAPH-3763	[FB80 B763 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3763, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB763, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_235)
{
    // 3763 003F;	
    // (㝣) CJK UNIFIED IDEOGRAPH-3763	[FB80 B763 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3763, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB763, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_236)
{
    // 3763 0061;	
    // (㝣) CJK UNIFIED IDEOGRAPH-3763	[FB80 B763 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3763, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_237)
{
    // 3763 0041;	
    // (㝣) CJK UNIFIED IDEOGRAPH-3763	[FB80 B763 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3763, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB763, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_238)
{
    // 3763 0062;	
    // (㝣) CJK UNIFIED IDEOGRAPH-3763	[FB80 B763 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3763, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB763, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_239)
{
    // 3764 0021;	
    // (㝤) CJK UNIFIED IDEOGRAPH-3764	[FB80 B764 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3764, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB764, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_240)
{
    // 3764 003F;	
    // (㝤) CJK UNIFIED IDEOGRAPH-3764	[FB80 B764 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3764, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB764, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_241)
{
    // 3764 0061;	
    // (㝤) CJK UNIFIED IDEOGRAPH-3764	[FB80 B764 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3764, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_242)
{
    // 3764 0041;	
    // (㝤) CJK UNIFIED IDEOGRAPH-3764	[FB80 B764 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3764, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB764, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_243)
{
    // 3764 0062;	
    // (㝤) CJK UNIFIED IDEOGRAPH-3764	[FB80 B764 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3764, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB764, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_244)
{
    // 3765 0021;	
    // (㝥) CJK UNIFIED IDEOGRAPH-3765	[FB80 B765 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3765, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB765, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_245)
{
    // 3765 003F;	
    // (㝥) CJK UNIFIED IDEOGRAPH-3765	[FB80 B765 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3765, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB765, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_246)
{
    // 3765 0061;	
    // (㝥) CJK UNIFIED IDEOGRAPH-3765	[FB80 B765 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3765, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_247)
{
    // 3765 0041;	
    // (㝥) CJK UNIFIED IDEOGRAPH-3765	[FB80 B765 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3765, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB765, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_248)
{
    // 3765 0062;	
    // (㝥) CJK UNIFIED IDEOGRAPH-3765	[FB80 B765 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3765, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB765, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_249)
{
    // 3766 0021;	
    // (㝦) CJK UNIFIED IDEOGRAPH-3766	[FB80 B766 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3766, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB766, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_250)
{
    // 3766 003F;	
    // (㝦) CJK UNIFIED IDEOGRAPH-3766	[FB80 B766 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3766, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB766, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_251)
{
    // 3766 0061;	
    // (㝦) CJK UNIFIED IDEOGRAPH-3766	[FB80 B766 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3766, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_252)
{
    // 3766 0041;	
    // (㝦) CJK UNIFIED IDEOGRAPH-3766	[FB80 B766 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3766, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB766, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_253)
{
    // 3766 0062;	
    // (㝦) CJK UNIFIED IDEOGRAPH-3766	[FB80 B766 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3766, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB766, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_254)
{
    // 3767 0021;	
    // (㝧) CJK UNIFIED IDEOGRAPH-3767	[FB80 B767 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3767, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB767, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_255)
{
    // 3767 003F;	
    // (㝧) CJK UNIFIED IDEOGRAPH-3767	[FB80 B767 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3767, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB767, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_256)
{
    // 3767 0061;	
    // (㝧) CJK UNIFIED IDEOGRAPH-3767	[FB80 B767 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3767, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_257)
{
    // 3767 0041;	
    // (㝧) CJK UNIFIED IDEOGRAPH-3767	[FB80 B767 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3767, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB767, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_258)
{
    // 3767 0062;	
    // (㝧) CJK UNIFIED IDEOGRAPH-3767	[FB80 B767 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3767, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB767, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_259)
{
    // 3768 0021;	
    // (㝨) CJK UNIFIED IDEOGRAPH-3768	[FB80 B768 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3768, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB768, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_260)
{
    // 3768 003F;	
    // (㝨) CJK UNIFIED IDEOGRAPH-3768	[FB80 B768 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3768, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB768, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_261)
{
    // 3768 0061;	
    // (㝨) CJK UNIFIED IDEOGRAPH-3768	[FB80 B768 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3768, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_262)
{
    // 3768 0041;	
    // (㝨) CJK UNIFIED IDEOGRAPH-3768	[FB80 B768 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3768, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB768, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_263)
{
    // 3768 0062;	
    // (㝨) CJK UNIFIED IDEOGRAPH-3768	[FB80 B768 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3768, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB768, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_264)
{
    // 3769 0021;	
    // (㝩) CJK UNIFIED IDEOGRAPH-3769	[FB80 B769 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3769, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB769, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_265)
{
    // 3769 003F;	
    // (㝩) CJK UNIFIED IDEOGRAPH-3769	[FB80 B769 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3769, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB769, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_266)
{
    // 3769 0061;	
    // (㝩) CJK UNIFIED IDEOGRAPH-3769	[FB80 B769 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3769, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_267)
{
    // 3769 0041;	
    // (㝩) CJK UNIFIED IDEOGRAPH-3769	[FB80 B769 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3769, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB769, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_268)
{
    // 3769 0062;	
    // (㝩) CJK UNIFIED IDEOGRAPH-3769	[FB80 B769 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3769, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB769, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_269)
{
    // 376A 0021;	
    // (㝪) CJK UNIFIED IDEOGRAPH-376A	[FB80 B76A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB76A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_270)
{
    // 376A 003F;	
    // (㝪) CJK UNIFIED IDEOGRAPH-376A	[FB80 B76A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB76A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_271)
{
    // 376A 0061;	
    // (㝪) CJK UNIFIED IDEOGRAPH-376A	[FB80 B76A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB76A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_272)
{
    // 376A 0041;	
    // (㝪) CJK UNIFIED IDEOGRAPH-376A	[FB80 B76A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x376A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB76A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_273)
{
    // 376A 0062;	
    // (㝪) CJK UNIFIED IDEOGRAPH-376A	[FB80 B76A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB76A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_274)
{
    // 376B 0021;	
    // (㝫) CJK UNIFIED IDEOGRAPH-376B	[FB80 B76B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB76B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_275)
{
    // 376B 003F;	
    // (㝫) CJK UNIFIED IDEOGRAPH-376B	[FB80 B76B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB76B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_276)
{
    // 376B 0061;	
    // (㝫) CJK UNIFIED IDEOGRAPH-376B	[FB80 B76B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB76B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_277)
{
    // 376B 0041;	
    // (㝫) CJK UNIFIED IDEOGRAPH-376B	[FB80 B76B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x376B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB76B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_278)
{
    // 376B 0062;	
    // (㝫) CJK UNIFIED IDEOGRAPH-376B	[FB80 B76B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB76B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_279)
{
    // 376C 0021;	
    // (㝬) CJK UNIFIED IDEOGRAPH-376C	[FB80 B76C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB76C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_280)
{
    // 376C 003F;	
    // (㝬) CJK UNIFIED IDEOGRAPH-376C	[FB80 B76C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB76C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_281)
{
    // 376C 0061;	
    // (㝬) CJK UNIFIED IDEOGRAPH-376C	[FB80 B76C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB76C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_282)
{
    // 376C 0041;	
    // (㝬) CJK UNIFIED IDEOGRAPH-376C	[FB80 B76C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x376C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB76C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_283)
{
    // 376C 0062;	
    // (㝬) CJK UNIFIED IDEOGRAPH-376C	[FB80 B76C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB76C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_284)
{
    // 376D 0021;	
    // (㝭) CJK UNIFIED IDEOGRAPH-376D	[FB80 B76D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB76D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_285)
{
    // 376D 003F;	
    // (㝭) CJK UNIFIED IDEOGRAPH-376D	[FB80 B76D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB76D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_286)
{
    // 376D 0061;	
    // (㝭) CJK UNIFIED IDEOGRAPH-376D	[FB80 B76D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB76D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_287)
{
    // 376D 0041;	
    // (㝭) CJK UNIFIED IDEOGRAPH-376D	[FB80 B76D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x376D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB76D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_288)
{
    // 376D 0062;	
    // (㝭) CJK UNIFIED IDEOGRAPH-376D	[FB80 B76D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB76D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_289)
{
    // 376E 0021;	
    // (㝮) CJK UNIFIED IDEOGRAPH-376E	[FB80 B76E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB76E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_290)
{
    // 376E 003F;	
    // (㝮) CJK UNIFIED IDEOGRAPH-376E	[FB80 B76E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB76E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_291)
{
    // 376E 0061;	
    // (㝮) CJK UNIFIED IDEOGRAPH-376E	[FB80 B76E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB76E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_292)
{
    // 376E 0041;	
    // (㝮) CJK UNIFIED IDEOGRAPH-376E	[FB80 B76E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x376E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB76E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_293)
{
    // 376E 0062;	
    // (㝮) CJK UNIFIED IDEOGRAPH-376E	[FB80 B76E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB76E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_294)
{
    // 376F 0021;	
    // (㝯) CJK UNIFIED IDEOGRAPH-376F	[FB80 B76F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB76F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_295)
{
    // 376F 003F;	
    // (㝯) CJK UNIFIED IDEOGRAPH-376F	[FB80 B76F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB76F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_296)
{
    // 376F 0061;	
    // (㝯) CJK UNIFIED IDEOGRAPH-376F	[FB80 B76F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB76F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_297)
{
    // 376F 0041;	
    // (㝯) CJK UNIFIED IDEOGRAPH-376F	[FB80 B76F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x376F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB76F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_298)
{
    // 376F 0062;	
    // (㝯) CJK UNIFIED IDEOGRAPH-376F	[FB80 B76F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x376F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB76F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_299)
{
    // 3770 0021;	
    // (㝰) CJK UNIFIED IDEOGRAPH-3770	[FB80 B770 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3770, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB770, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_300)
{
    // 3770 003F;	
    // (㝰) CJK UNIFIED IDEOGRAPH-3770	[FB80 B770 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3770, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB770, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_301)
{
    // 3770 0061;	
    // (㝰) CJK UNIFIED IDEOGRAPH-3770	[FB80 B770 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3770, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_302)
{
    // 3770 0041;	
    // (㝰) CJK UNIFIED IDEOGRAPH-3770	[FB80 B770 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3770, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB770, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_303)
{
    // 3770 0062;	
    // (㝰) CJK UNIFIED IDEOGRAPH-3770	[FB80 B770 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3770, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB770, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_304)
{
    // 3771 0021;	
    // (㝱) CJK UNIFIED IDEOGRAPH-3771	[FB80 B771 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3771, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB771, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_305)
{
    // 3771 003F;	
    // (㝱) CJK UNIFIED IDEOGRAPH-3771	[FB80 B771 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3771, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB771, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_306)
{
    // 3771 0061;	
    // (㝱) CJK UNIFIED IDEOGRAPH-3771	[FB80 B771 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3771, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_307)
{
    // 3771 0041;	
    // (㝱) CJK UNIFIED IDEOGRAPH-3771	[FB80 B771 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3771, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB771, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_308)
{
    // 3771 0062;	
    // (㝱) CJK UNIFIED IDEOGRAPH-3771	[FB80 B771 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3771, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB771, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_309)
{
    // 3772 0021;	
    // (㝲) CJK UNIFIED IDEOGRAPH-3772	[FB80 B772 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3772, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB772, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_310)
{
    // 3772 003F;	
    // (㝲) CJK UNIFIED IDEOGRAPH-3772	[FB80 B772 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3772, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB772, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_311)
{
    // 3772 0061;	
    // (㝲) CJK UNIFIED IDEOGRAPH-3772	[FB80 B772 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3772, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_312)
{
    // 3772 0041;	
    // (㝲) CJK UNIFIED IDEOGRAPH-3772	[FB80 B772 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3772, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB772, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_313)
{
    // 3772 0062;	
    // (㝲) CJK UNIFIED IDEOGRAPH-3772	[FB80 B772 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3772, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB772, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_314)
{
    // 3773 0021;	
    // (㝳) CJK UNIFIED IDEOGRAPH-3773	[FB80 B773 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3773, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB773, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_315)
{
    // 3773 003F;	
    // (㝳) CJK UNIFIED IDEOGRAPH-3773	[FB80 B773 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3773, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB773, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_316)
{
    // 3773 0061;	
    // (㝳) CJK UNIFIED IDEOGRAPH-3773	[FB80 B773 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3773, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_317)
{
    // 3773 0041;	
    // (㝳) CJK UNIFIED IDEOGRAPH-3773	[FB80 B773 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3773, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB773, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_318)
{
    // 3773 0062;	
    // (㝳) CJK UNIFIED IDEOGRAPH-3773	[FB80 B773 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3773, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB773, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_319)
{
    // 3774 0021;	
    // (㝴) CJK UNIFIED IDEOGRAPH-3774	[FB80 B774 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3774, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB774, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_320)
{
    // 3774 003F;	
    // (㝴) CJK UNIFIED IDEOGRAPH-3774	[FB80 B774 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3774, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB774, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_321)
{
    // 3774 0061;	
    // (㝴) CJK UNIFIED IDEOGRAPH-3774	[FB80 B774 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3774, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_322)
{
    // 3774 0041;	
    // (㝴) CJK UNIFIED IDEOGRAPH-3774	[FB80 B774 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3774, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB774, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_323)
{
    // 3774 0062;	
    // (㝴) CJK UNIFIED IDEOGRAPH-3774	[FB80 B774 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3774, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB774, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_324)
{
    // 3775 0021;	
    // (㝵) CJK UNIFIED IDEOGRAPH-3775	[FB80 B775 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3775, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB775, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_325)
{
    // 3775 003F;	
    // (㝵) CJK UNIFIED IDEOGRAPH-3775	[FB80 B775 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3775, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB775, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_326)
{
    // 3775 0061;	
    // (㝵) CJK UNIFIED IDEOGRAPH-3775	[FB80 B775 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3775, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_327)
{
    // 3775 0041;	
    // (㝵) CJK UNIFIED IDEOGRAPH-3775	[FB80 B775 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3775, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_328)
{
    // 3775 0062;	
    // (㝵) CJK UNIFIED IDEOGRAPH-3775	[FB80 B775 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3775, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB775, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_329)
{
    // 3776 0021;	
    // (㝶) CJK UNIFIED IDEOGRAPH-3776	[FB80 B776 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3776, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB776, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_330)
{
    // 3776 003F;	
    // (㝶) CJK UNIFIED IDEOGRAPH-3776	[FB80 B776 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3776, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB776, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_331)
{
    // 3776 0061;	
    // (㝶) CJK UNIFIED IDEOGRAPH-3776	[FB80 B776 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3776, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_332)
{
    // 3776 0041;	
    // (㝶) CJK UNIFIED IDEOGRAPH-3776	[FB80 B776 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3776, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_333)
{
    // 3776 0062;	
    // (㝶) CJK UNIFIED IDEOGRAPH-3776	[FB80 B776 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3776, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB776, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_334)
{
    // 3777 0021;	
    // (㝷) CJK UNIFIED IDEOGRAPH-3777	[FB80 B777 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3777, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB777, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_335)
{
    // 3777 003F;	
    // (㝷) CJK UNIFIED IDEOGRAPH-3777	[FB80 B777 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3777, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB777, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_336)
{
    // 3777 0061;	
    // (㝷) CJK UNIFIED IDEOGRAPH-3777	[FB80 B777 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3777, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_337)
{
    // 3777 0041;	
    // (㝷) CJK UNIFIED IDEOGRAPH-3777	[FB80 B777 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3777, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_338)
{
    // 3777 0062;	
    // (㝷) CJK UNIFIED IDEOGRAPH-3777	[FB80 B777 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3777, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB777, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_339)
{
    // 3778 0021;	
    // (㝸) CJK UNIFIED IDEOGRAPH-3778	[FB80 B778 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3778, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB778, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_340)
{
    // 3778 003F;	
    // (㝸) CJK UNIFIED IDEOGRAPH-3778	[FB80 B778 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3778, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB778, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_341)
{
    // 3778 0061;	
    // (㝸) CJK UNIFIED IDEOGRAPH-3778	[FB80 B778 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3778, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_342)
{
    // 3778 0041;	
    // (㝸) CJK UNIFIED IDEOGRAPH-3778	[FB80 B778 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3778, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_343)
{
    // 3778 0062;	
    // (㝸) CJK UNIFIED IDEOGRAPH-3778	[FB80 B778 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3778, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB778, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_344)
{
    // 3779 0021;	
    // (㝹) CJK UNIFIED IDEOGRAPH-3779	[FB80 B779 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3779, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB779, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_345)
{
    // 3779 003F;	
    // (㝹) CJK UNIFIED IDEOGRAPH-3779	[FB80 B779 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3779, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB779, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_346)
{
    // 3779 0061;	
    // (㝹) CJK UNIFIED IDEOGRAPH-3779	[FB80 B779 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3779, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_347)
{
    // 3779 0041;	
    // (㝹) CJK UNIFIED IDEOGRAPH-3779	[FB80 B779 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3779, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_348)
{
    // 3779 0062;	
    // (㝹) CJK UNIFIED IDEOGRAPH-3779	[FB80 B779 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3779, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB779, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_349)
{
    // 377A 0021;	
    // (㝺) CJK UNIFIED IDEOGRAPH-377A	[FB80 B77A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB77A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_350)
{
    // 377A 003F;	
    // (㝺) CJK UNIFIED IDEOGRAPH-377A	[FB80 B77A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB77A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_351)
{
    // 377A 0061;	
    // (㝺) CJK UNIFIED IDEOGRAPH-377A	[FB80 B77A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB77A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_352)
{
    // 377A 0041;	
    // (㝺) CJK UNIFIED IDEOGRAPH-377A	[FB80 B77A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x377A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB77A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_353)
{
    // 377A 0062;	
    // (㝺) CJK UNIFIED IDEOGRAPH-377A	[FB80 B77A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB77A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_354)
{
    // 377B 0021;	
    // (㝻) CJK UNIFIED IDEOGRAPH-377B	[FB80 B77B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB77B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_355)
{
    // 377B 003F;	
    // (㝻) CJK UNIFIED IDEOGRAPH-377B	[FB80 B77B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB77B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_356)
{
    // 377B 0061;	
    // (㝻) CJK UNIFIED IDEOGRAPH-377B	[FB80 B77B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB77B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_357)
{
    // 377B 0041;	
    // (㝻) CJK UNIFIED IDEOGRAPH-377B	[FB80 B77B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x377B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB77B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_358)
{
    // 377B 0062;	
    // (㝻) CJK UNIFIED IDEOGRAPH-377B	[FB80 B77B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB77B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_359)
{
    // 377C 0021;	
    // (㝼) CJK UNIFIED IDEOGRAPH-377C	[FB80 B77C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB77C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_360)
{
    // 377C 003F;	
    // (㝼) CJK UNIFIED IDEOGRAPH-377C	[FB80 B77C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB77C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_361)
{
    // 377C 0061;	
    // (㝼) CJK UNIFIED IDEOGRAPH-377C	[FB80 B77C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB77C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_362)
{
    // 377C 0041;	
    // (㝼) CJK UNIFIED IDEOGRAPH-377C	[FB80 B77C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x377C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB77C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_363)
{
    // 377C 0062;	
    // (㝼) CJK UNIFIED IDEOGRAPH-377C	[FB80 B77C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB77C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_364)
{
    // 377D 0021;	
    // (㝽) CJK UNIFIED IDEOGRAPH-377D	[FB80 B77D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB77D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_365)
{
    // 377D 003F;	
    // (㝽) CJK UNIFIED IDEOGRAPH-377D	[FB80 B77D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB77D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_366)
{
    // 377D 0061;	
    // (㝽) CJK UNIFIED IDEOGRAPH-377D	[FB80 B77D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB77D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_367)
{
    // 377D 0041;	
    // (㝽) CJK UNIFIED IDEOGRAPH-377D	[FB80 B77D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x377D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB77D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_368)
{
    // 377D 0062;	
    // (㝽) CJK UNIFIED IDEOGRAPH-377D	[FB80 B77D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB77D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_369)
{
    // 377E 0021;	
    // (㝾) CJK UNIFIED IDEOGRAPH-377E	[FB80 B77E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB77E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_370)
{
    // 377E 003F;	
    // (㝾) CJK UNIFIED IDEOGRAPH-377E	[FB80 B77E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB77E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_371)
{
    // 377E 0061;	
    // (㝾) CJK UNIFIED IDEOGRAPH-377E	[FB80 B77E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB77E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_372)
{
    // 377E 0041;	
    // (㝾) CJK UNIFIED IDEOGRAPH-377E	[FB80 B77E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x377E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB77E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_373)
{
    // 377E 0062;	
    // (㝾) CJK UNIFIED IDEOGRAPH-377E	[FB80 B77E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB77E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_374)
{
    // 377F 0021;	
    // (㝿) CJK UNIFIED IDEOGRAPH-377F	[FB80 B77F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB77F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_375)
{
    // 377F 003F;	
    // (㝿) CJK UNIFIED IDEOGRAPH-377F	[FB80 B77F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB77F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_376)
{
    // 377F 0061;	
    // (㝿) CJK UNIFIED IDEOGRAPH-377F	[FB80 B77F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB77F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_377)
{
    // 377F 0041;	
    // (㝿) CJK UNIFIED IDEOGRAPH-377F	[FB80 B77F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x377F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB77F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_378)
{
    // 377F 0062;	
    // (㝿) CJK UNIFIED IDEOGRAPH-377F	[FB80 B77F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x377F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB77F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_379)
{
    // 3780 0021;	
    // (㞀) CJK UNIFIED IDEOGRAPH-3780	[FB80 B780 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3780, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB780, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_380)
{
    // 3780 003F;	
    // (㞀) CJK UNIFIED IDEOGRAPH-3780	[FB80 B780 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3780, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB780, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_381)
{
    // 3780 0061;	
    // (㞀) CJK UNIFIED IDEOGRAPH-3780	[FB80 B780 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3780, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_382)
{
    // 3780 0041;	
    // (㞀) CJK UNIFIED IDEOGRAPH-3780	[FB80 B780 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3780, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_383)
{
    // 3780 0062;	
    // (㞀) CJK UNIFIED IDEOGRAPH-3780	[FB80 B780 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3780, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB780, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_384)
{
    // 3781 0021;	
    // (㞁) CJK UNIFIED IDEOGRAPH-3781	[FB80 B781 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3781, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_385)
{
    // 2F876 0021;	
    // (㞁) CJK COMPATIBILITY IDEOGRAPH-2F876	[FB80 B781 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F876, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_386)
{
    // 3781 003F;	
    // (㞁) CJK UNIFIED IDEOGRAPH-3781	[FB80 B781 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3781, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_387)
{
    // 2F876 003F;	
    // (㞁) CJK COMPATIBILITY IDEOGRAPH-2F876	[FB80 B781 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F876, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_388)
{
    // 3781 0061;	
    // (㞁) CJK UNIFIED IDEOGRAPH-3781	[FB80 B781 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3781, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_389)
{
    // 2F876 0061;	
    // (㞁) CJK COMPATIBILITY IDEOGRAPH-2F876	[FB80 B781 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F876, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_390)
{
    // 3781 0041;	
    // (㞁) CJK UNIFIED IDEOGRAPH-3781	[FB80 B781 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3781, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_391)
{
    // 2F876 0041;	
    // (㞁) CJK COMPATIBILITY IDEOGRAPH-2F876	[FB80 B781 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F876, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_392)
{
    // 3781 0062;	
    // (㞁) CJK UNIFIED IDEOGRAPH-3781	[FB80 B781 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3781, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_393)
{
    // 2F876 0062;	
    // (㞁) CJK COMPATIBILITY IDEOGRAPH-2F876	[FB80 B781 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F876, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB781, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_394)
{
    // 3782 0021;	
    // (㞂) CJK UNIFIED IDEOGRAPH-3782	[FB80 B782 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3782, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB782, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_395)
{
    // 3782 003F;	
    // (㞂) CJK UNIFIED IDEOGRAPH-3782	[FB80 B782 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3782, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB782, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_396)
{
    // 3782 0061;	
    // (㞂) CJK UNIFIED IDEOGRAPH-3782	[FB80 B782 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3782, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_397)
{
    // 3782 0041;	
    // (㞂) CJK UNIFIED IDEOGRAPH-3782	[FB80 B782 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3782, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_398)
{
    // 3782 0062;	
    // (㞂) CJK UNIFIED IDEOGRAPH-3782	[FB80 B782 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3782, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB782, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_399)
{
    // 3783 0021;	
    // (㞃) CJK UNIFIED IDEOGRAPH-3783	[FB80 B783 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3783, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB783, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_400)
{
    // 3783 003F;	
    // (㞃) CJK UNIFIED IDEOGRAPH-3783	[FB80 B783 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3783, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB783, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_401)
{
    // 3783 0061;	
    // (㞃) CJK UNIFIED IDEOGRAPH-3783	[FB80 B783 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3783, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_402)
{
    // 3783 0041;	
    // (㞃) CJK UNIFIED IDEOGRAPH-3783	[FB80 B783 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3783, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_403)
{
    // 3783 0062;	
    // (㞃) CJK UNIFIED IDEOGRAPH-3783	[FB80 B783 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3783, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB783, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_404)
{
    // 3784 0021;	
    // (㞄) CJK UNIFIED IDEOGRAPH-3784	[FB80 B784 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3784, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB784, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_405)
{
    // 3784 003F;	
    // (㞄) CJK UNIFIED IDEOGRAPH-3784	[FB80 B784 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3784, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB784, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_406)
{
    // 3784 0061;	
    // (㞄) CJK UNIFIED IDEOGRAPH-3784	[FB80 B784 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3784, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_407)
{
    // 3784 0041;	
    // (㞄) CJK UNIFIED IDEOGRAPH-3784	[FB80 B784 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3784, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_408)
{
    // 3784 0062;	
    // (㞄) CJK UNIFIED IDEOGRAPH-3784	[FB80 B784 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3784, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB784, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_409)
{
    // 3785 0021;	
    // (㞅) CJK UNIFIED IDEOGRAPH-3785	[FB80 B785 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3785, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB785, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_410)
{
    // 3785 003F;	
    // (㞅) CJK UNIFIED IDEOGRAPH-3785	[FB80 B785 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3785, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB785, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_411)
{
    // 3785 0061;	
    // (㞅) CJK UNIFIED IDEOGRAPH-3785	[FB80 B785 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3785, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_412)
{
    // 3785 0041;	
    // (㞅) CJK UNIFIED IDEOGRAPH-3785	[FB80 B785 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3785, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_413)
{
    // 3785 0062;	
    // (㞅) CJK UNIFIED IDEOGRAPH-3785	[FB80 B785 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3785, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB785, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_414)
{
    // 3786 0021;	
    // (㞆) CJK UNIFIED IDEOGRAPH-3786	[FB80 B786 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3786, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB786, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_415)
{
    // 3786 003F;	
    // (㞆) CJK UNIFIED IDEOGRAPH-3786	[FB80 B786 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3786, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB786, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_416)
{
    // 3786 0061;	
    // (㞆) CJK UNIFIED IDEOGRAPH-3786	[FB80 B786 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3786, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_417)
{
    // 3786 0041;	
    // (㞆) CJK UNIFIED IDEOGRAPH-3786	[FB80 B786 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3786, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_418)
{
    // 3786 0062;	
    // (㞆) CJK UNIFIED IDEOGRAPH-3786	[FB80 B786 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3786, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB786, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_419)
{
    // 3787 0021;	
    // (㞇) CJK UNIFIED IDEOGRAPH-3787	[FB80 B787 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3787, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB787, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_420)
{
    // 3787 003F;	
    // (㞇) CJK UNIFIED IDEOGRAPH-3787	[FB80 B787 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3787, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB787, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_421)
{
    // 3787 0061;	
    // (㞇) CJK UNIFIED IDEOGRAPH-3787	[FB80 B787 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3787, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_422)
{
    // 3787 0041;	
    // (㞇) CJK UNIFIED IDEOGRAPH-3787	[FB80 B787 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3787, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_423)
{
    // 3787 0062;	
    // (㞇) CJK UNIFIED IDEOGRAPH-3787	[FB80 B787 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3787, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB787, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_424)
{
    // 3788 0021;	
    // (㞈) CJK UNIFIED IDEOGRAPH-3788	[FB80 B788 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3788, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB788, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_425)
{
    // 3788 003F;	
    // (㞈) CJK UNIFIED IDEOGRAPH-3788	[FB80 B788 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3788, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB788, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_426)
{
    // 3788 0061;	
    // (㞈) CJK UNIFIED IDEOGRAPH-3788	[FB80 B788 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3788, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_427)
{
    // 3788 0041;	
    // (㞈) CJK UNIFIED IDEOGRAPH-3788	[FB80 B788 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3788, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_428)
{
    // 3788 0062;	
    // (㞈) CJK UNIFIED IDEOGRAPH-3788	[FB80 B788 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3788, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB788, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_429)
{
    // 3789 0021;	
    // (㞉) CJK UNIFIED IDEOGRAPH-3789	[FB80 B789 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3789, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB789, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_430)
{
    // 3789 003F;	
    // (㞉) CJK UNIFIED IDEOGRAPH-3789	[FB80 B789 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3789, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB789, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_431)
{
    // 3789 0061;	
    // (㞉) CJK UNIFIED IDEOGRAPH-3789	[FB80 B789 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3789, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_432)
{
    // 3789 0041;	
    // (㞉) CJK UNIFIED IDEOGRAPH-3789	[FB80 B789 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3789, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_433)
{
    // 3789 0062;	
    // (㞉) CJK UNIFIED IDEOGRAPH-3789	[FB80 B789 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3789, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB789, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_434)
{
    // 378A 0021;	
    // (㞊) CJK UNIFIED IDEOGRAPH-378A	[FB80 B78A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB78A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_435)
{
    // 378A 003F;	
    // (㞊) CJK UNIFIED IDEOGRAPH-378A	[FB80 B78A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB78A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_436)
{
    // 378A 0061;	
    // (㞊) CJK UNIFIED IDEOGRAPH-378A	[FB80 B78A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB78A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_437)
{
    // 378A 0041;	
    // (㞊) CJK UNIFIED IDEOGRAPH-378A	[FB80 B78A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x378A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB78A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_438)
{
    // 378A 0062;	
    // (㞊) CJK UNIFIED IDEOGRAPH-378A	[FB80 B78A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB78A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_439)
{
    // 378B 0021;	
    // (㞋) CJK UNIFIED IDEOGRAPH-378B	[FB80 B78B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB78B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_440)
{
    // 378B 003F;	
    // (㞋) CJK UNIFIED IDEOGRAPH-378B	[FB80 B78B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB78B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_441)
{
    // 378B 0061;	
    // (㞋) CJK UNIFIED IDEOGRAPH-378B	[FB80 B78B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB78B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_442)
{
    // 378B 0041;	
    // (㞋) CJK UNIFIED IDEOGRAPH-378B	[FB80 B78B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x378B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB78B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_443)
{
    // 378B 0062;	
    // (㞋) CJK UNIFIED IDEOGRAPH-378B	[FB80 B78B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB78B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_444)
{
    // 378C 0021;	
    // (㞌) CJK UNIFIED IDEOGRAPH-378C	[FB80 B78C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB78C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_445)
{
    // 378C 003F;	
    // (㞌) CJK UNIFIED IDEOGRAPH-378C	[FB80 B78C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB78C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_446)
{
    // 378C 0061;	
    // (㞌) CJK UNIFIED IDEOGRAPH-378C	[FB80 B78C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB78C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_447)
{
    // 378C 0041;	
    // (㞌) CJK UNIFIED IDEOGRAPH-378C	[FB80 B78C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x378C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB78C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_448)
{
    // 378C 0062;	
    // (㞌) CJK UNIFIED IDEOGRAPH-378C	[FB80 B78C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB78C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_449)
{
    // 378D 0021;	
    // (㞍) CJK UNIFIED IDEOGRAPH-378D	[FB80 B78D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB78D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_450)
{
    // 378D 003F;	
    // (㞍) CJK UNIFIED IDEOGRAPH-378D	[FB80 B78D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB78D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_451)
{
    // 378D 0061;	
    // (㞍) CJK UNIFIED IDEOGRAPH-378D	[FB80 B78D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB78D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_452)
{
    // 378D 0041;	
    // (㞍) CJK UNIFIED IDEOGRAPH-378D	[FB80 B78D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x378D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB78D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_453)
{
    // 378D 0062;	
    // (㞍) CJK UNIFIED IDEOGRAPH-378D	[FB80 B78D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB78D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_454)
{
    // 378E 0021;	
    // (㞎) CJK UNIFIED IDEOGRAPH-378E	[FB80 B78E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB78E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_455)
{
    // 378E 003F;	
    // (㞎) CJK UNIFIED IDEOGRAPH-378E	[FB80 B78E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB78E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_456)
{
    // 378E 0061;	
    // (㞎) CJK UNIFIED IDEOGRAPH-378E	[FB80 B78E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB78E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_457)
{
    // 378E 0041;	
    // (㞎) CJK UNIFIED IDEOGRAPH-378E	[FB80 B78E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x378E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB78E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_458)
{
    // 378E 0062;	
    // (㞎) CJK UNIFIED IDEOGRAPH-378E	[FB80 B78E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB78E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_459)
{
    // 378F 0021;	
    // (㞏) CJK UNIFIED IDEOGRAPH-378F	[FB80 B78F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB78F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_460)
{
    // 378F 003F;	
    // (㞏) CJK UNIFIED IDEOGRAPH-378F	[FB80 B78F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB78F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_461)
{
    // 378F 0061;	
    // (㞏) CJK UNIFIED IDEOGRAPH-378F	[FB80 B78F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB78F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_462)
{
    // 378F 0041;	
    // (㞏) CJK UNIFIED IDEOGRAPH-378F	[FB80 B78F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x378F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB78F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_463)
{
    // 378F 0062;	
    // (㞏) CJK UNIFIED IDEOGRAPH-378F	[FB80 B78F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x378F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB78F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_464)
{
    // 3790 0021;	
    // (㞐) CJK UNIFIED IDEOGRAPH-3790	[FB80 B790 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3790, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB790, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_465)
{
    // 3790 003F;	
    // (㞐) CJK UNIFIED IDEOGRAPH-3790	[FB80 B790 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3790, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB790, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_466)
{
    // 3790 0061;	
    // (㞐) CJK UNIFIED IDEOGRAPH-3790	[FB80 B790 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3790, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_467)
{
    // 3790 0041;	
    // (㞐) CJK UNIFIED IDEOGRAPH-3790	[FB80 B790 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3790, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_468)
{
    // 3790 0062;	
    // (㞐) CJK UNIFIED IDEOGRAPH-3790	[FB80 B790 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3790, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB790, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_469)
{
    // 3791 0021;	
    // (㞑) CJK UNIFIED IDEOGRAPH-3791	[FB80 B791 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3791, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB791, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_470)
{
    // 3791 003F;	
    // (㞑) CJK UNIFIED IDEOGRAPH-3791	[FB80 B791 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3791, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB791, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_471)
{
    // 3791 0061;	
    // (㞑) CJK UNIFIED IDEOGRAPH-3791	[FB80 B791 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3791, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_472)
{
    // 3791 0041;	
    // (㞑) CJK UNIFIED IDEOGRAPH-3791	[FB80 B791 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3791, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_473)
{
    // 3791 0062;	
    // (㞑) CJK UNIFIED IDEOGRAPH-3791	[FB80 B791 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3791, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB791, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_474)
{
    // 3792 0021;	
    // (㞒) CJK UNIFIED IDEOGRAPH-3792	[FB80 B792 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3792, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB792, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_475)
{
    // 3792 003F;	
    // (㞒) CJK UNIFIED IDEOGRAPH-3792	[FB80 B792 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3792, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB792, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_476)
{
    // 3792 0061;	
    // (㞒) CJK UNIFIED IDEOGRAPH-3792	[FB80 B792 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3792, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_477)
{
    // 3792 0041;	
    // (㞒) CJK UNIFIED IDEOGRAPH-3792	[FB80 B792 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3792, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_478)
{
    // 3792 0062;	
    // (㞒) CJK UNIFIED IDEOGRAPH-3792	[FB80 B792 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3792, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB792, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_479)
{
    // 3793 0021;	
    // (㞓) CJK UNIFIED IDEOGRAPH-3793	[FB80 B793 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3793, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB793, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_480)
{
    // 3793 003F;	
    // (㞓) CJK UNIFIED IDEOGRAPH-3793	[FB80 B793 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3793, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB793, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_481)
{
    // 3793 0061;	
    // (㞓) CJK UNIFIED IDEOGRAPH-3793	[FB80 B793 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3793, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_482)
{
    // 3793 0041;	
    // (㞓) CJK UNIFIED IDEOGRAPH-3793	[FB80 B793 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3793, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_483)
{
    // 3793 0062;	
    // (㞓) CJK UNIFIED IDEOGRAPH-3793	[FB80 B793 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3793, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB793, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_484)
{
    // 3794 0021;	
    // (㞔) CJK UNIFIED IDEOGRAPH-3794	[FB80 B794 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3794, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB794, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_485)
{
    // 3794 003F;	
    // (㞔) CJK UNIFIED IDEOGRAPH-3794	[FB80 B794 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3794, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB794, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_486)
{
    // 3794 0061;	
    // (㞔) CJK UNIFIED IDEOGRAPH-3794	[FB80 B794 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3794, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_487)
{
    // 3794 0041;	
    // (㞔) CJK UNIFIED IDEOGRAPH-3794	[FB80 B794 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3794, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_488)
{
    // 3794 0062;	
    // (㞔) CJK UNIFIED IDEOGRAPH-3794	[FB80 B794 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3794, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB794, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_489)
{
    // 3795 0021;	
    // (㞕) CJK UNIFIED IDEOGRAPH-3795	[FB80 B795 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3795, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB795, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_490)
{
    // 3795 003F;	
    // (㞕) CJK UNIFIED IDEOGRAPH-3795	[FB80 B795 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3795, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB795, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_491)
{
    // 3795 0061;	
    // (㞕) CJK UNIFIED IDEOGRAPH-3795	[FB80 B795 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3795, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_492)
{
    // 3795 0041;	
    // (㞕) CJK UNIFIED IDEOGRAPH-3795	[FB80 B795 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3795, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_493)
{
    // 3795 0062;	
    // (㞕) CJK UNIFIED IDEOGRAPH-3795	[FB80 B795 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3795, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB795, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_494)
{
    // 3796 0021;	
    // (㞖) CJK UNIFIED IDEOGRAPH-3796	[FB80 B796 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3796, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB796, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_495)
{
    // 3796 003F;	
    // (㞖) CJK UNIFIED IDEOGRAPH-3796	[FB80 B796 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3796, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB796, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_496)
{
    // 3796 0061;	
    // (㞖) CJK UNIFIED IDEOGRAPH-3796	[FB80 B796 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3796, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_497)
{
    // 3796 0041;	
    // (㞖) CJK UNIFIED IDEOGRAPH-3796	[FB80 B796 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3796, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_498)
{
    // 3796 0062;	
    // (㞖) CJK UNIFIED IDEOGRAPH-3796	[FB80 B796 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3796, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB796, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_335_499)
{
    // 3797 0021;	
    // (㞗) CJK UNIFIED IDEOGRAPH-3797	[FB80 B797 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3797, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB797, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

