// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_192_000)
{
    // 0EC2 0591 0EAD 0061;	
    // (ໂ֑ອ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER O	[2E8D 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_001)
{
    // 0EC2 1D165 0EAD 0061;	
    // (ໂ𝅥ອ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER O	[2E8D 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_002)
{
    // 0EC2 0001 0EAE 0061;	
    // (ໂ'\u0001'ຮ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER HO TAM	[2E8D 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_003)
{
    // 0EC2 0591 0EAE 0061;	
    // (ໂ֑ຮ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER HO TAM	[2E8D 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_004)
{
    // 0EC2 1D165 0EAE 0061;	
    // (ໂ𝅥ຮ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO TAM	[2E8D 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_005)
{
    // 0EC3 0021;	
    // (ໃ) LAO VOWEL SIGN AY	[2E8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC3, 0x0021 };
    uint32_t const ces[9] = { 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_006)
{
    // 0EC3 003F;	
    // (ໃ) LAO VOWEL SIGN AY	[2E8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC3, 0x003F };
    uint32_t const ces[9] = { 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_007)
{
    // 0EC3 0061;	
    // (ໃ) LAO VOWEL SIGN AY	[2E8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC3, 0x0061 };
    uint32_t const ces[9] = { 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_008)
{
    // 0EC3 0041;	
    // (ໃ) LAO VOWEL SIGN AY	[2E8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EC3, 0x0041 };
    uint32_t const ces[9] = { 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_009)
{
    // 0EC3 0062;	
    // (ໃ) LAO VOWEL SIGN AY	[2E8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC3, 0x0062 };
    uint32_t const ces[9] = { 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_010)
{
    // 0EC3 0001 0EDE 0061;	
    // (ໃ'\u0001'ໞ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER KHMU GO	[2E8E 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_011)
{
    // 0EC3 0591 0EDE 0061;	
    // (ໃ֑ໞ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU GO	[2E8E 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_012)
{
    // 0EC3 1D165 0EDE 0061;	
    // (ໃ𝅥ໞ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU GO	[2E8E 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_013)
{
    // 0EC3 0001 0E81 0061;	
    // (ໃ'\u0001'ກ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER KO	[2E8E 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_014)
{
    // 0EC3 0591 0E81 0061;	
    // (ໃ֑ກ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER KO	[2E8E 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_015)
{
    // 0EC3 1D165 0E81 0061;	
    // (ໃ𝅥ກ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KO	[2E8E 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_016)
{
    // 0EC3 0001 0E82 0061;	
    // (ໃ'\u0001'ຂ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER KHO SUNG	[2E8E 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_017)
{
    // 0EC3 0591 0E82 0061;	
    // (ໃ֑ຂ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER KHO SUNG	[2E8E 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_018)
{
    // 0EC3 1D165 0E82 0061;	
    // (ໃ𝅥ຂ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO SUNG	[2E8E 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_019)
{
    // 0EC3 0001 0E84 0061;	
    // (ໃ'\u0001'ຄ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER KHO TAM	[2E8E 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_020)
{
    // 0EC3 0591 0E84 0061;	
    // (ໃ֑ຄ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER KHO TAM	[2E8E 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_021)
{
    // 0EC3 1D165 0E84 0061;	
    // (ໃ𝅥ຄ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO TAM	[2E8E 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_022)
{
    // 0EC3 0001 0E87 0061;	
    // (ໃ'\u0001'ງ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER NGO	[2E8E 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_023)
{
    // 0EC3 0591 0E87 0061;	
    // (ໃ֑ງ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER NGO	[2E8E 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_024)
{
    // 0EC3 1D165 0E87 0061;	
    // (ໃ𝅥ງ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NGO	[2E8E 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_025)
{
    // 0EC3 0001 0E88 0061;	
    // (ໃ'\u0001'ຈ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER CO	[2E8E 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_026)
{
    // 0EC3 0591 0E88 0061;	
    // (ໃ֑ຈ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER CO	[2E8E 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_027)
{
    // 0EC3 1D165 0E88 0061;	
    // (ໃ𝅥ຈ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER CO	[2E8E 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_028)
{
    // 0EC3 0001 0EAA 0061;	
    // (ໃ'\u0001'ສ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER SO SUNG	[2E8E 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_029)
{
    // 0EC3 0591 0EAA 0061;	
    // (ໃ֑ສ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER SO SUNG	[2E8E 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_030)
{
    // 0EC3 1D165 0EAA 0061;	
    // (ໃ𝅥ສ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO SUNG	[2E8E 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_031)
{
    // 0EC3 0001 0E8A 0061;	
    // (ໃ'\u0001'ຊ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER SO TAM	[2E8E 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_032)
{
    // 0EC3 0591 0E8A 0061;	
    // (ໃ֑ຊ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER SO TAM	[2E8E 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_033)
{
    // 0EC3 1D165 0E8A 0061;	
    // (ໃ𝅥ຊ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO TAM	[2E8E 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_034)
{
    // 0EC3 0001 0EDF 0061;	
    // (ໃ'\u0001'ໟ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER KHMU NYO	[2E8E 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_035)
{
    // 0EC3 0591 0EDF 0061;	
    // (ໃ֑ໟ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU NYO	[2E8E 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_036)
{
    // 0EC3 1D165 0EDF 0061;	
    // (ໃ𝅥ໟ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU NYO	[2E8E 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_037)
{
    // 0EC3 0001 0E8D 0061;	
    // (ໃ'\u0001'ຍ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER NYO	[2E8E 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_038)
{
    // 0EC3 0591 0E8D 0061;	
    // (ໃ֑ຍ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER NYO	[2E8E 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_039)
{
    // 0EC3 1D165 0E8D 0061;	
    // (ໃ𝅥ຍ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NYO	[2E8E 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_040)
{
    // 0EC3 0001 0E94 0061;	
    // (ໃ'\u0001'ດ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER DO	[2E8E 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_041)
{
    // 0EC3 0591 0E94 0061;	
    // (ໃ֑ດ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER DO	[2E8E 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_042)
{
    // 0EC3 1D165 0E94 0061;	
    // (ໃ𝅥ດ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER DO	[2E8E 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_043)
{
    // 0EC3 0001 0E95 0061;	
    // (ໃ'\u0001'ຕ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER TO	[2E8E 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_044)
{
    // 0EC3 0591 0E95 0061;	
    // (ໃ֑ຕ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER TO	[2E8E 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_045)
{
    // 0EC3 1D165 0E95 0061;	
    // (ໃ𝅥ຕ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER TO	[2E8E 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_046)
{
    // 0EC3 0001 0E96 0061;	
    // (ໃ'\u0001'ຖ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER THO SUNG	[2E8E 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_047)
{
    // 0EC3 0591 0E96 0061;	
    // (ໃ֑ຖ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER THO SUNG	[2E8E 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_048)
{
    // 0EC3 1D165 0E96 0061;	
    // (ໃ𝅥ຖ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO SUNG	[2E8E 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_049)
{
    // 0EC3 0001 0E97 0061;	
    // (ໃ'\u0001'ທ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER THO TAM	[2E8E 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_050)
{
    // 0EC3 0591 0E97 0061;	
    // (ໃ֑ທ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER THO TAM	[2E8E 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_051)
{
    // 0EC3 1D165 0E97 0061;	
    // (ໃ𝅥ທ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO TAM	[2E8E 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_052)
{
    // 0EC3 0001 0E99 0061;	
    // (ໃ'\u0001'ນ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER NO	[2E8E 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_053)
{
    // 0EC3 0591 0E99 0061;	
    // (ໃ֑ນ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER NO	[2E8E 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_054)
{
    // 0EC3 1D165 0E99 0061;	
    // (ໃ𝅥ນ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NO	[2E8E 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_055)
{
    // 0EC3 0001 0E9A 0061;	
    // (ໃ'\u0001'ບ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER BO	[2E8E 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_056)
{
    // 0EC3 0591 0E9A 0061;	
    // (ໃ֑ບ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER BO	[2E8E 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_057)
{
    // 0EC3 1D165 0E9A 0061;	
    // (ໃ𝅥ບ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER BO	[2E8E 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_058)
{
    // 0EC3 0001 0E9B 0061;	
    // (ໃ'\u0001'ປ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER PO	[2E8E 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_059)
{
    // 0EC3 0591 0E9B 0061;	
    // (ໃ֑ປ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER PO	[2E8E 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_060)
{
    // 0EC3 1D165 0E9B 0061;	
    // (ໃ𝅥ປ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PO	[2E8E 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_061)
{
    // 0EC3 0001 0E9C 0061;	
    // (ໃ'\u0001'ຜ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER PHO SUNG	[2E8E 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_062)
{
    // 0EC3 0591 0E9C 0061;	
    // (ໃ֑ຜ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER PHO SUNG	[2E8E 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_063)
{
    // 0EC3 1D165 0E9C 0061;	
    // (ໃ𝅥ຜ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO SUNG	[2E8E 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_064)
{
    // 0EC3 0001 0E9D 0061;	
    // (ໃ'\u0001'ຝ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER FO TAM	[2E8E 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_065)
{
    // 0EC3 0591 0E9D 0061;	
    // (ໃ֑ຝ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER FO TAM	[2E8E 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_066)
{
    // 0EC3 1D165 0E9D 0061;	
    // (ໃ𝅥ຝ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO TAM	[2E8E 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_067)
{
    // 0EC3 0001 0E9E 0061;	
    // (ໃ'\u0001'ພ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER PHO TAM	[2E8E 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_068)
{
    // 0EC3 0591 0E9E 0061;	
    // (ໃ֑ພ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER PHO TAM	[2E8E 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_069)
{
    // 0EC3 1D165 0E9E 0061;	
    // (ໃ𝅥ພ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO TAM	[2E8E 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_070)
{
    // 0EC3 0001 0E9F 0061;	
    // (ໃ'\u0001'ຟ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER FO SUNG	[2E8E 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_071)
{
    // 0EC3 0591 0E9F 0061;	
    // (ໃ֑ຟ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER FO SUNG	[2E8E 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_072)
{
    // 0EC3 1D165 0E9F 0061;	
    // (ໃ𝅥ຟ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO SUNG	[2E8E 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_073)
{
    // 0EC3 0001 0EA1 0061;	
    // (ໃ'\u0001'ມ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER MO	[2E8E 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_074)
{
    // 0EC3 0591 0EA1 0061;	
    // (ໃ֑ມ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER MO	[2E8E 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_075)
{
    // 0EC3 1D165 0EA1 0061;	
    // (ໃ𝅥ມ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER MO	[2E8E 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_076)
{
    // 0EC3 0001 0EA2 0061;	
    // (ໃ'\u0001'ຢ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER YO	[2E8E 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_077)
{
    // 0EC3 0591 0EA2 0061;	
    // (ໃ֑ຢ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER YO	[2E8E 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_078)
{
    // 0EC3 1D165 0EA2 0061;	
    // (ໃ𝅥ຢ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER YO	[2E8E 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_079)
{
    // 0EC3 0001 0EA3 0061;	
    // (ໃ'\u0001'ຣ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER LO LING	[2E8E 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_080)
{
    // 0EC3 0591 0EA3 0061;	
    // (ໃ֑ຣ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER LO LING	[2E8E 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_081)
{
    // 0EC3 1D165 0EA3 0061;	
    // (ໃ𝅥ຣ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LING	[2E8E 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_082)
{
    // 0EC3 0001 0EA5 0061;	
    // (ໃ'\u0001'ລ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER LO LOOT	[2E8E 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_083)
{
    // 0EC3 0591 0EA5 0061;	
    // (ໃ֑ລ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER LO LOOT	[2E8E 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_084)
{
    // 0EC3 1D165 0EA5 0061;	
    // (ໃ𝅥ລ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LOOT	[2E8E 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_085)
{
    // 0EC3 0001 0EA7 0061;	
    // (ໃ'\u0001'ວ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER WO	[2E8E 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_086)
{
    // 0EC3 0591 0EA7 0061;	
    // (ໃ֑ວ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER WO	[2E8E 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_087)
{
    // 0EC3 1D165 0EA7 0061;	
    // (ໃ𝅥ວ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER WO	[2E8E 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_088)
{
    // 0EC3 0001 0EAB 0061;	
    // (ໃ'\u0001'ຫ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER HO SUNG	[2E8E 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_089)
{
    // 0EC3 0591 0EAB 0061;	
    // (ໃ֑ຫ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER HO SUNG	[2E8E 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_090)
{
    // 0EC3 1D165 0EAB 0061;	
    // (ໃ𝅥ຫ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO SUNG	[2E8E 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_091)
{
    // 0EC3 0001 0EDC 0061;	
    // (ໃ'\u0001'ໜ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO HO NO	[2E8E 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8E, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_092)
{
    // 0EC3 0591 0EDC 0061;	
    // (ໃ֑ໜ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO HO NO	[2E8E 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8E, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_093)
{
    // 0EC3 1D165 0EDC 0061;	
    // (ໃ𝅥ໜ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO HO NO	[2E8E 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8E, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_094)
{
    // 0EC3 0001 0EDD 0061;	
    // (ໃ'\u0001'ໝ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO HO MO	[2E8E 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8E, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_095)
{
    // 0EC3 0591 0EDD 0061;	
    // (ໃ֑ໝ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO HO MO	[2E8E 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8E, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_096)
{
    // 0EC3 1D165 0EDD 0061;	
    // (ໃ𝅥ໝ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO HO MO	[2E8E 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8E, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_097)
{
    // 0EC3 0001 0EAD 0061;	
    // (ໃ'\u0001'ອ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER O	[2E8E 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_098)
{
    // 0EC3 0591 0EAD 0061;	
    // (ໃ֑ອ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER O	[2E8E 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_099)
{
    // 0EC3 1D165 0EAD 0061;	
    // (ໃ𝅥ອ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER O	[2E8E 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_100)
{
    // 0EC3 0001 0EAE 0061;	
    // (ໃ'\u0001'ຮ) LAO VOWEL SIGN AY, <START OF HEADING>, LAO LETTER HO TAM	[2E8E 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0001, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_101)
{
    // 0EC3 0591 0EAE 0061;	
    // (ໃ֑ຮ) LAO VOWEL SIGN AY, HEBREW ACCENT ETNAHTA, LAO LETTER HO TAM	[2E8E 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x0591, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_102)
{
    // 0EC3 1D165 0EAE 0061;	
    // (ໃ𝅥ຮ) LAO VOWEL SIGN AY, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO TAM	[2E8E 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC3, 0x1D165, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8E, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_103)
{
    // 0EC4 0021;	
    // (ໄ) LAO VOWEL SIGN AI	[2E8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC4, 0x0021 };
    uint32_t const ces[9] = { 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_104)
{
    // 0EC4 003F;	
    // (ໄ) LAO VOWEL SIGN AI	[2E8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC4, 0x003F };
    uint32_t const ces[9] = { 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_105)
{
    // 0EC4 0061;	
    // (ໄ) LAO VOWEL SIGN AI	[2E8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC4, 0x0061 };
    uint32_t const ces[9] = { 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_106)
{
    // 0EC4 0041;	
    // (ໄ) LAO VOWEL SIGN AI	[2E8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EC4, 0x0041 };
    uint32_t const ces[9] = { 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_107)
{
    // 0EC4 0062;	
    // (ໄ) LAO VOWEL SIGN AI	[2E8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC4, 0x0062 };
    uint32_t const ces[9] = { 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_108)
{
    // 0EC4 0001 0EDE 0061;	
    // (ໄ'\u0001'ໞ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER KHMU GO	[2E8F 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_109)
{
    // 0EC4 0591 0EDE 0061;	
    // (ໄ֑ໞ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU GO	[2E8F 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_110)
{
    // 0EC4 1D165 0EDE 0061;	
    // (ໄ𝅥ໞ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU GO	[2E8F 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_111)
{
    // 0EC4 0001 0E81 0061;	
    // (ໄ'\u0001'ກ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER KO	[2E8F 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_112)
{
    // 0EC4 0591 0E81 0061;	
    // (ໄ֑ກ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER KO	[2E8F 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_113)
{
    // 0EC4 1D165 0E81 0061;	
    // (ໄ𝅥ກ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KO	[2E8F 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_114)
{
    // 0EC4 0001 0E82 0061;	
    // (ໄ'\u0001'ຂ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER KHO SUNG	[2E8F 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_115)
{
    // 0EC4 0591 0E82 0061;	
    // (ໄ֑ຂ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER KHO SUNG	[2E8F 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_116)
{
    // 0EC4 1D165 0E82 0061;	
    // (ໄ𝅥ຂ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO SUNG	[2E8F 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_117)
{
    // 0EC4 0001 0E84 0061;	
    // (ໄ'\u0001'ຄ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER KHO TAM	[2E8F 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_118)
{
    // 0EC4 0591 0E84 0061;	
    // (ໄ֑ຄ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER KHO TAM	[2E8F 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_119)
{
    // 0EC4 1D165 0E84 0061;	
    // (ໄ𝅥ຄ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO TAM	[2E8F 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_120)
{
    // 0EC4 0001 0E87 0061;	
    // (ໄ'\u0001'ງ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER NGO	[2E8F 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_121)
{
    // 0EC4 0591 0E87 0061;	
    // (ໄ֑ງ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER NGO	[2E8F 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_122)
{
    // 0EC4 1D165 0E87 0061;	
    // (ໄ𝅥ງ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NGO	[2E8F 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_123)
{
    // 0EC4 0001 0E88 0061;	
    // (ໄ'\u0001'ຈ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER CO	[2E8F 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_124)
{
    // 0EC4 0591 0E88 0061;	
    // (ໄ֑ຈ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER CO	[2E8F 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_125)
{
    // 0EC4 1D165 0E88 0061;	
    // (ໄ𝅥ຈ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER CO	[2E8F 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_126)
{
    // 0EC4 0001 0EAA 0061;	
    // (ໄ'\u0001'ສ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER SO SUNG	[2E8F 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_127)
{
    // 0EC4 0591 0EAA 0061;	
    // (ໄ֑ສ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER SO SUNG	[2E8F 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_128)
{
    // 0EC4 1D165 0EAA 0061;	
    // (ໄ𝅥ສ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO SUNG	[2E8F 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_129)
{
    // 0EC4 0001 0E8A 0061;	
    // (ໄ'\u0001'ຊ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER SO TAM	[2E8F 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_130)
{
    // 0EC4 0591 0E8A 0061;	
    // (ໄ֑ຊ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER SO TAM	[2E8F 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_131)
{
    // 0EC4 1D165 0E8A 0061;	
    // (ໄ𝅥ຊ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO TAM	[2E8F 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_132)
{
    // 0EC4 0001 0EDF 0061;	
    // (ໄ'\u0001'ໟ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER KHMU NYO	[2E8F 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_133)
{
    // 0EC4 0591 0EDF 0061;	
    // (ໄ֑ໟ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU NYO	[2E8F 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_134)
{
    // 0EC4 1D165 0EDF 0061;	
    // (ໄ𝅥ໟ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU NYO	[2E8F 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_135)
{
    // 0EC4 0001 0E8D 0061;	
    // (ໄ'\u0001'ຍ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER NYO	[2E8F 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_136)
{
    // 0EC4 0591 0E8D 0061;	
    // (ໄ֑ຍ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER NYO	[2E8F 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_137)
{
    // 0EC4 1D165 0E8D 0061;	
    // (ໄ𝅥ຍ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NYO	[2E8F 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_138)
{
    // 0EC4 0001 0E94 0061;	
    // (ໄ'\u0001'ດ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER DO	[2E8F 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_139)
{
    // 0EC4 0591 0E94 0061;	
    // (ໄ֑ດ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER DO	[2E8F 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_140)
{
    // 0EC4 1D165 0E94 0061;	
    // (ໄ𝅥ດ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER DO	[2E8F 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_141)
{
    // 0EC4 0001 0E95 0061;	
    // (ໄ'\u0001'ຕ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER TO	[2E8F 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_142)
{
    // 0EC4 0591 0E95 0061;	
    // (ໄ֑ຕ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER TO	[2E8F 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_143)
{
    // 0EC4 1D165 0E95 0061;	
    // (ໄ𝅥ຕ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER TO	[2E8F 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_144)
{
    // 0EC4 0001 0E96 0061;	
    // (ໄ'\u0001'ຖ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER THO SUNG	[2E8F 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_145)
{
    // 0EC4 0591 0E96 0061;	
    // (ໄ֑ຖ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER THO SUNG	[2E8F 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_146)
{
    // 0EC4 1D165 0E96 0061;	
    // (ໄ𝅥ຖ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO SUNG	[2E8F 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_147)
{
    // 0EC4 0001 0E97 0061;	
    // (ໄ'\u0001'ທ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER THO TAM	[2E8F 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_148)
{
    // 0EC4 0591 0E97 0061;	
    // (ໄ֑ທ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER THO TAM	[2E8F 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_149)
{
    // 0EC4 1D165 0E97 0061;	
    // (ໄ𝅥ທ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO TAM	[2E8F 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_150)
{
    // 0EC4 0001 0E99 0061;	
    // (ໄ'\u0001'ນ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER NO	[2E8F 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_151)
{
    // 0EC4 0591 0E99 0061;	
    // (ໄ֑ນ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER NO	[2E8F 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_152)
{
    // 0EC4 1D165 0E99 0061;	
    // (ໄ𝅥ນ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NO	[2E8F 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_153)
{
    // 0EC4 0001 0E9A 0061;	
    // (ໄ'\u0001'ບ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER BO	[2E8F 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_154)
{
    // 0EC4 0591 0E9A 0061;	
    // (ໄ֑ບ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER BO	[2E8F 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_155)
{
    // 0EC4 1D165 0E9A 0061;	
    // (ໄ𝅥ບ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER BO	[2E8F 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_156)
{
    // 0EC4 0001 0E9B 0061;	
    // (ໄ'\u0001'ປ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER PO	[2E8F 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_157)
{
    // 0EC4 0591 0E9B 0061;	
    // (ໄ֑ປ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER PO	[2E8F 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_158)
{
    // 0EC4 1D165 0E9B 0061;	
    // (ໄ𝅥ປ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PO	[2E8F 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_159)
{
    // 0EC4 0001 0E9C 0061;	
    // (ໄ'\u0001'ຜ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER PHO SUNG	[2E8F 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_160)
{
    // 0EC4 0591 0E9C 0061;	
    // (ໄ֑ຜ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER PHO SUNG	[2E8F 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_161)
{
    // 0EC4 1D165 0E9C 0061;	
    // (ໄ𝅥ຜ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO SUNG	[2E8F 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_162)
{
    // 0EC4 0001 0E9D 0061;	
    // (ໄ'\u0001'ຝ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER FO TAM	[2E8F 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_163)
{
    // 0EC4 0591 0E9D 0061;	
    // (ໄ֑ຝ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER FO TAM	[2E8F 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_164)
{
    // 0EC4 1D165 0E9D 0061;	
    // (ໄ𝅥ຝ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO TAM	[2E8F 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_165)
{
    // 0EC4 0001 0E9E 0061;	
    // (ໄ'\u0001'ພ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER PHO TAM	[2E8F 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_166)
{
    // 0EC4 0591 0E9E 0061;	
    // (ໄ֑ພ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER PHO TAM	[2E8F 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_167)
{
    // 0EC4 1D165 0E9E 0061;	
    // (ໄ𝅥ພ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO TAM	[2E8F 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_168)
{
    // 0EC4 0001 0E9F 0061;	
    // (ໄ'\u0001'ຟ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER FO SUNG	[2E8F 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_169)
{
    // 0EC4 0591 0E9F 0061;	
    // (ໄ֑ຟ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER FO SUNG	[2E8F 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_170)
{
    // 0EC4 1D165 0E9F 0061;	
    // (ໄ𝅥ຟ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO SUNG	[2E8F 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_171)
{
    // 0EC4 0001 0EA1 0061;	
    // (ໄ'\u0001'ມ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER MO	[2E8F 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_172)
{
    // 0EC4 0591 0EA1 0061;	
    // (ໄ֑ມ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER MO	[2E8F 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_173)
{
    // 0EC4 1D165 0EA1 0061;	
    // (ໄ𝅥ມ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER MO	[2E8F 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_174)
{
    // 0EC4 0001 0EA2 0061;	
    // (ໄ'\u0001'ຢ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER YO	[2E8F 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_175)
{
    // 0EC4 0591 0EA2 0061;	
    // (ໄ֑ຢ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER YO	[2E8F 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_176)
{
    // 0EC4 1D165 0EA2 0061;	
    // (ໄ𝅥ຢ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER YO	[2E8F 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_177)
{
    // 0EC4 0001 0EA3 0061;	
    // (ໄ'\u0001'ຣ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER LO LING	[2E8F 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_178)
{
    // 0EC4 0591 0EA3 0061;	
    // (ໄ֑ຣ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER LO LING	[2E8F 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_179)
{
    // 0EC4 1D165 0EA3 0061;	
    // (ໄ𝅥ຣ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LING	[2E8F 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_180)
{
    // 0EC4 0001 0EA5 0061;	
    // (ໄ'\u0001'ລ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER LO LOOT	[2E8F 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_181)
{
    // 0EC4 0591 0EA5 0061;	
    // (ໄ֑ລ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER LO LOOT	[2E8F 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_182)
{
    // 0EC4 1D165 0EA5 0061;	
    // (ໄ𝅥ລ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LOOT	[2E8F 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_183)
{
    // 0EC4 0001 0EA7 0061;	
    // (ໄ'\u0001'ວ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER WO	[2E8F 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_184)
{
    // 0EC4 0591 0EA7 0061;	
    // (ໄ֑ວ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER WO	[2E8F 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_185)
{
    // 0EC4 1D165 0EA7 0061;	
    // (ໄ𝅥ວ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER WO	[2E8F 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_186)
{
    // 0EC4 0001 0EAB 0061;	
    // (ໄ'\u0001'ຫ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER HO SUNG	[2E8F 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_187)
{
    // 0EC4 0591 0EAB 0061;	
    // (ໄ֑ຫ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER HO SUNG	[2E8F 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_188)
{
    // 0EC4 1D165 0EAB 0061;	
    // (ໄ𝅥ຫ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO SUNG	[2E8F 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_189)
{
    // 0EC4 0001 0EDC 0061;	
    // (ໄ'\u0001'ໜ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO HO NO	[2E8F 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8F, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_190)
{
    // 0EC4 0591 0EDC 0061;	
    // (ໄ֑ໜ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO HO NO	[2E8F 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8F, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_191)
{
    // 0EC4 1D165 0EDC 0061;	
    // (ໄ𝅥ໜ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO HO NO	[2E8F 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8F, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_192)
{
    // 0EC4 0001 0EDD 0061;	
    // (ໄ'\u0001'ໝ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO HO MO	[2E8F 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8F, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_193)
{
    // 0EC4 0591 0EDD 0061;	
    // (ໄ֑ໝ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO HO MO	[2E8F 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8F, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_194)
{
    // 0EC4 1D165 0EDD 0061;	
    // (ໄ𝅥ໝ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO HO MO	[2E8F 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8F, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_195)
{
    // 0EC4 0001 0EAD 0061;	
    // (ໄ'\u0001'ອ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER O	[2E8F 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_196)
{
    // 0EC4 0591 0EAD 0061;	
    // (ໄ֑ອ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER O	[2E8F 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_197)
{
    // 0EC4 1D165 0EAD 0061;	
    // (ໄ𝅥ອ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER O	[2E8F 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_198)
{
    // 0EC4 0001 0EAE 0061;	
    // (ໄ'\u0001'ຮ) LAO VOWEL SIGN AI, <START OF HEADING>, LAO LETTER HO TAM	[2E8F 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0001, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_199)
{
    // 0EC4 0591 0EAE 0061;	
    // (ໄ֑ຮ) LAO VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, LAO LETTER HO TAM	[2E8F 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x0591, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_200)
{
    // 0EC4 1D165 0EAE 0061;	
    // (ໄ𝅥ຮ) LAO VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO TAM	[2E8F 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC4, 0x1D165, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8F, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_201)
{
    // AA80 0021;	
    // (ꪀ) TAI VIET LETTER LOW KO	[2E90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA80, 0x0021 };
    uint32_t const ces[9] = { 0x2E90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_202)
{
    // AA80 003F;	
    // (ꪀ) TAI VIET LETTER LOW KO	[2E90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA80, 0x003F };
    uint32_t const ces[9] = { 0x2E90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_203)
{
    // AA80 0061;	
    // (ꪀ) TAI VIET LETTER LOW KO	[2E90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA80, 0x0061 };
    uint32_t const ces[9] = { 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_204)
{
    // AA80 0041;	
    // (ꪀ) TAI VIET LETTER LOW KO	[2E90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA80, 0x0041 };
    uint32_t const ces[9] = { 0x2E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_205)
{
    // AA80 0062;	
    // (ꪀ) TAI VIET LETTER LOW KO	[2E90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA80, 0x0062 };
    uint32_t const ces[9] = { 0x2E90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_206)
{
    // AAB5 AA80 0021;	
    // (ꪵꪀ) TAI VIET VOWEL E, TAI VIET LETTER LOW KO	[2E90 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA80, 0x0021 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_207)
{
    // AAB5 AA80 003F;	
    // (ꪵꪀ) TAI VIET VOWEL E, TAI VIET LETTER LOW KO	[2E90 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA80, 0x003F };
    uint32_t const ces[12] = { 0x2E90, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_208)
{
    // AAB5 AA80 0061;	
    // (ꪵꪀ) TAI VIET VOWEL E, TAI VIET LETTER LOW KO	[2E90 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_209)
{
    // AAB5 AA80 0041;	
    // (ꪵꪀ) TAI VIET VOWEL E, TAI VIET LETTER LOW KO	[2E90 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA80, 0x0041 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_210)
{
    // AAB5 AA80 0062;	
    // (ꪵꪀ) TAI VIET VOWEL E, TAI VIET LETTER LOW KO	[2E90 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA80, 0x0062 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_211)
{
    // AAB6 AA80 0021;	
    // (ꪶꪀ) TAI VIET VOWEL O, TAI VIET LETTER LOW KO	[2E90 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA80, 0x0021 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_212)
{
    // AAB6 AA80 003F;	
    // (ꪶꪀ) TAI VIET VOWEL O, TAI VIET LETTER LOW KO	[2E90 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA80, 0x003F };
    uint32_t const ces[12] = { 0x2E90, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_213)
{
    // AAB6 AA80 0061;	
    // (ꪶꪀ) TAI VIET VOWEL O, TAI VIET LETTER LOW KO	[2E90 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_214)
{
    // AAB6 AA80 0041;	
    // (ꪶꪀ) TAI VIET VOWEL O, TAI VIET LETTER LOW KO	[2E90 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA80, 0x0041 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_215)
{
    // AAB6 AA80 0062;	
    // (ꪶꪀ) TAI VIET VOWEL O, TAI VIET LETTER LOW KO	[2E90 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA80, 0x0062 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_216)
{
    // AAB9 AA80 0021;	
    // (ꪹꪀ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KO	[2E90 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA80, 0x0021 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_217)
{
    // AAB9 AA80 003F;	
    // (ꪹꪀ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KO	[2E90 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA80, 0x003F };
    uint32_t const ces[12] = { 0x2E90, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_218)
{
    // AAB9 AA80 0061;	
    // (ꪹꪀ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KO	[2E90 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_219)
{
    // AAB9 AA80 0041;	
    // (ꪹꪀ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KO	[2E90 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA80, 0x0041 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_220)
{
    // AAB9 AA80 0062;	
    // (ꪹꪀ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KO	[2E90 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA80, 0x0062 };
    uint32_t const ces[12] = { 0x2E90, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_221)
{
    // AABB AA80 0021;	
    // (ꪻꪀ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KO	[2E90 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA80, 0x0021 };
    uint32_t const ces[12] = { 0x2E90, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_222)
{
    // AABB AA80 003F;	
    // (ꪻꪀ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KO	[2E90 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA80, 0x003F };
    uint32_t const ces[12] = { 0x2E90, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_223)
{
    // AABB AA80 0061;	
    // (ꪻꪀ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KO	[2E90 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2E90, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_224)
{
    // AABB AA80 0041;	
    // (ꪻꪀ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KO	[2E90 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA80, 0x0041 };
    uint32_t const ces[12] = { 0x2E90, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_225)
{
    // AABB AA80 0062;	
    // (ꪻꪀ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KO	[2E90 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA80, 0x0062 };
    uint32_t const ces[12] = { 0x2E90, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_226)
{
    // AABC AA80 0021;	
    // (ꪼꪀ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KO	[2E90 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA80, 0x0021 };
    uint32_t const ces[12] = { 0x2E90, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_227)
{
    // AABC AA80 003F;	
    // (ꪼꪀ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KO	[2E90 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA80, 0x003F };
    uint32_t const ces[12] = { 0x2E90, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_228)
{
    // AABC AA80 0061;	
    // (ꪼꪀ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KO	[2E90 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA80, 0x0061 };
    uint32_t const ces[12] = { 0x2E90, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_229)
{
    // AABC AA80 0041;	
    // (ꪼꪀ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KO	[2E90 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA80, 0x0041 };
    uint32_t const ces[12] = { 0x2E90, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_230)
{
    // AABC AA80 0062;	
    // (ꪼꪀ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KO	[2E90 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA80, 0x0062 };
    uint32_t const ces[12] = { 0x2E90, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_231)
{
    // AA81 0021;	
    // (ꪁ) TAI VIET LETTER HIGH KO	[2E91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA81, 0x0021 };
    uint32_t const ces[9] = { 0x2E91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_232)
{
    // AA81 003F;	
    // (ꪁ) TAI VIET LETTER HIGH KO	[2E91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA81, 0x003F };
    uint32_t const ces[9] = { 0x2E91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_233)
{
    // AA81 0061;	
    // (ꪁ) TAI VIET LETTER HIGH KO	[2E91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA81, 0x0061 };
    uint32_t const ces[9] = { 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_234)
{
    // AA81 0041;	
    // (ꪁ) TAI VIET LETTER HIGH KO	[2E91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA81, 0x0041 };
    uint32_t const ces[9] = { 0x2E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_235)
{
    // AA81 0062;	
    // (ꪁ) TAI VIET LETTER HIGH KO	[2E91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA81, 0x0062 };
    uint32_t const ces[9] = { 0x2E91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_236)
{
    // AAB5 AA81 0021;	
    // (ꪵꪁ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KO	[2E91 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA81, 0x0021 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_237)
{
    // AAB5 AA81 003F;	
    // (ꪵꪁ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KO	[2E91 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA81, 0x003F };
    uint32_t const ces[12] = { 0x2E91, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_238)
{
    // AAB5 AA81 0061;	
    // (ꪵꪁ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KO	[2E91 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_239)
{
    // AAB5 AA81 0041;	
    // (ꪵꪁ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KO	[2E91 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA81, 0x0041 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_240)
{
    // AAB5 AA81 0062;	
    // (ꪵꪁ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KO	[2E91 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA81, 0x0062 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_241)
{
    // AAB6 AA81 0021;	
    // (ꪶꪁ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KO	[2E91 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA81, 0x0021 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_242)
{
    // AAB6 AA81 003F;	
    // (ꪶꪁ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KO	[2E91 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA81, 0x003F };
    uint32_t const ces[12] = { 0x2E91, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_243)
{
    // AAB6 AA81 0061;	
    // (ꪶꪁ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KO	[2E91 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_244)
{
    // AAB6 AA81 0041;	
    // (ꪶꪁ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KO	[2E91 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA81, 0x0041 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_245)
{
    // AAB6 AA81 0062;	
    // (ꪶꪁ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KO	[2E91 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA81, 0x0062 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_246)
{
    // AAB9 AA81 0021;	
    // (ꪹꪁ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KO	[2E91 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA81, 0x0021 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_247)
{
    // AAB9 AA81 003F;	
    // (ꪹꪁ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KO	[2E91 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA81, 0x003F };
    uint32_t const ces[12] = { 0x2E91, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_248)
{
    // AAB9 AA81 0061;	
    // (ꪹꪁ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KO	[2E91 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_249)
{
    // AAB9 AA81 0041;	
    // (ꪹꪁ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KO	[2E91 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA81, 0x0041 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_250)
{
    // AAB9 AA81 0062;	
    // (ꪹꪁ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KO	[2E91 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA81, 0x0062 };
    uint32_t const ces[12] = { 0x2E91, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_251)
{
    // AABB AA81 0021;	
    // (ꪻꪁ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KO	[2E91 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA81, 0x0021 };
    uint32_t const ces[12] = { 0x2E91, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_252)
{
    // AABB AA81 003F;	
    // (ꪻꪁ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KO	[2E91 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA81, 0x003F };
    uint32_t const ces[12] = { 0x2E91, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_253)
{
    // AABB AA81 0061;	
    // (ꪻꪁ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KO	[2E91 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2E91, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_254)
{
    // AABB AA81 0041;	
    // (ꪻꪁ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KO	[2E91 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA81, 0x0041 };
    uint32_t const ces[12] = { 0x2E91, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_255)
{
    // AABB AA81 0062;	
    // (ꪻꪁ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KO	[2E91 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA81, 0x0062 };
    uint32_t const ces[12] = { 0x2E91, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_256)
{
    // AABC AA81 0021;	
    // (ꪼꪁ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KO	[2E91 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA81, 0x0021 };
    uint32_t const ces[12] = { 0x2E91, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_257)
{
    // AABC AA81 003F;	
    // (ꪼꪁ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KO	[2E91 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA81, 0x003F };
    uint32_t const ces[12] = { 0x2E91, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_258)
{
    // AABC AA81 0061;	
    // (ꪼꪁ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KO	[2E91 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA81, 0x0061 };
    uint32_t const ces[12] = { 0x2E91, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_259)
{
    // AABC AA81 0041;	
    // (ꪼꪁ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KO	[2E91 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA81, 0x0041 };
    uint32_t const ces[12] = { 0x2E91, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_260)
{
    // AABC AA81 0062;	
    // (ꪼꪁ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KO	[2E91 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA81, 0x0062 };
    uint32_t const ces[12] = { 0x2E91, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_261)
{
    // AA82 0021;	
    // (ꪂ) TAI VIET LETTER LOW KHO	[2E92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA82, 0x0021 };
    uint32_t const ces[9] = { 0x2E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_262)
{
    // AA82 003F;	
    // (ꪂ) TAI VIET LETTER LOW KHO	[2E92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA82, 0x003F };
    uint32_t const ces[9] = { 0x2E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_263)
{
    // AA82 0061;	
    // (ꪂ) TAI VIET LETTER LOW KHO	[2E92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA82, 0x0061 };
    uint32_t const ces[9] = { 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_264)
{
    // AA82 0041;	
    // (ꪂ) TAI VIET LETTER LOW KHO	[2E92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA82, 0x0041 };
    uint32_t const ces[9] = { 0x2E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_265)
{
    // AA82 0062;	
    // (ꪂ) TAI VIET LETTER LOW KHO	[2E92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA82, 0x0062 };
    uint32_t const ces[9] = { 0x2E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_266)
{
    // AAB5 AA82 0021;	
    // (ꪵꪂ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHO	[2E92 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA82, 0x0021 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_267)
{
    // AAB5 AA82 003F;	
    // (ꪵꪂ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHO	[2E92 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA82, 0x003F };
    uint32_t const ces[12] = { 0x2E92, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_268)
{
    // AAB5 AA82 0061;	
    // (ꪵꪂ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHO	[2E92 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_269)
{
    // AAB5 AA82 0041;	
    // (ꪵꪂ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHO	[2E92 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA82, 0x0041 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_270)
{
    // AAB5 AA82 0062;	
    // (ꪵꪂ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHO	[2E92 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA82, 0x0062 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_271)
{
    // AAB6 AA82 0021;	
    // (ꪶꪂ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHO	[2E92 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA82, 0x0021 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_272)
{
    // AAB6 AA82 003F;	
    // (ꪶꪂ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHO	[2E92 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA82, 0x003F };
    uint32_t const ces[12] = { 0x2E92, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_273)
{
    // AAB6 AA82 0061;	
    // (ꪶꪂ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHO	[2E92 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_274)
{
    // AAB6 AA82 0041;	
    // (ꪶꪂ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHO	[2E92 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA82, 0x0041 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_275)
{
    // AAB6 AA82 0062;	
    // (ꪶꪂ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHO	[2E92 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA82, 0x0062 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_276)
{
    // AAB9 AA82 0021;	
    // (ꪹꪂ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHO	[2E92 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA82, 0x0021 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_277)
{
    // AAB9 AA82 003F;	
    // (ꪹꪂ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHO	[2E92 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA82, 0x003F };
    uint32_t const ces[12] = { 0x2E92, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_278)
{
    // AAB9 AA82 0061;	
    // (ꪹꪂ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHO	[2E92 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_279)
{
    // AAB9 AA82 0041;	
    // (ꪹꪂ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHO	[2E92 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA82, 0x0041 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_280)
{
    // AAB9 AA82 0062;	
    // (ꪹꪂ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHO	[2E92 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA82, 0x0062 };
    uint32_t const ces[12] = { 0x2E92, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_281)
{
    // AABB AA82 0021;	
    // (ꪻꪂ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHO	[2E92 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA82, 0x0021 };
    uint32_t const ces[12] = { 0x2E92, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_282)
{
    // AABB AA82 003F;	
    // (ꪻꪂ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHO	[2E92 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA82, 0x003F };
    uint32_t const ces[12] = { 0x2E92, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_283)
{
    // AABB AA82 0061;	
    // (ꪻꪂ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHO	[2E92 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2E92, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_284)
{
    // AABB AA82 0041;	
    // (ꪻꪂ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHO	[2E92 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA82, 0x0041 };
    uint32_t const ces[12] = { 0x2E92, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_285)
{
    // AABB AA82 0062;	
    // (ꪻꪂ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHO	[2E92 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA82, 0x0062 };
    uint32_t const ces[12] = { 0x2E92, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_286)
{
    // AABC AA82 0021;	
    // (ꪼꪂ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHO	[2E92 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA82, 0x0021 };
    uint32_t const ces[12] = { 0x2E92, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_287)
{
    // AABC AA82 003F;	
    // (ꪼꪂ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHO	[2E92 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA82, 0x003F };
    uint32_t const ces[12] = { 0x2E92, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_288)
{
    // AABC AA82 0061;	
    // (ꪼꪂ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHO	[2E92 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA82, 0x0061 };
    uint32_t const ces[12] = { 0x2E92, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_289)
{
    // AABC AA82 0041;	
    // (ꪼꪂ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHO	[2E92 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA82, 0x0041 };
    uint32_t const ces[12] = { 0x2E92, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_290)
{
    // AABC AA82 0062;	
    // (ꪼꪂ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHO	[2E92 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA82, 0x0062 };
    uint32_t const ces[12] = { 0x2E92, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_291)
{
    // AA83 0021;	
    // (ꪃ) TAI VIET LETTER HIGH KHO	[2E93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA83, 0x0021 };
    uint32_t const ces[9] = { 0x2E93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_292)
{
    // AA83 003F;	
    // (ꪃ) TAI VIET LETTER HIGH KHO	[2E93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA83, 0x003F };
    uint32_t const ces[9] = { 0x2E93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_293)
{
    // AA83 0061;	
    // (ꪃ) TAI VIET LETTER HIGH KHO	[2E93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA83, 0x0061 };
    uint32_t const ces[9] = { 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_294)
{
    // AA83 0041;	
    // (ꪃ) TAI VIET LETTER HIGH KHO	[2E93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA83, 0x0041 };
    uint32_t const ces[9] = { 0x2E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_295)
{
    // AA83 0062;	
    // (ꪃ) TAI VIET LETTER HIGH KHO	[2E93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA83, 0x0062 };
    uint32_t const ces[9] = { 0x2E93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_296)
{
    // AAB5 AA83 0021;	
    // (ꪵꪃ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHO	[2E93 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA83, 0x0021 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_297)
{
    // AAB5 AA83 003F;	
    // (ꪵꪃ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHO	[2E93 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA83, 0x003F };
    uint32_t const ces[12] = { 0x2E93, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_298)
{
    // AAB5 AA83 0061;	
    // (ꪵꪃ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHO	[2E93 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_299)
{
    // AAB5 AA83 0041;	
    // (ꪵꪃ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHO	[2E93 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA83, 0x0041 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_300)
{
    // AAB5 AA83 0062;	
    // (ꪵꪃ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHO	[2E93 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA83, 0x0062 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_301)
{
    // AAB6 AA83 0021;	
    // (ꪶꪃ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHO	[2E93 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA83, 0x0021 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_302)
{
    // AAB6 AA83 003F;	
    // (ꪶꪃ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHO	[2E93 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA83, 0x003F };
    uint32_t const ces[12] = { 0x2E93, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_303)
{
    // AAB6 AA83 0061;	
    // (ꪶꪃ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHO	[2E93 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_304)
{
    // AAB6 AA83 0041;	
    // (ꪶꪃ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHO	[2E93 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA83, 0x0041 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_305)
{
    // AAB6 AA83 0062;	
    // (ꪶꪃ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHO	[2E93 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA83, 0x0062 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_306)
{
    // AAB9 AA83 0021;	
    // (ꪹꪃ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHO	[2E93 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA83, 0x0021 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_307)
{
    // AAB9 AA83 003F;	
    // (ꪹꪃ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHO	[2E93 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA83, 0x003F };
    uint32_t const ces[12] = { 0x2E93, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_308)
{
    // AAB9 AA83 0061;	
    // (ꪹꪃ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHO	[2E93 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_309)
{
    // AAB9 AA83 0041;	
    // (ꪹꪃ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHO	[2E93 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA83, 0x0041 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_310)
{
    // AAB9 AA83 0062;	
    // (ꪹꪃ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHO	[2E93 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA83, 0x0062 };
    uint32_t const ces[12] = { 0x2E93, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_311)
{
    // AABB AA83 0021;	
    // (ꪻꪃ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHO	[2E93 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA83, 0x0021 };
    uint32_t const ces[12] = { 0x2E93, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_312)
{
    // AABB AA83 003F;	
    // (ꪻꪃ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHO	[2E93 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA83, 0x003F };
    uint32_t const ces[12] = { 0x2E93, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_313)
{
    // AABB AA83 0061;	
    // (ꪻꪃ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHO	[2E93 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2E93, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_314)
{
    // AABB AA83 0041;	
    // (ꪻꪃ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHO	[2E93 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA83, 0x0041 };
    uint32_t const ces[12] = { 0x2E93, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_315)
{
    // AABB AA83 0062;	
    // (ꪻꪃ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHO	[2E93 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA83, 0x0062 };
    uint32_t const ces[12] = { 0x2E93, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_316)
{
    // AABC AA83 0021;	
    // (ꪼꪃ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHO	[2E93 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA83, 0x0021 };
    uint32_t const ces[12] = { 0x2E93, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_317)
{
    // AABC AA83 003F;	
    // (ꪼꪃ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHO	[2E93 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA83, 0x003F };
    uint32_t const ces[12] = { 0x2E93, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_318)
{
    // AABC AA83 0061;	
    // (ꪼꪃ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHO	[2E93 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA83, 0x0061 };
    uint32_t const ces[12] = { 0x2E93, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_319)
{
    // AABC AA83 0041;	
    // (ꪼꪃ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHO	[2E93 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA83, 0x0041 };
    uint32_t const ces[12] = { 0x2E93, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_320)
{
    // AABC AA83 0062;	
    // (ꪼꪃ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHO	[2E93 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA83, 0x0062 };
    uint32_t const ces[12] = { 0x2E93, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_321)
{
    // AA84 0021;	
    // (ꪄ) TAI VIET LETTER LOW KHHO	[2E94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA84, 0x0021 };
    uint32_t const ces[9] = { 0x2E94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_322)
{
    // AA84 003F;	
    // (ꪄ) TAI VIET LETTER LOW KHHO	[2E94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA84, 0x003F };
    uint32_t const ces[9] = { 0x2E94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_323)
{
    // AA84 0061;	
    // (ꪄ) TAI VIET LETTER LOW KHHO	[2E94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA84, 0x0061 };
    uint32_t const ces[9] = { 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_324)
{
    // AA84 0041;	
    // (ꪄ) TAI VIET LETTER LOW KHHO	[2E94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA84, 0x0041 };
    uint32_t const ces[9] = { 0x2E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_325)
{
    // AA84 0062;	
    // (ꪄ) TAI VIET LETTER LOW KHHO	[2E94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA84, 0x0062 };
    uint32_t const ces[9] = { 0x2E94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_326)
{
    // AAB5 AA84 0021;	
    // (ꪵꪄ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHHO	[2E94 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA84, 0x0021 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_327)
{
    // AAB5 AA84 003F;	
    // (ꪵꪄ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHHO	[2E94 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA84, 0x003F };
    uint32_t const ces[12] = { 0x2E94, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_328)
{
    // AAB5 AA84 0061;	
    // (ꪵꪄ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHHO	[2E94 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_329)
{
    // AAB5 AA84 0041;	
    // (ꪵꪄ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHHO	[2E94 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA84, 0x0041 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_330)
{
    // AAB5 AA84 0062;	
    // (ꪵꪄ) TAI VIET VOWEL E, TAI VIET LETTER LOW KHHO	[2E94 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA84, 0x0062 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_331)
{
    // AAB6 AA84 0021;	
    // (ꪶꪄ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHHO	[2E94 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA84, 0x0021 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_332)
{
    // AAB6 AA84 003F;	
    // (ꪶꪄ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHHO	[2E94 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA84, 0x003F };
    uint32_t const ces[12] = { 0x2E94, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_333)
{
    // AAB6 AA84 0061;	
    // (ꪶꪄ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHHO	[2E94 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_334)
{
    // AAB6 AA84 0041;	
    // (ꪶꪄ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHHO	[2E94 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA84, 0x0041 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_335)
{
    // AAB6 AA84 0062;	
    // (ꪶꪄ) TAI VIET VOWEL O, TAI VIET LETTER LOW KHHO	[2E94 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA84, 0x0062 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_336)
{
    // AAB9 AA84 0021;	
    // (ꪹꪄ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHHO	[2E94 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA84, 0x0021 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_337)
{
    // AAB9 AA84 003F;	
    // (ꪹꪄ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHHO	[2E94 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA84, 0x003F };
    uint32_t const ces[12] = { 0x2E94, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_338)
{
    // AAB9 AA84 0061;	
    // (ꪹꪄ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHHO	[2E94 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_339)
{
    // AAB9 AA84 0041;	
    // (ꪹꪄ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHHO	[2E94 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA84, 0x0041 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_340)
{
    // AAB9 AA84 0062;	
    // (ꪹꪄ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW KHHO	[2E94 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA84, 0x0062 };
    uint32_t const ces[12] = { 0x2E94, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_341)
{
    // AABB AA84 0021;	
    // (ꪻꪄ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHHO	[2E94 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA84, 0x0021 };
    uint32_t const ces[12] = { 0x2E94, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_342)
{
    // AABB AA84 003F;	
    // (ꪻꪄ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHHO	[2E94 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA84, 0x003F };
    uint32_t const ces[12] = { 0x2E94, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_343)
{
    // AABB AA84 0061;	
    // (ꪻꪄ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHHO	[2E94 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2E94, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_344)
{
    // AABB AA84 0041;	
    // (ꪻꪄ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHHO	[2E94 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA84, 0x0041 };
    uint32_t const ces[12] = { 0x2E94, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_345)
{
    // AABB AA84 0062;	
    // (ꪻꪄ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW KHHO	[2E94 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA84, 0x0062 };
    uint32_t const ces[12] = { 0x2E94, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_346)
{
    // AABC AA84 0021;	
    // (ꪼꪄ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHHO	[2E94 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA84, 0x0021 };
    uint32_t const ces[12] = { 0x2E94, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_347)
{
    // AABC AA84 003F;	
    // (ꪼꪄ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHHO	[2E94 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA84, 0x003F };
    uint32_t const ces[12] = { 0x2E94, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_348)
{
    // AABC AA84 0061;	
    // (ꪼꪄ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHHO	[2E94 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA84, 0x0061 };
    uint32_t const ces[12] = { 0x2E94, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_349)
{
    // AABC AA84 0041;	
    // (ꪼꪄ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHHO	[2E94 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA84, 0x0041 };
    uint32_t const ces[12] = { 0x2E94, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_350)
{
    // AABC AA84 0062;	
    // (ꪼꪄ) TAI VIET VOWEL AY, TAI VIET LETTER LOW KHHO	[2E94 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA84, 0x0062 };
    uint32_t const ces[12] = { 0x2E94, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_351)
{
    // AA85 0021;	
    // (ꪅ) TAI VIET LETTER HIGH KHHO	[2E95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA85, 0x0021 };
    uint32_t const ces[9] = { 0x2E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_352)
{
    // AA85 003F;	
    // (ꪅ) TAI VIET LETTER HIGH KHHO	[2E95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA85, 0x003F };
    uint32_t const ces[9] = { 0x2E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_353)
{
    // AA85 0061;	
    // (ꪅ) TAI VIET LETTER HIGH KHHO	[2E95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA85, 0x0061 };
    uint32_t const ces[9] = { 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_354)
{
    // AA85 0041;	
    // (ꪅ) TAI VIET LETTER HIGH KHHO	[2E95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA85, 0x0041 };
    uint32_t const ces[9] = { 0x2E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_355)
{
    // AA85 0062;	
    // (ꪅ) TAI VIET LETTER HIGH KHHO	[2E95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA85, 0x0062 };
    uint32_t const ces[9] = { 0x2E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_356)
{
    // AAB5 AA85 0021;	
    // (ꪵꪅ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHHO	[2E95 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA85, 0x0021 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_357)
{
    // AAB5 AA85 003F;	
    // (ꪵꪅ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHHO	[2E95 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA85, 0x003F };
    uint32_t const ces[12] = { 0x2E95, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_358)
{
    // AAB5 AA85 0061;	
    // (ꪵꪅ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHHO	[2E95 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_359)
{
    // AAB5 AA85 0041;	
    // (ꪵꪅ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHHO	[2E95 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA85, 0x0041 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_360)
{
    // AAB5 AA85 0062;	
    // (ꪵꪅ) TAI VIET VOWEL E, TAI VIET LETTER HIGH KHHO	[2E95 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA85, 0x0062 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_361)
{
    // AAB6 AA85 0021;	
    // (ꪶꪅ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHHO	[2E95 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA85, 0x0021 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_362)
{
    // AAB6 AA85 003F;	
    // (ꪶꪅ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHHO	[2E95 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA85, 0x003F };
    uint32_t const ces[12] = { 0x2E95, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_363)
{
    // AAB6 AA85 0061;	
    // (ꪶꪅ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHHO	[2E95 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_364)
{
    // AAB6 AA85 0041;	
    // (ꪶꪅ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHHO	[2E95 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA85, 0x0041 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_365)
{
    // AAB6 AA85 0062;	
    // (ꪶꪅ) TAI VIET VOWEL O, TAI VIET LETTER HIGH KHHO	[2E95 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA85, 0x0062 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_366)
{
    // AAB9 AA85 0021;	
    // (ꪹꪅ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHHO	[2E95 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA85, 0x0021 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_367)
{
    // AAB9 AA85 003F;	
    // (ꪹꪅ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHHO	[2E95 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA85, 0x003F };
    uint32_t const ces[12] = { 0x2E95, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_368)
{
    // AAB9 AA85 0061;	
    // (ꪹꪅ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHHO	[2E95 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_369)
{
    // AAB9 AA85 0041;	
    // (ꪹꪅ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHHO	[2E95 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA85, 0x0041 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_370)
{
    // AAB9 AA85 0062;	
    // (ꪹꪅ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH KHHO	[2E95 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA85, 0x0062 };
    uint32_t const ces[12] = { 0x2E95, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_371)
{
    // AABB AA85 0021;	
    // (ꪻꪅ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHHO	[2E95 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA85, 0x0021 };
    uint32_t const ces[12] = { 0x2E95, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_372)
{
    // AABB AA85 003F;	
    // (ꪻꪅ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHHO	[2E95 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA85, 0x003F };
    uint32_t const ces[12] = { 0x2E95, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_373)
{
    // AABB AA85 0061;	
    // (ꪻꪅ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHHO	[2E95 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2E95, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_374)
{
    // AABB AA85 0041;	
    // (ꪻꪅ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHHO	[2E95 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA85, 0x0041 };
    uint32_t const ces[12] = { 0x2E95, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_375)
{
    // AABB AA85 0062;	
    // (ꪻꪅ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH KHHO	[2E95 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA85, 0x0062 };
    uint32_t const ces[12] = { 0x2E95, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_376)
{
    // AABC AA85 0021;	
    // (ꪼꪅ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHHO	[2E95 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA85, 0x0021 };
    uint32_t const ces[12] = { 0x2E95, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_377)
{
    // AABC AA85 003F;	
    // (ꪼꪅ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHHO	[2E95 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA85, 0x003F };
    uint32_t const ces[12] = { 0x2E95, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_378)
{
    // AABC AA85 0061;	
    // (ꪼꪅ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHHO	[2E95 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA85, 0x0061 };
    uint32_t const ces[12] = { 0x2E95, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_379)
{
    // AABC AA85 0041;	
    // (ꪼꪅ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHHO	[2E95 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA85, 0x0041 };
    uint32_t const ces[12] = { 0x2E95, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_380)
{
    // AABC AA85 0062;	
    // (ꪼꪅ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH KHHO	[2E95 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA85, 0x0062 };
    uint32_t const ces[12] = { 0x2E95, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_381)
{
    // AA86 0021;	
    // (ꪆ) TAI VIET LETTER LOW GO	[2E96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA86, 0x0021 };
    uint32_t const ces[9] = { 0x2E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_382)
{
    // AA86 003F;	
    // (ꪆ) TAI VIET LETTER LOW GO	[2E96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA86, 0x003F };
    uint32_t const ces[9] = { 0x2E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_383)
{
    // AA86 0061;	
    // (ꪆ) TAI VIET LETTER LOW GO	[2E96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA86, 0x0061 };
    uint32_t const ces[9] = { 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_384)
{
    // AA86 0041;	
    // (ꪆ) TAI VIET LETTER LOW GO	[2E96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA86, 0x0041 };
    uint32_t const ces[9] = { 0x2E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_385)
{
    // AA86 0062;	
    // (ꪆ) TAI VIET LETTER LOW GO	[2E96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA86, 0x0062 };
    uint32_t const ces[9] = { 0x2E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_386)
{
    // AAB5 AA86 0021;	
    // (ꪵꪆ) TAI VIET VOWEL E, TAI VIET LETTER LOW GO	[2E96 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA86, 0x0021 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_387)
{
    // AAB5 AA86 003F;	
    // (ꪵꪆ) TAI VIET VOWEL E, TAI VIET LETTER LOW GO	[2E96 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA86, 0x003F };
    uint32_t const ces[12] = { 0x2E96, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_388)
{
    // AAB5 AA86 0061;	
    // (ꪵꪆ) TAI VIET VOWEL E, TAI VIET LETTER LOW GO	[2E96 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_389)
{
    // AAB5 AA86 0041;	
    // (ꪵꪆ) TAI VIET VOWEL E, TAI VIET LETTER LOW GO	[2E96 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA86, 0x0041 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_390)
{
    // AAB5 AA86 0062;	
    // (ꪵꪆ) TAI VIET VOWEL E, TAI VIET LETTER LOW GO	[2E96 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA86, 0x0062 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_391)
{
    // AAB6 AA86 0021;	
    // (ꪶꪆ) TAI VIET VOWEL O, TAI VIET LETTER LOW GO	[2E96 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA86, 0x0021 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_392)
{
    // AAB6 AA86 003F;	
    // (ꪶꪆ) TAI VIET VOWEL O, TAI VIET LETTER LOW GO	[2E96 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA86, 0x003F };
    uint32_t const ces[12] = { 0x2E96, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_393)
{
    // AAB6 AA86 0061;	
    // (ꪶꪆ) TAI VIET VOWEL O, TAI VIET LETTER LOW GO	[2E96 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_394)
{
    // AAB6 AA86 0041;	
    // (ꪶꪆ) TAI VIET VOWEL O, TAI VIET LETTER LOW GO	[2E96 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA86, 0x0041 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_395)
{
    // AAB6 AA86 0062;	
    // (ꪶꪆ) TAI VIET VOWEL O, TAI VIET LETTER LOW GO	[2E96 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA86, 0x0062 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_396)
{
    // AAB9 AA86 0021;	
    // (ꪹꪆ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW GO	[2E96 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA86, 0x0021 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_397)
{
    // AAB9 AA86 003F;	
    // (ꪹꪆ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW GO	[2E96 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA86, 0x003F };
    uint32_t const ces[12] = { 0x2E96, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_398)
{
    // AAB9 AA86 0061;	
    // (ꪹꪆ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW GO	[2E96 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_399)
{
    // AAB9 AA86 0041;	
    // (ꪹꪆ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW GO	[2E96 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA86, 0x0041 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_400)
{
    // AAB9 AA86 0062;	
    // (ꪹꪆ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW GO	[2E96 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA86, 0x0062 };
    uint32_t const ces[12] = { 0x2E96, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_401)
{
    // AABB AA86 0021;	
    // (ꪻꪆ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW GO	[2E96 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA86, 0x0021 };
    uint32_t const ces[12] = { 0x2E96, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_402)
{
    // AABB AA86 003F;	
    // (ꪻꪆ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW GO	[2E96 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA86, 0x003F };
    uint32_t const ces[12] = { 0x2E96, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_403)
{
    // AABB AA86 0061;	
    // (ꪻꪆ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW GO	[2E96 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2E96, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_404)
{
    // AABB AA86 0041;	
    // (ꪻꪆ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW GO	[2E96 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA86, 0x0041 };
    uint32_t const ces[12] = { 0x2E96, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_405)
{
    // AABB AA86 0062;	
    // (ꪻꪆ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW GO	[2E96 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA86, 0x0062 };
    uint32_t const ces[12] = { 0x2E96, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_406)
{
    // AABC AA86 0021;	
    // (ꪼꪆ) TAI VIET VOWEL AY, TAI VIET LETTER LOW GO	[2E96 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA86, 0x0021 };
    uint32_t const ces[12] = { 0x2E96, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_407)
{
    // AABC AA86 003F;	
    // (ꪼꪆ) TAI VIET VOWEL AY, TAI VIET LETTER LOW GO	[2E96 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA86, 0x003F };
    uint32_t const ces[12] = { 0x2E96, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_408)
{
    // AABC AA86 0061;	
    // (ꪼꪆ) TAI VIET VOWEL AY, TAI VIET LETTER LOW GO	[2E96 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA86, 0x0061 };
    uint32_t const ces[12] = { 0x2E96, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_409)
{
    // AABC AA86 0041;	
    // (ꪼꪆ) TAI VIET VOWEL AY, TAI VIET LETTER LOW GO	[2E96 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA86, 0x0041 };
    uint32_t const ces[12] = { 0x2E96, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_410)
{
    // AABC AA86 0062;	
    // (ꪼꪆ) TAI VIET VOWEL AY, TAI VIET LETTER LOW GO	[2E96 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA86, 0x0062 };
    uint32_t const ces[12] = { 0x2E96, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_411)
{
    // AA87 0021;	
    // (ꪇ) TAI VIET LETTER HIGH GO	[2E97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA87, 0x0021 };
    uint32_t const ces[9] = { 0x2E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_412)
{
    // AA87 003F;	
    // (ꪇ) TAI VIET LETTER HIGH GO	[2E97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA87, 0x003F };
    uint32_t const ces[9] = { 0x2E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_413)
{
    // AA87 0061;	
    // (ꪇ) TAI VIET LETTER HIGH GO	[2E97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA87, 0x0061 };
    uint32_t const ces[9] = { 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_414)
{
    // AA87 0041;	
    // (ꪇ) TAI VIET LETTER HIGH GO	[2E97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA87, 0x0041 };
    uint32_t const ces[9] = { 0x2E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_415)
{
    // AA87 0062;	
    // (ꪇ) TAI VIET LETTER HIGH GO	[2E97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA87, 0x0062 };
    uint32_t const ces[9] = { 0x2E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_416)
{
    // AAB5 AA87 0021;	
    // (ꪵꪇ) TAI VIET VOWEL E, TAI VIET LETTER HIGH GO	[2E97 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA87, 0x0021 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_417)
{
    // AAB5 AA87 003F;	
    // (ꪵꪇ) TAI VIET VOWEL E, TAI VIET LETTER HIGH GO	[2E97 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA87, 0x003F };
    uint32_t const ces[12] = { 0x2E97, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_418)
{
    // AAB5 AA87 0061;	
    // (ꪵꪇ) TAI VIET VOWEL E, TAI VIET LETTER HIGH GO	[2E97 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_419)
{
    // AAB5 AA87 0041;	
    // (ꪵꪇ) TAI VIET VOWEL E, TAI VIET LETTER HIGH GO	[2E97 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA87, 0x0041 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_420)
{
    // AAB5 AA87 0062;	
    // (ꪵꪇ) TAI VIET VOWEL E, TAI VIET LETTER HIGH GO	[2E97 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA87, 0x0062 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_421)
{
    // AAB6 AA87 0021;	
    // (ꪶꪇ) TAI VIET VOWEL O, TAI VIET LETTER HIGH GO	[2E97 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA87, 0x0021 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_422)
{
    // AAB6 AA87 003F;	
    // (ꪶꪇ) TAI VIET VOWEL O, TAI VIET LETTER HIGH GO	[2E97 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA87, 0x003F };
    uint32_t const ces[12] = { 0x2E97, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_423)
{
    // AAB6 AA87 0061;	
    // (ꪶꪇ) TAI VIET VOWEL O, TAI VIET LETTER HIGH GO	[2E97 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_424)
{
    // AAB6 AA87 0041;	
    // (ꪶꪇ) TAI VIET VOWEL O, TAI VIET LETTER HIGH GO	[2E97 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA87, 0x0041 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_425)
{
    // AAB6 AA87 0062;	
    // (ꪶꪇ) TAI VIET VOWEL O, TAI VIET LETTER HIGH GO	[2E97 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA87, 0x0062 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_426)
{
    // AAB9 AA87 0021;	
    // (ꪹꪇ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH GO	[2E97 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA87, 0x0021 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_427)
{
    // AAB9 AA87 003F;	
    // (ꪹꪇ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH GO	[2E97 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA87, 0x003F };
    uint32_t const ces[12] = { 0x2E97, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_428)
{
    // AAB9 AA87 0061;	
    // (ꪹꪇ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH GO	[2E97 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_429)
{
    // AAB9 AA87 0041;	
    // (ꪹꪇ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH GO	[2E97 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA87, 0x0041 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_430)
{
    // AAB9 AA87 0062;	
    // (ꪹꪇ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH GO	[2E97 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA87, 0x0062 };
    uint32_t const ces[12] = { 0x2E97, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_431)
{
    // AABB AA87 0021;	
    // (ꪻꪇ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH GO	[2E97 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA87, 0x0021 };
    uint32_t const ces[12] = { 0x2E97, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_432)
{
    // AABB AA87 003F;	
    // (ꪻꪇ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH GO	[2E97 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA87, 0x003F };
    uint32_t const ces[12] = { 0x2E97, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_433)
{
    // AABB AA87 0061;	
    // (ꪻꪇ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH GO	[2E97 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2E97, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_434)
{
    // AABB AA87 0041;	
    // (ꪻꪇ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH GO	[2E97 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA87, 0x0041 };
    uint32_t const ces[12] = { 0x2E97, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_435)
{
    // AABB AA87 0062;	
    // (ꪻꪇ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH GO	[2E97 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA87, 0x0062 };
    uint32_t const ces[12] = { 0x2E97, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_436)
{
    // AABC AA87 0021;	
    // (ꪼꪇ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH GO	[2E97 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA87, 0x0021 };
    uint32_t const ces[12] = { 0x2E97, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_437)
{
    // AABC AA87 003F;	
    // (ꪼꪇ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH GO	[2E97 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA87, 0x003F };
    uint32_t const ces[12] = { 0x2E97, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_438)
{
    // AABC AA87 0061;	
    // (ꪼꪇ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH GO	[2E97 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA87, 0x0061 };
    uint32_t const ces[12] = { 0x2E97, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_439)
{
    // AABC AA87 0041;	
    // (ꪼꪇ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH GO	[2E97 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA87, 0x0041 };
    uint32_t const ces[12] = { 0x2E97, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_440)
{
    // AABC AA87 0062;	
    // (ꪼꪇ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH GO	[2E97 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA87, 0x0062 };
    uint32_t const ces[12] = { 0x2E97, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_441)
{
    // AA88 0021;	
    // (ꪈ) TAI VIET LETTER LOW NGO	[2E98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA88, 0x0021 };
    uint32_t const ces[9] = { 0x2E98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_442)
{
    // AA88 003F;	
    // (ꪈ) TAI VIET LETTER LOW NGO	[2E98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA88, 0x003F };
    uint32_t const ces[9] = { 0x2E98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_443)
{
    // AA88 0061;	
    // (ꪈ) TAI VIET LETTER LOW NGO	[2E98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA88, 0x0061 };
    uint32_t const ces[9] = { 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_444)
{
    // AA88 0041;	
    // (ꪈ) TAI VIET LETTER LOW NGO	[2E98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA88, 0x0041 };
    uint32_t const ces[9] = { 0x2E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_445)
{
    // AA88 0062;	
    // (ꪈ) TAI VIET LETTER LOW NGO	[2E98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA88, 0x0062 };
    uint32_t const ces[9] = { 0x2E98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_446)
{
    // AAB5 AA88 0021;	
    // (ꪵꪈ) TAI VIET VOWEL E, TAI VIET LETTER LOW NGO	[2E98 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA88, 0x0021 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_447)
{
    // AAB5 AA88 003F;	
    // (ꪵꪈ) TAI VIET VOWEL E, TAI VIET LETTER LOW NGO	[2E98 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA88, 0x003F };
    uint32_t const ces[12] = { 0x2E98, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_448)
{
    // AAB5 AA88 0061;	
    // (ꪵꪈ) TAI VIET VOWEL E, TAI VIET LETTER LOW NGO	[2E98 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_449)
{
    // AAB5 AA88 0041;	
    // (ꪵꪈ) TAI VIET VOWEL E, TAI VIET LETTER LOW NGO	[2E98 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA88, 0x0041 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_450)
{
    // AAB5 AA88 0062;	
    // (ꪵꪈ) TAI VIET VOWEL E, TAI VIET LETTER LOW NGO	[2E98 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA88, 0x0062 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_451)
{
    // AAB6 AA88 0021;	
    // (ꪶꪈ) TAI VIET VOWEL O, TAI VIET LETTER LOW NGO	[2E98 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA88, 0x0021 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_452)
{
    // AAB6 AA88 003F;	
    // (ꪶꪈ) TAI VIET VOWEL O, TAI VIET LETTER LOW NGO	[2E98 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA88, 0x003F };
    uint32_t const ces[12] = { 0x2E98, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_453)
{
    // AAB6 AA88 0061;	
    // (ꪶꪈ) TAI VIET VOWEL O, TAI VIET LETTER LOW NGO	[2E98 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_454)
{
    // AAB6 AA88 0041;	
    // (ꪶꪈ) TAI VIET VOWEL O, TAI VIET LETTER LOW NGO	[2E98 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA88, 0x0041 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_455)
{
    // AAB6 AA88 0062;	
    // (ꪶꪈ) TAI VIET VOWEL O, TAI VIET LETTER LOW NGO	[2E98 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA88, 0x0062 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_456)
{
    // AAB9 AA88 0021;	
    // (ꪹꪈ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NGO	[2E98 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA88, 0x0021 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_457)
{
    // AAB9 AA88 003F;	
    // (ꪹꪈ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NGO	[2E98 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA88, 0x003F };
    uint32_t const ces[12] = { 0x2E98, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_458)
{
    // AAB9 AA88 0061;	
    // (ꪹꪈ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NGO	[2E98 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_459)
{
    // AAB9 AA88 0041;	
    // (ꪹꪈ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NGO	[2E98 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA88, 0x0041 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_460)
{
    // AAB9 AA88 0062;	
    // (ꪹꪈ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NGO	[2E98 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA88, 0x0062 };
    uint32_t const ces[12] = { 0x2E98, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_461)
{
    // AABB AA88 0021;	
    // (ꪻꪈ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NGO	[2E98 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA88, 0x0021 };
    uint32_t const ces[12] = { 0x2E98, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_462)
{
    // AABB AA88 003F;	
    // (ꪻꪈ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NGO	[2E98 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA88, 0x003F };
    uint32_t const ces[12] = { 0x2E98, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_463)
{
    // AABB AA88 0061;	
    // (ꪻꪈ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NGO	[2E98 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2E98, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_464)
{
    // AABB AA88 0041;	
    // (ꪻꪈ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NGO	[2E98 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA88, 0x0041 };
    uint32_t const ces[12] = { 0x2E98, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_465)
{
    // AABB AA88 0062;	
    // (ꪻꪈ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NGO	[2E98 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA88, 0x0062 };
    uint32_t const ces[12] = { 0x2E98, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_466)
{
    // AABC AA88 0021;	
    // (ꪼꪈ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NGO	[2E98 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA88, 0x0021 };
    uint32_t const ces[12] = { 0x2E98, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_467)
{
    // AABC AA88 003F;	
    // (ꪼꪈ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NGO	[2E98 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA88, 0x003F };
    uint32_t const ces[12] = { 0x2E98, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_468)
{
    // AABC AA88 0061;	
    // (ꪼꪈ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NGO	[2E98 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA88, 0x0061 };
    uint32_t const ces[12] = { 0x2E98, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_469)
{
    // AABC AA88 0041;	
    // (ꪼꪈ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NGO	[2E98 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA88, 0x0041 };
    uint32_t const ces[12] = { 0x2E98, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_470)
{
    // AABC AA88 0062;	
    // (ꪼꪈ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NGO	[2E98 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA88, 0x0062 };
    uint32_t const ces[12] = { 0x2E98, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_471)
{
    // AA89 0021;	
    // (ꪉ) TAI VIET LETTER HIGH NGO	[2E99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA89, 0x0021 };
    uint32_t const ces[9] = { 0x2E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_472)
{
    // AA89 003F;	
    // (ꪉ) TAI VIET LETTER HIGH NGO	[2E99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA89, 0x003F };
    uint32_t const ces[9] = { 0x2E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_473)
{
    // AA89 0061;	
    // (ꪉ) TAI VIET LETTER HIGH NGO	[2E99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA89, 0x0061 };
    uint32_t const ces[9] = { 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_474)
{
    // AA89 0041;	
    // (ꪉ) TAI VIET LETTER HIGH NGO	[2E99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA89, 0x0041 };
    uint32_t const ces[9] = { 0x2E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_475)
{
    // AA89 0062;	
    // (ꪉ) TAI VIET LETTER HIGH NGO	[2E99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA89, 0x0062 };
    uint32_t const ces[9] = { 0x2E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_476)
{
    // AAB5 AA89 0021;	
    // (ꪵꪉ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NGO	[2E99 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA89, 0x0021 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_477)
{
    // AAB5 AA89 003F;	
    // (ꪵꪉ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NGO	[2E99 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA89, 0x003F };
    uint32_t const ces[12] = { 0x2E99, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_478)
{
    // AAB5 AA89 0061;	
    // (ꪵꪉ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NGO	[2E99 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_479)
{
    // AAB5 AA89 0041;	
    // (ꪵꪉ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NGO	[2E99 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA89, 0x0041 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_480)
{
    // AAB5 AA89 0062;	
    // (ꪵꪉ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NGO	[2E99 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA89, 0x0062 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_481)
{
    // AAB6 AA89 0021;	
    // (ꪶꪉ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NGO	[2E99 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA89, 0x0021 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_482)
{
    // AAB6 AA89 003F;	
    // (ꪶꪉ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NGO	[2E99 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA89, 0x003F };
    uint32_t const ces[12] = { 0x2E99, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_483)
{
    // AAB6 AA89 0061;	
    // (ꪶꪉ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NGO	[2E99 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_484)
{
    // AAB6 AA89 0041;	
    // (ꪶꪉ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NGO	[2E99 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA89, 0x0041 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_485)
{
    // AAB6 AA89 0062;	
    // (ꪶꪉ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NGO	[2E99 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA89, 0x0062 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_486)
{
    // AAB9 AA89 0021;	
    // (ꪹꪉ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NGO	[2E99 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA89, 0x0021 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_487)
{
    // AAB9 AA89 003F;	
    // (ꪹꪉ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NGO	[2E99 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA89, 0x003F };
    uint32_t const ces[12] = { 0x2E99, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_488)
{
    // AAB9 AA89 0061;	
    // (ꪹꪉ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NGO	[2E99 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_489)
{
    // AAB9 AA89 0041;	
    // (ꪹꪉ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NGO	[2E99 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA89, 0x0041 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_490)
{
    // AAB9 AA89 0062;	
    // (ꪹꪉ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NGO	[2E99 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA89, 0x0062 };
    uint32_t const ces[12] = { 0x2E99, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_491)
{
    // AABB AA89 0021;	
    // (ꪻꪉ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NGO	[2E99 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA89, 0x0021 };
    uint32_t const ces[12] = { 0x2E99, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_492)
{
    // AABB AA89 003F;	
    // (ꪻꪉ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NGO	[2E99 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA89, 0x003F };
    uint32_t const ces[12] = { 0x2E99, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_493)
{
    // AABB AA89 0061;	
    // (ꪻꪉ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NGO	[2E99 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2E99, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_494)
{
    // AABB AA89 0041;	
    // (ꪻꪉ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NGO	[2E99 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA89, 0x0041 };
    uint32_t const ces[12] = { 0x2E99, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_495)
{
    // AABB AA89 0062;	
    // (ꪻꪉ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NGO	[2E99 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA89, 0x0062 };
    uint32_t const ces[12] = { 0x2E99, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_496)
{
    // AABC AA89 0021;	
    // (ꪼꪉ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NGO	[2E99 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA89, 0x0021 };
    uint32_t const ces[12] = { 0x2E99, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_497)
{
    // AABC AA89 003F;	
    // (ꪼꪉ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NGO	[2E99 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA89, 0x003F };
    uint32_t const ces[12] = { 0x2E99, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_498)
{
    // AABC AA89 0061;	
    // (ꪼꪉ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NGO	[2E99 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA89, 0x0061 };
    uint32_t const ces[12] = { 0x2E99, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_192_499)
{
    // AABC AA89 0041;	
    // (ꪼꪉ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NGO	[2E99 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA89, 0x0041 };
    uint32_t const ces[12] = { 0x2E99, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

