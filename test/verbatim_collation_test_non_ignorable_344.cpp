// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_344_000)
{
    // 3AAE 003F;	
    // (㪮) CJK UNIFIED IDEOGRAPH-3AAE	[FB80 BAAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_001)
{
    // 3AAE 0061;	
    // (㪮) CJK UNIFIED IDEOGRAPH-3AAE	[FB80 BAAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_002)
{
    // 3AAE 0041;	
    // (㪮) CJK UNIFIED IDEOGRAPH-3AAE	[FB80 BAAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AAE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_003)
{
    // 3AAE 0062;	
    // (㪮) CJK UNIFIED IDEOGRAPH-3AAE	[FB80 BAAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_004)
{
    // 3AAF 0021;	
    // (㪯) CJK UNIFIED IDEOGRAPH-3AAF	[FB80 BAAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_005)
{
    // 3AAF 003F;	
    // (㪯) CJK UNIFIED IDEOGRAPH-3AAF	[FB80 BAAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_006)
{
    // 3AAF 0061;	
    // (㪯) CJK UNIFIED IDEOGRAPH-3AAF	[FB80 BAAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_007)
{
    // 3AAF 0041;	
    // (㪯) CJK UNIFIED IDEOGRAPH-3AAF	[FB80 BAAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_008)
{
    // 3AAF 0062;	
    // (㪯) CJK UNIFIED IDEOGRAPH-3AAF	[FB80 BAAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_009)
{
    // 3AB0 0021;	
    // (㪰) CJK UNIFIED IDEOGRAPH-3AB0	[FB80 BAB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_010)
{
    // 3AB0 003F;	
    // (㪰) CJK UNIFIED IDEOGRAPH-3AB0	[FB80 BAB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_011)
{
    // 3AB0 0061;	
    // (㪰) CJK UNIFIED IDEOGRAPH-3AB0	[FB80 BAB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_012)
{
    // 3AB0 0041;	
    // (㪰) CJK UNIFIED IDEOGRAPH-3AB0	[FB80 BAB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_013)
{
    // 3AB0 0062;	
    // (㪰) CJK UNIFIED IDEOGRAPH-3AB0	[FB80 BAB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_014)
{
    // 3AB1 0021;	
    // (㪱) CJK UNIFIED IDEOGRAPH-3AB1	[FB80 BAB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_015)
{
    // 3AB1 003F;	
    // (㪱) CJK UNIFIED IDEOGRAPH-3AB1	[FB80 BAB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_016)
{
    // 3AB1 0061;	
    // (㪱) CJK UNIFIED IDEOGRAPH-3AB1	[FB80 BAB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_017)
{
    // 3AB1 0041;	
    // (㪱) CJK UNIFIED IDEOGRAPH-3AB1	[FB80 BAB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_018)
{
    // 3AB1 0062;	
    // (㪱) CJK UNIFIED IDEOGRAPH-3AB1	[FB80 BAB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_019)
{
    // 3AB2 0021;	
    // (㪲) CJK UNIFIED IDEOGRAPH-3AB2	[FB80 BAB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_020)
{
    // 3AB2 003F;	
    // (㪲) CJK UNIFIED IDEOGRAPH-3AB2	[FB80 BAB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_021)
{
    // 3AB2 0061;	
    // (㪲) CJK UNIFIED IDEOGRAPH-3AB2	[FB80 BAB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_022)
{
    // 3AB2 0041;	
    // (㪲) CJK UNIFIED IDEOGRAPH-3AB2	[FB80 BAB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_023)
{
    // 3AB2 0062;	
    // (㪲) CJK UNIFIED IDEOGRAPH-3AB2	[FB80 BAB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_024)
{
    // 3AB3 0021;	
    // (㪳) CJK UNIFIED IDEOGRAPH-3AB3	[FB80 BAB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_025)
{
    // 3AB3 003F;	
    // (㪳) CJK UNIFIED IDEOGRAPH-3AB3	[FB80 BAB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_026)
{
    // 3AB3 0061;	
    // (㪳) CJK UNIFIED IDEOGRAPH-3AB3	[FB80 BAB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_027)
{
    // 3AB3 0041;	
    // (㪳) CJK UNIFIED IDEOGRAPH-3AB3	[FB80 BAB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_028)
{
    // 3AB3 0062;	
    // (㪳) CJK UNIFIED IDEOGRAPH-3AB3	[FB80 BAB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_029)
{
    // 3AB4 0021;	
    // (㪴) CJK UNIFIED IDEOGRAPH-3AB4	[FB80 BAB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_030)
{
    // 3AB4 003F;	
    // (㪴) CJK UNIFIED IDEOGRAPH-3AB4	[FB80 BAB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_031)
{
    // 3AB4 0061;	
    // (㪴) CJK UNIFIED IDEOGRAPH-3AB4	[FB80 BAB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_032)
{
    // 3AB4 0041;	
    // (㪴) CJK UNIFIED IDEOGRAPH-3AB4	[FB80 BAB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_033)
{
    // 3AB4 0062;	
    // (㪴) CJK UNIFIED IDEOGRAPH-3AB4	[FB80 BAB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_034)
{
    // 3AB5 0021;	
    // (㪵) CJK UNIFIED IDEOGRAPH-3AB5	[FB80 BAB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_035)
{
    // 3AB5 003F;	
    // (㪵) CJK UNIFIED IDEOGRAPH-3AB5	[FB80 BAB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_036)
{
    // 3AB5 0061;	
    // (㪵) CJK UNIFIED IDEOGRAPH-3AB5	[FB80 BAB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_037)
{
    // 3AB5 0041;	
    // (㪵) CJK UNIFIED IDEOGRAPH-3AB5	[FB80 BAB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_038)
{
    // 3AB5 0062;	
    // (㪵) CJK UNIFIED IDEOGRAPH-3AB5	[FB80 BAB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_039)
{
    // 3AB6 0021;	
    // (㪶) CJK UNIFIED IDEOGRAPH-3AB6	[FB80 BAB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_040)
{
    // 3AB6 003F;	
    // (㪶) CJK UNIFIED IDEOGRAPH-3AB6	[FB80 BAB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_041)
{
    // 3AB6 0061;	
    // (㪶) CJK UNIFIED IDEOGRAPH-3AB6	[FB80 BAB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_042)
{
    // 3AB6 0041;	
    // (㪶) CJK UNIFIED IDEOGRAPH-3AB6	[FB80 BAB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_043)
{
    // 3AB6 0062;	
    // (㪶) CJK UNIFIED IDEOGRAPH-3AB6	[FB80 BAB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_044)
{
    // 3AB7 0021;	
    // (㪷) CJK UNIFIED IDEOGRAPH-3AB7	[FB80 BAB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_045)
{
    // 3AB7 003F;	
    // (㪷) CJK UNIFIED IDEOGRAPH-3AB7	[FB80 BAB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_046)
{
    // 3AB7 0061;	
    // (㪷) CJK UNIFIED IDEOGRAPH-3AB7	[FB80 BAB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_047)
{
    // 3AB7 0041;	
    // (㪷) CJK UNIFIED IDEOGRAPH-3AB7	[FB80 BAB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_048)
{
    // 3AB7 0062;	
    // (㪷) CJK UNIFIED IDEOGRAPH-3AB7	[FB80 BAB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_049)
{
    // 3AB8 0021;	
    // (㪸) CJK UNIFIED IDEOGRAPH-3AB8	[FB80 BAB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_050)
{
    // 3AB8 003F;	
    // (㪸) CJK UNIFIED IDEOGRAPH-3AB8	[FB80 BAB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_051)
{
    // 3AB8 0061;	
    // (㪸) CJK UNIFIED IDEOGRAPH-3AB8	[FB80 BAB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_052)
{
    // 3AB8 0041;	
    // (㪸) CJK UNIFIED IDEOGRAPH-3AB8	[FB80 BAB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_053)
{
    // 3AB8 0062;	
    // (㪸) CJK UNIFIED IDEOGRAPH-3AB8	[FB80 BAB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_054)
{
    // 3AB9 0021;	
    // (㪹) CJK UNIFIED IDEOGRAPH-3AB9	[FB80 BAB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_055)
{
    // 3AB9 003F;	
    // (㪹) CJK UNIFIED IDEOGRAPH-3AB9	[FB80 BAB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_056)
{
    // 3AB9 0061;	
    // (㪹) CJK UNIFIED IDEOGRAPH-3AB9	[FB80 BAB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_057)
{
    // 3AB9 0041;	
    // (㪹) CJK UNIFIED IDEOGRAPH-3AB9	[FB80 BAB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_058)
{
    // 3AB9 0062;	
    // (㪹) CJK UNIFIED IDEOGRAPH-3AB9	[FB80 BAB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_059)
{
    // 3ABA 0021;	
    // (㪺) CJK UNIFIED IDEOGRAPH-3ABA	[FB80 BABA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBABA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_060)
{
    // 3ABA 003F;	
    // (㪺) CJK UNIFIED IDEOGRAPH-3ABA	[FB80 BABA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBABA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_061)
{
    // 3ABA 0061;	
    // (㪺) CJK UNIFIED IDEOGRAPH-3ABA	[FB80 BABA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_062)
{
    // 3ABA 0041;	
    // (㪺) CJK UNIFIED IDEOGRAPH-3ABA	[FB80 BABA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ABA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_063)
{
    // 3ABA 0062;	
    // (㪺) CJK UNIFIED IDEOGRAPH-3ABA	[FB80 BABA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBABA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_064)
{
    // 3ABB 0021;	
    // (㪻) CJK UNIFIED IDEOGRAPH-3ABB	[FB80 BABB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBABB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_065)
{
    // 3ABB 003F;	
    // (㪻) CJK UNIFIED IDEOGRAPH-3ABB	[FB80 BABB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBABB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_066)
{
    // 3ABB 0061;	
    // (㪻) CJK UNIFIED IDEOGRAPH-3ABB	[FB80 BABB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_067)
{
    // 3ABB 0041;	
    // (㪻) CJK UNIFIED IDEOGRAPH-3ABB	[FB80 BABB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ABB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_068)
{
    // 3ABB 0062;	
    // (㪻) CJK UNIFIED IDEOGRAPH-3ABB	[FB80 BABB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBABB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_069)
{
    // 3ABC 0021;	
    // (㪼) CJK UNIFIED IDEOGRAPH-3ABC	[FB80 BABC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBABC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_070)
{
    // 3ABC 003F;	
    // (㪼) CJK UNIFIED IDEOGRAPH-3ABC	[FB80 BABC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBABC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_071)
{
    // 3ABC 0061;	
    // (㪼) CJK UNIFIED IDEOGRAPH-3ABC	[FB80 BABC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_072)
{
    // 3ABC 0041;	
    // (㪼) CJK UNIFIED IDEOGRAPH-3ABC	[FB80 BABC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ABC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_073)
{
    // 3ABC 0062;	
    // (㪼) CJK UNIFIED IDEOGRAPH-3ABC	[FB80 BABC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBABC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_074)
{
    // 3ABD 0021;	
    // (㪽) CJK UNIFIED IDEOGRAPH-3ABD	[FB80 BABD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBABD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_075)
{
    // 3ABD 003F;	
    // (㪽) CJK UNIFIED IDEOGRAPH-3ABD	[FB80 BABD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBABD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_076)
{
    // 3ABD 0061;	
    // (㪽) CJK UNIFIED IDEOGRAPH-3ABD	[FB80 BABD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_077)
{
    // 3ABD 0041;	
    // (㪽) CJK UNIFIED IDEOGRAPH-3ABD	[FB80 BABD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ABD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_078)
{
    // 3ABD 0062;	
    // (㪽) CJK UNIFIED IDEOGRAPH-3ABD	[FB80 BABD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBABD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_079)
{
    // 3ABE 0021;	
    // (㪾) CJK UNIFIED IDEOGRAPH-3ABE	[FB80 BABE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBABE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_080)
{
    // 3ABE 003F;	
    // (㪾) CJK UNIFIED IDEOGRAPH-3ABE	[FB80 BABE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBABE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_081)
{
    // 3ABE 0061;	
    // (㪾) CJK UNIFIED IDEOGRAPH-3ABE	[FB80 BABE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_082)
{
    // 3ABE 0041;	
    // (㪾) CJK UNIFIED IDEOGRAPH-3ABE	[FB80 BABE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ABE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_083)
{
    // 3ABE 0062;	
    // (㪾) CJK UNIFIED IDEOGRAPH-3ABE	[FB80 BABE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBABE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_084)
{
    // 3ABF 0021;	
    // (㪿) CJK UNIFIED IDEOGRAPH-3ABF	[FB80 BABF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBABF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_085)
{
    // 3ABF 003F;	
    // (㪿) CJK UNIFIED IDEOGRAPH-3ABF	[FB80 BABF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBABF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_086)
{
    // 3ABF 0061;	
    // (㪿) CJK UNIFIED IDEOGRAPH-3ABF	[FB80 BABF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_087)
{
    // 3ABF 0041;	
    // (㪿) CJK UNIFIED IDEOGRAPH-3ABF	[FB80 BABF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ABF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_088)
{
    // 3ABF 0062;	
    // (㪿) CJK UNIFIED IDEOGRAPH-3ABF	[FB80 BABF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ABF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBABF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_089)
{
    // 3AC0 0021;	
    // (㫀) CJK UNIFIED IDEOGRAPH-3AC0	[FB80 BAC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_090)
{
    // 3AC0 003F;	
    // (㫀) CJK UNIFIED IDEOGRAPH-3AC0	[FB80 BAC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_091)
{
    // 3AC0 0061;	
    // (㫀) CJK UNIFIED IDEOGRAPH-3AC0	[FB80 BAC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_092)
{
    // 3AC0 0041;	
    // (㫀) CJK UNIFIED IDEOGRAPH-3AC0	[FB80 BAC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_093)
{
    // 3AC0 0062;	
    // (㫀) CJK UNIFIED IDEOGRAPH-3AC0	[FB80 BAC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_094)
{
    // 3AC1 0021;	
    // (㫁) CJK UNIFIED IDEOGRAPH-3AC1	[FB80 BAC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_095)
{
    // 3AC1 003F;	
    // (㫁) CJK UNIFIED IDEOGRAPH-3AC1	[FB80 BAC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_096)
{
    // 3AC1 0061;	
    // (㫁) CJK UNIFIED IDEOGRAPH-3AC1	[FB80 BAC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_097)
{
    // 3AC1 0041;	
    // (㫁) CJK UNIFIED IDEOGRAPH-3AC1	[FB80 BAC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_098)
{
    // 3AC1 0062;	
    // (㫁) CJK UNIFIED IDEOGRAPH-3AC1	[FB80 BAC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_099)
{
    // 3AC2 0021;	
    // (㫂) CJK UNIFIED IDEOGRAPH-3AC2	[FB80 BAC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_100)
{
    // 3AC2 003F;	
    // (㫂) CJK UNIFIED IDEOGRAPH-3AC2	[FB80 BAC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_101)
{
    // 3AC2 0061;	
    // (㫂) CJK UNIFIED IDEOGRAPH-3AC2	[FB80 BAC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_102)
{
    // 3AC2 0041;	
    // (㫂) CJK UNIFIED IDEOGRAPH-3AC2	[FB80 BAC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_103)
{
    // 3AC2 0062;	
    // (㫂) CJK UNIFIED IDEOGRAPH-3AC2	[FB80 BAC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_104)
{
    // 3AC3 0021;	
    // (㫃) CJK UNIFIED IDEOGRAPH-3AC3	[FB80 BAC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_105)
{
    // 3AC3 003F;	
    // (㫃) CJK UNIFIED IDEOGRAPH-3AC3	[FB80 BAC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_106)
{
    // 3AC3 0061;	
    // (㫃) CJK UNIFIED IDEOGRAPH-3AC3	[FB80 BAC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_107)
{
    // 3AC3 0041;	
    // (㫃) CJK UNIFIED IDEOGRAPH-3AC3	[FB80 BAC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_108)
{
    // 3AC3 0062;	
    // (㫃) CJK UNIFIED IDEOGRAPH-3AC3	[FB80 BAC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_109)
{
    // 3AC4 0021;	
    // (㫄) CJK UNIFIED IDEOGRAPH-3AC4	[FB80 BAC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_110)
{
    // 3AC4 003F;	
    // (㫄) CJK UNIFIED IDEOGRAPH-3AC4	[FB80 BAC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_111)
{
    // 3AC4 0061;	
    // (㫄) CJK UNIFIED IDEOGRAPH-3AC4	[FB80 BAC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_112)
{
    // 3AC4 0041;	
    // (㫄) CJK UNIFIED IDEOGRAPH-3AC4	[FB80 BAC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_113)
{
    // 3AC4 0062;	
    // (㫄) CJK UNIFIED IDEOGRAPH-3AC4	[FB80 BAC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_114)
{
    // 3AC5 0021;	
    // (㫅) CJK UNIFIED IDEOGRAPH-3AC5	[FB80 BAC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_115)
{
    // 3AC5 003F;	
    // (㫅) CJK UNIFIED IDEOGRAPH-3AC5	[FB80 BAC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_116)
{
    // 3AC5 0061;	
    // (㫅) CJK UNIFIED IDEOGRAPH-3AC5	[FB80 BAC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_117)
{
    // 3AC5 0041;	
    // (㫅) CJK UNIFIED IDEOGRAPH-3AC5	[FB80 BAC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_118)
{
    // 3AC5 0062;	
    // (㫅) CJK UNIFIED IDEOGRAPH-3AC5	[FB80 BAC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_119)
{
    // 3AC6 0021;	
    // (㫆) CJK UNIFIED IDEOGRAPH-3AC6	[FB80 BAC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_120)
{
    // 3AC6 003F;	
    // (㫆) CJK UNIFIED IDEOGRAPH-3AC6	[FB80 BAC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_121)
{
    // 3AC6 0061;	
    // (㫆) CJK UNIFIED IDEOGRAPH-3AC6	[FB80 BAC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_122)
{
    // 3AC6 0041;	
    // (㫆) CJK UNIFIED IDEOGRAPH-3AC6	[FB80 BAC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_123)
{
    // 3AC6 0062;	
    // (㫆) CJK UNIFIED IDEOGRAPH-3AC6	[FB80 BAC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_124)
{
    // 3AC7 0021;	
    // (㫇) CJK UNIFIED IDEOGRAPH-3AC7	[FB80 BAC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_125)
{
    // 3AC7 003F;	
    // (㫇) CJK UNIFIED IDEOGRAPH-3AC7	[FB80 BAC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_126)
{
    // 3AC7 0061;	
    // (㫇) CJK UNIFIED IDEOGRAPH-3AC7	[FB80 BAC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_127)
{
    // 3AC7 0041;	
    // (㫇) CJK UNIFIED IDEOGRAPH-3AC7	[FB80 BAC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_128)
{
    // 3AC7 0062;	
    // (㫇) CJK UNIFIED IDEOGRAPH-3AC7	[FB80 BAC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_129)
{
    // 3AC8 0021;	
    // (㫈) CJK UNIFIED IDEOGRAPH-3AC8	[FB80 BAC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_130)
{
    // 3AC8 003F;	
    // (㫈) CJK UNIFIED IDEOGRAPH-3AC8	[FB80 BAC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_131)
{
    // 3AC8 0061;	
    // (㫈) CJK UNIFIED IDEOGRAPH-3AC8	[FB80 BAC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_132)
{
    // 3AC8 0041;	
    // (㫈) CJK UNIFIED IDEOGRAPH-3AC8	[FB80 BAC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_133)
{
    // 3AC8 0062;	
    // (㫈) CJK UNIFIED IDEOGRAPH-3AC8	[FB80 BAC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_134)
{
    // 3AC9 0021;	
    // (㫉) CJK UNIFIED IDEOGRAPH-3AC9	[FB80 BAC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_135)
{
    // 3AC9 003F;	
    // (㫉) CJK UNIFIED IDEOGRAPH-3AC9	[FB80 BAC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_136)
{
    // 3AC9 0061;	
    // (㫉) CJK UNIFIED IDEOGRAPH-3AC9	[FB80 BAC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_137)
{
    // 3AC9 0041;	
    // (㫉) CJK UNIFIED IDEOGRAPH-3AC9	[FB80 BAC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AC9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_138)
{
    // 3AC9 0062;	
    // (㫉) CJK UNIFIED IDEOGRAPH-3AC9	[FB80 BAC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AC9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_139)
{
    // 3ACA 0021;	
    // (㫊) CJK UNIFIED IDEOGRAPH-3ACA	[FB80 BACA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBACA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_140)
{
    // 3ACA 003F;	
    // (㫊) CJK UNIFIED IDEOGRAPH-3ACA	[FB80 BACA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBACA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_141)
{
    // 3ACA 0061;	
    // (㫊) CJK UNIFIED IDEOGRAPH-3ACA	[FB80 BACA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_142)
{
    // 3ACA 0041;	
    // (㫊) CJK UNIFIED IDEOGRAPH-3ACA	[FB80 BACA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ACA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_143)
{
    // 3ACA 0062;	
    // (㫊) CJK UNIFIED IDEOGRAPH-3ACA	[FB80 BACA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBACA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_144)
{
    // 3ACB 0021;	
    // (㫋) CJK UNIFIED IDEOGRAPH-3ACB	[FB80 BACB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBACB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_145)
{
    // 3ACB 003F;	
    // (㫋) CJK UNIFIED IDEOGRAPH-3ACB	[FB80 BACB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBACB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_146)
{
    // 3ACB 0061;	
    // (㫋) CJK UNIFIED IDEOGRAPH-3ACB	[FB80 BACB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_147)
{
    // 3ACB 0041;	
    // (㫋) CJK UNIFIED IDEOGRAPH-3ACB	[FB80 BACB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ACB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_148)
{
    // 3ACB 0062;	
    // (㫋) CJK UNIFIED IDEOGRAPH-3ACB	[FB80 BACB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBACB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_149)
{
    // 3ACC 0021;	
    // (㫌) CJK UNIFIED IDEOGRAPH-3ACC	[FB80 BACC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBACC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_150)
{
    // 3ACC 003F;	
    // (㫌) CJK UNIFIED IDEOGRAPH-3ACC	[FB80 BACC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBACC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_151)
{
    // 3ACC 0061;	
    // (㫌) CJK UNIFIED IDEOGRAPH-3ACC	[FB80 BACC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_152)
{
    // 3ACC 0041;	
    // (㫌) CJK UNIFIED IDEOGRAPH-3ACC	[FB80 BACC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ACC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_153)
{
    // 3ACC 0062;	
    // (㫌) CJK UNIFIED IDEOGRAPH-3ACC	[FB80 BACC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBACC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_154)
{
    // 3ACD 0021;	
    // (㫍) CJK UNIFIED IDEOGRAPH-3ACD	[FB80 BACD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBACD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_155)
{
    // 3ACD 003F;	
    // (㫍) CJK UNIFIED IDEOGRAPH-3ACD	[FB80 BACD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBACD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_156)
{
    // 3ACD 0061;	
    // (㫍) CJK UNIFIED IDEOGRAPH-3ACD	[FB80 BACD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_157)
{
    // 3ACD 0041;	
    // (㫍) CJK UNIFIED IDEOGRAPH-3ACD	[FB80 BACD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ACD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_158)
{
    // 3ACD 0062;	
    // (㫍) CJK UNIFIED IDEOGRAPH-3ACD	[FB80 BACD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBACD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_159)
{
    // 3ACE 0021;	
    // (㫎) CJK UNIFIED IDEOGRAPH-3ACE	[FB80 BACE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBACE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_160)
{
    // 3ACE 003F;	
    // (㫎) CJK UNIFIED IDEOGRAPH-3ACE	[FB80 BACE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBACE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_161)
{
    // 3ACE 0061;	
    // (㫎) CJK UNIFIED IDEOGRAPH-3ACE	[FB80 BACE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_162)
{
    // 3ACE 0041;	
    // (㫎) CJK UNIFIED IDEOGRAPH-3ACE	[FB80 BACE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ACE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_163)
{
    // 3ACE 0062;	
    // (㫎) CJK UNIFIED IDEOGRAPH-3ACE	[FB80 BACE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBACE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_164)
{
    // 3ACF 0021;	
    // (㫏) CJK UNIFIED IDEOGRAPH-3ACF	[FB80 BACF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBACF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_165)
{
    // 3ACF 003F;	
    // (㫏) CJK UNIFIED IDEOGRAPH-3ACF	[FB80 BACF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBACF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_166)
{
    // 3ACF 0061;	
    // (㫏) CJK UNIFIED IDEOGRAPH-3ACF	[FB80 BACF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_167)
{
    // 3ACF 0041;	
    // (㫏) CJK UNIFIED IDEOGRAPH-3ACF	[FB80 BACF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ACF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_168)
{
    // 3ACF 0062;	
    // (㫏) CJK UNIFIED IDEOGRAPH-3ACF	[FB80 BACF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ACF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBACF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_169)
{
    // 3AD0 0021;	
    // (㫐) CJK UNIFIED IDEOGRAPH-3AD0	[FB80 BAD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_170)
{
    // 3AD0 003F;	
    // (㫐) CJK UNIFIED IDEOGRAPH-3AD0	[FB80 BAD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_171)
{
    // 3AD0 0061;	
    // (㫐) CJK UNIFIED IDEOGRAPH-3AD0	[FB80 BAD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_172)
{
    // 3AD0 0041;	
    // (㫐) CJK UNIFIED IDEOGRAPH-3AD0	[FB80 BAD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_173)
{
    // 3AD0 0062;	
    // (㫐) CJK UNIFIED IDEOGRAPH-3AD0	[FB80 BAD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_174)
{
    // 3AD1 0021;	
    // (㫑) CJK UNIFIED IDEOGRAPH-3AD1	[FB80 BAD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_175)
{
    // 3AD1 003F;	
    // (㫑) CJK UNIFIED IDEOGRAPH-3AD1	[FB80 BAD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_176)
{
    // 3AD1 0061;	
    // (㫑) CJK UNIFIED IDEOGRAPH-3AD1	[FB80 BAD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_177)
{
    // 3AD1 0041;	
    // (㫑) CJK UNIFIED IDEOGRAPH-3AD1	[FB80 BAD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_178)
{
    // 3AD1 0062;	
    // (㫑) CJK UNIFIED IDEOGRAPH-3AD1	[FB80 BAD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_179)
{
    // 3AD2 0021;	
    // (㫒) CJK UNIFIED IDEOGRAPH-3AD2	[FB80 BAD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_180)
{
    // 3AD2 003F;	
    // (㫒) CJK UNIFIED IDEOGRAPH-3AD2	[FB80 BAD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_181)
{
    // 3AD2 0061;	
    // (㫒) CJK UNIFIED IDEOGRAPH-3AD2	[FB80 BAD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_182)
{
    // 3AD2 0041;	
    // (㫒) CJK UNIFIED IDEOGRAPH-3AD2	[FB80 BAD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_183)
{
    // 3AD2 0062;	
    // (㫒) CJK UNIFIED IDEOGRAPH-3AD2	[FB80 BAD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_184)
{
    // 3AD3 0021;	
    // (㫓) CJK UNIFIED IDEOGRAPH-3AD3	[FB80 BAD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_185)
{
    // 3AD3 003F;	
    // (㫓) CJK UNIFIED IDEOGRAPH-3AD3	[FB80 BAD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_186)
{
    // 3AD3 0061;	
    // (㫓) CJK UNIFIED IDEOGRAPH-3AD3	[FB80 BAD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_187)
{
    // 3AD3 0041;	
    // (㫓) CJK UNIFIED IDEOGRAPH-3AD3	[FB80 BAD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_188)
{
    // 3AD3 0062;	
    // (㫓) CJK UNIFIED IDEOGRAPH-3AD3	[FB80 BAD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_189)
{
    // 3AD4 0021;	
    // (㫔) CJK UNIFIED IDEOGRAPH-3AD4	[FB80 BAD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_190)
{
    // 3AD4 003F;	
    // (㫔) CJK UNIFIED IDEOGRAPH-3AD4	[FB80 BAD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_191)
{
    // 3AD4 0061;	
    // (㫔) CJK UNIFIED IDEOGRAPH-3AD4	[FB80 BAD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_192)
{
    // 3AD4 0041;	
    // (㫔) CJK UNIFIED IDEOGRAPH-3AD4	[FB80 BAD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_193)
{
    // 3AD4 0062;	
    // (㫔) CJK UNIFIED IDEOGRAPH-3AD4	[FB80 BAD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_194)
{
    // 3AD5 0021;	
    // (㫕) CJK UNIFIED IDEOGRAPH-3AD5	[FB80 BAD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_195)
{
    // 3AD5 003F;	
    // (㫕) CJK UNIFIED IDEOGRAPH-3AD5	[FB80 BAD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_196)
{
    // 3AD5 0061;	
    // (㫕) CJK UNIFIED IDEOGRAPH-3AD5	[FB80 BAD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_197)
{
    // 3AD5 0041;	
    // (㫕) CJK UNIFIED IDEOGRAPH-3AD5	[FB80 BAD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_198)
{
    // 3AD5 0062;	
    // (㫕) CJK UNIFIED IDEOGRAPH-3AD5	[FB80 BAD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_199)
{
    // 3AD6 0021;	
    // (㫖) CJK UNIFIED IDEOGRAPH-3AD6	[FB80 BAD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_200)
{
    // 3AD6 003F;	
    // (㫖) CJK UNIFIED IDEOGRAPH-3AD6	[FB80 BAD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_201)
{
    // 3AD6 0061;	
    // (㫖) CJK UNIFIED IDEOGRAPH-3AD6	[FB80 BAD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_202)
{
    // 3AD6 0041;	
    // (㫖) CJK UNIFIED IDEOGRAPH-3AD6	[FB80 BAD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_203)
{
    // 3AD6 0062;	
    // (㫖) CJK UNIFIED IDEOGRAPH-3AD6	[FB80 BAD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_204)
{
    // 3AD7 0021;	
    // (㫗) CJK UNIFIED IDEOGRAPH-3AD7	[FB80 BAD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_205)
{
    // 3AD7 003F;	
    // (㫗) CJK UNIFIED IDEOGRAPH-3AD7	[FB80 BAD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_206)
{
    // 3AD7 0061;	
    // (㫗) CJK UNIFIED IDEOGRAPH-3AD7	[FB80 BAD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_207)
{
    // 3AD7 0041;	
    // (㫗) CJK UNIFIED IDEOGRAPH-3AD7	[FB80 BAD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_208)
{
    // 3AD7 0062;	
    // (㫗) CJK UNIFIED IDEOGRAPH-3AD7	[FB80 BAD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_209)
{
    // 3AD8 0021;	
    // (㫘) CJK UNIFIED IDEOGRAPH-3AD8	[FB80 BAD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_210)
{
    // 3AD8 003F;	
    // (㫘) CJK UNIFIED IDEOGRAPH-3AD8	[FB80 BAD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_211)
{
    // 3AD8 0061;	
    // (㫘) CJK UNIFIED IDEOGRAPH-3AD8	[FB80 BAD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_212)
{
    // 3AD8 0041;	
    // (㫘) CJK UNIFIED IDEOGRAPH-3AD8	[FB80 BAD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_213)
{
    // 3AD8 0062;	
    // (㫘) CJK UNIFIED IDEOGRAPH-3AD8	[FB80 BAD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_214)
{
    // 3AD9 0021;	
    // (㫙) CJK UNIFIED IDEOGRAPH-3AD9	[FB80 BAD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_215)
{
    // 3AD9 003F;	
    // (㫙) CJK UNIFIED IDEOGRAPH-3AD9	[FB80 BAD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_216)
{
    // 3AD9 0061;	
    // (㫙) CJK UNIFIED IDEOGRAPH-3AD9	[FB80 BAD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_217)
{
    // 3AD9 0041;	
    // (㫙) CJK UNIFIED IDEOGRAPH-3AD9	[FB80 BAD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AD9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_218)
{
    // 3AD9 0062;	
    // (㫙) CJK UNIFIED IDEOGRAPH-3AD9	[FB80 BAD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AD9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_219)
{
    // 3ADA 0021;	
    // (㫚) CJK UNIFIED IDEOGRAPH-3ADA	[FB80 BADA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBADA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_220)
{
    // 3ADA 003F;	
    // (㫚) CJK UNIFIED IDEOGRAPH-3ADA	[FB80 BADA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBADA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_221)
{
    // 3ADA 0061;	
    // (㫚) CJK UNIFIED IDEOGRAPH-3ADA	[FB80 BADA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_222)
{
    // 3ADA 0041;	
    // (㫚) CJK UNIFIED IDEOGRAPH-3ADA	[FB80 BADA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ADA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_223)
{
    // 3ADA 0062;	
    // (㫚) CJK UNIFIED IDEOGRAPH-3ADA	[FB80 BADA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBADA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_224)
{
    // 3ADB 0021;	
    // (㫛) CJK UNIFIED IDEOGRAPH-3ADB	[FB80 BADB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBADB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_225)
{
    // 3ADB 003F;	
    // (㫛) CJK UNIFIED IDEOGRAPH-3ADB	[FB80 BADB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBADB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_226)
{
    // 3ADB 0061;	
    // (㫛) CJK UNIFIED IDEOGRAPH-3ADB	[FB80 BADB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_227)
{
    // 3ADB 0041;	
    // (㫛) CJK UNIFIED IDEOGRAPH-3ADB	[FB80 BADB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ADB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_228)
{
    // 3ADB 0062;	
    // (㫛) CJK UNIFIED IDEOGRAPH-3ADB	[FB80 BADB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBADB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_229)
{
    // 3ADC 0021;	
    // (㫜) CJK UNIFIED IDEOGRAPH-3ADC	[FB80 BADC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBADC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_230)
{
    // 3ADC 003F;	
    // (㫜) CJK UNIFIED IDEOGRAPH-3ADC	[FB80 BADC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBADC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_231)
{
    // 3ADC 0061;	
    // (㫜) CJK UNIFIED IDEOGRAPH-3ADC	[FB80 BADC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_232)
{
    // 3ADC 0041;	
    // (㫜) CJK UNIFIED IDEOGRAPH-3ADC	[FB80 BADC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ADC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_233)
{
    // 3ADC 0062;	
    // (㫜) CJK UNIFIED IDEOGRAPH-3ADC	[FB80 BADC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBADC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_234)
{
    // 3ADD 0021;	
    // (㫝) CJK UNIFIED IDEOGRAPH-3ADD	[FB80 BADD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBADD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_235)
{
    // 3ADD 003F;	
    // (㫝) CJK UNIFIED IDEOGRAPH-3ADD	[FB80 BADD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBADD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_236)
{
    // 3ADD 0061;	
    // (㫝) CJK UNIFIED IDEOGRAPH-3ADD	[FB80 BADD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_237)
{
    // 3ADD 0041;	
    // (㫝) CJK UNIFIED IDEOGRAPH-3ADD	[FB80 BADD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ADD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_238)
{
    // 3ADD 0062;	
    // (㫝) CJK UNIFIED IDEOGRAPH-3ADD	[FB80 BADD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBADD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_239)
{
    // 3ADE 0021;	
    // (㫞) CJK UNIFIED IDEOGRAPH-3ADE	[FB80 BADE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBADE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_240)
{
    // 3ADE 003F;	
    // (㫞) CJK UNIFIED IDEOGRAPH-3ADE	[FB80 BADE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBADE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_241)
{
    // 3ADE 0061;	
    // (㫞) CJK UNIFIED IDEOGRAPH-3ADE	[FB80 BADE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_242)
{
    // 3ADE 0041;	
    // (㫞) CJK UNIFIED IDEOGRAPH-3ADE	[FB80 BADE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ADE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_243)
{
    // 3ADE 0062;	
    // (㫞) CJK UNIFIED IDEOGRAPH-3ADE	[FB80 BADE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBADE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_244)
{
    // 3ADF 0021;	
    // (㫟) CJK UNIFIED IDEOGRAPH-3ADF	[FB80 BADF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBADF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_245)
{
    // 3ADF 003F;	
    // (㫟) CJK UNIFIED IDEOGRAPH-3ADF	[FB80 BADF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBADF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_246)
{
    // 3ADF 0061;	
    // (㫟) CJK UNIFIED IDEOGRAPH-3ADF	[FB80 BADF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_247)
{
    // 3ADF 0041;	
    // (㫟) CJK UNIFIED IDEOGRAPH-3ADF	[FB80 BADF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3ADF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_248)
{
    // 3ADF 0062;	
    // (㫟) CJK UNIFIED IDEOGRAPH-3ADF	[FB80 BADF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3ADF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBADF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_249)
{
    // 3AE0 0021;	
    // (㫠) CJK UNIFIED IDEOGRAPH-3AE0	[FB80 BAE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_250)
{
    // 3AE0 003F;	
    // (㫠) CJK UNIFIED IDEOGRAPH-3AE0	[FB80 BAE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_251)
{
    // 3AE0 0061;	
    // (㫠) CJK UNIFIED IDEOGRAPH-3AE0	[FB80 BAE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_252)
{
    // 3AE0 0041;	
    // (㫠) CJK UNIFIED IDEOGRAPH-3AE0	[FB80 BAE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_253)
{
    // 3AE0 0062;	
    // (㫠) CJK UNIFIED IDEOGRAPH-3AE0	[FB80 BAE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_254)
{
    // 3AE1 0021;	
    // (㫡) CJK UNIFIED IDEOGRAPH-3AE1	[FB80 BAE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_255)
{
    // 3AE1 003F;	
    // (㫡) CJK UNIFIED IDEOGRAPH-3AE1	[FB80 BAE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_256)
{
    // 3AE1 0061;	
    // (㫡) CJK UNIFIED IDEOGRAPH-3AE1	[FB80 BAE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_257)
{
    // 3AE1 0041;	
    // (㫡) CJK UNIFIED IDEOGRAPH-3AE1	[FB80 BAE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_258)
{
    // 3AE1 0062;	
    // (㫡) CJK UNIFIED IDEOGRAPH-3AE1	[FB80 BAE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_259)
{
    // 3AE2 0021;	
    // (㫢) CJK UNIFIED IDEOGRAPH-3AE2	[FB80 BAE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_260)
{
    // 3AE2 003F;	
    // (㫢) CJK UNIFIED IDEOGRAPH-3AE2	[FB80 BAE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_261)
{
    // 3AE2 0061;	
    // (㫢) CJK UNIFIED IDEOGRAPH-3AE2	[FB80 BAE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_262)
{
    // 3AE2 0041;	
    // (㫢) CJK UNIFIED IDEOGRAPH-3AE2	[FB80 BAE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_263)
{
    // 3AE2 0062;	
    // (㫢) CJK UNIFIED IDEOGRAPH-3AE2	[FB80 BAE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_264)
{
    // 3AE3 0021;	
    // (㫣) CJK UNIFIED IDEOGRAPH-3AE3	[FB80 BAE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_265)
{
    // 3AE3 003F;	
    // (㫣) CJK UNIFIED IDEOGRAPH-3AE3	[FB80 BAE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_266)
{
    // 3AE3 0061;	
    // (㫣) CJK UNIFIED IDEOGRAPH-3AE3	[FB80 BAE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_267)
{
    // 3AE3 0041;	
    // (㫣) CJK UNIFIED IDEOGRAPH-3AE3	[FB80 BAE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_268)
{
    // 3AE3 0062;	
    // (㫣) CJK UNIFIED IDEOGRAPH-3AE3	[FB80 BAE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_269)
{
    // 3AE4 0021;	
    // (㫤) CJK UNIFIED IDEOGRAPH-3AE4	[FB80 BAE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_270)
{
    // 2F8D1 0021;	
    // (㫤) CJK COMPATIBILITY IDEOGRAPH-2F8D1	[FB80 BAE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_271)
{
    // 3AE4 003F;	
    // (㫤) CJK UNIFIED IDEOGRAPH-3AE4	[FB80 BAE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_272)
{
    // 2F8D1 003F;	
    // (㫤) CJK COMPATIBILITY IDEOGRAPH-2F8D1	[FB80 BAE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_273)
{
    // 3AE4 0061;	
    // (㫤) CJK UNIFIED IDEOGRAPH-3AE4	[FB80 BAE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_274)
{
    // 2F8D1 0061;	
    // (㫤) CJK COMPATIBILITY IDEOGRAPH-2F8D1	[FB80 BAE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_275)
{
    // 3AE4 0041;	
    // (㫤) CJK UNIFIED IDEOGRAPH-3AE4	[FB80 BAE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_276)
{
    // 2F8D1 0041;	
    // (㫤) CJK COMPATIBILITY IDEOGRAPH-2F8D1	[FB80 BAE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_277)
{
    // 3AE4 0062;	
    // (㫤) CJK UNIFIED IDEOGRAPH-3AE4	[FB80 BAE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_278)
{
    // 2F8D1 0062;	
    // (㫤) CJK COMPATIBILITY IDEOGRAPH-2F8D1	[FB80 BAE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_279)
{
    // 3AE5 0021;	
    // (㫥) CJK UNIFIED IDEOGRAPH-3AE5	[FB80 BAE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_280)
{
    // 3AE5 003F;	
    // (㫥) CJK UNIFIED IDEOGRAPH-3AE5	[FB80 BAE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_281)
{
    // 3AE5 0061;	
    // (㫥) CJK UNIFIED IDEOGRAPH-3AE5	[FB80 BAE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_282)
{
    // 3AE5 0041;	
    // (㫥) CJK UNIFIED IDEOGRAPH-3AE5	[FB80 BAE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_283)
{
    // 3AE5 0062;	
    // (㫥) CJK UNIFIED IDEOGRAPH-3AE5	[FB80 BAE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_284)
{
    // 3AE6 0021;	
    // (㫦) CJK UNIFIED IDEOGRAPH-3AE6	[FB80 BAE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_285)
{
    // 3AE6 003F;	
    // (㫦) CJK UNIFIED IDEOGRAPH-3AE6	[FB80 BAE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_286)
{
    // 3AE6 0061;	
    // (㫦) CJK UNIFIED IDEOGRAPH-3AE6	[FB80 BAE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_287)
{
    // 3AE6 0041;	
    // (㫦) CJK UNIFIED IDEOGRAPH-3AE6	[FB80 BAE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_288)
{
    // 3AE6 0062;	
    // (㫦) CJK UNIFIED IDEOGRAPH-3AE6	[FB80 BAE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_289)
{
    // 3AE7 0021;	
    // (㫧) CJK UNIFIED IDEOGRAPH-3AE7	[FB80 BAE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_290)
{
    // 3AE7 003F;	
    // (㫧) CJK UNIFIED IDEOGRAPH-3AE7	[FB80 BAE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_291)
{
    // 3AE7 0061;	
    // (㫧) CJK UNIFIED IDEOGRAPH-3AE7	[FB80 BAE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_292)
{
    // 3AE7 0041;	
    // (㫧) CJK UNIFIED IDEOGRAPH-3AE7	[FB80 BAE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_293)
{
    // 3AE7 0062;	
    // (㫧) CJK UNIFIED IDEOGRAPH-3AE7	[FB80 BAE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_294)
{
    // 3AE8 0021;	
    // (㫨) CJK UNIFIED IDEOGRAPH-3AE8	[FB80 BAE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_295)
{
    // 3AE8 003F;	
    // (㫨) CJK UNIFIED IDEOGRAPH-3AE8	[FB80 BAE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_296)
{
    // 3AE8 0061;	
    // (㫨) CJK UNIFIED IDEOGRAPH-3AE8	[FB80 BAE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_297)
{
    // 3AE8 0041;	
    // (㫨) CJK UNIFIED IDEOGRAPH-3AE8	[FB80 BAE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_298)
{
    // 3AE8 0062;	
    // (㫨) CJK UNIFIED IDEOGRAPH-3AE8	[FB80 BAE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_299)
{
    // 3AE9 0021;	
    // (㫩) CJK UNIFIED IDEOGRAPH-3AE9	[FB80 BAE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_300)
{
    // 3AE9 003F;	
    // (㫩) CJK UNIFIED IDEOGRAPH-3AE9	[FB80 BAE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_301)
{
    // 3AE9 0061;	
    // (㫩) CJK UNIFIED IDEOGRAPH-3AE9	[FB80 BAE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_302)
{
    // 3AE9 0041;	
    // (㫩) CJK UNIFIED IDEOGRAPH-3AE9	[FB80 BAE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_303)
{
    // 3AE9 0062;	
    // (㫩) CJK UNIFIED IDEOGRAPH-3AE9	[FB80 BAE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_304)
{
    // 3AEA 0021;	
    // (㫪) CJK UNIFIED IDEOGRAPH-3AEA	[FB80 BAEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_305)
{
    // 3AEA 003F;	
    // (㫪) CJK UNIFIED IDEOGRAPH-3AEA	[FB80 BAEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_306)
{
    // 3AEA 0061;	
    // (㫪) CJK UNIFIED IDEOGRAPH-3AEA	[FB80 BAEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_307)
{
    // 3AEA 0041;	
    // (㫪) CJK UNIFIED IDEOGRAPH-3AEA	[FB80 BAEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_308)
{
    // 3AEA 0062;	
    // (㫪) CJK UNIFIED IDEOGRAPH-3AEA	[FB80 BAEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_309)
{
    // 3AEB 0021;	
    // (㫫) CJK UNIFIED IDEOGRAPH-3AEB	[FB80 BAEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_310)
{
    // 3AEB 003F;	
    // (㫫) CJK UNIFIED IDEOGRAPH-3AEB	[FB80 BAEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_311)
{
    // 3AEB 0061;	
    // (㫫) CJK UNIFIED IDEOGRAPH-3AEB	[FB80 BAEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_312)
{
    // 3AEB 0041;	
    // (㫫) CJK UNIFIED IDEOGRAPH-3AEB	[FB80 BAEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AEB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_313)
{
    // 3AEB 0062;	
    // (㫫) CJK UNIFIED IDEOGRAPH-3AEB	[FB80 BAEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_314)
{
    // 3AEC 0021;	
    // (㫬) CJK UNIFIED IDEOGRAPH-3AEC	[FB80 BAEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_315)
{
    // 3AEC 003F;	
    // (㫬) CJK UNIFIED IDEOGRAPH-3AEC	[FB80 BAEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_316)
{
    // 3AEC 0061;	
    // (㫬) CJK UNIFIED IDEOGRAPH-3AEC	[FB80 BAEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_317)
{
    // 3AEC 0041;	
    // (㫬) CJK UNIFIED IDEOGRAPH-3AEC	[FB80 BAEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AEC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_318)
{
    // 3AEC 0062;	
    // (㫬) CJK UNIFIED IDEOGRAPH-3AEC	[FB80 BAEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_319)
{
    // 3AED 0021;	
    // (㫭) CJK UNIFIED IDEOGRAPH-3AED	[FB80 BAED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_320)
{
    // 3AED 003F;	
    // (㫭) CJK UNIFIED IDEOGRAPH-3AED	[FB80 BAED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_321)
{
    // 3AED 0061;	
    // (㫭) CJK UNIFIED IDEOGRAPH-3AED	[FB80 BAED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_322)
{
    // 3AED 0041;	
    // (㫭) CJK UNIFIED IDEOGRAPH-3AED	[FB80 BAED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_323)
{
    // 3AED 0062;	
    // (㫭) CJK UNIFIED IDEOGRAPH-3AED	[FB80 BAED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_324)
{
    // 3AEE 0021;	
    // (㫮) CJK UNIFIED IDEOGRAPH-3AEE	[FB80 BAEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_325)
{
    // 3AEE 003F;	
    // (㫮) CJK UNIFIED IDEOGRAPH-3AEE	[FB80 BAEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_326)
{
    // 3AEE 0061;	
    // (㫮) CJK UNIFIED IDEOGRAPH-3AEE	[FB80 BAEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_327)
{
    // 3AEE 0041;	
    // (㫮) CJK UNIFIED IDEOGRAPH-3AEE	[FB80 BAEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AEE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_328)
{
    // 3AEE 0062;	
    // (㫮) CJK UNIFIED IDEOGRAPH-3AEE	[FB80 BAEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_329)
{
    // 3AEF 0021;	
    // (㫯) CJK UNIFIED IDEOGRAPH-3AEF	[FB80 BAEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_330)
{
    // 3AEF 003F;	
    // (㫯) CJK UNIFIED IDEOGRAPH-3AEF	[FB80 BAEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_331)
{
    // 3AEF 0061;	
    // (㫯) CJK UNIFIED IDEOGRAPH-3AEF	[FB80 BAEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_332)
{
    // 3AEF 0041;	
    // (㫯) CJK UNIFIED IDEOGRAPH-3AEF	[FB80 BAEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AEF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_333)
{
    // 3AEF 0062;	
    // (㫯) CJK UNIFIED IDEOGRAPH-3AEF	[FB80 BAEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AEF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_334)
{
    // 3AF0 0021;	
    // (㫰) CJK UNIFIED IDEOGRAPH-3AF0	[FB80 BAF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_335)
{
    // 3AF0 003F;	
    // (㫰) CJK UNIFIED IDEOGRAPH-3AF0	[FB80 BAF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_336)
{
    // 3AF0 0061;	
    // (㫰) CJK UNIFIED IDEOGRAPH-3AF0	[FB80 BAF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_337)
{
    // 3AF0 0041;	
    // (㫰) CJK UNIFIED IDEOGRAPH-3AF0	[FB80 BAF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_338)
{
    // 3AF0 0062;	
    // (㫰) CJK UNIFIED IDEOGRAPH-3AF0	[FB80 BAF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_339)
{
    // 3AF1 0021;	
    // (㫱) CJK UNIFIED IDEOGRAPH-3AF1	[FB80 BAF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_340)
{
    // 3AF1 003F;	
    // (㫱) CJK UNIFIED IDEOGRAPH-3AF1	[FB80 BAF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_341)
{
    // 3AF1 0061;	
    // (㫱) CJK UNIFIED IDEOGRAPH-3AF1	[FB80 BAF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_342)
{
    // 3AF1 0041;	
    // (㫱) CJK UNIFIED IDEOGRAPH-3AF1	[FB80 BAF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_343)
{
    // 3AF1 0062;	
    // (㫱) CJK UNIFIED IDEOGRAPH-3AF1	[FB80 BAF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_344)
{
    // 3AF2 0021;	
    // (㫲) CJK UNIFIED IDEOGRAPH-3AF2	[FB80 BAF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_345)
{
    // 3AF2 003F;	
    // (㫲) CJK UNIFIED IDEOGRAPH-3AF2	[FB80 BAF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_346)
{
    // 3AF2 0061;	
    // (㫲) CJK UNIFIED IDEOGRAPH-3AF2	[FB80 BAF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_347)
{
    // 3AF2 0041;	
    // (㫲) CJK UNIFIED IDEOGRAPH-3AF2	[FB80 BAF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_348)
{
    // 3AF2 0062;	
    // (㫲) CJK UNIFIED IDEOGRAPH-3AF2	[FB80 BAF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_349)
{
    // 3AF3 0021;	
    // (㫳) CJK UNIFIED IDEOGRAPH-3AF3	[FB80 BAF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_350)
{
    // 3AF3 003F;	
    // (㫳) CJK UNIFIED IDEOGRAPH-3AF3	[FB80 BAF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_351)
{
    // 3AF3 0061;	
    // (㫳) CJK UNIFIED IDEOGRAPH-3AF3	[FB80 BAF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_352)
{
    // 3AF3 0041;	
    // (㫳) CJK UNIFIED IDEOGRAPH-3AF3	[FB80 BAF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_353)
{
    // 3AF3 0062;	
    // (㫳) CJK UNIFIED IDEOGRAPH-3AF3	[FB80 BAF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_354)
{
    // 3AF4 0021;	
    // (㫴) CJK UNIFIED IDEOGRAPH-3AF4	[FB80 BAF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_355)
{
    // 3AF4 003F;	
    // (㫴) CJK UNIFIED IDEOGRAPH-3AF4	[FB80 BAF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_356)
{
    // 3AF4 0061;	
    // (㫴) CJK UNIFIED IDEOGRAPH-3AF4	[FB80 BAF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_357)
{
    // 3AF4 0041;	
    // (㫴) CJK UNIFIED IDEOGRAPH-3AF4	[FB80 BAF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_358)
{
    // 3AF4 0062;	
    // (㫴) CJK UNIFIED IDEOGRAPH-3AF4	[FB80 BAF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_359)
{
    // 3AF5 0021;	
    // (㫵) CJK UNIFIED IDEOGRAPH-3AF5	[FB80 BAF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_360)
{
    // 3AF5 003F;	
    // (㫵) CJK UNIFIED IDEOGRAPH-3AF5	[FB80 BAF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_361)
{
    // 3AF5 0061;	
    // (㫵) CJK UNIFIED IDEOGRAPH-3AF5	[FB80 BAF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_362)
{
    // 3AF5 0041;	
    // (㫵) CJK UNIFIED IDEOGRAPH-3AF5	[FB80 BAF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_363)
{
    // 3AF5 0062;	
    // (㫵) CJK UNIFIED IDEOGRAPH-3AF5	[FB80 BAF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_364)
{
    // 3AF6 0021;	
    // (㫶) CJK UNIFIED IDEOGRAPH-3AF6	[FB80 BAF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_365)
{
    // 3AF6 003F;	
    // (㫶) CJK UNIFIED IDEOGRAPH-3AF6	[FB80 BAF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_366)
{
    // 3AF6 0061;	
    // (㫶) CJK UNIFIED IDEOGRAPH-3AF6	[FB80 BAF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_367)
{
    // 3AF6 0041;	
    // (㫶) CJK UNIFIED IDEOGRAPH-3AF6	[FB80 BAF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_368)
{
    // 3AF6 0062;	
    // (㫶) CJK UNIFIED IDEOGRAPH-3AF6	[FB80 BAF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_369)
{
    // 3AF7 0021;	
    // (㫷) CJK UNIFIED IDEOGRAPH-3AF7	[FB80 BAF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_370)
{
    // 3AF7 003F;	
    // (㫷) CJK UNIFIED IDEOGRAPH-3AF7	[FB80 BAF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_371)
{
    // 3AF7 0061;	
    // (㫷) CJK UNIFIED IDEOGRAPH-3AF7	[FB80 BAF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_372)
{
    // 3AF7 0041;	
    // (㫷) CJK UNIFIED IDEOGRAPH-3AF7	[FB80 BAF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_373)
{
    // 3AF7 0062;	
    // (㫷) CJK UNIFIED IDEOGRAPH-3AF7	[FB80 BAF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_374)
{
    // 3AF8 0021;	
    // (㫸) CJK UNIFIED IDEOGRAPH-3AF8	[FB80 BAF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_375)
{
    // 3AF8 003F;	
    // (㫸) CJK UNIFIED IDEOGRAPH-3AF8	[FB80 BAF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_376)
{
    // 3AF8 0061;	
    // (㫸) CJK UNIFIED IDEOGRAPH-3AF8	[FB80 BAF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_377)
{
    // 3AF8 0041;	
    // (㫸) CJK UNIFIED IDEOGRAPH-3AF8	[FB80 BAF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_378)
{
    // 3AF8 0062;	
    // (㫸) CJK UNIFIED IDEOGRAPH-3AF8	[FB80 BAF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_379)
{
    // 3AF9 0021;	
    // (㫹) CJK UNIFIED IDEOGRAPH-3AF9	[FB80 BAF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_380)
{
    // 3AF9 003F;	
    // (㫹) CJK UNIFIED IDEOGRAPH-3AF9	[FB80 BAF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_381)
{
    // 3AF9 0061;	
    // (㫹) CJK UNIFIED IDEOGRAPH-3AF9	[FB80 BAF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_382)
{
    // 3AF9 0041;	
    // (㫹) CJK UNIFIED IDEOGRAPH-3AF9	[FB80 BAF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AF9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_383)
{
    // 3AF9 0062;	
    // (㫹) CJK UNIFIED IDEOGRAPH-3AF9	[FB80 BAF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AF9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_384)
{
    // 3AFA 0021;	
    // (㫺) CJK UNIFIED IDEOGRAPH-3AFA	[FB80 BAFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_385)
{
    // 3AFA 003F;	
    // (㫺) CJK UNIFIED IDEOGRAPH-3AFA	[FB80 BAFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_386)
{
    // 3AFA 0061;	
    // (㫺) CJK UNIFIED IDEOGRAPH-3AFA	[FB80 BAFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_387)
{
    // 3AFA 0041;	
    // (㫺) CJK UNIFIED IDEOGRAPH-3AFA	[FB80 BAFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AFA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_388)
{
    // 3AFA 0062;	
    // (㫺) CJK UNIFIED IDEOGRAPH-3AFA	[FB80 BAFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_389)
{
    // 3AFB 0021;	
    // (㫻) CJK UNIFIED IDEOGRAPH-3AFB	[FB80 BAFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_390)
{
    // 3AFB 003F;	
    // (㫻) CJK UNIFIED IDEOGRAPH-3AFB	[FB80 BAFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_391)
{
    // 3AFB 0061;	
    // (㫻) CJK UNIFIED IDEOGRAPH-3AFB	[FB80 BAFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_392)
{
    // 3AFB 0041;	
    // (㫻) CJK UNIFIED IDEOGRAPH-3AFB	[FB80 BAFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AFB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_393)
{
    // 3AFB 0062;	
    // (㫻) CJK UNIFIED IDEOGRAPH-3AFB	[FB80 BAFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_394)
{
    // 3AFC 0021;	
    // (㫼) CJK UNIFIED IDEOGRAPH-3AFC	[FB80 BAFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_395)
{
    // 3AFC 003F;	
    // (㫼) CJK UNIFIED IDEOGRAPH-3AFC	[FB80 BAFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_396)
{
    // 3AFC 0061;	
    // (㫼) CJK UNIFIED IDEOGRAPH-3AFC	[FB80 BAFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_397)
{
    // 3AFC 0041;	
    // (㫼) CJK UNIFIED IDEOGRAPH-3AFC	[FB80 BAFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AFC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_398)
{
    // 3AFC 0062;	
    // (㫼) CJK UNIFIED IDEOGRAPH-3AFC	[FB80 BAFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_399)
{
    // 3AFD 0021;	
    // (㫽) CJK UNIFIED IDEOGRAPH-3AFD	[FB80 BAFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_400)
{
    // 3AFD 003F;	
    // (㫽) CJK UNIFIED IDEOGRAPH-3AFD	[FB80 BAFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_401)
{
    // 3AFD 0061;	
    // (㫽) CJK UNIFIED IDEOGRAPH-3AFD	[FB80 BAFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_402)
{
    // 3AFD 0041;	
    // (㫽) CJK UNIFIED IDEOGRAPH-3AFD	[FB80 BAFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AFD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_403)
{
    // 3AFD 0062;	
    // (㫽) CJK UNIFIED IDEOGRAPH-3AFD	[FB80 BAFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_404)
{
    // 3AFE 0021;	
    // (㫾) CJK UNIFIED IDEOGRAPH-3AFE	[FB80 BAFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_405)
{
    // 3AFE 003F;	
    // (㫾) CJK UNIFIED IDEOGRAPH-3AFE	[FB80 BAFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_406)
{
    // 3AFE 0061;	
    // (㫾) CJK UNIFIED IDEOGRAPH-3AFE	[FB80 BAFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_407)
{
    // 3AFE 0041;	
    // (㫾) CJK UNIFIED IDEOGRAPH-3AFE	[FB80 BAFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AFE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_408)
{
    // 3AFE 0062;	
    // (㫾) CJK UNIFIED IDEOGRAPH-3AFE	[FB80 BAFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_409)
{
    // 3AFF 0021;	
    // (㫿) CJK UNIFIED IDEOGRAPH-3AFF	[FB80 BAFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_410)
{
    // 3AFF 003F;	
    // (㫿) CJK UNIFIED IDEOGRAPH-3AFF	[FB80 BAFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBAFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_411)
{
    // 3AFF 0061;	
    // (㫿) CJK UNIFIED IDEOGRAPH-3AFF	[FB80 BAFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_412)
{
    // 3AFF 0041;	
    // (㫿) CJK UNIFIED IDEOGRAPH-3AFF	[FB80 BAFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3AFF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_413)
{
    // 3AFF 0062;	
    // (㫿) CJK UNIFIED IDEOGRAPH-3AFF	[FB80 BAFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3AFF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBAFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_414)
{
    // 3B00 0021;	
    // (㬀) CJK UNIFIED IDEOGRAPH-3B00	[FB80 BB00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B00, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_415)
{
    // 3B00 003F;	
    // (㬀) CJK UNIFIED IDEOGRAPH-3B00	[FB80 BB00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B00, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_416)
{
    // 3B00 0061;	
    // (㬀) CJK UNIFIED IDEOGRAPH-3B00	[FB80 BB00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B00, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_417)
{
    // 3B00 0041;	
    // (㬀) CJK UNIFIED IDEOGRAPH-3B00	[FB80 BB00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B00, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_418)
{
    // 3B00 0062;	
    // (㬀) CJK UNIFIED IDEOGRAPH-3B00	[FB80 BB00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B00, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_419)
{
    // 3B01 0021;	
    // (㬁) CJK UNIFIED IDEOGRAPH-3B01	[FB80 BB01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B01, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_420)
{
    // 3B01 003F;	
    // (㬁) CJK UNIFIED IDEOGRAPH-3B01	[FB80 BB01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B01, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_421)
{
    // 3B01 0061;	
    // (㬁) CJK UNIFIED IDEOGRAPH-3B01	[FB80 BB01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B01, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_422)
{
    // 3B01 0041;	
    // (㬁) CJK UNIFIED IDEOGRAPH-3B01	[FB80 BB01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B01, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_423)
{
    // 3B01 0062;	
    // (㬁) CJK UNIFIED IDEOGRAPH-3B01	[FB80 BB01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B01, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_424)
{
    // 3B02 0021;	
    // (㬂) CJK UNIFIED IDEOGRAPH-3B02	[FB80 BB02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B02, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_425)
{
    // 3B02 003F;	
    // (㬂) CJK UNIFIED IDEOGRAPH-3B02	[FB80 BB02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B02, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_426)
{
    // 3B02 0061;	
    // (㬂) CJK UNIFIED IDEOGRAPH-3B02	[FB80 BB02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B02, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_427)
{
    // 3B02 0041;	
    // (㬂) CJK UNIFIED IDEOGRAPH-3B02	[FB80 BB02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B02, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_428)
{
    // 3B02 0062;	
    // (㬂) CJK UNIFIED IDEOGRAPH-3B02	[FB80 BB02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B02, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_429)
{
    // 3B03 0021;	
    // (㬃) CJK UNIFIED IDEOGRAPH-3B03	[FB80 BB03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B03, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_430)
{
    // 3B03 003F;	
    // (㬃) CJK UNIFIED IDEOGRAPH-3B03	[FB80 BB03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B03, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_431)
{
    // 3B03 0061;	
    // (㬃) CJK UNIFIED IDEOGRAPH-3B03	[FB80 BB03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B03, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_432)
{
    // 3B03 0041;	
    // (㬃) CJK UNIFIED IDEOGRAPH-3B03	[FB80 BB03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B03, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_433)
{
    // 3B03 0062;	
    // (㬃) CJK UNIFIED IDEOGRAPH-3B03	[FB80 BB03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B03, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_434)
{
    // 3B04 0021;	
    // (㬄) CJK UNIFIED IDEOGRAPH-3B04	[FB80 BB04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B04, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_435)
{
    // 3B04 003F;	
    // (㬄) CJK UNIFIED IDEOGRAPH-3B04	[FB80 BB04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B04, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_436)
{
    // 3B04 0061;	
    // (㬄) CJK UNIFIED IDEOGRAPH-3B04	[FB80 BB04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B04, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_437)
{
    // 3B04 0041;	
    // (㬄) CJK UNIFIED IDEOGRAPH-3B04	[FB80 BB04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B04, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_438)
{
    // 3B04 0062;	
    // (㬄) CJK UNIFIED IDEOGRAPH-3B04	[FB80 BB04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B04, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_439)
{
    // 3B05 0021;	
    // (㬅) CJK UNIFIED IDEOGRAPH-3B05	[FB80 BB05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B05, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_440)
{
    // 3B05 003F;	
    // (㬅) CJK UNIFIED IDEOGRAPH-3B05	[FB80 BB05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B05, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_441)
{
    // 3B05 0061;	
    // (㬅) CJK UNIFIED IDEOGRAPH-3B05	[FB80 BB05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B05, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_442)
{
    // 3B05 0041;	
    // (㬅) CJK UNIFIED IDEOGRAPH-3B05	[FB80 BB05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B05, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_443)
{
    // 3B05 0062;	
    // (㬅) CJK UNIFIED IDEOGRAPH-3B05	[FB80 BB05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B05, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_444)
{
    // 3B06 0021;	
    // (㬆) CJK UNIFIED IDEOGRAPH-3B06	[FB80 BB06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B06, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_445)
{
    // 3B06 003F;	
    // (㬆) CJK UNIFIED IDEOGRAPH-3B06	[FB80 BB06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B06, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_446)
{
    // 3B06 0061;	
    // (㬆) CJK UNIFIED IDEOGRAPH-3B06	[FB80 BB06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B06, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_447)
{
    // 3B06 0041;	
    // (㬆) CJK UNIFIED IDEOGRAPH-3B06	[FB80 BB06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B06, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_448)
{
    // 3B06 0062;	
    // (㬆) CJK UNIFIED IDEOGRAPH-3B06	[FB80 BB06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B06, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_449)
{
    // 3B07 0021;	
    // (㬇) CJK UNIFIED IDEOGRAPH-3B07	[FB80 BB07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B07, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_450)
{
    // 3B07 003F;	
    // (㬇) CJK UNIFIED IDEOGRAPH-3B07	[FB80 BB07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B07, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_451)
{
    // 3B07 0061;	
    // (㬇) CJK UNIFIED IDEOGRAPH-3B07	[FB80 BB07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B07, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_452)
{
    // 3B07 0041;	
    // (㬇) CJK UNIFIED IDEOGRAPH-3B07	[FB80 BB07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B07, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_453)
{
    // 3B07 0062;	
    // (㬇) CJK UNIFIED IDEOGRAPH-3B07	[FB80 BB07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B07, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_454)
{
    // 3B08 0021;	
    // (㬈) CJK UNIFIED IDEOGRAPH-3B08	[FB80 BB08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B08, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_455)
{
    // 2F8D0 0021;	
    // (㬈) CJK COMPATIBILITY IDEOGRAPH-2F8D0	[FB80 BB08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_456)
{
    // 3B08 003F;	
    // (㬈) CJK UNIFIED IDEOGRAPH-3B08	[FB80 BB08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B08, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_457)
{
    // 2F8D0 003F;	
    // (㬈) CJK COMPATIBILITY IDEOGRAPH-2F8D0	[FB80 BB08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_458)
{
    // 3B08 0061;	
    // (㬈) CJK UNIFIED IDEOGRAPH-3B08	[FB80 BB08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B08, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_459)
{
    // 2F8D0 0061;	
    // (㬈) CJK COMPATIBILITY IDEOGRAPH-2F8D0	[FB80 BB08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_460)
{
    // 3B08 0041;	
    // (㬈) CJK UNIFIED IDEOGRAPH-3B08	[FB80 BB08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B08, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_461)
{
    // 2F8D0 0041;	
    // (㬈) CJK COMPATIBILITY IDEOGRAPH-2F8D0	[FB80 BB08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_462)
{
    // 3B08 0062;	
    // (㬈) CJK UNIFIED IDEOGRAPH-3B08	[FB80 BB08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B08, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_463)
{
    // 2F8D0 0062;	
    // (㬈) CJK COMPATIBILITY IDEOGRAPH-2F8D0	[FB80 BB08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_464)
{
    // 3B09 0021;	
    // (㬉) CJK UNIFIED IDEOGRAPH-3B09	[FB80 BB09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B09, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_465)
{
    // 3B09 003F;	
    // (㬉) CJK UNIFIED IDEOGRAPH-3B09	[FB80 BB09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B09, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_466)
{
    // 3B09 0061;	
    // (㬉) CJK UNIFIED IDEOGRAPH-3B09	[FB80 BB09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B09, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_467)
{
    // 3B09 0041;	
    // (㬉) CJK UNIFIED IDEOGRAPH-3B09	[FB80 BB09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B09, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_468)
{
    // 3B09 0062;	
    // (㬉) CJK UNIFIED IDEOGRAPH-3B09	[FB80 BB09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B09, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_469)
{
    // 3B0A 0021;	
    // (㬊) CJK UNIFIED IDEOGRAPH-3B0A	[FB80 BB0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_470)
{
    // 3B0A 003F;	
    // (㬊) CJK UNIFIED IDEOGRAPH-3B0A	[FB80 BB0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_471)
{
    // 3B0A 0061;	
    // (㬊) CJK UNIFIED IDEOGRAPH-3B0A	[FB80 BB0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_472)
{
    // 3B0A 0041;	
    // (㬊) CJK UNIFIED IDEOGRAPH-3B0A	[FB80 BB0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_473)
{
    // 3B0A 0062;	
    // (㬊) CJK UNIFIED IDEOGRAPH-3B0A	[FB80 BB0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_474)
{
    // 3B0B 0021;	
    // (㬋) CJK UNIFIED IDEOGRAPH-3B0B	[FB80 BB0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_475)
{
    // 3B0B 003F;	
    // (㬋) CJK UNIFIED IDEOGRAPH-3B0B	[FB80 BB0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_476)
{
    // 3B0B 0061;	
    // (㬋) CJK UNIFIED IDEOGRAPH-3B0B	[FB80 BB0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_477)
{
    // 3B0B 0041;	
    // (㬋) CJK UNIFIED IDEOGRAPH-3B0B	[FB80 BB0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_478)
{
    // 3B0B 0062;	
    // (㬋) CJK UNIFIED IDEOGRAPH-3B0B	[FB80 BB0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_479)
{
    // 3B0C 0021;	
    // (㬌) CJK UNIFIED IDEOGRAPH-3B0C	[FB80 BB0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_480)
{
    // 3B0C 003F;	
    // (㬌) CJK UNIFIED IDEOGRAPH-3B0C	[FB80 BB0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_481)
{
    // 3B0C 0061;	
    // (㬌) CJK UNIFIED IDEOGRAPH-3B0C	[FB80 BB0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_482)
{
    // 3B0C 0041;	
    // (㬌) CJK UNIFIED IDEOGRAPH-3B0C	[FB80 BB0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_483)
{
    // 3B0C 0062;	
    // (㬌) CJK UNIFIED IDEOGRAPH-3B0C	[FB80 BB0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_484)
{
    // 3B0D 0021;	
    // (㬍) CJK UNIFIED IDEOGRAPH-3B0D	[FB80 BB0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_485)
{
    // 3B0D 003F;	
    // (㬍) CJK UNIFIED IDEOGRAPH-3B0D	[FB80 BB0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_486)
{
    // 3B0D 0061;	
    // (㬍) CJK UNIFIED IDEOGRAPH-3B0D	[FB80 BB0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_487)
{
    // 3B0D 0041;	
    // (㬍) CJK UNIFIED IDEOGRAPH-3B0D	[FB80 BB0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_488)
{
    // 3B0D 0062;	
    // (㬍) CJK UNIFIED IDEOGRAPH-3B0D	[FB80 BB0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_489)
{
    // 3B0E 0021;	
    // (㬎) CJK UNIFIED IDEOGRAPH-3B0E	[FB80 BB0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_490)
{
    // 3B0E 003F;	
    // (㬎) CJK UNIFIED IDEOGRAPH-3B0E	[FB80 BB0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_491)
{
    // 3B0E 0061;	
    // (㬎) CJK UNIFIED IDEOGRAPH-3B0E	[FB80 BB0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_492)
{
    // 3B0E 0041;	
    // (㬎) CJK UNIFIED IDEOGRAPH-3B0E	[FB80 BB0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_493)
{
    // 3B0E 0062;	
    // (㬎) CJK UNIFIED IDEOGRAPH-3B0E	[FB80 BB0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_494)
{
    // 3B0F 0021;	
    // (㬏) CJK UNIFIED IDEOGRAPH-3B0F	[FB80 BB0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_495)
{
    // 3B0F 003F;	
    // (㬏) CJK UNIFIED IDEOGRAPH-3B0F	[FB80 BB0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBB0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_496)
{
    // 3B0F 0061;	
    // (㬏) CJK UNIFIED IDEOGRAPH-3B0F	[FB80 BB0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_497)
{
    // 3B0F 0041;	
    // (㬏) CJK UNIFIED IDEOGRAPH-3B0F	[FB80 BB0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3B0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_498)
{
    // 3B0F 0062;	
    // (㬏) CJK UNIFIED IDEOGRAPH-3B0F	[FB80 BB0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBB0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_344_499)
{
    // 3B10 0021;	
    // (㬐) CJK UNIFIED IDEOGRAPH-3B10	[FB80 BB10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3B10, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBB10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

