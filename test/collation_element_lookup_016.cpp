// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_016_000)
{
    // 0A08  ; [.277D.0020.0002] 
    // GURMUKHI LETTER II

    uint32_t const cps[1] = { 0xa08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x277d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_001)
{
    // 0A09  ; [.2774.0020.0002] 
    // GURMUKHI LETTER U

    uint32_t const cps[1] = { 0xa09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2774), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_002)
{
    // 0A0A  ; [.2775.0020.0002] 
    // GURMUKHI LETTER UU

    uint32_t const cps[1] = { 0xa0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2775), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_003)
{
    // 0A0F  ; [.277E.0020.0002] 
    // GURMUKHI LETTER EE

    uint32_t const cps[1] = { 0xa0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x277e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_004)
{
    // 0A10  ; [.2779.0020.0002] 
    // GURMUKHI LETTER AI

    uint32_t const cps[1] = { 0xa10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2779), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_005)
{
    // 0A13  ; [.2776.0020.0002] 
    // GURMUKHI LETTER OO

    uint32_t const cps[1] = { 0xa13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2776), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_006)
{
    // 0A14  ; [.277A.0020.0002] 
    // GURMUKHI LETTER AU

    uint32_t const cps[1] = { 0xa14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x277a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_007)
{
    // 0A15  ; [.2782.0020.0002] 
    // GURMUKHI LETTER KA

    uint32_t const cps[1] = { 0xa15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2782), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_008)
{
    // 0A16  ; [.2783.0020.0002] 
    // GURMUKHI LETTER KHA

    uint32_t const cps[1] = { 0xa16 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2783), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_009)
{
    // 0A17  ; [.2784.0020.0002] 
    // GURMUKHI LETTER GA

    uint32_t const cps[1] = { 0xa17 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2784), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_010)
{
    // 0A18  ; [.2785.0020.0002] 
    // GURMUKHI LETTER GHA

    uint32_t const cps[1] = { 0xa18 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2785), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_011)
{
    // 0A19  ; [.2786.0020.0002] 
    // GURMUKHI LETTER NGA

    uint32_t const cps[1] = { 0xa19 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2786), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_012)
{
    // 0A1A  ; [.2787.0020.0002] 
    // GURMUKHI LETTER CA

    uint32_t const cps[1] = { 0xa1a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2787), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_013)
{
    // 0A1B  ; [.2788.0020.0002] 
    // GURMUKHI LETTER CHA

    uint32_t const cps[1] = { 0xa1b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2788), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_014)
{
    // 0A1C  ; [.2789.0020.0002] 
    // GURMUKHI LETTER JA

    uint32_t const cps[1] = { 0xa1c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2789), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_015)
{
    // 0A1D  ; [.278A.0020.0002] 
    // GURMUKHI LETTER JHA

    uint32_t const cps[1] = { 0xa1d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x278a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_016)
{
    // 0A1E  ; [.278B.0020.0002] 
    // GURMUKHI LETTER NYA

    uint32_t const cps[1] = { 0xa1e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x278b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_017)
{
    // 0A1F  ; [.278C.0020.0002] 
    // GURMUKHI LETTER TTA

    uint32_t const cps[1] = { 0xa1f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x278c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_018)
{
    // 0A20  ; [.278D.0020.0002] 
    // GURMUKHI LETTER TTHA

    uint32_t const cps[1] = { 0xa20 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x278d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_019)
{
    // 0A21  ; [.278E.0020.0002] 
    // GURMUKHI LETTER DDA

    uint32_t const cps[1] = { 0xa21 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x278e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_020)
{
    // 0A22  ; [.278F.0020.0002] 
    // GURMUKHI LETTER DDHA

    uint32_t const cps[1] = { 0xa22 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x278f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_021)
{
    // 0A23  ; [.2790.0020.0002] 
    // GURMUKHI LETTER NNA

    uint32_t const cps[1] = { 0xa23 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2790), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_022)
{
    // 0A24  ; [.2791.0020.0002] 
    // GURMUKHI LETTER TA

    uint32_t const cps[1] = { 0xa24 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2791), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_023)
{
    // 0A25  ; [.2792.0020.0002] 
    // GURMUKHI LETTER THA

    uint32_t const cps[1] = { 0xa25 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2792), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_024)
{
    // 0A26  ; [.2793.0020.0002] 
    // GURMUKHI LETTER DA

    uint32_t const cps[1] = { 0xa26 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2793), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_025)
{
    // 0A27  ; [.2794.0020.0002] 
    // GURMUKHI LETTER DHA

    uint32_t const cps[1] = { 0xa27 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2794), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_026)
{
    // 0A28  ; [.2795.0020.0002] 
    // GURMUKHI LETTER NA

    uint32_t const cps[1] = { 0xa28 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2795), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_027)
{
    // 0A2A  ; [.2796.0020.0002] 
    // GURMUKHI LETTER PA

    uint32_t const cps[1] = { 0xa2a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2796), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_028)
{
    // 0A2B  ; [.2797.0020.0002] 
    // GURMUKHI LETTER PHA

    uint32_t const cps[1] = { 0xa2b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2797), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_029)
{
    // 0A2C  ; [.2798.0020.0002] 
    // GURMUKHI LETTER BA

    uint32_t const cps[1] = { 0xa2c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2798), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_030)
{
    // 0A2D  ; [.2799.0020.0002] 
    // GURMUKHI LETTER BHA

    uint32_t const cps[1] = { 0xa2d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2799), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_031)
{
    // 0A2E  ; [.279A.0020.0002] 
    // GURMUKHI LETTER MA

    uint32_t const cps[1] = { 0xa2e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x279a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_032)
{
    // 0A2F  ; [.279B.0020.0002] 
    // GURMUKHI LETTER YA

    uint32_t const cps[1] = { 0xa2f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x279b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_033)
{
    // 0A30  ; [.279D.0020.0002] 
    // GURMUKHI LETTER RA

    uint32_t const cps[1] = { 0xa30 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x279d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_034)
{
    // 0A32  ; [.279E.0020.0002] 
    // GURMUKHI LETTER LA

    uint32_t const cps[1] = { 0xa32 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x279e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_035)
{
    // 0A33  ; [.279E.0020.0002][.0000.00C2.0002] 
    // GURMUKHI LETTER LLA

    uint32_t const cps[1] = { 0xa33 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x279e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_016_036)
{
    // 0A35  ; [.279F.0020.0002] 
    // GURMUKHI LETTER VA

    uint32_t const cps[1] = { 0xa35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x279f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_037)
{
    // 0A36  ; [.277F.0020.0002][.0000.00C2.0002] 
    // GURMUKHI LETTER SHA

    uint32_t const cps[1] = { 0xa36 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x277f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_016_038)
{
    // 0A38  ; [.277F.0020.0002] 
    // GURMUKHI LETTER SA

    uint32_t const cps[1] = { 0xa38 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x277f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_039)
{
    // 0A39  ; [.2780.0020.0002] 
    // GURMUKHI LETTER HA

    uint32_t const cps[1] = { 0xa39 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2780), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_040)
{
    // 0A3C  ; [.0000.00C2.0002] 
    // GURMUKHI SIGN NUKTA

    uint32_t const cps[1] = { 0xa3c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_041)
{
    // 0A3E  ; [.27A1.0020.0002] 
    // GURMUKHI VOWEL SIGN AA

    uint32_t const cps[1] = { 0xa3e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_042)
{
    // 0A3F  ; [.27A2.0020.0002] 
    // GURMUKHI VOWEL SIGN I

    uint32_t const cps[1] = { 0xa3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_043)
{
    // 0A40  ; [.27A3.0020.0002] 
    // GURMUKHI VOWEL SIGN II

    uint32_t const cps[1] = { 0xa40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_044)
{
    // 0A41  ; [.27A4.0020.0002] 
    // GURMUKHI VOWEL SIGN U

    uint32_t const cps[1] = { 0xa41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_045)
{
    // 0A42  ; [.27A5.0020.0002] 
    // GURMUKHI VOWEL SIGN UU

    uint32_t const cps[1] = { 0xa42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_046)
{
    // 0A47  ; [.27A6.0020.0002] 
    // GURMUKHI VOWEL SIGN EE

    uint32_t const cps[1] = { 0xa47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_047)
{
    // 0A48  ; [.27A7.0020.0002] 
    // GURMUKHI VOWEL SIGN AI

    uint32_t const cps[1] = { 0xa48 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_048)
{
    // 0A4B  ; [.27A8.0020.0002] 
    // GURMUKHI VOWEL SIGN OO

    uint32_t const cps[1] = { 0xa4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_049)
{
    // 0A4C  ; [.27A9.0020.0002] 
    // GURMUKHI VOWEL SIGN AU

    uint32_t const cps[1] = { 0xa4c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_050)
{
    // 0A4D  ; [.27AA.0020.0002] 
    // GURMUKHI SIGN VIRAMA

    uint32_t const cps[1] = { 0xa4d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_051)
{
    // 0A51  ; [.2781.0020.0002] 
    // GURMUKHI SIGN UDAAT

    uint32_t const cps[1] = { 0xa51 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2781), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_052)
{
    // 0A59  ; [.2783.0020.0002][.0000.00C2.0002] 
    // GURMUKHI LETTER KHHA

    uint32_t const cps[1] = { 0xa59 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2783), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_016_053)
{
    // 0A5A  ; [.2784.0020.0002][.0000.00C2.0002] 
    // GURMUKHI LETTER GHHA

    uint32_t const cps[1] = { 0xa5a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2784), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_016_054)
{
    // 0A5B  ; [.2789.0020.0002][.0000.00C2.0002] 
    // GURMUKHI LETTER ZA

    uint32_t const cps[1] = { 0xa5b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2789), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_016_055)
{
    // 0A5C  ; [.27A0.0020.0002] 
    // GURMUKHI LETTER RRA

    uint32_t const cps[1] = { 0xa5c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_056)
{
    // 0A5E  ; [.2797.0020.0002][.0000.00C2.0002] 
    // GURMUKHI LETTER FA

    uint32_t const cps[1] = { 0xa5e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2797), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_016_057)
{
    // 0A66  ; [.1CA3.0020.0002] 
    // GURMUKHI DIGIT ZERO

    uint32_t const cps[1] = { 0xa66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_058)
{
    // 0A67  ; [.1CA4.0020.0002] 
    // GURMUKHI DIGIT ONE

    uint32_t const cps[1] = { 0xa67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_059)
{
    // 0A68  ; [.1CA5.0020.0002] 
    // GURMUKHI DIGIT TWO

    uint32_t const cps[1] = { 0xa68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_060)
{
    // 0A69  ; [.1CA6.0020.0002] 
    // GURMUKHI DIGIT THREE

    uint32_t const cps[1] = { 0xa69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_061)
{
    // 0A6A  ; [.1CA7.0020.0002] 
    // GURMUKHI DIGIT FOUR

    uint32_t const cps[1] = { 0xa6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_062)
{
    // 0A6B  ; [.1CA8.0020.0002] 
    // GURMUKHI DIGIT FIVE

    uint32_t const cps[1] = { 0xa6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_063)
{
    // 0A6C  ; [.1CA9.0020.0002] 
    // GURMUKHI DIGIT SIX

    uint32_t const cps[1] = { 0xa6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_064)
{
    // 0A6D  ; [.1CAA.0020.0002] 
    // GURMUKHI DIGIT SEVEN

    uint32_t const cps[1] = { 0xa6d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_065)
{
    // 0A6E  ; [.1CAB.0020.0002] 
    // GURMUKHI DIGIT EIGHT

    uint32_t const cps[1] = { 0xa6e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_066)
{
    // 0A6F  ; [.1CAC.0020.0002] 
    // GURMUKHI DIGIT NINE

    uint32_t const cps[1] = { 0xa6f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_067)
{
    // 0A70  ; [.0000.00C6.0002] 
    // GURMUKHI TIPPI

    uint32_t const cps[1] = { 0xa70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa6), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_068)
{
    // 0A71  ; [.0000.00C7.0002] 
    // GURMUKHI ADDAK

    uint32_t const cps[1] = { 0xa71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa7), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_069)
{
    // 0A72  ; [.277B.0020.0002] 
    // GURMUKHI IRI

    uint32_t const cps[1] = { 0xa72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x277b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_070)
{
    // 0A73  ; [.2773.0020.0002] 
    // GURMUKHI URA

    uint32_t const cps[1] = { 0xa73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2773), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_071)
{
    // 0A74  ; [.2772.0020.0002] 
    // GURMUKHI EK ONKAR

    uint32_t const cps[1] = { 0xa74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2772), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_072)
{
    // 0A75  ; [.279C.0020.0002] 
    // GURMUKHI SIGN YAKASH

    uint32_t const cps[1] = { 0xa75 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x279c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_073)
{
    // 0A81  ; [.0000.00C3.0002] 
    // GUJARATI SIGN CANDRABINDU

    uint32_t const cps[1] = { 0xa81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_074)
{
    // 0A82  ; [.0000.00C4.0002] 
    // GUJARATI SIGN ANUSVARA

    uint32_t const cps[1] = { 0xa82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_075)
{
    // 0A83  ; [.0000.00C5.0002] 
    // GUJARATI SIGN VISARGA

    uint32_t const cps[1] = { 0xa83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_076)
{
    // 0A85  ; [.27AC.0020.0002] 
    // GUJARATI LETTER A

    uint32_t const cps[1] = { 0xa85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_077)
{
    // 0A86  ; [.27AD.0020.0002] 
    // GUJARATI LETTER AA

    uint32_t const cps[1] = { 0xa86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_078)
{
    // 0A87  ; [.27AE.0020.0002] 
    // GUJARATI LETTER I

    uint32_t const cps[1] = { 0xa87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_079)
{
    // 0A88  ; [.27AF.0020.0002] 
    // GUJARATI LETTER II

    uint32_t const cps[1] = { 0xa88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27af), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_080)
{
    // 0A89  ; [.27B0.0020.0002] 
    // GUJARATI LETTER U

    uint32_t const cps[1] = { 0xa89 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_081)
{
    // 0A8A  ; [.27B1.0020.0002] 
    // GUJARATI LETTER UU

    uint32_t const cps[1] = { 0xa8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_082)
{
    // 0A8B  ; [.27B2.0020.0002] 
    // GUJARATI LETTER VOCALIC R

    uint32_t const cps[1] = { 0xa8b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_083)
{
    // 0A8C  ; [.27B4.0020.0002] 
    // GUJARATI LETTER VOCALIC L

    uint32_t const cps[1] = { 0xa8c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_084)
{
    // 0A8D  ; [.27B6.0020.0002] 
    // GUJARATI VOWEL CANDRA E

    uint32_t const cps[1] = { 0xa8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_085)
{
    // 0A8F  ; [.27B7.0020.0002] 
    // GUJARATI LETTER E

    uint32_t const cps[1] = { 0xa8f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_086)
{
    // 0A90  ; [.27B8.0020.0002] 
    // GUJARATI LETTER AI

    uint32_t const cps[1] = { 0xa90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_087)
{
    // 0A91  ; [.27B9.0020.0002] 
    // GUJARATI VOWEL CANDRA O

    uint32_t const cps[1] = { 0xa91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_088)
{
    // 0A93  ; [.27BA.0020.0002] 
    // GUJARATI LETTER O

    uint32_t const cps[1] = { 0xa93 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_089)
{
    // 0A94  ; [.27BB.0020.0002] 
    // GUJARATI LETTER AU

    uint32_t const cps[1] = { 0xa94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_090)
{
    // 0A95  ; [.27BC.0020.0002] 
    // GUJARATI LETTER KA

    uint32_t const cps[1] = { 0xa95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_091)
{
    // 0A96  ; [.27BD.0020.0002] 
    // GUJARATI LETTER KHA

    uint32_t const cps[1] = { 0xa96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_092)
{
    // 0A97  ; [.27BE.0020.0002] 
    // GUJARATI LETTER GA

    uint32_t const cps[1] = { 0xa97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27be), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_093)
{
    // 0A98  ; [.27BF.0020.0002] 
    // GUJARATI LETTER GHA

    uint32_t const cps[1] = { 0xa98 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_094)
{
    // 0A99  ; [.27C0.0020.0002] 
    // GUJARATI LETTER NGA

    uint32_t const cps[1] = { 0xa99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_095)
{
    // 0A9A  ; [.27C1.0020.0002] 
    // GUJARATI LETTER CA

    uint32_t const cps[1] = { 0xa9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_096)
{
    // 0A9B  ; [.27C2.0020.0002] 
    // GUJARATI LETTER CHA

    uint32_t const cps[1] = { 0xa9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_097)
{
    // 0A9C  ; [.27C3.0020.0002] 
    // GUJARATI LETTER JA

    uint32_t const cps[1] = { 0xa9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_098)
{
    // 0A9D  ; [.27C5.0020.0002] 
    // GUJARATI LETTER JHA

    uint32_t const cps[1] = { 0xa9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_099)
{
    // 0A9E  ; [.27C6.0020.0002] 
    // GUJARATI LETTER NYA

    uint32_t const cps[1] = { 0xa9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_100)
{
    // 0A9F  ; [.27C7.0020.0002] 
    // GUJARATI LETTER TTA

    uint32_t const cps[1] = { 0xa9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_101)
{
    // 0AA0  ; [.27C8.0020.0002] 
    // GUJARATI LETTER TTHA

    uint32_t const cps[1] = { 0xaa0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_102)
{
    // 0AA1  ; [.27C9.0020.0002] 
    // GUJARATI LETTER DDA

    uint32_t const cps[1] = { 0xaa1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_103)
{
    // 0AA2  ; [.27CA.0020.0002] 
    // GUJARATI LETTER DDHA

    uint32_t const cps[1] = { 0xaa2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_104)
{
    // 0AA3  ; [.27CB.0020.0002] 
    // GUJARATI LETTER NNA

    uint32_t const cps[1] = { 0xaa3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_105)
{
    // 0AA4  ; [.27CC.0020.0002] 
    // GUJARATI LETTER TA

    uint32_t const cps[1] = { 0xaa4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_106)
{
    // 0AA5  ; [.27CD.0020.0002] 
    // GUJARATI LETTER THA

    uint32_t const cps[1] = { 0xaa5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_107)
{
    // 0AA6  ; [.27CE.0020.0002] 
    // GUJARATI LETTER DA

    uint32_t const cps[1] = { 0xaa6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_108)
{
    // 0AA7  ; [.27CF.0020.0002] 
    // GUJARATI LETTER DHA

    uint32_t const cps[1] = { 0xaa7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_109)
{
    // 0AA8  ; [.27D0.0020.0002] 
    // GUJARATI LETTER NA

    uint32_t const cps[1] = { 0xaa8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_110)
{
    // 0AAA  ; [.27D1.0020.0002] 
    // GUJARATI LETTER PA

    uint32_t const cps[1] = { 0xaaa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_111)
{
    // 0AAB  ; [.27D2.0020.0002] 
    // GUJARATI LETTER PHA

    uint32_t const cps[1] = { 0xaab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_112)
{
    // 0AAC  ; [.27D3.0020.0002] 
    // GUJARATI LETTER BA

    uint32_t const cps[1] = { 0xaac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_113)
{
    // 0AAD  ; [.27D4.0020.0002] 
    // GUJARATI LETTER BHA

    uint32_t const cps[1] = { 0xaad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_114)
{
    // 0AAE  ; [.27D5.0020.0002] 
    // GUJARATI LETTER MA

    uint32_t const cps[1] = { 0xaae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_115)
{
    // 0AAF  ; [.27D6.0020.0002] 
    // GUJARATI LETTER YA

    uint32_t const cps[1] = { 0xaaf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_116)
{
    // 0AB0  ; [.27D7.0020.0002] 
    // GUJARATI LETTER RA

    uint32_t const cps[1] = { 0xab0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_117)
{
    // 0AB2  ; [.27D8.0020.0002] 
    // GUJARATI LETTER LA

    uint32_t const cps[1] = { 0xab2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_118)
{
    // 0AB3  ; [.27DE.0020.0002] 
    // GUJARATI LETTER LLA

    uint32_t const cps[1] = { 0xab3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27de), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_119)
{
    // 0AB5  ; [.27D9.0020.0002] 
    // GUJARATI LETTER VA

    uint32_t const cps[1] = { 0xab5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_120)
{
    // 0AB6  ; [.27DA.0020.0002] 
    // GUJARATI LETTER SHA

    uint32_t const cps[1] = { 0xab6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27da), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_121)
{
    // 0AB7  ; [.27DB.0020.0002] 
    // GUJARATI LETTER SSA

    uint32_t const cps[1] = { 0xab7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27db), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_122)
{
    // 0AB8  ; [.27DC.0020.0002] 
    // GUJARATI LETTER SA

    uint32_t const cps[1] = { 0xab8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_123)
{
    // 0AB9  ; [.27DD.0020.0002] 
    // GUJARATI LETTER HA

    uint32_t const cps[1] = { 0xab9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_124)
{
    // 0ABC  ; [.0000.00C2.0002] 
    // GUJARATI SIGN NUKTA

    uint32_t const cps[1] = { 0xabc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa2), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_125)
{
    // 0ABD  ; [.27DF.0020.0002] 
    // GUJARATI SIGN AVAGRAHA

    uint32_t const cps[1] = { 0xabd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27df), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_126)
{
    // 0ABE  ; [.27E0.0020.0002] 
    // GUJARATI VOWEL SIGN AA

    uint32_t const cps[1] = { 0xabe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_127)
{
    // 0ABF  ; [.27E1.0020.0002] 
    // GUJARATI VOWEL SIGN I

    uint32_t const cps[1] = { 0xabf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_128)
{
    // 0AC0  ; [.27E2.0020.0002] 
    // GUJARATI VOWEL SIGN II

    uint32_t const cps[1] = { 0xac0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_129)
{
    // 0AC1  ; [.27E3.0020.0002] 
    // GUJARATI VOWEL SIGN U

    uint32_t const cps[1] = { 0xac1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_130)
{
    // 0AC2  ; [.27E4.0020.0002] 
    // GUJARATI VOWEL SIGN UU

    uint32_t const cps[1] = { 0xac2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_131)
{
    // 0AC3  ; [.27E5.0020.0002] 
    // GUJARATI VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0xac3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_132)
{
    // 0AC4  ; [.27E6.0020.0002] 
    // GUJARATI VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0xac4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_133)
{
    // 0AC5  ; [.27E9.0020.0002] 
    // GUJARATI VOWEL SIGN CANDRA E

    uint32_t const cps[1] = { 0xac5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_134)
{
    // 0AC7  ; [.27EA.0020.0002] 
    // GUJARATI VOWEL SIGN E

    uint32_t const cps[1] = { 0xac7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_135)
{
    // 0AC8  ; [.27EB.0020.0002] 
    // GUJARATI VOWEL SIGN AI

    uint32_t const cps[1] = { 0xac8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_136)
{
    // 0AC9  ; [.27EC.0020.0002] 
    // GUJARATI VOWEL SIGN CANDRA O

    uint32_t const cps[1] = { 0xac9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_137)
{
    // 0ACB  ; [.27ED.0020.0002] 
    // GUJARATI VOWEL SIGN O

    uint32_t const cps[1] = { 0xacb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_138)
{
    // 0ACC  ; [.27EE.0020.0002] 
    // GUJARATI VOWEL SIGN AU

    uint32_t const cps[1] = { 0xacc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_139)
{
    // 0ACD  ; [.27EF.0020.0002] 
    // GUJARATI SIGN VIRAMA

    uint32_t const cps[1] = { 0xacd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_140)
{
    // 0AD0  ; [.27AB.0020.0002] 
    // GUJARATI OM

    uint32_t const cps[1] = { 0xad0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_141)
{
    // 0AE0  ; [.27B3.0020.0002] 
    // GUJARATI LETTER VOCALIC RR

    uint32_t const cps[1] = { 0xae0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_142)
{
    // 0AE1  ; [.27B5.0020.0002] 
    // GUJARATI LETTER VOCALIC LL

    uint32_t const cps[1] = { 0xae1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_143)
{
    // 0AE2  ; [.27E7.0020.0002] 
    // GUJARATI VOWEL SIGN VOCALIC L

    uint32_t const cps[1] = { 0xae2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_144)
{
    // 0AE3  ; [.27E8.0020.0002] 
    // GUJARATI VOWEL SIGN VOCALIC LL

    uint32_t const cps[1] = { 0xae3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x27e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_145)
{
    // 0AE6  ; [.1CA3.0020.0002] 
    // GUJARATI DIGIT ZERO

    uint32_t const cps[1] = { 0xae6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_146)
{
    // 0AE7  ; [.1CA4.0020.0002] 
    // GUJARATI DIGIT ONE

    uint32_t const cps[1] = { 0xae7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_147)
{
    // 0AE8  ; [.1CA5.0020.0002] 
    // GUJARATI DIGIT TWO

    uint32_t const cps[1] = { 0xae8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_148)
{
    // 0AE9  ; [.1CA6.0020.0002] 
    // GUJARATI DIGIT THREE

    uint32_t const cps[1] = { 0xae9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_016_149)
{
    // 0AEA  ; [.1CA7.0020.0002] 
    // GUJARATI DIGIT FOUR

    uint32_t const cps[1] = { 0xaea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

