// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_179_000)
{
    // 1D642 ; [.1D5A.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G

    uint32_t const cps[1] = { 0x1d642 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_001)
{
    // 1D643 ; [.1D7E.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL H

    uint32_t const cps[1] = { 0x1d643 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_002)
{
    // 1D644 ; [.1D98.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I

    uint32_t const cps[1] = { 0x1d644 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_003)
{
    // 1D645 ; [.1DB2.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL J

    uint32_t const cps[1] = { 0x1d645 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_004)
{
    // 1D646 ; [.1DCB.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL K

    uint32_t const cps[1] = { 0x1d646 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_005)
{
    // 1D647 ; [.1DDD.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL L

    uint32_t const cps[1] = { 0x1d647 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_006)
{
    // 1D648 ; [.1E10.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M

    uint32_t const cps[1] = { 0x1d648 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_007)
{
    // 1D649 ; [.1E1F.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL N

    uint32_t const cps[1] = { 0x1d649 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_008)
{
    // 1D64A ; [.1E43.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O

    uint32_t const cps[1] = { 0x1d64a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_009)
{
    // 1D64B ; [.1E72.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P

    uint32_t const cps[1] = { 0x1d64b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_010)
{
    // 1D64C ; [.1E87.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Q

    uint32_t const cps[1] = { 0x1d64c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_011)
{
    // 1D64D ; [.1E99.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL R

    uint32_t const cps[1] = { 0x1d64d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_012)
{
    // 1D64E ; [.1ED7.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S

    uint32_t const cps[1] = { 0x1d64e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_013)
{
    // 1D64F ; [.1EFB.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL T

    uint32_t const cps[1] = { 0x1d64f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_014)
{
    // 1D650 ; [.1F1B.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U

    uint32_t const cps[1] = { 0x1d650 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_015)
{
    // 1D651 ; [.1F49.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V

    uint32_t const cps[1] = { 0x1d651 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_016)
{
    // 1D652 ; [.1F5B.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL W

    uint32_t const cps[1] = { 0x1d652 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_017)
{
    // 1D653 ; [.1F65.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL X

    uint32_t const cps[1] = { 0x1d653 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_018)
{
    // 1D654 ; [.1F71.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y

    uint32_t const cps[1] = { 0x1d654 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_019)
{
    // 1D655 ; [.1F87.0020.000B] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z

    uint32_t const cps[1] = { 0x1d655 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_020)
{
    // 1D656 ; [.1CAD.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A

    uint32_t const cps[1] = { 0x1d656 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_021)
{
    // 1D657 ; [.1CC6.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL B

    uint32_t const cps[1] = { 0x1d657 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_022)
{
    // 1D658 ; [.1CE0.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL C

    uint32_t const cps[1] = { 0x1d658 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_023)
{
    // 1D659 ; [.1CF5.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D

    uint32_t const cps[1] = { 0x1d659 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_024)
{
    // 1D65A ; [.1D10.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E

    uint32_t const cps[1] = { 0x1d65a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_025)
{
    // 1D65B ; [.1D4B.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F

    uint32_t const cps[1] = { 0x1d65b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_026)
{
    // 1D65C ; [.1D5A.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G

    uint32_t const cps[1] = { 0x1d65c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_027)
{
    // 1D65D ; [.1D7E.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL H

    uint32_t const cps[1] = { 0x1d65d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_028)
{
    // 1D65E ; [.1D98.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I

    uint32_t const cps[1] = { 0x1d65e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_029)
{
    // 1D65F ; [.1DB2.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J

    uint32_t const cps[1] = { 0x1d65f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_030)
{
    // 1D660 ; [.1DCB.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL K

    uint32_t const cps[1] = { 0x1d660 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_031)
{
    // 1D661 ; [.1DDD.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL L

    uint32_t const cps[1] = { 0x1d661 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_032)
{
    // 1D662 ; [.1E10.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M

    uint32_t const cps[1] = { 0x1d662 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_033)
{
    // 1D663 ; [.1E1F.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL N

    uint32_t const cps[1] = { 0x1d663 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_034)
{
    // 1D664 ; [.1E43.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O

    uint32_t const cps[1] = { 0x1d664 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_035)
{
    // 1D665 ; [.1E72.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P

    uint32_t const cps[1] = { 0x1d665 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_036)
{
    // 1D666 ; [.1E87.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q

    uint32_t const cps[1] = { 0x1d666 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_037)
{
    // 1D667 ; [.1E99.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL R

    uint32_t const cps[1] = { 0x1d667 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_038)
{
    // 1D668 ; [.1ED7.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S

    uint32_t const cps[1] = { 0x1d668 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_039)
{
    // 1D669 ; [.1EFB.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL T

    uint32_t const cps[1] = { 0x1d669 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_040)
{
    // 1D66A ; [.1F1B.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U

    uint32_t const cps[1] = { 0x1d66a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_041)
{
    // 1D66B ; [.1F49.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V

    uint32_t const cps[1] = { 0x1d66b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_042)
{
    // 1D66C ; [.1F5B.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL W

    uint32_t const cps[1] = { 0x1d66c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_043)
{
    // 1D66D ; [.1F65.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL X

    uint32_t const cps[1] = { 0x1d66d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_044)
{
    // 1D66E ; [.1F71.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y

    uint32_t const cps[1] = { 0x1d66e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_045)
{
    // 1D66F ; [.1F87.0020.0005] 
    // MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z

    uint32_t const cps[1] = { 0x1d66f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_046)
{
    // 1D670 ; [.1CAD.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL A

    uint32_t const cps[1] = { 0x1d670 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_047)
{
    // 1D671 ; [.1CC6.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL B

    uint32_t const cps[1] = { 0x1d671 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_048)
{
    // 1D672 ; [.1CE0.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL C

    uint32_t const cps[1] = { 0x1d672 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_049)
{
    // 1D673 ; [.1CF5.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL D

    uint32_t const cps[1] = { 0x1d673 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_050)
{
    // 1D674 ; [.1D10.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL E

    uint32_t const cps[1] = { 0x1d674 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_051)
{
    // 1D675 ; [.1D4B.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL F

    uint32_t const cps[1] = { 0x1d675 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_052)
{
    // 1D676 ; [.1D5A.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL G

    uint32_t const cps[1] = { 0x1d676 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_053)
{
    // 1D677 ; [.1D7E.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL H

    uint32_t const cps[1] = { 0x1d677 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_054)
{
    // 1D678 ; [.1D98.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL I

    uint32_t const cps[1] = { 0x1d678 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_055)
{
    // 1D679 ; [.1DB2.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL J

    uint32_t const cps[1] = { 0x1d679 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_056)
{
    // 1D67A ; [.1DCB.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL K

    uint32_t const cps[1] = { 0x1d67a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_057)
{
    // 1D67B ; [.1DDD.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL L

    uint32_t const cps[1] = { 0x1d67b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_058)
{
    // 1D67C ; [.1E10.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL M

    uint32_t const cps[1] = { 0x1d67c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_059)
{
    // 1D67D ; [.1E1F.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL N

    uint32_t const cps[1] = { 0x1d67d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_060)
{
    // 1D67E ; [.1E43.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL O

    uint32_t const cps[1] = { 0x1d67e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_061)
{
    // 1D67F ; [.1E72.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL P

    uint32_t const cps[1] = { 0x1d67f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_062)
{
    // 1D680 ; [.1E87.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL Q

    uint32_t const cps[1] = { 0x1d680 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_063)
{
    // 1D681 ; [.1E99.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL R

    uint32_t const cps[1] = { 0x1d681 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_064)
{
    // 1D682 ; [.1ED7.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL S

    uint32_t const cps[1] = { 0x1d682 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_065)
{
    // 1D683 ; [.1EFB.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL T

    uint32_t const cps[1] = { 0x1d683 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_066)
{
    // 1D684 ; [.1F1B.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL U

    uint32_t const cps[1] = { 0x1d684 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_067)
{
    // 1D685 ; [.1F49.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL V

    uint32_t const cps[1] = { 0x1d685 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_068)
{
    // 1D686 ; [.1F5B.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL W

    uint32_t const cps[1] = { 0x1d686 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_069)
{
    // 1D687 ; [.1F65.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL X

    uint32_t const cps[1] = { 0x1d687 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_070)
{
    // 1D688 ; [.1F71.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL Y

    uint32_t const cps[1] = { 0x1d688 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_071)
{
    // 1D689 ; [.1F87.0020.000B] 
    // MATHEMATICAL MONOSPACE CAPITAL Z

    uint32_t const cps[1] = { 0x1d689 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_072)
{
    // 1D68A ; [.1CAD.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL A

    uint32_t const cps[1] = { 0x1d68a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_073)
{
    // 1D68B ; [.1CC6.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL B

    uint32_t const cps[1] = { 0x1d68b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_074)
{
    // 1D68C ; [.1CE0.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL C

    uint32_t const cps[1] = { 0x1d68c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_075)
{
    // 1D68D ; [.1CF5.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL D

    uint32_t const cps[1] = { 0x1d68d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_076)
{
    // 1D68E ; [.1D10.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL E

    uint32_t const cps[1] = { 0x1d68e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_077)
{
    // 1D68F ; [.1D4B.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL F

    uint32_t const cps[1] = { 0x1d68f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_078)
{
    // 1D690 ; [.1D5A.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL G

    uint32_t const cps[1] = { 0x1d690 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_079)
{
    // 1D691 ; [.1D7E.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL H

    uint32_t const cps[1] = { 0x1d691 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_080)
{
    // 1D692 ; [.1D98.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL I

    uint32_t const cps[1] = { 0x1d692 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_081)
{
    // 1D693 ; [.1DB2.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL J

    uint32_t const cps[1] = { 0x1d693 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db2), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_082)
{
    // 1D694 ; [.1DCB.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL K

    uint32_t const cps[1] = { 0x1d694 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_083)
{
    // 1D695 ; [.1DDD.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL L

    uint32_t const cps[1] = { 0x1d695 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_084)
{
    // 1D696 ; [.1E10.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL M

    uint32_t const cps[1] = { 0x1d696 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_085)
{
    // 1D697 ; [.1E1F.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL N

    uint32_t const cps[1] = { 0x1d697 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_086)
{
    // 1D698 ; [.1E43.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL O

    uint32_t const cps[1] = { 0x1d698 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_087)
{
    // 1D699 ; [.1E72.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL P

    uint32_t const cps[1] = { 0x1d699 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_088)
{
    // 1D69A ; [.1E87.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL Q

    uint32_t const cps[1] = { 0x1d69a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_089)
{
    // 1D69B ; [.1E99.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL R

    uint32_t const cps[1] = { 0x1d69b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_090)
{
    // 1D69C ; [.1ED7.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL S

    uint32_t const cps[1] = { 0x1d69c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_091)
{
    // 1D69D ; [.1EFB.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL T

    uint32_t const cps[1] = { 0x1d69d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_092)
{
    // 1D69E ; [.1F1B.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL U

    uint32_t const cps[1] = { 0x1d69e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_093)
{
    // 1D69F ; [.1F49.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL V

    uint32_t const cps[1] = { 0x1d69f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_094)
{
    // 1D6A0 ; [.1F5B.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL W

    uint32_t const cps[1] = { 0x1d6a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_095)
{
    // 1D6A1 ; [.1F65.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL X

    uint32_t const cps[1] = { 0x1d6a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_096)
{
    // 1D6A2 ; [.1F71.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL Y

    uint32_t const cps[1] = { 0x1d6a2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_097)
{
    // 1D6A3 ; [.1F87.0020.0005] 
    // MATHEMATICAL MONOSPACE SMALL Z

    uint32_t const cps[1] = { 0x1d6a3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_098)
{
    // 1D6A4 ; [.1D9C.0020.0005] 
    // MATHEMATICAL ITALIC SMALL DOTLESS I

    uint32_t const cps[1] = { 0x1d6a4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d9c), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_099)
{
    // 1D6A5 ; [.1DB6.0020.0005] 
    // MATHEMATICAL ITALIC SMALL DOTLESS J

    uint32_t const cps[1] = { 0x1d6a5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1db6), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_100)
{
    // 1D6A8 ; [.201F.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL ALPHA

    uint32_t const cps[1] = { 0x1d6a8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_101)
{
    // 1D6A9 ; [.2020.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL BETA

    uint32_t const cps[1] = { 0x1d6a9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_102)
{
    // 1D6AA ; [.2021.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL GAMMA

    uint32_t const cps[1] = { 0x1d6aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_103)
{
    // 1D6AB ; [.2023.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL DELTA

    uint32_t const cps[1] = { 0x1d6ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2023), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_104)
{
    // 1D6AC ; [.2024.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL EPSILON

    uint32_t const cps[1] = { 0x1d6ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_105)
{
    // 1D6AD ; [.2028.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL ZETA

    uint32_t const cps[1] = { 0x1d6ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2028), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_106)
{
    // 1D6AE ; [.202A.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL ETA

    uint32_t const cps[1] = { 0x1d6ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_107)
{
    // 1D6AF ; [.202B.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL THETA

    uint32_t const cps[1] = { 0x1d6af };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_108)
{
    // 1D6B0 ; [.202C.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL IOTA

    uint32_t const cps[1] = { 0x1d6b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_109)
{
    // 1D6B1 ; [.202E.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL KAPPA

    uint32_t const cps[1] = { 0x1d6b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_110)
{
    // 1D6B2 ; [.202F.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL LAMDA

    uint32_t const cps[1] = { 0x1d6b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202f), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_111)
{
    // 1D6B3 ; [.2031.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL MU

    uint32_t const cps[1] = { 0x1d6b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_112)
{
    // 1D6B4 ; [.2032.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL NU

    uint32_t const cps[1] = { 0x1d6b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2032), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_113)
{
    // 1D6B5 ; [.2033.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL XI

    uint32_t const cps[1] = { 0x1d6b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2033), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_114)
{
    // 1D6B6 ; [.2034.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL OMICRON

    uint32_t const cps[1] = { 0x1d6b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_115)
{
    // 1D6B7 ; [.2035.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL PI

    uint32_t const cps[1] = { 0x1d6b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_116)
{
    // 1D6B8 ; [.203A.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL RHO

    uint32_t const cps[1] = { 0x1d6b8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_117)
{
    // 1D6B9 ; [.202B.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL THETA SYMBOL

    uint32_t const cps[1] = { 0x1d6b9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_118)
{
    // 1D6BA ; [.203D.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL SIGMA

    uint32_t const cps[1] = { 0x1d6ba };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_119)
{
    // 1D6BB ; [.2041.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL TAU

    uint32_t const cps[1] = { 0x1d6bb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2041), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_120)
{
    // 1D6BC ; [.2042.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL UPSILON

    uint32_t const cps[1] = { 0x1d6bc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_121)
{
    // 1D6BD ; [.2043.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL PHI

    uint32_t const cps[1] = { 0x1d6bd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_122)
{
    // 1D6BE ; [.2044.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL CHI

    uint32_t const cps[1] = { 0x1d6be };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2044), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_123)
{
    // 1D6BF ; [.2045.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL PSI

    uint32_t const cps[1] = { 0x1d6bf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2045), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_124)
{
    // 1D6C0 ; [.2047.0020.000B] 
    // MATHEMATICAL BOLD CAPITAL OMEGA

    uint32_t const cps[1] = { 0x1d6c0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2047), uint8_t(0x0), uint8_t(0xb)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_125)
{
    // 1D6C1 ; [*0622.0020.0005] 
    // MATHEMATICAL BOLD NABLA

    uint32_t const cps[1] = { 0x1d6c1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x622), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_126)
{
    // 1D6C2 ; [.201F.0020.0005] 
    // MATHEMATICAL BOLD SMALL ALPHA

    uint32_t const cps[1] = { 0x1d6c2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x201f), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_127)
{
    // 1D6C3 ; [.2020.0020.0005] 
    // MATHEMATICAL BOLD SMALL BETA

    uint32_t const cps[1] = { 0x1d6c3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2020), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_128)
{
    // 1D6C4 ; [.2021.0020.0005] 
    // MATHEMATICAL BOLD SMALL GAMMA

    uint32_t const cps[1] = { 0x1d6c4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2021), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_129)
{
    // 1D6C5 ; [.2023.0020.0005] 
    // MATHEMATICAL BOLD SMALL DELTA

    uint32_t const cps[1] = { 0x1d6c5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2023), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_130)
{
    // 1D6C6 ; [.2024.0020.0005] 
    // MATHEMATICAL BOLD SMALL EPSILON

    uint32_t const cps[1] = { 0x1d6c6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2024), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_131)
{
    // 1D6C7 ; [.2028.0020.0005] 
    // MATHEMATICAL BOLD SMALL ZETA

    uint32_t const cps[1] = { 0x1d6c7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2028), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_132)
{
    // 1D6C8 ; [.202A.0020.0005] 
    // MATHEMATICAL BOLD SMALL ETA

    uint32_t const cps[1] = { 0x1d6c8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_133)
{
    // 1D6C9 ; [.202B.0020.0005] 
    // MATHEMATICAL BOLD SMALL THETA

    uint32_t const cps[1] = { 0x1d6c9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202b), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_134)
{
    // 1D6CA ; [.202C.0020.0005] 
    // MATHEMATICAL BOLD SMALL IOTA

    uint32_t const cps[1] = { 0x1d6ca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202c), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_135)
{
    // 1D6CB ; [.202E.0020.0005] 
    // MATHEMATICAL BOLD SMALL KAPPA

    uint32_t const cps[1] = { 0x1d6cb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202e), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_136)
{
    // 1D6CC ; [.202F.0020.0005] 
    // MATHEMATICAL BOLD SMALL LAMDA

    uint32_t const cps[1] = { 0x1d6cc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x202f), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_137)
{
    // 1D6CD ; [.2031.0020.0005] 
    // MATHEMATICAL BOLD SMALL MU

    uint32_t const cps[1] = { 0x1d6cd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_138)
{
    // 1D6CE ; [.2032.0020.0005] 
    // MATHEMATICAL BOLD SMALL NU

    uint32_t const cps[1] = { 0x1d6ce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2032), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_139)
{
    // 1D6CF ; [.2033.0020.0005] 
    // MATHEMATICAL BOLD SMALL XI

    uint32_t const cps[1] = { 0x1d6cf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2033), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_140)
{
    // 1D6D0 ; [.2034.0020.0005] 
    // MATHEMATICAL BOLD SMALL OMICRON

    uint32_t const cps[1] = { 0x1d6d0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2034), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_141)
{
    // 1D6D1 ; [.2035.0020.0005] 
    // MATHEMATICAL BOLD SMALL PI

    uint32_t const cps[1] = { 0x1d6d1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2035), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_142)
{
    // 1D6D2 ; [.203A.0020.0005] 
    // MATHEMATICAL BOLD SMALL RHO

    uint32_t const cps[1] = { 0x1d6d2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203a), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_143)
{
    // 1D6D3 ; [.203D.0020.0005] 
    // MATHEMATICAL BOLD SMALL FINAL SIGMA

    uint32_t const cps[1] = { 0x1d6d3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_144)
{
    // 1D6D4 ; [.203D.0020.0005] 
    // MATHEMATICAL BOLD SMALL SIGMA

    uint32_t const cps[1] = { 0x1d6d4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x203d), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_145)
{
    // 1D6D5 ; [.2041.0020.0005] 
    // MATHEMATICAL BOLD SMALL TAU

    uint32_t const cps[1] = { 0x1d6d5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2041), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_146)
{
    // 1D6D6 ; [.2042.0020.0005] 
    // MATHEMATICAL BOLD SMALL UPSILON

    uint32_t const cps[1] = { 0x1d6d6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2042), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_147)
{
    // 1D6D7 ; [.2043.0020.0005] 
    // MATHEMATICAL BOLD SMALL PHI

    uint32_t const cps[1] = { 0x1d6d7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2043), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_148)
{
    // 1D6D8 ; [.2044.0020.0005] 
    // MATHEMATICAL BOLD SMALL CHI

    uint32_t const cps[1] = { 0x1d6d8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2044), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_179_149)
{
    // 1D6D9 ; [.2045.0020.0005] 
    // MATHEMATICAL BOLD SMALL PSI

    uint32_t const cps[1] = { 0x1d6d9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2045), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

