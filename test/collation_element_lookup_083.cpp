// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_083_000)
{
    // 3364  ; [.1CA4.0020.0004][.1CA5.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWELVE

    uint32_t const cps[1] = { 0x3364 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_001)
{
    // 3365  ; [.1CA4.0020.0004][.1CA6.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THIRTEEN

    uint32_t const cps[1] = { 0x3365 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_002)
{
    // 3366  ; [.1CA4.0020.0004][.1CA7.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOURTEEN

    uint32_t const cps[1] = { 0x3366 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_003)
{
    // 3367  ; [.1CA4.0020.0004][.1CA8.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIFTEEN

    uint32_t const cps[1] = { 0x3367 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_004)
{
    // 3368  ; [.1CA4.0020.0004][.1CA9.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIXTEEN

    uint32_t const cps[1] = { 0x3368 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_005)
{
    // 3369  ; [.1CA4.0020.0004][.1CAA.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVENTEEN

    uint32_t const cps[1] = { 0x3369 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_006)
{
    // 336A  ; [.1CA4.0020.0004][.1CAB.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHTEEN

    uint32_t const cps[1] = { 0x336a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_007)
{
    // 336B  ; [.1CA4.0020.0004][.1CAC.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINETEEN

    uint32_t const cps[1] = { 0x336b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_008)
{
    // 336C  ; [.1CA5.0020.0004][.1CA3.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY

    uint32_t const cps[1] = { 0x336c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_009)
{
    // 336D  ; [.1CA5.0020.0004][.1CA4.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-ONE

    uint32_t const cps[1] = { 0x336d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_010)
{
    // 336E  ; [.1CA5.0020.0004][.1CA5.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-TWO

    uint32_t const cps[1] = { 0x336e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_011)
{
    // 336F  ; [.1CA5.0020.0004][.1CA6.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-THREE

    uint32_t const cps[1] = { 0x336f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_012)
{
    // 3370  ; [.1CA5.0020.0004][.1CA7.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-FOUR

    uint32_t const cps[1] = { 0x3370 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_013)
{
    // 3371  ; [.1D7E.0020.001C][.1E72.0020.001D][.1CAD.0020.001C] 
    // SQUARE HPA

    uint32_t const cps[1] = { 0x3371 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_014)
{
    // 3372  ; [.1CF5.0020.001C][.1CAD.0020.001C] 
    // SQUARE DA

    uint32_t const cps[1] = { 0x3372 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_015)
{
    // 3373  ; [.1CAD.0020.001D][.1F1B.0020.001D] 
    // SQUARE AU

    uint32_t const cps[1] = { 0x3373 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_016)
{
    // 3374  ; [.1CC6.0020.001C][.1CAD.0020.001C][.1E99.0020.001C] 
    // SQUARE BAR

    uint32_t const cps[1] = { 0x3374 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_017)
{
    // 3375  ; [.1E43.0020.001C][.1F49.0020.001D] 
    // SQUARE OV

    uint32_t const cps[1] = { 0x3375 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_018)
{
    // 3376  ; [.1E72.0020.001C][.1CE0.0020.001C] 
    // SQUARE PC

    uint32_t const cps[1] = { 0x3376 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_019)
{
    // 3377  ; [.1CF5.0020.001C][.1E10.0020.001C] 
    // SQUARE DM

    uint32_t const cps[1] = { 0x3377 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_020)
{
    // 3378  ; [.1CF5.0020.001C][.1E10.0020.001C][.1CA5.0020.001C] 
    // SQUARE DM SQUARED

    uint32_t const cps[1] = { 0x3378 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_021)
{
    // 3379  ; [.1CF5.0020.001C][.1E10.0020.001C][.1CA6.0020.001C] 
    // SQUARE DM CUBED

    uint32_t const cps[1] = { 0x3379 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_022)
{
    // 337A  ; [.1D98.0020.001D][.1F1B.0020.001D] 
    // SQUARE IU

    uint32_t const cps[1] = { 0x337a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_023)
{
    // 337B  ; [.FB40.0020.001C][.DE73.0000.0000][.FB40.0020.001C][.E210.0000.0000] 
    // SQUARE ERA NAME HEISEI

    uint32_t const cps[1] = { 0x337b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xde73), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe210), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_024)
{
    // 337C  ; [.FB40.0020.001C][.E62D.0000.0000][.FB40.0020.001C][.D48C.0000.0000] 
    // SQUARE ERA NAME SYOUWA

    uint32_t const cps[1] = { 0x337c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe62d), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd48c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_025)
{
    // 337D  ; [.FB40.0020.001C][.D927.0000.0000][.FB40.0020.001C][.EB63.0000.0000] 
    // SQUARE ERA NAME TAISYOU

    uint32_t const cps[1] = { 0x337d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xd927), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xeb63), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_026)
{
    // 337E  ; [.FB40.0020.001C][.E60E.0000.0000][.FB40.0020.001C][.ECBB.0000.0000] 
    // SQUARE ERA NAME MEIZI

    uint32_t const cps[1] = { 0x337e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe60e), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xecbb), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_027)
{
    // 337F  ; [.FB40.0020.001C][.E82A.0000.0000][.FB40.0020.001C][.DF0F.0000.0000][.FB40.0020.001C][.CF1A.0000.0000][.FB40.0020.001C][.F93E.0000.0000] 
    // SQUARE CORPORATION

    uint32_t const cps[1] = { 0x337f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[8] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xe82a), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xdf0f), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xcf1a), uint8_t(0xe0), uint8_t(0x0)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0xf93e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 8));
}

TEST(collation, table_lookup_083_028)
{
    // 3380  ; [.1E72.0020.001C][.1CAD.0020.001D] 
    // SQUARE PA AMPS

    uint32_t const cps[1] = { 0x3380 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_029)
{
    // 3381  ; [.1E1F.0020.001C][.1CAD.0020.001D] 
    // SQUARE NA

    uint32_t const cps[1] = { 0x3381 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_030)
{
    // 3382  ; [.2031.0020.001C][.1CAD.0020.001D] 
    // SQUARE MU A

    uint32_t const cps[1] = { 0x3382 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_031)
{
    // 3383  ; [.1E10.0020.001C][.1CAD.0020.001D] 
    // SQUARE MA

    uint32_t const cps[1] = { 0x3383 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_032)
{
    // 3384  ; [.1DCB.0020.001C][.1CAD.0020.001D] 
    // SQUARE KA

    uint32_t const cps[1] = { 0x3384 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_033)
{
    // 3385  ; [.1DCB.0020.001D][.1CC6.0020.001D] 
    // SQUARE KB

    uint32_t const cps[1] = { 0x3385 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_034)
{
    // 3386  ; [.1E10.0020.001D][.1CC6.0020.001D] 
    // SQUARE MB

    uint32_t const cps[1] = { 0x3386 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_035)
{
    // 3387  ; [.1D5A.0020.001D][.1CC6.0020.001D] 
    // SQUARE GB

    uint32_t const cps[1] = { 0x3387 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_036)
{
    // 3388  ; [.1CE0.0020.001C][.1CAD.0020.001C][.1DDD.0020.001C] 
    // SQUARE CAL

    uint32_t const cps[1] = { 0x3388 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_037)
{
    // 3389  ; [.1DCB.0020.001C][.1CE0.0020.001C][.1CAD.0020.001C][.1DDD.0020.001C] 
    // SQUARE KCAL

    uint32_t const cps[1] = { 0x3389 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_038)
{
    // 338A  ; [.1E72.0020.001C][.1D4B.0020.001D] 
    // SQUARE PF

    uint32_t const cps[1] = { 0x338a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_039)
{
    // 338B  ; [.1E1F.0020.001C][.1D4B.0020.001D] 
    // SQUARE NF

    uint32_t const cps[1] = { 0x338b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_040)
{
    // 338C  ; [.2031.0020.001C][.1D4B.0020.001D] 
    // SQUARE MU F

    uint32_t const cps[1] = { 0x338c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_041)
{
    // 338D  ; [.2031.0020.001C][.1D5A.0020.001C] 
    // SQUARE MU G

    uint32_t const cps[1] = { 0x338d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_042)
{
    // 338E  ; [.1E10.0020.001C][.1D5A.0020.001C] 
    // SQUARE MG

    uint32_t const cps[1] = { 0x338e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_043)
{
    // 338F  ; [.1DCB.0020.001C][.1D5A.0020.001C] 
    // SQUARE KG

    uint32_t const cps[1] = { 0x338f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_044)
{
    // 3390  ; [.1D7E.0020.001D][.1F87.0020.001C] 
    // SQUARE HZ

    uint32_t const cps[1] = { 0x3390 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_045)
{
    // 3391  ; [.1DCB.0020.001C][.1D7E.0020.001D][.1F87.0020.001C] 
    // SQUARE KHZ

    uint32_t const cps[1] = { 0x3391 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_046)
{
    // 3392  ; [.1E10.0020.001D][.1D7E.0020.001D][.1F87.0020.001C] 
    // SQUARE MHZ

    uint32_t const cps[1] = { 0x3392 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_047)
{
    // 3393  ; [.1D5A.0020.001D][.1D7E.0020.001D][.1F87.0020.001C] 
    // SQUARE GHZ

    uint32_t const cps[1] = { 0x3393 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_048)
{
    // 3394  ; [.1EFB.0020.001D][.1D7E.0020.001D][.1F87.0020.001C] 
    // SQUARE THZ

    uint32_t const cps[1] = { 0x3394 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_049)
{
    // 3395  ; [.2031.0020.001C][.1DDD.0020.001C] 
    // SQUARE MU L

    uint32_t const cps[1] = { 0x3395 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_050)
{
    // 3396  ; [.1E10.0020.001C][.1DDD.0020.001C] 
    // SQUARE ML

    uint32_t const cps[1] = { 0x3396 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_051)
{
    // 3397  ; [.1CF5.0020.001C][.1DDD.0020.001C] 
    // SQUARE DL

    uint32_t const cps[1] = { 0x3397 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_052)
{
    // 3398  ; [.1DCB.0020.001C][.1DDD.0020.001C] 
    // SQUARE KL

    uint32_t const cps[1] = { 0x3398 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_053)
{
    // 3399  ; [.1D4B.0020.001C][.1E10.0020.001C] 
    // SQUARE FM

    uint32_t const cps[1] = { 0x3399 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_054)
{
    // 339A  ; [.1E1F.0020.001C][.1E10.0020.001C] 
    // SQUARE NM

    uint32_t const cps[1] = { 0x339a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_055)
{
    // 339B  ; [.2031.0020.001C][.1E10.0020.001C] 
    // SQUARE MU M

    uint32_t const cps[1] = { 0x339b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_056)
{
    // 339C  ; [.1E10.0020.001C][.1E10.0020.001C] 
    // SQUARE MM

    uint32_t const cps[1] = { 0x339c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_057)
{
    // 339D  ; [.1CE0.0020.001C][.1E10.0020.001C] 
    // SQUARE CM

    uint32_t const cps[1] = { 0x339d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_058)
{
    // 339E  ; [.1DCB.0020.001C][.1E10.0020.001C] 
    // SQUARE KM

    uint32_t const cps[1] = { 0x339e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_059)
{
    // 339F  ; [.1E10.0020.001C][.1E10.0020.001C][.1CA5.0020.001C] 
    // SQUARE MM SQUARED

    uint32_t const cps[1] = { 0x339f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_060)
{
    // 33A0  ; [.1CE0.0020.001C][.1E10.0020.001C][.1CA5.0020.001C] 
    // SQUARE CM SQUARED

    uint32_t const cps[1] = { 0x33a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_061)
{
    // 33A1  ; [.1E10.0020.001C][.1CA5.0020.001C] 
    // SQUARE M SQUARED

    uint32_t const cps[1] = { 0x33a1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_062)
{
    // 33A2  ; [.1DCB.0020.001C][.1E10.0020.001C][.1CA5.0020.001C] 
    // SQUARE KM SQUARED

    uint32_t const cps[1] = { 0x33a2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_063)
{
    // 33A3  ; [.1E10.0020.001C][.1E10.0020.001C][.1CA6.0020.001C] 
    // SQUARE MM CUBED

    uint32_t const cps[1] = { 0x33a3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_064)
{
    // 33A4  ; [.1CE0.0020.001C][.1E10.0020.001C][.1CA6.0020.001C] 
    // SQUARE CM CUBED

    uint32_t const cps[1] = { 0x33a4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_065)
{
    // 33A5  ; [.1E10.0020.001C][.1CA6.0020.001C] 
    // SQUARE M CUBED

    uint32_t const cps[1] = { 0x33a5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_066)
{
    // 33A6  ; [.1DCB.0020.001C][.1E10.0020.001C][.1CA6.0020.001C] 
    // SQUARE KM CUBED

    uint32_t const cps[1] = { 0x33a6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_067)
{
    // 33A7  ; [.1E10.0020.001C][*063B.0020.001C][.1ED7.0020.001C] 
    // SQUARE M OVER S

    uint32_t const cps[1] = { 0x33a7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x63b), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_068)
{
    // 33A8  ; [.1E10.0020.001C][*063B.0020.001C][.1ED7.0020.001C][.1CA5.0020.001C] 
    // SQUARE M OVER S SQUARED

    uint32_t const cps[1] = { 0x33a8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x63b), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_069)
{
    // 33A9  ; [.1E72.0020.001D][.1CAD.0020.001C] 
    // SQUARE PA

    uint32_t const cps[1] = { 0x33a9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_070)
{
    // 33AA  ; [.1DCB.0020.001C][.1E72.0020.001D][.1CAD.0020.001C] 
    // SQUARE KPA

    uint32_t const cps[1] = { 0x33aa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_071)
{
    // 33AB  ; [.1E10.0020.001D][.1E72.0020.001D][.1CAD.0020.001C] 
    // SQUARE MPA

    uint32_t const cps[1] = { 0x33ab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_072)
{
    // 33AC  ; [.1D5A.0020.001D][.1E72.0020.001D][.1CAD.0020.001C] 
    // SQUARE GPA

    uint32_t const cps[1] = { 0x33ac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_073)
{
    // 33AD  ; [.1E99.0020.001C][.1CAD.0020.001C][.1CF5.0020.001C] 
    // SQUARE RAD

    uint32_t const cps[1] = { 0x33ad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_074)
{
    // 33AE  ; [.1E99.0020.001C][.1CAD.0020.001C][.1CF5.0020.001C][*063B.0020.001C][.1ED7.0020.001C] 
    // SQUARE RAD OVER S

    uint32_t const cps[1] = { 0x33ae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[5] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x63b), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_083_075)
{
    // 33AF  ; [.1E99.0020.001C][.1CAD.0020.001C][.1CF5.0020.001C][*063B.0020.001C][.1ED7.0020.001C][.1CA5.0020.001C] 
    // SQUARE RAD OVER S SQUARED

    uint32_t const cps[1] = { 0x33af };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[6] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x63b), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_083_076)
{
    // 33B0  ; [.1E72.0020.001C][.1ED7.0020.001C] 
    // SQUARE PS

    uint32_t const cps[1] = { 0x33b0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_077)
{
    // 33B1  ; [.1E1F.0020.001C][.1ED7.0020.001C] 
    // SQUARE NS

    uint32_t const cps[1] = { 0x33b1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_078)
{
    // 33B2  ; [.2031.0020.001C][.1ED7.0020.001C] 
    // SQUARE MU S

    uint32_t const cps[1] = { 0x33b2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_079)
{
    // 33B3  ; [.1E10.0020.001C][.1ED7.0020.001C] 
    // SQUARE MS

    uint32_t const cps[1] = { 0x33b3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_080)
{
    // 33B4  ; [.1E72.0020.001C][.1F49.0020.001D] 
    // SQUARE PV

    uint32_t const cps[1] = { 0x33b4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_081)
{
    // 33B5  ; [.1E1F.0020.001C][.1F49.0020.001D] 
    // SQUARE NV

    uint32_t const cps[1] = { 0x33b5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_082)
{
    // 33B6  ; [.2031.0020.001C][.1F49.0020.001D] 
    // SQUARE MU V

    uint32_t const cps[1] = { 0x33b6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_083)
{
    // 33B7  ; [.1E10.0020.001C][.1F49.0020.001D] 
    // SQUARE MV

    uint32_t const cps[1] = { 0x33b7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_084)
{
    // 33B8  ; [.1DCB.0020.001C][.1F49.0020.001D] 
    // SQUARE KV

    uint32_t const cps[1] = { 0x33b8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_085)
{
    // 33B9  ; [.1E10.0020.001D][.1F49.0020.001D] 
    // SQUARE MV MEGA

    uint32_t const cps[1] = { 0x33b9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_086)
{
    // 33BA  ; [.1E72.0020.001C][.1F5B.0020.001D] 
    // SQUARE PW

    uint32_t const cps[1] = { 0x33ba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_087)
{
    // 33BB  ; [.1E1F.0020.001C][.1F5B.0020.001D] 
    // SQUARE NW

    uint32_t const cps[1] = { 0x33bb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_088)
{
    // 33BC  ; [.2031.0020.001C][.1F5B.0020.001D] 
    // SQUARE MU W

    uint32_t const cps[1] = { 0x33bc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2031), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_089)
{
    // 33BD  ; [.1E10.0020.001C][.1F5B.0020.001D] 
    // SQUARE MW

    uint32_t const cps[1] = { 0x33bd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_090)
{
    // 33BE  ; [.1DCB.0020.001C][.1F5B.0020.001D] 
    // SQUARE KW

    uint32_t const cps[1] = { 0x33be };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_091)
{
    // 33BF  ; [.1E10.0020.001D][.1F5B.0020.001D] 
    // SQUARE MW MEGA

    uint32_t const cps[1] = { 0x33bf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_092)
{
    // 33C0  ; [.1DCB.0020.001C][.2047.0020.001D] 
    // SQUARE K OHM

    uint32_t const cps[1] = { 0x33c0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_093)
{
    // 33C1  ; [.1E10.0020.001D][.2047.0020.001D] 
    // SQUARE M OHM

    uint32_t const cps[1] = { 0x33c1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x2047), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_094)
{
    // 33C2  ; [.1CAD.0020.001C][*0278.0020.001C][.1E10.0020.001C][*0278.0020.001C] 
    // SQUARE AM

    uint32_t const cps[1] = { 0x33c2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_095)
{
    // 33C3  ; [.1CC6.0020.001D][.1E87.0020.001C] 
    // SQUARE BQ

    uint32_t const cps[1] = { 0x33c3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e87), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_096)
{
    // 33C4  ; [.1CE0.0020.001C][.1CE0.0020.001C] 
    // SQUARE CC

    uint32_t const cps[1] = { 0x33c4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_097)
{
    // 33C5  ; [.1CE0.0020.001C][.1CF5.0020.001C] 
    // SQUARE CD

    uint32_t const cps[1] = { 0x33c5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_098)
{
    // 33C6  ; [.1CE0.0020.001D][*063B.0020.001C][.1DCB.0020.001C][.1D5A.0020.001C] 
    // SQUARE C OVER KG

    uint32_t const cps[1] = { 0x33c6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x63b), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_099)
{
    // 33C7  ; [.1CE0.0020.001D][.1E43.0020.001C][*0278.0020.001C] 
    // SQUARE CO

    uint32_t const cps[1] = { 0x33c7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ce0), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_100)
{
    // 33C8  ; [.1CF5.0020.001C][.1CC6.0020.001D] 
    // SQUARE DB

    uint32_t const cps[1] = { 0x33c8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_101)
{
    // 33C9  ; [.1D5A.0020.001D][.1F71.0020.001C] 
    // SQUARE GY

    uint32_t const cps[1] = { 0x33c9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_102)
{
    // 33CA  ; [.1D7E.0020.001C][.1CAD.0020.001C] 
    // SQUARE HA

    uint32_t const cps[1] = { 0x33ca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_103)
{
    // 33CB  ; [.1D7E.0020.001D][.1E72.0020.001D] 
    // SQUARE HP

    uint32_t const cps[1] = { 0x33cb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_104)
{
    // 33CC  ; [.1D98.0020.001C][.1E1F.0020.001C] 
    // SQUARE IN

    uint32_t const cps[1] = { 0x33cc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_105)
{
    // 33CD  ; [.1DCB.0020.001D][.1DCB.0020.001D] 
    // SQUARE KK

    uint32_t const cps[1] = { 0x33cd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_106)
{
    // 33CE  ; [.1DCB.0020.001D][.1E10.0020.001D] 
    // SQUARE KM CAPITAL

    uint32_t const cps[1] = { 0x33ce };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_107)
{
    // 33CF  ; [.1DCB.0020.001C][.1EFB.0020.001C] 
    // SQUARE KT

    uint32_t const cps[1] = { 0x33cf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_108)
{
    // 33D0  ; [.1DDD.0020.001C][.1E10.0020.001C] 
    // SQUARE LM

    uint32_t const cps[1] = { 0x33d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_109)
{
    // 33D1  ; [.1DDD.0020.001C][.1E1F.0020.001C] 
    // SQUARE LN

    uint32_t const cps[1] = { 0x33d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_110)
{
    // 33D2  ; [.1DDD.0020.001C][.1E43.0020.001C][.1D5A.0020.001C] 
    // SQUARE LOG

    uint32_t const cps[1] = { 0x33d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_111)
{
    // 33D3  ; [.1DDD.0020.001C][.1F65.0020.001C] 
    // SQUARE LX

    uint32_t const cps[1] = { 0x33d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1f65), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_112)
{
    // 33D4  ; [.1E10.0020.001C][.1CC6.0020.001C] 
    // SQUARE MB SMALL

    uint32_t const cps[1] = { 0x33d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_113)
{
    // 33D5  ; [.1E10.0020.001C][.1D98.0020.001C][.1DDD.0020.001C] 
    // SQUARE MIL

    uint32_t const cps[1] = { 0x33d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_114)
{
    // 33D6  ; [.1E10.0020.001C][.1E43.0020.001C][.1DDD.0020.001C] 
    // SQUARE MOL

    uint32_t const cps[1] = { 0x33d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_115)
{
    // 33D7  ; [.1E72.0020.001D][.1D7E.0020.001D] 
    // SQUARE PH

    uint32_t const cps[1] = { 0x33d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_116)
{
    // 33D8  ; [.1E72.0020.001C][*0278.0020.001C][.1E10.0020.001C][*0278.0020.001C] 
    // SQUARE PM

    uint32_t const cps[1] = { 0x33d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_117)
{
    // 33D9  ; [.1E72.0020.001D][.1E72.0020.001D][.1E10.0020.001D] 
    // SQUARE PPM

    uint32_t const cps[1] = { 0x33d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_118)
{
    // 33DA  ; [.1E72.0020.001D][.1E99.0020.001D] 
    // SQUARE PR

    uint32_t const cps[1] = { 0x33da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1e72), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1d)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_119)
{
    // 33DB  ; [.1ED7.0020.001C][.1E99.0020.001C] 
    // SQUARE SR

    uint32_t const cps[1] = { 0x33db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_120)
{
    // 33DC  ; [.1ED7.0020.001D][.1F49.0020.001C] 
    // SQUARE SV

    uint32_t const cps[1] = { 0x33dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_121)
{
    // 33DD  ; [.1F5B.0020.001D][.1CC6.0020.001C] 
    // SQUARE WB

    uint32_t const cps[1] = { 0x33dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1f5b), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x1cc6), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_083_122)
{
    // 33DE  ; [.1F49.0020.001D][*063B.0020.001C][.1E10.0020.001C] 
    // SQUARE V OVER M

    uint32_t const cps[1] = { 0x33de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x63b), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_123)
{
    // 33DF  ; [.1CAD.0020.001D][*063B.0020.001C][.1E10.0020.001C] 
    // SQUARE A OVER M

    uint32_t const cps[1] = { 0x33df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x1d)}, {uint16_t(0x63b), uint8_t(0x0), uint8_t(0x1c)}, {uint16_t(0x1e10), uint8_t(0x0), uint8_t(0x1c)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_124)
{
    // 33E0  ; [.1CA4.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY ONE

    uint32_t const cps[1] = { 0x33e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_125)
{
    // 33E1  ; [.1CA5.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWO

    uint32_t const cps[1] = { 0x33e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_126)
{
    // 33E2  ; [.1CA6.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THREE

    uint32_t const cps[1] = { 0x33e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_127)
{
    // 33E3  ; [.1CA7.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOUR

    uint32_t const cps[1] = { 0x33e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_128)
{
    // 33E4  ; [.1CA8.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIVE

    uint32_t const cps[1] = { 0x33e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_129)
{
    // 33E5  ; [.1CA9.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIX

    uint32_t const cps[1] = { 0x33e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_130)
{
    // 33E6  ; [.1CAA.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVEN

    uint32_t const cps[1] = { 0x33e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_131)
{
    // 33E7  ; [.1CAB.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHT

    uint32_t const cps[1] = { 0x33e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_132)
{
    // 33E8  ; [.1CAC.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINE

    uint32_t const cps[1] = { 0x33e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_083_133)
{
    // 33E9  ; [.1CA4.0020.0004][.1CA3.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TEN

    uint32_t const cps[1] = { 0x33e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_134)
{
    // 33EA  ; [.1CA4.0020.0004][.1CA4.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY ELEVEN

    uint32_t const cps[1] = { 0x33ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_135)
{
    // 33EB  ; [.1CA4.0020.0004][.1CA5.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWELVE

    uint32_t const cps[1] = { 0x33eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_136)
{
    // 33EC  ; [.1CA4.0020.0004][.1CA6.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTEEN

    uint32_t const cps[1] = { 0x33ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_137)
{
    // 33ED  ; [.1CA4.0020.0004][.1CA7.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOURTEEN

    uint32_t const cps[1] = { 0x33ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_138)
{
    // 33EE  ; [.1CA4.0020.0004][.1CA8.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIFTEEN

    uint32_t const cps[1] = { 0x33ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_139)
{
    // 33EF  ; [.1CA4.0020.0004][.1CA9.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIXTEEN

    uint32_t const cps[1] = { 0x33ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_140)
{
    // 33F0  ; [.1CA4.0020.0004][.1CAA.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVENTEEN

    uint32_t const cps[1] = { 0x33f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_141)
{
    // 33F1  ; [.1CA4.0020.0004][.1CAB.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHTEEN

    uint32_t const cps[1] = { 0x33f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_142)
{
    // 33F2  ; [.1CA4.0020.0004][.1CAC.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINETEEN

    uint32_t const cps[1] = { 0x33f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_143)
{
    // 33F3  ; [.1CA5.0020.0004][.1CA3.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY

    uint32_t const cps[1] = { 0x33f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_144)
{
    // 33F4  ; [.1CA5.0020.0004][.1CA4.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-ONE

    uint32_t const cps[1] = { 0x33f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_145)
{
    // 33F5  ; [.1CA5.0020.0004][.1CA5.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-TWO

    uint32_t const cps[1] = { 0x33f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_146)
{
    // 33F6  ; [.1CA5.0020.0004][.1CA6.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-THREE

    uint32_t const cps[1] = { 0x33f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_147)
{
    // 33F7  ; [.1CA5.0020.0004][.1CA7.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-FOUR

    uint32_t const cps[1] = { 0x33f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_148)
{
    // 33F8  ; [.1CA5.0020.0004][.1CA8.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-FIVE

    uint32_t const cps[1] = { 0x33f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_083_149)
{
    // 33F9  ; [.1CA5.0020.0004][.1CA9.0020.0004][.FB40.0020.0004][.E5E5.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-SIX

    uint32_t const cps[1] = { 0x33f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[4] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0xe5e5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

