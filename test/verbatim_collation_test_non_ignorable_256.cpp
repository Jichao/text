// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_256_000)
{
    // A0D8 003F;	
    // (ꃘ) YI SYLLABLE FUT	[40CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0D8, 0x003F };
    uint32_t const ces[9] = { 0x40CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_001)
{
    // A0D8 0061;	
    // (ꃘ) YI SYLLABLE FUT	[40CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0D8, 0x0061 };
    uint32_t const ces[9] = { 0x40CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_002)
{
    // A0D8 0041;	
    // (ꃘ) YI SYLLABLE FUT	[40CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0D8, 0x0041 };
    uint32_t const ces[9] = { 0x40CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_003)
{
    // A0D8 0062;	
    // (ꃘ) YI SYLLABLE FUT	[40CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0D8, 0x0062 };
    uint32_t const ces[9] = { 0x40CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_004)
{
    // A0D9 0021;	
    // (ꃙ) YI SYLLABLE FUX	[40CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0D9, 0x0021 };
    uint32_t const ces[9] = { 0x40CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_005)
{
    // A0D9 003F;	
    // (ꃙ) YI SYLLABLE FUX	[40CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0D9, 0x003F };
    uint32_t const ces[9] = { 0x40CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_006)
{
    // A0D9 0061;	
    // (ꃙ) YI SYLLABLE FUX	[40CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0D9, 0x0061 };
    uint32_t const ces[9] = { 0x40CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_007)
{
    // A0D9 0041;	
    // (ꃙ) YI SYLLABLE FUX	[40CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0D9, 0x0041 };
    uint32_t const ces[9] = { 0x40CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_008)
{
    // A0D9 0062;	
    // (ꃙ) YI SYLLABLE FUX	[40CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0D9, 0x0062 };
    uint32_t const ces[9] = { 0x40CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_009)
{
    // A0DA 0021;	
    // (ꃚ) YI SYLLABLE FU	[40CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DA, 0x0021 };
    uint32_t const ces[9] = { 0x40CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_010)
{
    // A0DA 003F;	
    // (ꃚ) YI SYLLABLE FU	[40CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DA, 0x003F };
    uint32_t const ces[9] = { 0x40CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_011)
{
    // A0DA 0061;	
    // (ꃚ) YI SYLLABLE FU	[40CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DA, 0x0061 };
    uint32_t const ces[9] = { 0x40CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_012)
{
    // A0DA 0041;	
    // (ꃚ) YI SYLLABLE FU	[40CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0DA, 0x0041 };
    uint32_t const ces[9] = { 0x40CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_013)
{
    // A0DA 0062;	
    // (ꃚ) YI SYLLABLE FU	[40CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DA, 0x0062 };
    uint32_t const ces[9] = { 0x40CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_014)
{
    // A0DB 0021;	
    // (ꃛ) YI SYLLABLE FUP	[40CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DB, 0x0021 };
    uint32_t const ces[9] = { 0x40CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_015)
{
    // A0DB 003F;	
    // (ꃛ) YI SYLLABLE FUP	[40CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DB, 0x003F };
    uint32_t const ces[9] = { 0x40CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_016)
{
    // A0DB 0061;	
    // (ꃛ) YI SYLLABLE FUP	[40CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DB, 0x0061 };
    uint32_t const ces[9] = { 0x40CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_017)
{
    // A0DB 0041;	
    // (ꃛ) YI SYLLABLE FUP	[40CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0DB, 0x0041 };
    uint32_t const ces[9] = { 0x40CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_018)
{
    // A0DB 0062;	
    // (ꃛ) YI SYLLABLE FUP	[40CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DB, 0x0062 };
    uint32_t const ces[9] = { 0x40CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_019)
{
    // A0DC 0021;	
    // (ꃜ) YI SYLLABLE FURX	[40CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DC, 0x0021 };
    uint32_t const ces[9] = { 0x40CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_020)
{
    // A0DC 003F;	
    // (ꃜ) YI SYLLABLE FURX	[40CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DC, 0x003F };
    uint32_t const ces[9] = { 0x40CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_021)
{
    // A0DC 0061;	
    // (ꃜ) YI SYLLABLE FURX	[40CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DC, 0x0061 };
    uint32_t const ces[9] = { 0x40CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_022)
{
    // A0DC 0041;	
    // (ꃜ) YI SYLLABLE FURX	[40CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0DC, 0x0041 };
    uint32_t const ces[9] = { 0x40CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_023)
{
    // A0DC 0062;	
    // (ꃜ) YI SYLLABLE FURX	[40CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DC, 0x0062 };
    uint32_t const ces[9] = { 0x40CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_024)
{
    // A0DD 0021;	
    // (ꃝ) YI SYLLABLE FUR	[40D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DD, 0x0021 };
    uint32_t const ces[9] = { 0x40D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_025)
{
    // A0DD 003F;	
    // (ꃝ) YI SYLLABLE FUR	[40D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DD, 0x003F };
    uint32_t const ces[9] = { 0x40D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_026)
{
    // A0DD 0061;	
    // (ꃝ) YI SYLLABLE FUR	[40D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DD, 0x0061 };
    uint32_t const ces[9] = { 0x40D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_027)
{
    // A0DD 0041;	
    // (ꃝ) YI SYLLABLE FUR	[40D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0DD, 0x0041 };
    uint32_t const ces[9] = { 0x40D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_028)
{
    // A0DD 0062;	
    // (ꃝ) YI SYLLABLE FUR	[40D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DD, 0x0062 };
    uint32_t const ces[9] = { 0x40D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_029)
{
    // A0DE 0021;	
    // (ꃞ) YI SYLLABLE FYT	[40D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DE, 0x0021 };
    uint32_t const ces[9] = { 0x40D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_030)
{
    // A0DE 003F;	
    // (ꃞ) YI SYLLABLE FYT	[40D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DE, 0x003F };
    uint32_t const ces[9] = { 0x40D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_031)
{
    // A0DE 0061;	
    // (ꃞ) YI SYLLABLE FYT	[40D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DE, 0x0061 };
    uint32_t const ces[9] = { 0x40D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_032)
{
    // A0DE 0041;	
    // (ꃞ) YI SYLLABLE FYT	[40D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0DE, 0x0041 };
    uint32_t const ces[9] = { 0x40D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_033)
{
    // A0DE 0062;	
    // (ꃞ) YI SYLLABLE FYT	[40D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DE, 0x0062 };
    uint32_t const ces[9] = { 0x40D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_034)
{
    // A0DF 0021;	
    // (ꃟ) YI SYLLABLE FYX	[40D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DF, 0x0021 };
    uint32_t const ces[9] = { 0x40D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_035)
{
    // A0DF 003F;	
    // (ꃟ) YI SYLLABLE FYX	[40D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DF, 0x003F };
    uint32_t const ces[9] = { 0x40D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_036)
{
    // A0DF 0061;	
    // (ꃟ) YI SYLLABLE FYX	[40D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DF, 0x0061 };
    uint32_t const ces[9] = { 0x40D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_037)
{
    // A0DF 0041;	
    // (ꃟ) YI SYLLABLE FYX	[40D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0DF, 0x0041 };
    uint32_t const ces[9] = { 0x40D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_038)
{
    // A0DF 0062;	
    // (ꃟ) YI SYLLABLE FYX	[40D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0DF, 0x0062 };
    uint32_t const ces[9] = { 0x40D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_039)
{
    // A0E0 0021;	
    // (ꃠ) YI SYLLABLE FY	[40D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E0, 0x0021 };
    uint32_t const ces[9] = { 0x40D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_040)
{
    // A0E0 003F;	
    // (ꃠ) YI SYLLABLE FY	[40D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E0, 0x003F };
    uint32_t const ces[9] = { 0x40D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_041)
{
    // A0E0 0061;	
    // (ꃠ) YI SYLLABLE FY	[40D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E0, 0x0061 };
    uint32_t const ces[9] = { 0x40D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_042)
{
    // A0E0 0041;	
    // (ꃠ) YI SYLLABLE FY	[40D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E0, 0x0041 };
    uint32_t const ces[9] = { 0x40D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_043)
{
    // A0E0 0062;	
    // (ꃠ) YI SYLLABLE FY	[40D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E0, 0x0062 };
    uint32_t const ces[9] = { 0x40D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_044)
{
    // A0E1 0021;	
    // (ꃡ) YI SYLLABLE FYP	[40D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E1, 0x0021 };
    uint32_t const ces[9] = { 0x40D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_045)
{
    // A0E1 003F;	
    // (ꃡ) YI SYLLABLE FYP	[40D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E1, 0x003F };
    uint32_t const ces[9] = { 0x40D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_046)
{
    // A0E1 0061;	
    // (ꃡ) YI SYLLABLE FYP	[40D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E1, 0x0061 };
    uint32_t const ces[9] = { 0x40D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_047)
{
    // A0E1 0041;	
    // (ꃡ) YI SYLLABLE FYP	[40D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E1, 0x0041 };
    uint32_t const ces[9] = { 0x40D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_048)
{
    // A0E1 0062;	
    // (ꃡ) YI SYLLABLE FYP	[40D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E1, 0x0062 };
    uint32_t const ces[9] = { 0x40D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_049)
{
    // A0E2 0021;	
    // (ꃢ) YI SYLLABLE VIT	[40D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E2, 0x0021 };
    uint32_t const ces[9] = { 0x40D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_050)
{
    // A0E2 003F;	
    // (ꃢ) YI SYLLABLE VIT	[40D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E2, 0x003F };
    uint32_t const ces[9] = { 0x40D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_051)
{
    // A0E2 0061;	
    // (ꃢ) YI SYLLABLE VIT	[40D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E2, 0x0061 };
    uint32_t const ces[9] = { 0x40D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_052)
{
    // A0E2 0041;	
    // (ꃢ) YI SYLLABLE VIT	[40D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E2, 0x0041 };
    uint32_t const ces[9] = { 0x40D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_053)
{
    // A0E2 0062;	
    // (ꃢ) YI SYLLABLE VIT	[40D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E2, 0x0062 };
    uint32_t const ces[9] = { 0x40D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_054)
{
    // A0E3 0021;	
    // (ꃣ) YI SYLLABLE VIX	[40D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E3, 0x0021 };
    uint32_t const ces[9] = { 0x40D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_055)
{
    // A0E3 003F;	
    // (ꃣ) YI SYLLABLE VIX	[40D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E3, 0x003F };
    uint32_t const ces[9] = { 0x40D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_056)
{
    // A0E3 0061;	
    // (ꃣ) YI SYLLABLE VIX	[40D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E3, 0x0061 };
    uint32_t const ces[9] = { 0x40D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_057)
{
    // A0E3 0041;	
    // (ꃣ) YI SYLLABLE VIX	[40D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E3, 0x0041 };
    uint32_t const ces[9] = { 0x40D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_058)
{
    // A0E3 0062;	
    // (ꃣ) YI SYLLABLE VIX	[40D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E3, 0x0062 };
    uint32_t const ces[9] = { 0x40D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_059)
{
    // A0E4 0021;	
    // (ꃤ) YI SYLLABLE VI	[40D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E4, 0x0021 };
    uint32_t const ces[9] = { 0x40D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_060)
{
    // A0E4 003F;	
    // (ꃤ) YI SYLLABLE VI	[40D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E4, 0x003F };
    uint32_t const ces[9] = { 0x40D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_061)
{
    // A0E4 0061;	
    // (ꃤ) YI SYLLABLE VI	[40D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E4, 0x0061 };
    uint32_t const ces[9] = { 0x40D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_062)
{
    // A0E4 0041;	
    // (ꃤ) YI SYLLABLE VI	[40D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E4, 0x0041 };
    uint32_t const ces[9] = { 0x40D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_063)
{
    // A0E4 0062;	
    // (ꃤ) YI SYLLABLE VI	[40D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E4, 0x0062 };
    uint32_t const ces[9] = { 0x40D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_064)
{
    // A0E5 0021;	
    // (ꃥ) YI SYLLABLE VIP	[40D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E5, 0x0021 };
    uint32_t const ces[9] = { 0x40D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_065)
{
    // A0E5 003F;	
    // (ꃥ) YI SYLLABLE VIP	[40D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E5, 0x003F };
    uint32_t const ces[9] = { 0x40D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_066)
{
    // A0E5 0061;	
    // (ꃥ) YI SYLLABLE VIP	[40D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E5, 0x0061 };
    uint32_t const ces[9] = { 0x40D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_067)
{
    // A0E5 0041;	
    // (ꃥ) YI SYLLABLE VIP	[40D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E5, 0x0041 };
    uint32_t const ces[9] = { 0x40D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_068)
{
    // A0E5 0062;	
    // (ꃥ) YI SYLLABLE VIP	[40D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E5, 0x0062 };
    uint32_t const ces[9] = { 0x40D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_069)
{
    // A0E6 0021;	
    // (ꃦ) YI SYLLABLE VIET	[40D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E6, 0x0021 };
    uint32_t const ces[9] = { 0x40D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_070)
{
    // A0E6 003F;	
    // (ꃦ) YI SYLLABLE VIET	[40D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E6, 0x003F };
    uint32_t const ces[9] = { 0x40D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_071)
{
    // A0E6 0061;	
    // (ꃦ) YI SYLLABLE VIET	[40D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E6, 0x0061 };
    uint32_t const ces[9] = { 0x40D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_072)
{
    // A0E6 0041;	
    // (ꃦ) YI SYLLABLE VIET	[40D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E6, 0x0041 };
    uint32_t const ces[9] = { 0x40D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_073)
{
    // A0E6 0062;	
    // (ꃦ) YI SYLLABLE VIET	[40D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E6, 0x0062 };
    uint32_t const ces[9] = { 0x40D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_074)
{
    // A0E7 0021;	
    // (ꃧ) YI SYLLABLE VIEX	[40DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E7, 0x0021 };
    uint32_t const ces[9] = { 0x40DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_075)
{
    // A0E7 003F;	
    // (ꃧ) YI SYLLABLE VIEX	[40DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E7, 0x003F };
    uint32_t const ces[9] = { 0x40DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_076)
{
    // A0E7 0061;	
    // (ꃧ) YI SYLLABLE VIEX	[40DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E7, 0x0061 };
    uint32_t const ces[9] = { 0x40DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_077)
{
    // A0E7 0041;	
    // (ꃧ) YI SYLLABLE VIEX	[40DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E7, 0x0041 };
    uint32_t const ces[9] = { 0x40DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_078)
{
    // A0E7 0062;	
    // (ꃧ) YI SYLLABLE VIEX	[40DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E7, 0x0062 };
    uint32_t const ces[9] = { 0x40DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_079)
{
    // A0E8 0021;	
    // (ꃨ) YI SYLLABLE VIE	[40DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E8, 0x0021 };
    uint32_t const ces[9] = { 0x40DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_080)
{
    // A0E8 003F;	
    // (ꃨ) YI SYLLABLE VIE	[40DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E8, 0x003F };
    uint32_t const ces[9] = { 0x40DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_081)
{
    // A0E8 0061;	
    // (ꃨ) YI SYLLABLE VIE	[40DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E8, 0x0061 };
    uint32_t const ces[9] = { 0x40DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_082)
{
    // A0E8 0041;	
    // (ꃨ) YI SYLLABLE VIE	[40DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E8, 0x0041 };
    uint32_t const ces[9] = { 0x40DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_083)
{
    // A0E8 0062;	
    // (ꃨ) YI SYLLABLE VIE	[40DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E8, 0x0062 };
    uint32_t const ces[9] = { 0x40DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_084)
{
    // A0E9 0021;	
    // (ꃩ) YI SYLLABLE VIEP	[40DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E9, 0x0021 };
    uint32_t const ces[9] = { 0x40DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_085)
{
    // A0E9 003F;	
    // (ꃩ) YI SYLLABLE VIEP	[40DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E9, 0x003F };
    uint32_t const ces[9] = { 0x40DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_086)
{
    // A0E9 0061;	
    // (ꃩ) YI SYLLABLE VIEP	[40DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E9, 0x0061 };
    uint32_t const ces[9] = { 0x40DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_087)
{
    // A0E9 0041;	
    // (ꃩ) YI SYLLABLE VIEP	[40DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0E9, 0x0041 };
    uint32_t const ces[9] = { 0x40DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_088)
{
    // A0E9 0062;	
    // (ꃩ) YI SYLLABLE VIEP	[40DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0E9, 0x0062 };
    uint32_t const ces[9] = { 0x40DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_089)
{
    // A0EA 0021;	
    // (ꃪ) YI SYLLABLE VAT	[40DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EA, 0x0021 };
    uint32_t const ces[9] = { 0x40DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_090)
{
    // A0EA 003F;	
    // (ꃪ) YI SYLLABLE VAT	[40DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EA, 0x003F };
    uint32_t const ces[9] = { 0x40DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_091)
{
    // A0EA 0061;	
    // (ꃪ) YI SYLLABLE VAT	[40DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EA, 0x0061 };
    uint32_t const ces[9] = { 0x40DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_092)
{
    // A0EA 0041;	
    // (ꃪ) YI SYLLABLE VAT	[40DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0EA, 0x0041 };
    uint32_t const ces[9] = { 0x40DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_093)
{
    // A0EA 0062;	
    // (ꃪ) YI SYLLABLE VAT	[40DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EA, 0x0062 };
    uint32_t const ces[9] = { 0x40DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_094)
{
    // A0EB 0021;	
    // (ꃫ) YI SYLLABLE VAX	[40DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EB, 0x0021 };
    uint32_t const ces[9] = { 0x40DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_095)
{
    // A0EB 003F;	
    // (ꃫ) YI SYLLABLE VAX	[40DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EB, 0x003F };
    uint32_t const ces[9] = { 0x40DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_096)
{
    // A0EB 0061;	
    // (ꃫ) YI SYLLABLE VAX	[40DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EB, 0x0061 };
    uint32_t const ces[9] = { 0x40DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_097)
{
    // A0EB 0041;	
    // (ꃫ) YI SYLLABLE VAX	[40DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0EB, 0x0041 };
    uint32_t const ces[9] = { 0x40DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_098)
{
    // A0EB 0062;	
    // (ꃫ) YI SYLLABLE VAX	[40DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EB, 0x0062 };
    uint32_t const ces[9] = { 0x40DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_099)
{
    // A0EC 0021;	
    // (ꃬ) YI SYLLABLE VA	[40DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EC, 0x0021 };
    uint32_t const ces[9] = { 0x40DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_100)
{
    // A0EC 003F;	
    // (ꃬ) YI SYLLABLE VA	[40DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EC, 0x003F };
    uint32_t const ces[9] = { 0x40DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_101)
{
    // A0EC 0061;	
    // (ꃬ) YI SYLLABLE VA	[40DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EC, 0x0061 };
    uint32_t const ces[9] = { 0x40DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_102)
{
    // A0EC 0041;	
    // (ꃬ) YI SYLLABLE VA	[40DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0EC, 0x0041 };
    uint32_t const ces[9] = { 0x40DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_103)
{
    // A0EC 0062;	
    // (ꃬ) YI SYLLABLE VA	[40DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EC, 0x0062 };
    uint32_t const ces[9] = { 0x40DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_104)
{
    // A0ED 0021;	
    // (ꃭ) YI SYLLABLE VAP	[40E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0ED, 0x0021 };
    uint32_t const ces[9] = { 0x40E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_105)
{
    // A0ED 003F;	
    // (ꃭ) YI SYLLABLE VAP	[40E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0ED, 0x003F };
    uint32_t const ces[9] = { 0x40E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_106)
{
    // A0ED 0061;	
    // (ꃭ) YI SYLLABLE VAP	[40E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0ED, 0x0061 };
    uint32_t const ces[9] = { 0x40E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_107)
{
    // A0ED 0041;	
    // (ꃭ) YI SYLLABLE VAP	[40E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0ED, 0x0041 };
    uint32_t const ces[9] = { 0x40E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_108)
{
    // A0ED 0062;	
    // (ꃭ) YI SYLLABLE VAP	[40E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0ED, 0x0062 };
    uint32_t const ces[9] = { 0x40E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_109)
{
    // A0EE 0021;	
    // (ꃮ) YI SYLLABLE VOT	[40E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EE, 0x0021 };
    uint32_t const ces[9] = { 0x40E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_110)
{
    // A0EE 003F;	
    // (ꃮ) YI SYLLABLE VOT	[40E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EE, 0x003F };
    uint32_t const ces[9] = { 0x40E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_111)
{
    // A0EE 0061;	
    // (ꃮ) YI SYLLABLE VOT	[40E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EE, 0x0061 };
    uint32_t const ces[9] = { 0x40E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_112)
{
    // A0EE 0041;	
    // (ꃮ) YI SYLLABLE VOT	[40E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0EE, 0x0041 };
    uint32_t const ces[9] = { 0x40E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_113)
{
    // A0EE 0062;	
    // (ꃮ) YI SYLLABLE VOT	[40E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EE, 0x0062 };
    uint32_t const ces[9] = { 0x40E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_114)
{
    // A0EF 0021;	
    // (ꃯ) YI SYLLABLE VOX	[40E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EF, 0x0021 };
    uint32_t const ces[9] = { 0x40E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_115)
{
    // A0EF 003F;	
    // (ꃯ) YI SYLLABLE VOX	[40E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EF, 0x003F };
    uint32_t const ces[9] = { 0x40E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_116)
{
    // A0EF 0061;	
    // (ꃯ) YI SYLLABLE VOX	[40E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EF, 0x0061 };
    uint32_t const ces[9] = { 0x40E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_117)
{
    // A0EF 0041;	
    // (ꃯ) YI SYLLABLE VOX	[40E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0EF, 0x0041 };
    uint32_t const ces[9] = { 0x40E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_118)
{
    // A0EF 0062;	
    // (ꃯ) YI SYLLABLE VOX	[40E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0EF, 0x0062 };
    uint32_t const ces[9] = { 0x40E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_119)
{
    // A0F0 0021;	
    // (ꃰ) YI SYLLABLE VO	[40E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F0, 0x0021 };
    uint32_t const ces[9] = { 0x40E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_120)
{
    // A0F0 003F;	
    // (ꃰ) YI SYLLABLE VO	[40E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F0, 0x003F };
    uint32_t const ces[9] = { 0x40E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_121)
{
    // A0F0 0061;	
    // (ꃰ) YI SYLLABLE VO	[40E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F0, 0x0061 };
    uint32_t const ces[9] = { 0x40E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_122)
{
    // A0F0 0041;	
    // (ꃰ) YI SYLLABLE VO	[40E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F0, 0x0041 };
    uint32_t const ces[9] = { 0x40E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_123)
{
    // A0F0 0062;	
    // (ꃰ) YI SYLLABLE VO	[40E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F0, 0x0062 };
    uint32_t const ces[9] = { 0x40E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_124)
{
    // A0F1 0021;	
    // (ꃱ) YI SYLLABLE VOP	[40E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F1, 0x0021 };
    uint32_t const ces[9] = { 0x40E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_125)
{
    // A0F1 003F;	
    // (ꃱ) YI SYLLABLE VOP	[40E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F1, 0x003F };
    uint32_t const ces[9] = { 0x40E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_126)
{
    // A0F1 0061;	
    // (ꃱ) YI SYLLABLE VOP	[40E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F1, 0x0061 };
    uint32_t const ces[9] = { 0x40E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_127)
{
    // A0F1 0041;	
    // (ꃱ) YI SYLLABLE VOP	[40E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F1, 0x0041 };
    uint32_t const ces[9] = { 0x40E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_128)
{
    // A0F1 0062;	
    // (ꃱ) YI SYLLABLE VOP	[40E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F1, 0x0062 };
    uint32_t const ces[9] = { 0x40E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_129)
{
    // A0F2 0021;	
    // (ꃲ) YI SYLLABLE VEX	[40E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F2, 0x0021 };
    uint32_t const ces[9] = { 0x40E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_130)
{
    // A0F2 003F;	
    // (ꃲ) YI SYLLABLE VEX	[40E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F2, 0x003F };
    uint32_t const ces[9] = { 0x40E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_131)
{
    // A0F2 0061;	
    // (ꃲ) YI SYLLABLE VEX	[40E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F2, 0x0061 };
    uint32_t const ces[9] = { 0x40E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_132)
{
    // A0F2 0041;	
    // (ꃲ) YI SYLLABLE VEX	[40E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F2, 0x0041 };
    uint32_t const ces[9] = { 0x40E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_133)
{
    // A0F2 0062;	
    // (ꃲ) YI SYLLABLE VEX	[40E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F2, 0x0062 };
    uint32_t const ces[9] = { 0x40E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_134)
{
    // A0F3 0021;	
    // (ꃳ) YI SYLLABLE VEP	[40E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F3, 0x0021 };
    uint32_t const ces[9] = { 0x40E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_135)
{
    // A0F3 003F;	
    // (ꃳ) YI SYLLABLE VEP	[40E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F3, 0x003F };
    uint32_t const ces[9] = { 0x40E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_136)
{
    // A0F3 0061;	
    // (ꃳ) YI SYLLABLE VEP	[40E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F3, 0x0061 };
    uint32_t const ces[9] = { 0x40E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_137)
{
    // A0F3 0041;	
    // (ꃳ) YI SYLLABLE VEP	[40E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F3, 0x0041 };
    uint32_t const ces[9] = { 0x40E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_138)
{
    // A0F3 0062;	
    // (ꃳ) YI SYLLABLE VEP	[40E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F3, 0x0062 };
    uint32_t const ces[9] = { 0x40E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_139)
{
    // A0F4 0021;	
    // (ꃴ) YI SYLLABLE VUT	[40E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F4, 0x0021 };
    uint32_t const ces[9] = { 0x40E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_140)
{
    // A0F4 003F;	
    // (ꃴ) YI SYLLABLE VUT	[40E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F4, 0x003F };
    uint32_t const ces[9] = { 0x40E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_141)
{
    // A0F4 0061;	
    // (ꃴ) YI SYLLABLE VUT	[40E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F4, 0x0061 };
    uint32_t const ces[9] = { 0x40E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_142)
{
    // A0F4 0041;	
    // (ꃴ) YI SYLLABLE VUT	[40E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F4, 0x0041 };
    uint32_t const ces[9] = { 0x40E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_143)
{
    // A0F4 0062;	
    // (ꃴ) YI SYLLABLE VUT	[40E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F4, 0x0062 };
    uint32_t const ces[9] = { 0x40E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_144)
{
    // A0F5 0021;	
    // (ꃵ) YI SYLLABLE VUX	[40E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F5, 0x0021 };
    uint32_t const ces[9] = { 0x40E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_145)
{
    // A0F5 003F;	
    // (ꃵ) YI SYLLABLE VUX	[40E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F5, 0x003F };
    uint32_t const ces[9] = { 0x40E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_146)
{
    // A0F5 0061;	
    // (ꃵ) YI SYLLABLE VUX	[40E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F5, 0x0061 };
    uint32_t const ces[9] = { 0x40E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_147)
{
    // A0F5 0041;	
    // (ꃵ) YI SYLLABLE VUX	[40E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F5, 0x0041 };
    uint32_t const ces[9] = { 0x40E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_148)
{
    // A0F5 0062;	
    // (ꃵ) YI SYLLABLE VUX	[40E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F5, 0x0062 };
    uint32_t const ces[9] = { 0x40E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_149)
{
    // A0F6 0021;	
    // (ꃶ) YI SYLLABLE VU	[40E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F6, 0x0021 };
    uint32_t const ces[9] = { 0x40E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_150)
{
    // A0F6 003F;	
    // (ꃶ) YI SYLLABLE VU	[40E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F6, 0x003F };
    uint32_t const ces[9] = { 0x40E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_151)
{
    // A0F6 0061;	
    // (ꃶ) YI SYLLABLE VU	[40E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F6, 0x0061 };
    uint32_t const ces[9] = { 0x40E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_152)
{
    // A0F6 0041;	
    // (ꃶ) YI SYLLABLE VU	[40E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F6, 0x0041 };
    uint32_t const ces[9] = { 0x40E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_153)
{
    // A0F6 0062;	
    // (ꃶ) YI SYLLABLE VU	[40E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F6, 0x0062 };
    uint32_t const ces[9] = { 0x40E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_154)
{
    // A0F7 0021;	
    // (ꃷ) YI SYLLABLE VUP	[40EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F7, 0x0021 };
    uint32_t const ces[9] = { 0x40EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_155)
{
    // A0F7 003F;	
    // (ꃷ) YI SYLLABLE VUP	[40EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F7, 0x003F };
    uint32_t const ces[9] = { 0x40EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_156)
{
    // A0F7 0061;	
    // (ꃷ) YI SYLLABLE VUP	[40EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F7, 0x0061 };
    uint32_t const ces[9] = { 0x40EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_157)
{
    // A0F7 0041;	
    // (ꃷ) YI SYLLABLE VUP	[40EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F7, 0x0041 };
    uint32_t const ces[9] = { 0x40EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_158)
{
    // A0F7 0062;	
    // (ꃷ) YI SYLLABLE VUP	[40EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F7, 0x0062 };
    uint32_t const ces[9] = { 0x40EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_159)
{
    // A0F8 0021;	
    // (ꃸ) YI SYLLABLE VURX	[40EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F8, 0x0021 };
    uint32_t const ces[9] = { 0x40EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_160)
{
    // A0F8 003F;	
    // (ꃸ) YI SYLLABLE VURX	[40EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F8, 0x003F };
    uint32_t const ces[9] = { 0x40EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_161)
{
    // A0F8 0061;	
    // (ꃸ) YI SYLLABLE VURX	[40EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F8, 0x0061 };
    uint32_t const ces[9] = { 0x40EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_162)
{
    // A0F8 0041;	
    // (ꃸ) YI SYLLABLE VURX	[40EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F8, 0x0041 };
    uint32_t const ces[9] = { 0x40EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_163)
{
    // A0F8 0062;	
    // (ꃸ) YI SYLLABLE VURX	[40EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F8, 0x0062 };
    uint32_t const ces[9] = { 0x40EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_164)
{
    // A0F9 0021;	
    // (ꃹ) YI SYLLABLE VUR	[40EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F9, 0x0021 };
    uint32_t const ces[9] = { 0x40EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_165)
{
    // A0F9 003F;	
    // (ꃹ) YI SYLLABLE VUR	[40EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F9, 0x003F };
    uint32_t const ces[9] = { 0x40EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_166)
{
    // A0F9 0061;	
    // (ꃹ) YI SYLLABLE VUR	[40EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F9, 0x0061 };
    uint32_t const ces[9] = { 0x40EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_167)
{
    // A0F9 0041;	
    // (ꃹ) YI SYLLABLE VUR	[40EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0F9, 0x0041 };
    uint32_t const ces[9] = { 0x40EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_168)
{
    // A0F9 0062;	
    // (ꃹ) YI SYLLABLE VUR	[40EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0F9, 0x0062 };
    uint32_t const ces[9] = { 0x40EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_169)
{
    // A0FA 0021;	
    // (ꃺ) YI SYLLABLE VYT	[40ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FA, 0x0021 };
    uint32_t const ces[9] = { 0x40ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_170)
{
    // A0FA 003F;	
    // (ꃺ) YI SYLLABLE VYT	[40ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FA, 0x003F };
    uint32_t const ces[9] = { 0x40ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_171)
{
    // A0FA 0061;	
    // (ꃺ) YI SYLLABLE VYT	[40ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FA, 0x0061 };
    uint32_t const ces[9] = { 0x40ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_172)
{
    // A0FA 0041;	
    // (ꃺ) YI SYLLABLE VYT	[40ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0FA, 0x0041 };
    uint32_t const ces[9] = { 0x40ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_173)
{
    // A0FA 0062;	
    // (ꃺ) YI SYLLABLE VYT	[40ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FA, 0x0062 };
    uint32_t const ces[9] = { 0x40ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_174)
{
    // A0FB 0021;	
    // (ꃻ) YI SYLLABLE VYX	[40EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FB, 0x0021 };
    uint32_t const ces[9] = { 0x40EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_175)
{
    // A0FB 003F;	
    // (ꃻ) YI SYLLABLE VYX	[40EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FB, 0x003F };
    uint32_t const ces[9] = { 0x40EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_176)
{
    // A0FB 0061;	
    // (ꃻ) YI SYLLABLE VYX	[40EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FB, 0x0061 };
    uint32_t const ces[9] = { 0x40EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_177)
{
    // A0FB 0041;	
    // (ꃻ) YI SYLLABLE VYX	[40EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0FB, 0x0041 };
    uint32_t const ces[9] = { 0x40EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_178)
{
    // A0FB 0062;	
    // (ꃻ) YI SYLLABLE VYX	[40EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FB, 0x0062 };
    uint32_t const ces[9] = { 0x40EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_179)
{
    // A0FC 0021;	
    // (ꃼ) YI SYLLABLE VY	[40EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FC, 0x0021 };
    uint32_t const ces[9] = { 0x40EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_180)
{
    // A0FC 003F;	
    // (ꃼ) YI SYLLABLE VY	[40EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FC, 0x003F };
    uint32_t const ces[9] = { 0x40EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_181)
{
    // A0FC 0061;	
    // (ꃼ) YI SYLLABLE VY	[40EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FC, 0x0061 };
    uint32_t const ces[9] = { 0x40EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_182)
{
    // A0FC 0041;	
    // (ꃼ) YI SYLLABLE VY	[40EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0FC, 0x0041 };
    uint32_t const ces[9] = { 0x40EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_183)
{
    // A0FC 0062;	
    // (ꃼ) YI SYLLABLE VY	[40EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FC, 0x0062 };
    uint32_t const ces[9] = { 0x40EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_184)
{
    // A0FD 0021;	
    // (ꃽ) YI SYLLABLE VYP	[40F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FD, 0x0021 };
    uint32_t const ces[9] = { 0x40F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_185)
{
    // A0FD 003F;	
    // (ꃽ) YI SYLLABLE VYP	[40F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FD, 0x003F };
    uint32_t const ces[9] = { 0x40F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_186)
{
    // A0FD 0061;	
    // (ꃽ) YI SYLLABLE VYP	[40F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FD, 0x0061 };
    uint32_t const ces[9] = { 0x40F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_187)
{
    // A0FD 0041;	
    // (ꃽ) YI SYLLABLE VYP	[40F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0FD, 0x0041 };
    uint32_t const ces[9] = { 0x40F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_188)
{
    // A0FD 0062;	
    // (ꃽ) YI SYLLABLE VYP	[40F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FD, 0x0062 };
    uint32_t const ces[9] = { 0x40F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_189)
{
    // A0FE 0021;	
    // (ꃾ) YI SYLLABLE VYRX	[40F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FE, 0x0021 };
    uint32_t const ces[9] = { 0x40F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_190)
{
    // A0FE 003F;	
    // (ꃾ) YI SYLLABLE VYRX	[40F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FE, 0x003F };
    uint32_t const ces[9] = { 0x40F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_191)
{
    // A0FE 0061;	
    // (ꃾ) YI SYLLABLE VYRX	[40F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FE, 0x0061 };
    uint32_t const ces[9] = { 0x40F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_192)
{
    // A0FE 0041;	
    // (ꃾ) YI SYLLABLE VYRX	[40F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0FE, 0x0041 };
    uint32_t const ces[9] = { 0x40F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_193)
{
    // A0FE 0062;	
    // (ꃾ) YI SYLLABLE VYRX	[40F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FE, 0x0062 };
    uint32_t const ces[9] = { 0x40F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_194)
{
    // A0FF 0021;	
    // (ꃿ) YI SYLLABLE VYR	[40F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FF, 0x0021 };
    uint32_t const ces[9] = { 0x40F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_195)
{
    // A0FF 003F;	
    // (ꃿ) YI SYLLABLE VYR	[40F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FF, 0x003F };
    uint32_t const ces[9] = { 0x40F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_196)
{
    // A0FF 0061;	
    // (ꃿ) YI SYLLABLE VYR	[40F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FF, 0x0061 };
    uint32_t const ces[9] = { 0x40F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_197)
{
    // A0FF 0041;	
    // (ꃿ) YI SYLLABLE VYR	[40F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA0FF, 0x0041 };
    uint32_t const ces[9] = { 0x40F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_198)
{
    // A0FF 0062;	
    // (ꃿ) YI SYLLABLE VYR	[40F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA0FF, 0x0062 };
    uint32_t const ces[9] = { 0x40F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_199)
{
    // A100 0021;	
    // (ꄀ) YI SYLLABLE DIT	[40F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA100, 0x0021 };
    uint32_t const ces[9] = { 0x40F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_200)
{
    // A100 003F;	
    // (ꄀ) YI SYLLABLE DIT	[40F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA100, 0x003F };
    uint32_t const ces[9] = { 0x40F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_201)
{
    // A100 0061;	
    // (ꄀ) YI SYLLABLE DIT	[40F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA100, 0x0061 };
    uint32_t const ces[9] = { 0x40F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_202)
{
    // A100 0041;	
    // (ꄀ) YI SYLLABLE DIT	[40F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA100, 0x0041 };
    uint32_t const ces[9] = { 0x40F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_203)
{
    // A100 0062;	
    // (ꄀ) YI SYLLABLE DIT	[40F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA100, 0x0062 };
    uint32_t const ces[9] = { 0x40F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_204)
{
    // A101 0021;	
    // (ꄁ) YI SYLLABLE DIX	[40F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA101, 0x0021 };
    uint32_t const ces[9] = { 0x40F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_205)
{
    // A101 003F;	
    // (ꄁ) YI SYLLABLE DIX	[40F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA101, 0x003F };
    uint32_t const ces[9] = { 0x40F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_206)
{
    // A101 0061;	
    // (ꄁ) YI SYLLABLE DIX	[40F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA101, 0x0061 };
    uint32_t const ces[9] = { 0x40F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_207)
{
    // A101 0041;	
    // (ꄁ) YI SYLLABLE DIX	[40F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA101, 0x0041 };
    uint32_t const ces[9] = { 0x40F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_208)
{
    // A101 0062;	
    // (ꄁ) YI SYLLABLE DIX	[40F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA101, 0x0062 };
    uint32_t const ces[9] = { 0x40F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_209)
{
    // A102 0021;	
    // (ꄂ) YI SYLLABLE DI	[40F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA102, 0x0021 };
    uint32_t const ces[9] = { 0x40F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_210)
{
    // A102 003F;	
    // (ꄂ) YI SYLLABLE DI	[40F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA102, 0x003F };
    uint32_t const ces[9] = { 0x40F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_211)
{
    // A102 0061;	
    // (ꄂ) YI SYLLABLE DI	[40F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA102, 0x0061 };
    uint32_t const ces[9] = { 0x40F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_212)
{
    // A102 0041;	
    // (ꄂ) YI SYLLABLE DI	[40F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA102, 0x0041 };
    uint32_t const ces[9] = { 0x40F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_213)
{
    // A102 0062;	
    // (ꄂ) YI SYLLABLE DI	[40F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA102, 0x0062 };
    uint32_t const ces[9] = { 0x40F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_214)
{
    // A103 0021;	
    // (ꄃ) YI SYLLABLE DIP	[40F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA103, 0x0021 };
    uint32_t const ces[9] = { 0x40F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_215)
{
    // A103 003F;	
    // (ꄃ) YI SYLLABLE DIP	[40F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA103, 0x003F };
    uint32_t const ces[9] = { 0x40F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_216)
{
    // A103 0061;	
    // (ꄃ) YI SYLLABLE DIP	[40F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA103, 0x0061 };
    uint32_t const ces[9] = { 0x40F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_217)
{
    // A103 0041;	
    // (ꄃ) YI SYLLABLE DIP	[40F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA103, 0x0041 };
    uint32_t const ces[9] = { 0x40F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_218)
{
    // A103 0062;	
    // (ꄃ) YI SYLLABLE DIP	[40F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA103, 0x0062 };
    uint32_t const ces[9] = { 0x40F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_219)
{
    // A104 0021;	
    // (ꄄ) YI SYLLABLE DIEX	[40F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA104, 0x0021 };
    uint32_t const ces[9] = { 0x40F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_220)
{
    // A104 003F;	
    // (ꄄ) YI SYLLABLE DIEX	[40F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA104, 0x003F };
    uint32_t const ces[9] = { 0x40F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_221)
{
    // A104 0061;	
    // (ꄄ) YI SYLLABLE DIEX	[40F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA104, 0x0061 };
    uint32_t const ces[9] = { 0x40F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_222)
{
    // A104 0041;	
    // (ꄄ) YI SYLLABLE DIEX	[40F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA104, 0x0041 };
    uint32_t const ces[9] = { 0x40F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_223)
{
    // A104 0062;	
    // (ꄄ) YI SYLLABLE DIEX	[40F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA104, 0x0062 };
    uint32_t const ces[9] = { 0x40F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_224)
{
    // A105 0021;	
    // (ꄅ) YI SYLLABLE DIE	[40F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA105, 0x0021 };
    uint32_t const ces[9] = { 0x40F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_225)
{
    // A105 003F;	
    // (ꄅ) YI SYLLABLE DIE	[40F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA105, 0x003F };
    uint32_t const ces[9] = { 0x40F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_226)
{
    // A105 0061;	
    // (ꄅ) YI SYLLABLE DIE	[40F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA105, 0x0061 };
    uint32_t const ces[9] = { 0x40F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_227)
{
    // A105 0041;	
    // (ꄅ) YI SYLLABLE DIE	[40F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA105, 0x0041 };
    uint32_t const ces[9] = { 0x40F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_228)
{
    // A105 0062;	
    // (ꄅ) YI SYLLABLE DIE	[40F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA105, 0x0062 };
    uint32_t const ces[9] = { 0x40F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_229)
{
    // A106 0021;	
    // (ꄆ) YI SYLLABLE DIEP	[40F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA106, 0x0021 };
    uint32_t const ces[9] = { 0x40F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_230)
{
    // A106 003F;	
    // (ꄆ) YI SYLLABLE DIEP	[40F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA106, 0x003F };
    uint32_t const ces[9] = { 0x40F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_231)
{
    // A106 0061;	
    // (ꄆ) YI SYLLABLE DIEP	[40F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA106, 0x0061 };
    uint32_t const ces[9] = { 0x40F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_232)
{
    // A106 0041;	
    // (ꄆ) YI SYLLABLE DIEP	[40F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA106, 0x0041 };
    uint32_t const ces[9] = { 0x40F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_233)
{
    // A106 0062;	
    // (ꄆ) YI SYLLABLE DIEP	[40F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA106, 0x0062 };
    uint32_t const ces[9] = { 0x40F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_234)
{
    // A107 0021;	
    // (ꄇ) YI SYLLABLE DAT	[40FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA107, 0x0021 };
    uint32_t const ces[9] = { 0x40FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_235)
{
    // A107 003F;	
    // (ꄇ) YI SYLLABLE DAT	[40FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA107, 0x003F };
    uint32_t const ces[9] = { 0x40FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_236)
{
    // A107 0061;	
    // (ꄇ) YI SYLLABLE DAT	[40FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA107, 0x0061 };
    uint32_t const ces[9] = { 0x40FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_237)
{
    // A107 0041;	
    // (ꄇ) YI SYLLABLE DAT	[40FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA107, 0x0041 };
    uint32_t const ces[9] = { 0x40FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_238)
{
    // A107 0062;	
    // (ꄇ) YI SYLLABLE DAT	[40FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA107, 0x0062 };
    uint32_t const ces[9] = { 0x40FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_239)
{
    // A108 0021;	
    // (ꄈ) YI SYLLABLE DAX	[40FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA108, 0x0021 };
    uint32_t const ces[9] = { 0x40FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_240)
{
    // A108 003F;	
    // (ꄈ) YI SYLLABLE DAX	[40FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA108, 0x003F };
    uint32_t const ces[9] = { 0x40FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_241)
{
    // A108 0061;	
    // (ꄈ) YI SYLLABLE DAX	[40FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA108, 0x0061 };
    uint32_t const ces[9] = { 0x40FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_242)
{
    // A108 0041;	
    // (ꄈ) YI SYLLABLE DAX	[40FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA108, 0x0041 };
    uint32_t const ces[9] = { 0x40FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_243)
{
    // A108 0062;	
    // (ꄈ) YI SYLLABLE DAX	[40FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA108, 0x0062 };
    uint32_t const ces[9] = { 0x40FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_244)
{
    // A109 0021;	
    // (ꄉ) YI SYLLABLE DA	[40FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA109, 0x0021 };
    uint32_t const ces[9] = { 0x40FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_245)
{
    // A109 003F;	
    // (ꄉ) YI SYLLABLE DA	[40FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA109, 0x003F };
    uint32_t const ces[9] = { 0x40FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_246)
{
    // A109 0061;	
    // (ꄉ) YI SYLLABLE DA	[40FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA109, 0x0061 };
    uint32_t const ces[9] = { 0x40FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_247)
{
    // A109 0041;	
    // (ꄉ) YI SYLLABLE DA	[40FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA109, 0x0041 };
    uint32_t const ces[9] = { 0x40FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_248)
{
    // A109 0062;	
    // (ꄉ) YI SYLLABLE DA	[40FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA109, 0x0062 };
    uint32_t const ces[9] = { 0x40FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_249)
{
    // A10A 0021;	
    // (ꄊ) YI SYLLABLE DAP	[40FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10A, 0x0021 };
    uint32_t const ces[9] = { 0x40FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_250)
{
    // A10A 003F;	
    // (ꄊ) YI SYLLABLE DAP	[40FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10A, 0x003F };
    uint32_t const ces[9] = { 0x40FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_251)
{
    // A10A 0061;	
    // (ꄊ) YI SYLLABLE DAP	[40FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10A, 0x0061 };
    uint32_t const ces[9] = { 0x40FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_252)
{
    // A10A 0041;	
    // (ꄊ) YI SYLLABLE DAP	[40FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA10A, 0x0041 };
    uint32_t const ces[9] = { 0x40FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_253)
{
    // A10A 0062;	
    // (ꄊ) YI SYLLABLE DAP	[40FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10A, 0x0062 };
    uint32_t const ces[9] = { 0x40FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_254)
{
    // A10B 0021;	
    // (ꄋ) YI SYLLABLE DUOX	[40FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10B, 0x0021 };
    uint32_t const ces[9] = { 0x40FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_255)
{
    // A10B 003F;	
    // (ꄋ) YI SYLLABLE DUOX	[40FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10B, 0x003F };
    uint32_t const ces[9] = { 0x40FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_256)
{
    // A10B 0061;	
    // (ꄋ) YI SYLLABLE DUOX	[40FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10B, 0x0061 };
    uint32_t const ces[9] = { 0x40FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_257)
{
    // A10B 0041;	
    // (ꄋ) YI SYLLABLE DUOX	[40FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA10B, 0x0041 };
    uint32_t const ces[9] = { 0x40FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_258)
{
    // A10B 0062;	
    // (ꄋ) YI SYLLABLE DUOX	[40FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10B, 0x0062 };
    uint32_t const ces[9] = { 0x40FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_259)
{
    // A10C 0021;	
    // (ꄌ) YI SYLLABLE DUO	[40FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10C, 0x0021 };
    uint32_t const ces[9] = { 0x40FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_260)
{
    // A10C 003F;	
    // (ꄌ) YI SYLLABLE DUO	[40FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10C, 0x003F };
    uint32_t const ces[9] = { 0x40FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_261)
{
    // A10C 0061;	
    // (ꄌ) YI SYLLABLE DUO	[40FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10C, 0x0061 };
    uint32_t const ces[9] = { 0x40FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_262)
{
    // A10C 0041;	
    // (ꄌ) YI SYLLABLE DUO	[40FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA10C, 0x0041 };
    uint32_t const ces[9] = { 0x40FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_263)
{
    // A10C 0062;	
    // (ꄌ) YI SYLLABLE DUO	[40FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10C, 0x0062 };
    uint32_t const ces[9] = { 0x40FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_264)
{
    // A10D 0021;	
    // (ꄍ) YI SYLLABLE DOT	[4100 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10D, 0x0021 };
    uint32_t const ces[9] = { 0x4100, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_265)
{
    // A10D 003F;	
    // (ꄍ) YI SYLLABLE DOT	[4100 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10D, 0x003F };
    uint32_t const ces[9] = { 0x4100, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_266)
{
    // A10D 0061;	
    // (ꄍ) YI SYLLABLE DOT	[4100 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10D, 0x0061 };
    uint32_t const ces[9] = { 0x4100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_267)
{
    // A10D 0041;	
    // (ꄍ) YI SYLLABLE DOT	[4100 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA10D, 0x0041 };
    uint32_t const ces[9] = { 0x4100, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_268)
{
    // A10D 0062;	
    // (ꄍ) YI SYLLABLE DOT	[4100 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10D, 0x0062 };
    uint32_t const ces[9] = { 0x4100, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_269)
{
    // A10E 0021;	
    // (ꄎ) YI SYLLABLE DOX	[4101 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10E, 0x0021 };
    uint32_t const ces[9] = { 0x4101, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_270)
{
    // A10E 003F;	
    // (ꄎ) YI SYLLABLE DOX	[4101 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10E, 0x003F };
    uint32_t const ces[9] = { 0x4101, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_271)
{
    // A10E 0061;	
    // (ꄎ) YI SYLLABLE DOX	[4101 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10E, 0x0061 };
    uint32_t const ces[9] = { 0x4101, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_272)
{
    // A10E 0041;	
    // (ꄎ) YI SYLLABLE DOX	[4101 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA10E, 0x0041 };
    uint32_t const ces[9] = { 0x4101, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_273)
{
    // A10E 0062;	
    // (ꄎ) YI SYLLABLE DOX	[4101 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10E, 0x0062 };
    uint32_t const ces[9] = { 0x4101, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_274)
{
    // A10F 0021;	
    // (ꄏ) YI SYLLABLE DO	[4102 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10F, 0x0021 };
    uint32_t const ces[9] = { 0x4102, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_275)
{
    // A10F 003F;	
    // (ꄏ) YI SYLLABLE DO	[4102 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10F, 0x003F };
    uint32_t const ces[9] = { 0x4102, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_276)
{
    // A10F 0061;	
    // (ꄏ) YI SYLLABLE DO	[4102 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10F, 0x0061 };
    uint32_t const ces[9] = { 0x4102, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_277)
{
    // A10F 0041;	
    // (ꄏ) YI SYLLABLE DO	[4102 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA10F, 0x0041 };
    uint32_t const ces[9] = { 0x4102, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_278)
{
    // A10F 0062;	
    // (ꄏ) YI SYLLABLE DO	[4102 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA10F, 0x0062 };
    uint32_t const ces[9] = { 0x4102, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_279)
{
    // A110 0021;	
    // (ꄐ) YI SYLLABLE DOP	[4103 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA110, 0x0021 };
    uint32_t const ces[9] = { 0x4103, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_280)
{
    // A110 003F;	
    // (ꄐ) YI SYLLABLE DOP	[4103 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA110, 0x003F };
    uint32_t const ces[9] = { 0x4103, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_281)
{
    // A110 0061;	
    // (ꄐ) YI SYLLABLE DOP	[4103 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA110, 0x0061 };
    uint32_t const ces[9] = { 0x4103, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_282)
{
    // A110 0041;	
    // (ꄐ) YI SYLLABLE DOP	[4103 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA110, 0x0041 };
    uint32_t const ces[9] = { 0x4103, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_283)
{
    // A110 0062;	
    // (ꄐ) YI SYLLABLE DOP	[4103 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA110, 0x0062 };
    uint32_t const ces[9] = { 0x4103, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_284)
{
    // A111 0021;	
    // (ꄑ) YI SYLLABLE DEX	[4104 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA111, 0x0021 };
    uint32_t const ces[9] = { 0x4104, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_285)
{
    // A111 003F;	
    // (ꄑ) YI SYLLABLE DEX	[4104 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA111, 0x003F };
    uint32_t const ces[9] = { 0x4104, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_286)
{
    // A111 0061;	
    // (ꄑ) YI SYLLABLE DEX	[4104 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA111, 0x0061 };
    uint32_t const ces[9] = { 0x4104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_287)
{
    // A111 0041;	
    // (ꄑ) YI SYLLABLE DEX	[4104 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA111, 0x0041 };
    uint32_t const ces[9] = { 0x4104, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_288)
{
    // A111 0062;	
    // (ꄑ) YI SYLLABLE DEX	[4104 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA111, 0x0062 };
    uint32_t const ces[9] = { 0x4104, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_289)
{
    // A112 0021;	
    // (ꄒ) YI SYLLABLE DE	[4105 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA112, 0x0021 };
    uint32_t const ces[9] = { 0x4105, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_290)
{
    // A112 003F;	
    // (ꄒ) YI SYLLABLE DE	[4105 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA112, 0x003F };
    uint32_t const ces[9] = { 0x4105, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_291)
{
    // A112 0061;	
    // (ꄒ) YI SYLLABLE DE	[4105 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA112, 0x0061 };
    uint32_t const ces[9] = { 0x4105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_292)
{
    // A112 0041;	
    // (ꄒ) YI SYLLABLE DE	[4105 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA112, 0x0041 };
    uint32_t const ces[9] = { 0x4105, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_293)
{
    // A112 0062;	
    // (ꄒ) YI SYLLABLE DE	[4105 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA112, 0x0062 };
    uint32_t const ces[9] = { 0x4105, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_294)
{
    // A113 0021;	
    // (ꄓ) YI SYLLABLE DEP	[4106 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA113, 0x0021 };
    uint32_t const ces[9] = { 0x4106, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_295)
{
    // A113 003F;	
    // (ꄓ) YI SYLLABLE DEP	[4106 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA113, 0x003F };
    uint32_t const ces[9] = { 0x4106, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_296)
{
    // A113 0061;	
    // (ꄓ) YI SYLLABLE DEP	[4106 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA113, 0x0061 };
    uint32_t const ces[9] = { 0x4106, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_297)
{
    // A113 0041;	
    // (ꄓ) YI SYLLABLE DEP	[4106 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA113, 0x0041 };
    uint32_t const ces[9] = { 0x4106, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_298)
{
    // A113 0062;	
    // (ꄓ) YI SYLLABLE DEP	[4106 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA113, 0x0062 };
    uint32_t const ces[9] = { 0x4106, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_299)
{
    // A114 0021;	
    // (ꄔ) YI SYLLABLE DUT	[4107 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA114, 0x0021 };
    uint32_t const ces[9] = { 0x4107, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_300)
{
    // A114 003F;	
    // (ꄔ) YI SYLLABLE DUT	[4107 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA114, 0x003F };
    uint32_t const ces[9] = { 0x4107, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_301)
{
    // A114 0061;	
    // (ꄔ) YI SYLLABLE DUT	[4107 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA114, 0x0061 };
    uint32_t const ces[9] = { 0x4107, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_302)
{
    // A114 0041;	
    // (ꄔ) YI SYLLABLE DUT	[4107 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA114, 0x0041 };
    uint32_t const ces[9] = { 0x4107, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_303)
{
    // A114 0062;	
    // (ꄔ) YI SYLLABLE DUT	[4107 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA114, 0x0062 };
    uint32_t const ces[9] = { 0x4107, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_304)
{
    // A115 0021;	
    // (ꄕ) YI SYLLABLE DUX	[4108 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA115, 0x0021 };
    uint32_t const ces[9] = { 0x4108, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_305)
{
    // A115 003F;	
    // (ꄕ) YI SYLLABLE DUX	[4108 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA115, 0x003F };
    uint32_t const ces[9] = { 0x4108, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_306)
{
    // A115 0061;	
    // (ꄕ) YI SYLLABLE DUX	[4108 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA115, 0x0061 };
    uint32_t const ces[9] = { 0x4108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_307)
{
    // A115 0041;	
    // (ꄕ) YI SYLLABLE DUX	[4108 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA115, 0x0041 };
    uint32_t const ces[9] = { 0x4108, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_308)
{
    // A115 0062;	
    // (ꄕ) YI SYLLABLE DUX	[4108 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA115, 0x0062 };
    uint32_t const ces[9] = { 0x4108, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_309)
{
    // A116 0021;	
    // (ꄖ) YI SYLLABLE DU	[4109 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA116, 0x0021 };
    uint32_t const ces[9] = { 0x4109, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_310)
{
    // A116 003F;	
    // (ꄖ) YI SYLLABLE DU	[4109 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA116, 0x003F };
    uint32_t const ces[9] = { 0x4109, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_311)
{
    // A116 0061;	
    // (ꄖ) YI SYLLABLE DU	[4109 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA116, 0x0061 };
    uint32_t const ces[9] = { 0x4109, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_312)
{
    // A116 0041;	
    // (ꄖ) YI SYLLABLE DU	[4109 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA116, 0x0041 };
    uint32_t const ces[9] = { 0x4109, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_313)
{
    // A116 0062;	
    // (ꄖ) YI SYLLABLE DU	[4109 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA116, 0x0062 };
    uint32_t const ces[9] = { 0x4109, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_314)
{
    // A117 0021;	
    // (ꄗ) YI SYLLABLE DUP	[410A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA117, 0x0021 };
    uint32_t const ces[9] = { 0x410A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_315)
{
    // A117 003F;	
    // (ꄗ) YI SYLLABLE DUP	[410A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA117, 0x003F };
    uint32_t const ces[9] = { 0x410A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_316)
{
    // A117 0061;	
    // (ꄗ) YI SYLLABLE DUP	[410A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA117, 0x0061 };
    uint32_t const ces[9] = { 0x410A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_317)
{
    // A117 0041;	
    // (ꄗ) YI SYLLABLE DUP	[410A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA117, 0x0041 };
    uint32_t const ces[9] = { 0x410A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_318)
{
    // A117 0062;	
    // (ꄗ) YI SYLLABLE DUP	[410A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA117, 0x0062 };
    uint32_t const ces[9] = { 0x410A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_319)
{
    // A118 0021;	
    // (ꄘ) YI SYLLABLE DURX	[410B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA118, 0x0021 };
    uint32_t const ces[9] = { 0x410B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_320)
{
    // A118 003F;	
    // (ꄘ) YI SYLLABLE DURX	[410B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA118, 0x003F };
    uint32_t const ces[9] = { 0x410B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_321)
{
    // A118 0061;	
    // (ꄘ) YI SYLLABLE DURX	[410B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA118, 0x0061 };
    uint32_t const ces[9] = { 0x410B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_322)
{
    // A118 0041;	
    // (ꄘ) YI SYLLABLE DURX	[410B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA118, 0x0041 };
    uint32_t const ces[9] = { 0x410B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_323)
{
    // A118 0062;	
    // (ꄘ) YI SYLLABLE DURX	[410B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA118, 0x0062 };
    uint32_t const ces[9] = { 0x410B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_324)
{
    // A119 0021;	
    // (ꄙ) YI SYLLABLE DUR	[410C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA119, 0x0021 };
    uint32_t const ces[9] = { 0x410C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_325)
{
    // A119 003F;	
    // (ꄙ) YI SYLLABLE DUR	[410C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA119, 0x003F };
    uint32_t const ces[9] = { 0x410C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_326)
{
    // A119 0061;	
    // (ꄙ) YI SYLLABLE DUR	[410C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA119, 0x0061 };
    uint32_t const ces[9] = { 0x410C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_327)
{
    // A119 0041;	
    // (ꄙ) YI SYLLABLE DUR	[410C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA119, 0x0041 };
    uint32_t const ces[9] = { 0x410C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_328)
{
    // A119 0062;	
    // (ꄙ) YI SYLLABLE DUR	[410C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA119, 0x0062 };
    uint32_t const ces[9] = { 0x410C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_329)
{
    // A11A 0021;	
    // (ꄚ) YI SYLLABLE TIT	[410D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11A, 0x0021 };
    uint32_t const ces[9] = { 0x410D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_330)
{
    // A11A 003F;	
    // (ꄚ) YI SYLLABLE TIT	[410D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11A, 0x003F };
    uint32_t const ces[9] = { 0x410D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_331)
{
    // A11A 0061;	
    // (ꄚ) YI SYLLABLE TIT	[410D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11A, 0x0061 };
    uint32_t const ces[9] = { 0x410D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_332)
{
    // A11A 0041;	
    // (ꄚ) YI SYLLABLE TIT	[410D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA11A, 0x0041 };
    uint32_t const ces[9] = { 0x410D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_333)
{
    // A11A 0062;	
    // (ꄚ) YI SYLLABLE TIT	[410D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11A, 0x0062 };
    uint32_t const ces[9] = { 0x410D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_334)
{
    // A11B 0021;	
    // (ꄛ) YI SYLLABLE TIX	[410E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11B, 0x0021 };
    uint32_t const ces[9] = { 0x410E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_335)
{
    // A11B 003F;	
    // (ꄛ) YI SYLLABLE TIX	[410E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11B, 0x003F };
    uint32_t const ces[9] = { 0x410E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_336)
{
    // A11B 0061;	
    // (ꄛ) YI SYLLABLE TIX	[410E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11B, 0x0061 };
    uint32_t const ces[9] = { 0x410E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_337)
{
    // A11B 0041;	
    // (ꄛ) YI SYLLABLE TIX	[410E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA11B, 0x0041 };
    uint32_t const ces[9] = { 0x410E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_338)
{
    // A11B 0062;	
    // (ꄛ) YI SYLLABLE TIX	[410E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11B, 0x0062 };
    uint32_t const ces[9] = { 0x410E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_339)
{
    // A11C 0021;	
    // (ꄜ) YI SYLLABLE TI	[410F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11C, 0x0021 };
    uint32_t const ces[9] = { 0x410F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_340)
{
    // A11C 003F;	
    // (ꄜ) YI SYLLABLE TI	[410F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11C, 0x003F };
    uint32_t const ces[9] = { 0x410F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_341)
{
    // A11C 0061;	
    // (ꄜ) YI SYLLABLE TI	[410F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11C, 0x0061 };
    uint32_t const ces[9] = { 0x410F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_342)
{
    // A11C 0041;	
    // (ꄜ) YI SYLLABLE TI	[410F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA11C, 0x0041 };
    uint32_t const ces[9] = { 0x410F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_343)
{
    // A11C 0062;	
    // (ꄜ) YI SYLLABLE TI	[410F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11C, 0x0062 };
    uint32_t const ces[9] = { 0x410F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_344)
{
    // A11D 0021;	
    // (ꄝ) YI SYLLABLE TIP	[4110 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11D, 0x0021 };
    uint32_t const ces[9] = { 0x4110, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_345)
{
    // A11D 003F;	
    // (ꄝ) YI SYLLABLE TIP	[4110 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11D, 0x003F };
    uint32_t const ces[9] = { 0x4110, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_346)
{
    // A11D 0061;	
    // (ꄝ) YI SYLLABLE TIP	[4110 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11D, 0x0061 };
    uint32_t const ces[9] = { 0x4110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_347)
{
    // A11D 0041;	
    // (ꄝ) YI SYLLABLE TIP	[4110 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA11D, 0x0041 };
    uint32_t const ces[9] = { 0x4110, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_348)
{
    // A11D 0062;	
    // (ꄝ) YI SYLLABLE TIP	[4110 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11D, 0x0062 };
    uint32_t const ces[9] = { 0x4110, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_349)
{
    // A11E 0021;	
    // (ꄞ) YI SYLLABLE TIEX	[4111 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11E, 0x0021 };
    uint32_t const ces[9] = { 0x4111, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_350)
{
    // A11E 003F;	
    // (ꄞ) YI SYLLABLE TIEX	[4111 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11E, 0x003F };
    uint32_t const ces[9] = { 0x4111, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_351)
{
    // A11E 0061;	
    // (ꄞ) YI SYLLABLE TIEX	[4111 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11E, 0x0061 };
    uint32_t const ces[9] = { 0x4111, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_352)
{
    // A11E 0041;	
    // (ꄞ) YI SYLLABLE TIEX	[4111 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA11E, 0x0041 };
    uint32_t const ces[9] = { 0x4111, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_353)
{
    // A11E 0062;	
    // (ꄞ) YI SYLLABLE TIEX	[4111 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11E, 0x0062 };
    uint32_t const ces[9] = { 0x4111, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_354)
{
    // A11F 0021;	
    // (ꄟ) YI SYLLABLE TIE	[4112 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11F, 0x0021 };
    uint32_t const ces[9] = { 0x4112, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_355)
{
    // A11F 003F;	
    // (ꄟ) YI SYLLABLE TIE	[4112 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11F, 0x003F };
    uint32_t const ces[9] = { 0x4112, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_356)
{
    // A11F 0061;	
    // (ꄟ) YI SYLLABLE TIE	[4112 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11F, 0x0061 };
    uint32_t const ces[9] = { 0x4112, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_357)
{
    // A11F 0041;	
    // (ꄟ) YI SYLLABLE TIE	[4112 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA11F, 0x0041 };
    uint32_t const ces[9] = { 0x4112, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_358)
{
    // A11F 0062;	
    // (ꄟ) YI SYLLABLE TIE	[4112 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA11F, 0x0062 };
    uint32_t const ces[9] = { 0x4112, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_359)
{
    // A120 0021;	
    // (ꄠ) YI SYLLABLE TIEP	[4113 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA120, 0x0021 };
    uint32_t const ces[9] = { 0x4113, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_360)
{
    // A120 003F;	
    // (ꄠ) YI SYLLABLE TIEP	[4113 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA120, 0x003F };
    uint32_t const ces[9] = { 0x4113, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_361)
{
    // A120 0061;	
    // (ꄠ) YI SYLLABLE TIEP	[4113 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA120, 0x0061 };
    uint32_t const ces[9] = { 0x4113, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_362)
{
    // A120 0041;	
    // (ꄠ) YI SYLLABLE TIEP	[4113 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA120, 0x0041 };
    uint32_t const ces[9] = { 0x4113, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_363)
{
    // A120 0062;	
    // (ꄠ) YI SYLLABLE TIEP	[4113 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA120, 0x0062 };
    uint32_t const ces[9] = { 0x4113, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_364)
{
    // A121 0021;	
    // (ꄡ) YI SYLLABLE TAT	[4114 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA121, 0x0021 };
    uint32_t const ces[9] = { 0x4114, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_365)
{
    // A121 003F;	
    // (ꄡ) YI SYLLABLE TAT	[4114 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA121, 0x003F };
    uint32_t const ces[9] = { 0x4114, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_366)
{
    // A121 0061;	
    // (ꄡ) YI SYLLABLE TAT	[4114 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA121, 0x0061 };
    uint32_t const ces[9] = { 0x4114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_367)
{
    // A121 0041;	
    // (ꄡ) YI SYLLABLE TAT	[4114 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA121, 0x0041 };
    uint32_t const ces[9] = { 0x4114, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_368)
{
    // A121 0062;	
    // (ꄡ) YI SYLLABLE TAT	[4114 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA121, 0x0062 };
    uint32_t const ces[9] = { 0x4114, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_369)
{
    // A122 0021;	
    // (ꄢ) YI SYLLABLE TAX	[4115 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA122, 0x0021 };
    uint32_t const ces[9] = { 0x4115, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_370)
{
    // A122 003F;	
    // (ꄢ) YI SYLLABLE TAX	[4115 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA122, 0x003F };
    uint32_t const ces[9] = { 0x4115, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_371)
{
    // A122 0061;	
    // (ꄢ) YI SYLLABLE TAX	[4115 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA122, 0x0061 };
    uint32_t const ces[9] = { 0x4115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_372)
{
    // A122 0041;	
    // (ꄢ) YI SYLLABLE TAX	[4115 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA122, 0x0041 };
    uint32_t const ces[9] = { 0x4115, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_373)
{
    // A122 0062;	
    // (ꄢ) YI SYLLABLE TAX	[4115 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA122, 0x0062 };
    uint32_t const ces[9] = { 0x4115, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_374)
{
    // A123 0021;	
    // (ꄣ) YI SYLLABLE TA	[4116 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA123, 0x0021 };
    uint32_t const ces[9] = { 0x4116, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_375)
{
    // A123 003F;	
    // (ꄣ) YI SYLLABLE TA	[4116 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA123, 0x003F };
    uint32_t const ces[9] = { 0x4116, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_376)
{
    // A123 0061;	
    // (ꄣ) YI SYLLABLE TA	[4116 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA123, 0x0061 };
    uint32_t const ces[9] = { 0x4116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_377)
{
    // A123 0041;	
    // (ꄣ) YI SYLLABLE TA	[4116 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA123, 0x0041 };
    uint32_t const ces[9] = { 0x4116, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_378)
{
    // A123 0062;	
    // (ꄣ) YI SYLLABLE TA	[4116 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA123, 0x0062 };
    uint32_t const ces[9] = { 0x4116, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_379)
{
    // A124 0021;	
    // (ꄤ) YI SYLLABLE TAP	[4117 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA124, 0x0021 };
    uint32_t const ces[9] = { 0x4117, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_380)
{
    // A124 003F;	
    // (ꄤ) YI SYLLABLE TAP	[4117 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA124, 0x003F };
    uint32_t const ces[9] = { 0x4117, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_381)
{
    // A124 0061;	
    // (ꄤ) YI SYLLABLE TAP	[4117 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA124, 0x0061 };
    uint32_t const ces[9] = { 0x4117, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_382)
{
    // A124 0041;	
    // (ꄤ) YI SYLLABLE TAP	[4117 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA124, 0x0041 };
    uint32_t const ces[9] = { 0x4117, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_383)
{
    // A124 0062;	
    // (ꄤ) YI SYLLABLE TAP	[4117 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA124, 0x0062 };
    uint32_t const ces[9] = { 0x4117, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_384)
{
    // A125 0021;	
    // (ꄥ) YI SYLLABLE TUOT	[4118 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA125, 0x0021 };
    uint32_t const ces[9] = { 0x4118, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_385)
{
    // A125 003F;	
    // (ꄥ) YI SYLLABLE TUOT	[4118 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA125, 0x003F };
    uint32_t const ces[9] = { 0x4118, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_386)
{
    // A125 0061;	
    // (ꄥ) YI SYLLABLE TUOT	[4118 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA125, 0x0061 };
    uint32_t const ces[9] = { 0x4118, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_387)
{
    // A125 0041;	
    // (ꄥ) YI SYLLABLE TUOT	[4118 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA125, 0x0041 };
    uint32_t const ces[9] = { 0x4118, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_388)
{
    // A125 0062;	
    // (ꄥ) YI SYLLABLE TUOT	[4118 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA125, 0x0062 };
    uint32_t const ces[9] = { 0x4118, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_389)
{
    // A126 0021;	
    // (ꄦ) YI SYLLABLE TUOX	[4119 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA126, 0x0021 };
    uint32_t const ces[9] = { 0x4119, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_390)
{
    // A126 003F;	
    // (ꄦ) YI SYLLABLE TUOX	[4119 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA126, 0x003F };
    uint32_t const ces[9] = { 0x4119, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_391)
{
    // A126 0061;	
    // (ꄦ) YI SYLLABLE TUOX	[4119 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA126, 0x0061 };
    uint32_t const ces[9] = { 0x4119, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_392)
{
    // A126 0041;	
    // (ꄦ) YI SYLLABLE TUOX	[4119 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA126, 0x0041 };
    uint32_t const ces[9] = { 0x4119, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_393)
{
    // A126 0062;	
    // (ꄦ) YI SYLLABLE TUOX	[4119 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA126, 0x0062 };
    uint32_t const ces[9] = { 0x4119, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_394)
{
    // A127 0021;	
    // (ꄧ) YI SYLLABLE TUO	[411A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA127, 0x0021 };
    uint32_t const ces[9] = { 0x411A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_395)
{
    // A127 003F;	
    // (ꄧ) YI SYLLABLE TUO	[411A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA127, 0x003F };
    uint32_t const ces[9] = { 0x411A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_396)
{
    // A127 0061;	
    // (ꄧ) YI SYLLABLE TUO	[411A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA127, 0x0061 };
    uint32_t const ces[9] = { 0x411A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_397)
{
    // A127 0041;	
    // (ꄧ) YI SYLLABLE TUO	[411A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA127, 0x0041 };
    uint32_t const ces[9] = { 0x411A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_398)
{
    // A127 0062;	
    // (ꄧ) YI SYLLABLE TUO	[411A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA127, 0x0062 };
    uint32_t const ces[9] = { 0x411A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_399)
{
    // A128 0021;	
    // (ꄨ) YI SYLLABLE TUOP	[411B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA128, 0x0021 };
    uint32_t const ces[9] = { 0x411B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_400)
{
    // A128 003F;	
    // (ꄨ) YI SYLLABLE TUOP	[411B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA128, 0x003F };
    uint32_t const ces[9] = { 0x411B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_401)
{
    // A128 0061;	
    // (ꄨ) YI SYLLABLE TUOP	[411B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA128, 0x0061 };
    uint32_t const ces[9] = { 0x411B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_402)
{
    // A128 0041;	
    // (ꄨ) YI SYLLABLE TUOP	[411B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA128, 0x0041 };
    uint32_t const ces[9] = { 0x411B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_403)
{
    // A128 0062;	
    // (ꄨ) YI SYLLABLE TUOP	[411B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA128, 0x0062 };
    uint32_t const ces[9] = { 0x411B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_404)
{
    // A129 0021;	
    // (ꄩ) YI SYLLABLE TOT	[411C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA129, 0x0021 };
    uint32_t const ces[9] = { 0x411C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_405)
{
    // A129 003F;	
    // (ꄩ) YI SYLLABLE TOT	[411C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA129, 0x003F };
    uint32_t const ces[9] = { 0x411C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_406)
{
    // A129 0061;	
    // (ꄩ) YI SYLLABLE TOT	[411C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA129, 0x0061 };
    uint32_t const ces[9] = { 0x411C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_407)
{
    // A129 0041;	
    // (ꄩ) YI SYLLABLE TOT	[411C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA129, 0x0041 };
    uint32_t const ces[9] = { 0x411C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_408)
{
    // A129 0062;	
    // (ꄩ) YI SYLLABLE TOT	[411C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA129, 0x0062 };
    uint32_t const ces[9] = { 0x411C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_409)
{
    // A12A 0021;	
    // (ꄪ) YI SYLLABLE TOX	[411D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12A, 0x0021 };
    uint32_t const ces[9] = { 0x411D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_410)
{
    // A12A 003F;	
    // (ꄪ) YI SYLLABLE TOX	[411D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12A, 0x003F };
    uint32_t const ces[9] = { 0x411D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_411)
{
    // A12A 0061;	
    // (ꄪ) YI SYLLABLE TOX	[411D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12A, 0x0061 };
    uint32_t const ces[9] = { 0x411D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_412)
{
    // A12A 0041;	
    // (ꄪ) YI SYLLABLE TOX	[411D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA12A, 0x0041 };
    uint32_t const ces[9] = { 0x411D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_413)
{
    // A12A 0062;	
    // (ꄪ) YI SYLLABLE TOX	[411D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12A, 0x0062 };
    uint32_t const ces[9] = { 0x411D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_414)
{
    // A12B 0021;	
    // (ꄫ) YI SYLLABLE TO	[411E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12B, 0x0021 };
    uint32_t const ces[9] = { 0x411E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_415)
{
    // A12B 003F;	
    // (ꄫ) YI SYLLABLE TO	[411E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12B, 0x003F };
    uint32_t const ces[9] = { 0x411E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_416)
{
    // A12B 0061;	
    // (ꄫ) YI SYLLABLE TO	[411E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12B, 0x0061 };
    uint32_t const ces[9] = { 0x411E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_417)
{
    // A12B 0041;	
    // (ꄫ) YI SYLLABLE TO	[411E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA12B, 0x0041 };
    uint32_t const ces[9] = { 0x411E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_418)
{
    // A12B 0062;	
    // (ꄫ) YI SYLLABLE TO	[411E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12B, 0x0062 };
    uint32_t const ces[9] = { 0x411E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_419)
{
    // A12C 0021;	
    // (ꄬ) YI SYLLABLE TOP	[411F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12C, 0x0021 };
    uint32_t const ces[9] = { 0x411F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_420)
{
    // A12C 003F;	
    // (ꄬ) YI SYLLABLE TOP	[411F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12C, 0x003F };
    uint32_t const ces[9] = { 0x411F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_421)
{
    // A12C 0061;	
    // (ꄬ) YI SYLLABLE TOP	[411F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12C, 0x0061 };
    uint32_t const ces[9] = { 0x411F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_422)
{
    // A12C 0041;	
    // (ꄬ) YI SYLLABLE TOP	[411F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA12C, 0x0041 };
    uint32_t const ces[9] = { 0x411F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_423)
{
    // A12C 0062;	
    // (ꄬ) YI SYLLABLE TOP	[411F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12C, 0x0062 };
    uint32_t const ces[9] = { 0x411F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_424)
{
    // A12D 0021;	
    // (ꄭ) YI SYLLABLE TEX	[4120 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12D, 0x0021 };
    uint32_t const ces[9] = { 0x4120, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_425)
{
    // A12D 003F;	
    // (ꄭ) YI SYLLABLE TEX	[4120 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12D, 0x003F };
    uint32_t const ces[9] = { 0x4120, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_426)
{
    // A12D 0061;	
    // (ꄭ) YI SYLLABLE TEX	[4120 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12D, 0x0061 };
    uint32_t const ces[9] = { 0x4120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_427)
{
    // A12D 0041;	
    // (ꄭ) YI SYLLABLE TEX	[4120 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA12D, 0x0041 };
    uint32_t const ces[9] = { 0x4120, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_428)
{
    // A12D 0062;	
    // (ꄭ) YI SYLLABLE TEX	[4120 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12D, 0x0062 };
    uint32_t const ces[9] = { 0x4120, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_429)
{
    // A12E 0021;	
    // (ꄮ) YI SYLLABLE TE	[4121 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12E, 0x0021 };
    uint32_t const ces[9] = { 0x4121, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_430)
{
    // A12E 003F;	
    // (ꄮ) YI SYLLABLE TE	[4121 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12E, 0x003F };
    uint32_t const ces[9] = { 0x4121, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_431)
{
    // A12E 0061;	
    // (ꄮ) YI SYLLABLE TE	[4121 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12E, 0x0061 };
    uint32_t const ces[9] = { 0x4121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_432)
{
    // A12E 0041;	
    // (ꄮ) YI SYLLABLE TE	[4121 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA12E, 0x0041 };
    uint32_t const ces[9] = { 0x4121, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_433)
{
    // A12E 0062;	
    // (ꄮ) YI SYLLABLE TE	[4121 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12E, 0x0062 };
    uint32_t const ces[9] = { 0x4121, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_434)
{
    // A12F 0021;	
    // (ꄯ) YI SYLLABLE TEP	[4122 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12F, 0x0021 };
    uint32_t const ces[9] = { 0x4122, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_435)
{
    // A12F 003F;	
    // (ꄯ) YI SYLLABLE TEP	[4122 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12F, 0x003F };
    uint32_t const ces[9] = { 0x4122, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_436)
{
    // A12F 0061;	
    // (ꄯ) YI SYLLABLE TEP	[4122 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12F, 0x0061 };
    uint32_t const ces[9] = { 0x4122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_437)
{
    // A12F 0041;	
    // (ꄯ) YI SYLLABLE TEP	[4122 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA12F, 0x0041 };
    uint32_t const ces[9] = { 0x4122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_438)
{
    // A12F 0062;	
    // (ꄯ) YI SYLLABLE TEP	[4122 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA12F, 0x0062 };
    uint32_t const ces[9] = { 0x4122, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_439)
{
    // A130 0021;	
    // (ꄰ) YI SYLLABLE TUT	[4123 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA130, 0x0021 };
    uint32_t const ces[9] = { 0x4123, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_440)
{
    // A130 003F;	
    // (ꄰ) YI SYLLABLE TUT	[4123 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA130, 0x003F };
    uint32_t const ces[9] = { 0x4123, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_441)
{
    // A130 0061;	
    // (ꄰ) YI SYLLABLE TUT	[4123 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA130, 0x0061 };
    uint32_t const ces[9] = { 0x4123, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_442)
{
    // A130 0041;	
    // (ꄰ) YI SYLLABLE TUT	[4123 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA130, 0x0041 };
    uint32_t const ces[9] = { 0x4123, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_443)
{
    // A130 0062;	
    // (ꄰ) YI SYLLABLE TUT	[4123 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA130, 0x0062 };
    uint32_t const ces[9] = { 0x4123, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_444)
{
    // A131 0021;	
    // (ꄱ) YI SYLLABLE TUX	[4124 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA131, 0x0021 };
    uint32_t const ces[9] = { 0x4124, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_445)
{
    // A131 003F;	
    // (ꄱ) YI SYLLABLE TUX	[4124 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA131, 0x003F };
    uint32_t const ces[9] = { 0x4124, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_446)
{
    // A131 0061;	
    // (ꄱ) YI SYLLABLE TUX	[4124 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA131, 0x0061 };
    uint32_t const ces[9] = { 0x4124, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_447)
{
    // A131 0041;	
    // (ꄱ) YI SYLLABLE TUX	[4124 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA131, 0x0041 };
    uint32_t const ces[9] = { 0x4124, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_448)
{
    // A131 0062;	
    // (ꄱ) YI SYLLABLE TUX	[4124 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA131, 0x0062 };
    uint32_t const ces[9] = { 0x4124, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_449)
{
    // A132 0021;	
    // (ꄲ) YI SYLLABLE TU	[4125 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA132, 0x0021 };
    uint32_t const ces[9] = { 0x4125, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_450)
{
    // A132 003F;	
    // (ꄲ) YI SYLLABLE TU	[4125 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA132, 0x003F };
    uint32_t const ces[9] = { 0x4125, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_451)
{
    // A132 0061;	
    // (ꄲ) YI SYLLABLE TU	[4125 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA132, 0x0061 };
    uint32_t const ces[9] = { 0x4125, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_452)
{
    // A132 0041;	
    // (ꄲ) YI SYLLABLE TU	[4125 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA132, 0x0041 };
    uint32_t const ces[9] = { 0x4125, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_453)
{
    // A132 0062;	
    // (ꄲ) YI SYLLABLE TU	[4125 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA132, 0x0062 };
    uint32_t const ces[9] = { 0x4125, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_454)
{
    // A133 0021;	
    // (ꄳ) YI SYLLABLE TUP	[4126 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA133, 0x0021 };
    uint32_t const ces[9] = { 0x4126, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_455)
{
    // A133 003F;	
    // (ꄳ) YI SYLLABLE TUP	[4126 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA133, 0x003F };
    uint32_t const ces[9] = { 0x4126, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_456)
{
    // A133 0061;	
    // (ꄳ) YI SYLLABLE TUP	[4126 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA133, 0x0061 };
    uint32_t const ces[9] = { 0x4126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_457)
{
    // A133 0041;	
    // (ꄳ) YI SYLLABLE TUP	[4126 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA133, 0x0041 };
    uint32_t const ces[9] = { 0x4126, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_458)
{
    // A133 0062;	
    // (ꄳ) YI SYLLABLE TUP	[4126 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA133, 0x0062 };
    uint32_t const ces[9] = { 0x4126, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_459)
{
    // A134 0021;	
    // (ꄴ) YI SYLLABLE TURX	[4127 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA134, 0x0021 };
    uint32_t const ces[9] = { 0x4127, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_460)
{
    // A134 003F;	
    // (ꄴ) YI SYLLABLE TURX	[4127 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA134, 0x003F };
    uint32_t const ces[9] = { 0x4127, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_461)
{
    // A134 0061;	
    // (ꄴ) YI SYLLABLE TURX	[4127 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA134, 0x0061 };
    uint32_t const ces[9] = { 0x4127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_462)
{
    // A134 0041;	
    // (ꄴ) YI SYLLABLE TURX	[4127 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA134, 0x0041 };
    uint32_t const ces[9] = { 0x4127, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_463)
{
    // A134 0062;	
    // (ꄴ) YI SYLLABLE TURX	[4127 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA134, 0x0062 };
    uint32_t const ces[9] = { 0x4127, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_464)
{
    // A135 0021;	
    // (ꄵ) YI SYLLABLE TUR	[4128 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA135, 0x0021 };
    uint32_t const ces[9] = { 0x4128, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_465)
{
    // A135 003F;	
    // (ꄵ) YI SYLLABLE TUR	[4128 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA135, 0x003F };
    uint32_t const ces[9] = { 0x4128, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_466)
{
    // A135 0061;	
    // (ꄵ) YI SYLLABLE TUR	[4128 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA135, 0x0061 };
    uint32_t const ces[9] = { 0x4128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_467)
{
    // A135 0041;	
    // (ꄵ) YI SYLLABLE TUR	[4128 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA135, 0x0041 };
    uint32_t const ces[9] = { 0x4128, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_468)
{
    // A135 0062;	
    // (ꄵ) YI SYLLABLE TUR	[4128 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA135, 0x0062 };
    uint32_t const ces[9] = { 0x4128, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_469)
{
    // A136 0021;	
    // (ꄶ) YI SYLLABLE DDIT	[4129 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA136, 0x0021 };
    uint32_t const ces[9] = { 0x4129, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_470)
{
    // A136 003F;	
    // (ꄶ) YI SYLLABLE DDIT	[4129 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA136, 0x003F };
    uint32_t const ces[9] = { 0x4129, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_471)
{
    // A136 0061;	
    // (ꄶ) YI SYLLABLE DDIT	[4129 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA136, 0x0061 };
    uint32_t const ces[9] = { 0x4129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_472)
{
    // A136 0041;	
    // (ꄶ) YI SYLLABLE DDIT	[4129 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA136, 0x0041 };
    uint32_t const ces[9] = { 0x4129, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_473)
{
    // A136 0062;	
    // (ꄶ) YI SYLLABLE DDIT	[4129 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA136, 0x0062 };
    uint32_t const ces[9] = { 0x4129, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_474)
{
    // A137 0021;	
    // (ꄷ) YI SYLLABLE DDIX	[412A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA137, 0x0021 };
    uint32_t const ces[9] = { 0x412A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_475)
{
    // A137 003F;	
    // (ꄷ) YI SYLLABLE DDIX	[412A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA137, 0x003F };
    uint32_t const ces[9] = { 0x412A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_476)
{
    // A137 0061;	
    // (ꄷ) YI SYLLABLE DDIX	[412A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA137, 0x0061 };
    uint32_t const ces[9] = { 0x412A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_477)
{
    // A137 0041;	
    // (ꄷ) YI SYLLABLE DDIX	[412A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA137, 0x0041 };
    uint32_t const ces[9] = { 0x412A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_478)
{
    // A137 0062;	
    // (ꄷ) YI SYLLABLE DDIX	[412A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA137, 0x0062 };
    uint32_t const ces[9] = { 0x412A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_479)
{
    // A138 0021;	
    // (ꄸ) YI SYLLABLE DDI	[412B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA138, 0x0021 };
    uint32_t const ces[9] = { 0x412B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_480)
{
    // A138 003F;	
    // (ꄸ) YI SYLLABLE DDI	[412B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA138, 0x003F };
    uint32_t const ces[9] = { 0x412B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_481)
{
    // A138 0061;	
    // (ꄸ) YI SYLLABLE DDI	[412B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA138, 0x0061 };
    uint32_t const ces[9] = { 0x412B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_482)
{
    // A138 0041;	
    // (ꄸ) YI SYLLABLE DDI	[412B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA138, 0x0041 };
    uint32_t const ces[9] = { 0x412B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_483)
{
    // A138 0062;	
    // (ꄸ) YI SYLLABLE DDI	[412B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA138, 0x0062 };
    uint32_t const ces[9] = { 0x412B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_484)
{
    // A139 0021;	
    // (ꄹ) YI SYLLABLE DDIP	[412C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA139, 0x0021 };
    uint32_t const ces[9] = { 0x412C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_485)
{
    // A139 003F;	
    // (ꄹ) YI SYLLABLE DDIP	[412C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA139, 0x003F };
    uint32_t const ces[9] = { 0x412C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_486)
{
    // A139 0061;	
    // (ꄹ) YI SYLLABLE DDIP	[412C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA139, 0x0061 };
    uint32_t const ces[9] = { 0x412C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_487)
{
    // A139 0041;	
    // (ꄹ) YI SYLLABLE DDIP	[412C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA139, 0x0041 };
    uint32_t const ces[9] = { 0x412C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_488)
{
    // A139 0062;	
    // (ꄹ) YI SYLLABLE DDIP	[412C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA139, 0x0062 };
    uint32_t const ces[9] = { 0x412C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_489)
{
    // A13A 0021;	
    // (ꄺ) YI SYLLABLE DDIEX	[412D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13A, 0x0021 };
    uint32_t const ces[9] = { 0x412D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_490)
{
    // A13A 003F;	
    // (ꄺ) YI SYLLABLE DDIEX	[412D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13A, 0x003F };
    uint32_t const ces[9] = { 0x412D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_491)
{
    // A13A 0061;	
    // (ꄺ) YI SYLLABLE DDIEX	[412D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13A, 0x0061 };
    uint32_t const ces[9] = { 0x412D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_492)
{
    // A13A 0041;	
    // (ꄺ) YI SYLLABLE DDIEX	[412D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA13A, 0x0041 };
    uint32_t const ces[9] = { 0x412D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_493)
{
    // A13A 0062;	
    // (ꄺ) YI SYLLABLE DDIEX	[412D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13A, 0x0062 };
    uint32_t const ces[9] = { 0x412D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_494)
{
    // A13B 0021;	
    // (ꄻ) YI SYLLABLE DDIE	[412E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13B, 0x0021 };
    uint32_t const ces[9] = { 0x412E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_495)
{
    // A13B 003F;	
    // (ꄻ) YI SYLLABLE DDIE	[412E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13B, 0x003F };
    uint32_t const ces[9] = { 0x412E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_496)
{
    // A13B 0061;	
    // (ꄻ) YI SYLLABLE DDIE	[412E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13B, 0x0061 };
    uint32_t const ces[9] = { 0x412E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_497)
{
    // A13B 0041;	
    // (ꄻ) YI SYLLABLE DDIE	[412E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA13B, 0x0041 };
    uint32_t const ces[9] = { 0x412E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_498)
{
    // A13B 0062;	
    // (ꄻ) YI SYLLABLE DDIE	[412E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13B, 0x0062 };
    uint32_t const ces[9] = { 0x412E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_256_499)
{
    // A13C 0021;	
    // (ꄼ) YI SYLLABLE DDIEP	[412F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA13C, 0x0021 };
    uint32_t const ces[9] = { 0x412F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

