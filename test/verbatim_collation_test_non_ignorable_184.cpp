// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_184_000)
{
    // 11046 003F;	
    // (ëÅÜ) BRAHMI VIRAMA	[2DB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11046, 0x003F };
    uint32_t const ces[9] = { 0x2DB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_001)
{
    // 11046 0061;	
    // (ëÅÜ) BRAHMI VIRAMA	[2DB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11046, 0x0061 };
    uint32_t const ces[9] = { 0x2DB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_002)
{
    // 11046 0041;	
    // (ëÅÜ) BRAHMI VIRAMA	[2DB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11046, 0x0041 };
    uint32_t const ces[9] = { 0x2DB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_003)
{
    // 11046 0062;	
    // (ëÅÜ) BRAHMI VIRAMA	[2DB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11046, 0x0062 };
    uint32_t const ces[9] = { 0x2DB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_004)
{
    // 0334 1107F;	
    // (ëÅø) BRAHMI NUMBER JOINER	[2DB9 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x1107F };
    uint32_t const ces[8] = { 0x2DB9, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_005)
{
    // 1107F 0334;	
    // (ëÅø) BRAHMI NUMBER JOINER	[2DB9 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1107F, 0x0334 };
    uint32_t const ces[8] = { 0x2DB9, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_006)
{
    // 1107F 0021;	
    // (ëÅø) BRAHMI NUMBER JOINER	[2DB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1107F, 0x0021 };
    uint32_t const ces[9] = { 0x2DB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_007)
{
    // 1107F 003F;	
    // (ëÅø) BRAHMI NUMBER JOINER	[2DB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1107F, 0x003F };
    uint32_t const ces[9] = { 0x2DB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_008)
{
    // 1107F 0061;	
    // (ëÅø) BRAHMI NUMBER JOINER	[2DB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1107F, 0x0061 };
    uint32_t const ces[9] = { 0x2DB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_009)
{
    // 1107F 0041;	
    // (ëÅø) BRAHMI NUMBER JOINER	[2DB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1107F, 0x0041 };
    uint32_t const ces[9] = { 0x2DB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_010)
{
    // 1107F 0062;	
    // (ëÅø) BRAHMI NUMBER JOINER	[2DB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1107F, 0x0062 };
    uint32_t const ces[9] = { 0x2DB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_011)
{
    // 10A00 0021;	
    // (‚Äé‚Äéê®Ä‚Äé‚Äé) KHAROSHTHI LETTER A	[2DBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A00, 0x0021 };
    uint32_t const ces[9] = { 0x2DBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_012)
{
    // 10A00 003F;	
    // (‚Äé‚Äéê®Ä‚Äé‚Äé) KHAROSHTHI LETTER A	[2DBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A00, 0x003F };
    uint32_t const ces[9] = { 0x2DBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_013)
{
    // 10A00 0061;	
    // (‚Äé‚Äéê®Ä‚Äé‚Äé) KHAROSHTHI LETTER A	[2DBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A00, 0x0061 };
    uint32_t const ces[9] = { 0x2DBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_014)
{
    // 10A00 0041;	
    // (‚Äé‚Äéê®Ä‚Äé‚Äé) KHAROSHTHI LETTER A	[2DBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A00, 0x0041 };
    uint32_t const ces[9] = { 0x2DBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_015)
{
    // 10A00 0062;	
    // (‚Äé‚Äéê®Ä‚Äé‚Äé) KHAROSHTHI LETTER A	[2DBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A00, 0x0062 };
    uint32_t const ces[9] = { 0x2DBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_016)
{
    // 10A01 0021;	
    // (ê®Å) KHAROSHTHI VOWEL SIGN I	[2DBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A01, 0x0021 };
    uint32_t const ces[9] = { 0x2DBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_017)
{
    // 10A01 003F;	
    // (ê®Å) KHAROSHTHI VOWEL SIGN I	[2DBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A01, 0x003F };
    uint32_t const ces[9] = { 0x2DBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_018)
{
    // 10A01 0061;	
    // (ê®Å) KHAROSHTHI VOWEL SIGN I	[2DBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A01, 0x0061 };
    uint32_t const ces[9] = { 0x2DBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_019)
{
    // 10A01 0041;	
    // (ê®Å) KHAROSHTHI VOWEL SIGN I	[2DBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A01, 0x0041 };
    uint32_t const ces[9] = { 0x2DBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_020)
{
    // 10A01 0062;	
    // (ê®Å) KHAROSHTHI VOWEL SIGN I	[2DBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A01, 0x0062 };
    uint32_t const ces[9] = { 0x2DBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_021)
{
    // 10A02 0021;	
    // (ê®Ç) KHAROSHTHI VOWEL SIGN U	[2DBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A02, 0x0021 };
    uint32_t const ces[9] = { 0x2DBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_022)
{
    // 10A02 003F;	
    // (ê®Ç) KHAROSHTHI VOWEL SIGN U	[2DBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A02, 0x003F };
    uint32_t const ces[9] = { 0x2DBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_023)
{
    // 10A02 0061;	
    // (ê®Ç) KHAROSHTHI VOWEL SIGN U	[2DBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A02, 0x0061 };
    uint32_t const ces[9] = { 0x2DBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_024)
{
    // 10A02 0041;	
    // (ê®Ç) KHAROSHTHI VOWEL SIGN U	[2DBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A02, 0x0041 };
    uint32_t const ces[9] = { 0x2DBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_025)
{
    // 10A02 0062;	
    // (ê®Ç) KHAROSHTHI VOWEL SIGN U	[2DBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A02, 0x0062 };
    uint32_t const ces[9] = { 0x2DBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_026)
{
    // 10A03 0021;	
    // (ê®É) KHAROSHTHI VOWEL SIGN VOCALIC R	[2DBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A03, 0x0021 };
    uint32_t const ces[9] = { 0x2DBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_027)
{
    // 10A03 003F;	
    // (ê®É) KHAROSHTHI VOWEL SIGN VOCALIC R	[2DBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A03, 0x003F };
    uint32_t const ces[9] = { 0x2DBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_028)
{
    // 10A03 0061;	
    // (ê®É) KHAROSHTHI VOWEL SIGN VOCALIC R	[2DBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A03, 0x0061 };
    uint32_t const ces[9] = { 0x2DBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_029)
{
    // 10A03 0041;	
    // (ê®É) KHAROSHTHI VOWEL SIGN VOCALIC R	[2DBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A03, 0x0041 };
    uint32_t const ces[9] = { 0x2DBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_030)
{
    // 10A03 0062;	
    // (ê®É) KHAROSHTHI VOWEL SIGN VOCALIC R	[2DBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A03, 0x0062 };
    uint32_t const ces[9] = { 0x2DBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_031)
{
    // 10A05 0021;	
    // (ê®Ö) KHAROSHTHI VOWEL SIGN E	[2DBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A05, 0x0021 };
    uint32_t const ces[9] = { 0x2DBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_032)
{
    // 10A05 003F;	
    // (ê®Ö) KHAROSHTHI VOWEL SIGN E	[2DBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A05, 0x003F };
    uint32_t const ces[9] = { 0x2DBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_033)
{
    // 10A05 0061;	
    // (ê®Ö) KHAROSHTHI VOWEL SIGN E	[2DBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A05, 0x0061 };
    uint32_t const ces[9] = { 0x2DBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_034)
{
    // 10A05 0041;	
    // (ê®Ö) KHAROSHTHI VOWEL SIGN E	[2DBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A05, 0x0041 };
    uint32_t const ces[9] = { 0x2DBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_035)
{
    // 10A05 0062;	
    // (ê®Ö) KHAROSHTHI VOWEL SIGN E	[2DBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A05, 0x0062 };
    uint32_t const ces[9] = { 0x2DBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_036)
{
    // 10A06 0021;	
    // (ê®Ü) KHAROSHTHI VOWEL SIGN O	[2DBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A06, 0x0021 };
    uint32_t const ces[9] = { 0x2DBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_037)
{
    // 10A06 003F;	
    // (ê®Ü) KHAROSHTHI VOWEL SIGN O	[2DBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A06, 0x003F };
    uint32_t const ces[9] = { 0x2DBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_038)
{
    // 10A06 0061;	
    // (ê®Ü) KHAROSHTHI VOWEL SIGN O	[2DBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A06, 0x0061 };
    uint32_t const ces[9] = { 0x2DBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_039)
{
    // 10A06 0041;	
    // (ê®Ü) KHAROSHTHI VOWEL SIGN O	[2DBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A06, 0x0041 };
    uint32_t const ces[9] = { 0x2DBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_040)
{
    // 10A06 0062;	
    // (ê®Ü) KHAROSHTHI VOWEL SIGN O	[2DBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A06, 0x0062 };
    uint32_t const ces[9] = { 0x2DBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_041)
{
    // 10A0C 0021;	
    // (ê®å) KHAROSHTHI VOWEL LENGTH MARK	[2DC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0C, 0x0021 };
    uint32_t const ces[9] = { 0x2DC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_042)
{
    // 10A0C 003F;	
    // (ê®å) KHAROSHTHI VOWEL LENGTH MARK	[2DC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0C, 0x003F };
    uint32_t const ces[9] = { 0x2DC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_043)
{
    // 10A0C 0061;	
    // (ê®å) KHAROSHTHI VOWEL LENGTH MARK	[2DC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0C, 0x0061 };
    uint32_t const ces[9] = { 0x2DC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_044)
{
    // 10A0C 0041;	
    // (ê®å) KHAROSHTHI VOWEL LENGTH MARK	[2DC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A0C, 0x0041 };
    uint32_t const ces[9] = { 0x2DC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_045)
{
    // 10A0C 0062;	
    // (ê®å) KHAROSHTHI VOWEL LENGTH MARK	[2DC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0C, 0x0062 };
    uint32_t const ces[9] = { 0x2DC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_046)
{
    // 10A10 0021;	
    // (‚Äé‚Äéê®ê‚Äé‚Äé) KHAROSHTHI LETTER KA	[2DC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A10, 0x0021 };
    uint32_t const ces[9] = { 0x2DC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_047)
{
    // 10A10 003F;	
    // (‚Äé‚Äéê®ê‚Äé‚Äé) KHAROSHTHI LETTER KA	[2DC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A10, 0x003F };
    uint32_t const ces[9] = { 0x2DC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_048)
{
    // 10A10 0061;	
    // (‚Äé‚Äéê®ê‚Äé‚Äé) KHAROSHTHI LETTER KA	[2DC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A10, 0x0061 };
    uint32_t const ces[9] = { 0x2DC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_049)
{
    // 10A10 0041;	
    // (‚Äé‚Äéê®ê‚Äé‚Äé) KHAROSHTHI LETTER KA	[2DC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A10, 0x0041 };
    uint32_t const ces[9] = { 0x2DC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_050)
{
    // 10A10 0062;	
    // (‚Äé‚Äéê®ê‚Äé‚Äé) KHAROSHTHI LETTER KA	[2DC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A10, 0x0062 };
    uint32_t const ces[9] = { 0x2DC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_051)
{
    // 10A11 0021;	
    // (‚Äé‚Äéê®ë‚Äé‚Äé) KHAROSHTHI LETTER KHA	[2DC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A11, 0x0021 };
    uint32_t const ces[9] = { 0x2DC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_052)
{
    // 10A11 003F;	
    // (‚Äé‚Äéê®ë‚Äé‚Äé) KHAROSHTHI LETTER KHA	[2DC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A11, 0x003F };
    uint32_t const ces[9] = { 0x2DC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_053)
{
    // 10A11 0061;	
    // (‚Äé‚Äéê®ë‚Äé‚Äé) KHAROSHTHI LETTER KHA	[2DC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A11, 0x0061 };
    uint32_t const ces[9] = { 0x2DC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_054)
{
    // 10A11 0041;	
    // (‚Äé‚Äéê®ë‚Äé‚Äé) KHAROSHTHI LETTER KHA	[2DC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A11, 0x0041 };
    uint32_t const ces[9] = { 0x2DC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_055)
{
    // 10A11 0062;	
    // (‚Äé‚Äéê®ë‚Äé‚Äé) KHAROSHTHI LETTER KHA	[2DC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A11, 0x0062 };
    uint32_t const ces[9] = { 0x2DC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_056)
{
    // 10A12 0021;	
    // (‚Äé‚Äéê®í‚Äé‚Äé) KHAROSHTHI LETTER GA	[2DC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A12, 0x0021 };
    uint32_t const ces[9] = { 0x2DC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_057)
{
    // 10A12 003F;	
    // (‚Äé‚Äéê®í‚Äé‚Äé) KHAROSHTHI LETTER GA	[2DC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A12, 0x003F };
    uint32_t const ces[9] = { 0x2DC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_058)
{
    // 10A12 0061;	
    // (‚Äé‚Äéê®í‚Äé‚Äé) KHAROSHTHI LETTER GA	[2DC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A12, 0x0061 };
    uint32_t const ces[9] = { 0x2DC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_059)
{
    // 10A12 0041;	
    // (‚Äé‚Äéê®í‚Äé‚Äé) KHAROSHTHI LETTER GA	[2DC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A12, 0x0041 };
    uint32_t const ces[9] = { 0x2DC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_060)
{
    // 10A12 0062;	
    // (‚Äé‚Äéê®í‚Äé‚Äé) KHAROSHTHI LETTER GA	[2DC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A12, 0x0062 };
    uint32_t const ces[9] = { 0x2DC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_061)
{
    // 10A13 0021;	
    // (‚Äé‚Äéê®ì‚Äé‚Äé) KHAROSHTHI LETTER GHA	[2DC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A13, 0x0021 };
    uint32_t const ces[9] = { 0x2DC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_062)
{
    // 10A13 003F;	
    // (‚Äé‚Äéê®ì‚Äé‚Äé) KHAROSHTHI LETTER GHA	[2DC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A13, 0x003F };
    uint32_t const ces[9] = { 0x2DC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_063)
{
    // 10A13 0061;	
    // (‚Äé‚Äéê®ì‚Äé‚Äé) KHAROSHTHI LETTER GHA	[2DC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A13, 0x0061 };
    uint32_t const ces[9] = { 0x2DC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_064)
{
    // 10A13 0041;	
    // (‚Äé‚Äéê®ì‚Äé‚Äé) KHAROSHTHI LETTER GHA	[2DC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A13, 0x0041 };
    uint32_t const ces[9] = { 0x2DC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_065)
{
    // 10A13 0062;	
    // (‚Äé‚Äéê®ì‚Äé‚Äé) KHAROSHTHI LETTER GHA	[2DC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A13, 0x0062 };
    uint32_t const ces[9] = { 0x2DC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_066)
{
    // 10A15 0021;	
    // (‚Äé‚Äéê®ï‚Äé‚Äé) KHAROSHTHI LETTER CA	[2DC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A15, 0x0021 };
    uint32_t const ces[9] = { 0x2DC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_067)
{
    // 10A15 003F;	
    // (‚Äé‚Äéê®ï‚Äé‚Äé) KHAROSHTHI LETTER CA	[2DC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A15, 0x003F };
    uint32_t const ces[9] = { 0x2DC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_068)
{
    // 10A15 0061;	
    // (‚Äé‚Äéê®ï‚Äé‚Äé) KHAROSHTHI LETTER CA	[2DC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A15, 0x0061 };
    uint32_t const ces[9] = { 0x2DC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_069)
{
    // 10A15 0041;	
    // (‚Äé‚Äéê®ï‚Äé‚Äé) KHAROSHTHI LETTER CA	[2DC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A15, 0x0041 };
    uint32_t const ces[9] = { 0x2DC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_070)
{
    // 10A15 0062;	
    // (‚Äé‚Äéê®ï‚Äé‚Äé) KHAROSHTHI LETTER CA	[2DC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A15, 0x0062 };
    uint32_t const ces[9] = { 0x2DC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_071)
{
    // 10A16 0021;	
    // (‚Äé‚Äéê®ñ‚Äé‚Äé) KHAROSHTHI LETTER CHA	[2DC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A16, 0x0021 };
    uint32_t const ces[9] = { 0x2DC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_072)
{
    // 10A16 003F;	
    // (‚Äé‚Äéê®ñ‚Äé‚Äé) KHAROSHTHI LETTER CHA	[2DC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A16, 0x003F };
    uint32_t const ces[9] = { 0x2DC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_073)
{
    // 10A16 0061;	
    // (‚Äé‚Äéê®ñ‚Äé‚Äé) KHAROSHTHI LETTER CHA	[2DC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A16, 0x0061 };
    uint32_t const ces[9] = { 0x2DC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_074)
{
    // 10A16 0041;	
    // (‚Äé‚Äéê®ñ‚Äé‚Äé) KHAROSHTHI LETTER CHA	[2DC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A16, 0x0041 };
    uint32_t const ces[9] = { 0x2DC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_075)
{
    // 10A16 0062;	
    // (‚Äé‚Äéê®ñ‚Äé‚Äé) KHAROSHTHI LETTER CHA	[2DC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A16, 0x0062 };
    uint32_t const ces[9] = { 0x2DC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_076)
{
    // 10A17 0021;	
    // (‚Äé‚Äéê®ó‚Äé‚Äé) KHAROSHTHI LETTER JA	[2DC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A17, 0x0021 };
    uint32_t const ces[9] = { 0x2DC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_077)
{
    // 10A17 003F;	
    // (‚Äé‚Äéê®ó‚Äé‚Äé) KHAROSHTHI LETTER JA	[2DC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A17, 0x003F };
    uint32_t const ces[9] = { 0x2DC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_078)
{
    // 10A17 0061;	
    // (‚Äé‚Äéê®ó‚Äé‚Äé) KHAROSHTHI LETTER JA	[2DC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A17, 0x0061 };
    uint32_t const ces[9] = { 0x2DC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_079)
{
    // 10A17 0041;	
    // (‚Äé‚Äéê®ó‚Äé‚Äé) KHAROSHTHI LETTER JA	[2DC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A17, 0x0041 };
    uint32_t const ces[9] = { 0x2DC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_080)
{
    // 10A17 0062;	
    // (‚Äé‚Äéê®ó‚Äé‚Äé) KHAROSHTHI LETTER JA	[2DC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A17, 0x0062 };
    uint32_t const ces[9] = { 0x2DC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_081)
{
    // 10A19 0021;	
    // (‚Äé‚Äéê®ô‚Äé‚Äé) KHAROSHTHI LETTER NYA	[2DC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A19, 0x0021 };
    uint32_t const ces[9] = { 0x2DC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_082)
{
    // 10A19 003F;	
    // (‚Äé‚Äéê®ô‚Äé‚Äé) KHAROSHTHI LETTER NYA	[2DC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A19, 0x003F };
    uint32_t const ces[9] = { 0x2DC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_083)
{
    // 10A19 0061;	
    // (‚Äé‚Äéê®ô‚Äé‚Äé) KHAROSHTHI LETTER NYA	[2DC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A19, 0x0061 };
    uint32_t const ces[9] = { 0x2DC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_084)
{
    // 10A19 0041;	
    // (‚Äé‚Äéê®ô‚Äé‚Äé) KHAROSHTHI LETTER NYA	[2DC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A19, 0x0041 };
    uint32_t const ces[9] = { 0x2DC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_085)
{
    // 10A19 0062;	
    // (‚Äé‚Äéê®ô‚Äé‚Äé) KHAROSHTHI LETTER NYA	[2DC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A19, 0x0062 };
    uint32_t const ces[9] = { 0x2DC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_086)
{
    // 10A1A 0021;	
    // (‚Äé‚Äéê®ö‚Äé‚Äé) KHAROSHTHI LETTER TTA	[2DC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1A, 0x0021 };
    uint32_t const ces[9] = { 0x2DC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_087)
{
    // 10A1A 003F;	
    // (‚Äé‚Äéê®ö‚Äé‚Äé) KHAROSHTHI LETTER TTA	[2DC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1A, 0x003F };
    uint32_t const ces[9] = { 0x2DC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_088)
{
    // 10A1A 0061;	
    // (‚Äé‚Äéê®ö‚Äé‚Äé) KHAROSHTHI LETTER TTA	[2DC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1A, 0x0061 };
    uint32_t const ces[9] = { 0x2DC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_089)
{
    // 10A1A 0041;	
    // (‚Äé‚Äéê®ö‚Äé‚Äé) KHAROSHTHI LETTER TTA	[2DC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A1A, 0x0041 };
    uint32_t const ces[9] = { 0x2DC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_090)
{
    // 10A1A 0062;	
    // (‚Äé‚Äéê®ö‚Äé‚Äé) KHAROSHTHI LETTER TTA	[2DC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1A, 0x0062 };
    uint32_t const ces[9] = { 0x2DC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_091)
{
    // 10A1B 0021;	
    // (‚Äé‚Äéê®õ‚Äé‚Äé) KHAROSHTHI LETTER TTHA	[2DCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1B, 0x0021 };
    uint32_t const ces[9] = { 0x2DCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_092)
{
    // 10A1B 003F;	
    // (‚Äé‚Äéê®õ‚Äé‚Äé) KHAROSHTHI LETTER TTHA	[2DCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1B, 0x003F };
    uint32_t const ces[9] = { 0x2DCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_093)
{
    // 10A1B 0061;	
    // (‚Äé‚Äéê®õ‚Äé‚Äé) KHAROSHTHI LETTER TTHA	[2DCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1B, 0x0061 };
    uint32_t const ces[9] = { 0x2DCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_094)
{
    // 10A1B 0041;	
    // (‚Äé‚Äéê®õ‚Äé‚Äé) KHAROSHTHI LETTER TTHA	[2DCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A1B, 0x0041 };
    uint32_t const ces[9] = { 0x2DCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_095)
{
    // 10A1B 0062;	
    // (‚Äé‚Äéê®õ‚Äé‚Äé) KHAROSHTHI LETTER TTHA	[2DCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1B, 0x0062 };
    uint32_t const ces[9] = { 0x2DCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_096)
{
    // 10A1C 0021;	
    // (‚Äé‚Äéê®ú‚Äé‚Äé) KHAROSHTHI LETTER DDA	[2DCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1C, 0x0021 };
    uint32_t const ces[9] = { 0x2DCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_097)
{
    // 10A1C 003F;	
    // (‚Äé‚Äéê®ú‚Äé‚Äé) KHAROSHTHI LETTER DDA	[2DCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1C, 0x003F };
    uint32_t const ces[9] = { 0x2DCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_098)
{
    // 10A1C 0061;	
    // (‚Äé‚Äéê®ú‚Äé‚Äé) KHAROSHTHI LETTER DDA	[2DCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1C, 0x0061 };
    uint32_t const ces[9] = { 0x2DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_099)
{
    // 10A1C 0041;	
    // (‚Äé‚Äéê®ú‚Äé‚Äé) KHAROSHTHI LETTER DDA	[2DCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A1C, 0x0041 };
    uint32_t const ces[9] = { 0x2DCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_100)
{
    // 10A1C 0062;	
    // (‚Äé‚Äéê®ú‚Äé‚Äé) KHAROSHTHI LETTER DDA	[2DCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1C, 0x0062 };
    uint32_t const ces[9] = { 0x2DCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_101)
{
    // 10A1D 0021;	
    // (‚Äé‚Äéê®ù‚Äé‚Äé) KHAROSHTHI LETTER DDHA	[2DCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1D, 0x0021 };
    uint32_t const ces[9] = { 0x2DCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_102)
{
    // 10A1D 003F;	
    // (‚Äé‚Äéê®ù‚Äé‚Äé) KHAROSHTHI LETTER DDHA	[2DCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1D, 0x003F };
    uint32_t const ces[9] = { 0x2DCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_103)
{
    // 10A1D 0061;	
    // (‚Äé‚Äéê®ù‚Äé‚Äé) KHAROSHTHI LETTER DDHA	[2DCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1D, 0x0061 };
    uint32_t const ces[9] = { 0x2DCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_104)
{
    // 10A1D 0041;	
    // (‚Äé‚Äéê®ù‚Äé‚Äé) KHAROSHTHI LETTER DDHA	[2DCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A1D, 0x0041 };
    uint32_t const ces[9] = { 0x2DCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_105)
{
    // 10A1D 0062;	
    // (‚Äé‚Äéê®ù‚Äé‚Äé) KHAROSHTHI LETTER DDHA	[2DCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1D, 0x0062 };
    uint32_t const ces[9] = { 0x2DCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_106)
{
    // 10A1E 0021;	
    // (‚Äé‚Äéê®û‚Äé‚Äé) KHAROSHTHI LETTER NNA	[2DCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1E, 0x0021 };
    uint32_t const ces[9] = { 0x2DCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_107)
{
    // 10A1E 003F;	
    // (‚Äé‚Äéê®û‚Äé‚Äé) KHAROSHTHI LETTER NNA	[2DCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1E, 0x003F };
    uint32_t const ces[9] = { 0x2DCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_108)
{
    // 10A1E 0061;	
    // (‚Äé‚Äéê®û‚Äé‚Äé) KHAROSHTHI LETTER NNA	[2DCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1E, 0x0061 };
    uint32_t const ces[9] = { 0x2DCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_109)
{
    // 10A1E 0041;	
    // (‚Äé‚Äéê®û‚Äé‚Äé) KHAROSHTHI LETTER NNA	[2DCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A1E, 0x0041 };
    uint32_t const ces[9] = { 0x2DCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_110)
{
    // 10A1E 0062;	
    // (‚Äé‚Äéê®û‚Äé‚Äé) KHAROSHTHI LETTER NNA	[2DCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1E, 0x0062 };
    uint32_t const ces[9] = { 0x2DCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_111)
{
    // 10A1F 0021;	
    // (‚Äé‚Äéê®ü‚Äé‚Äé) KHAROSHTHI LETTER TA	[2DCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1F, 0x0021 };
    uint32_t const ces[9] = { 0x2DCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_112)
{
    // 10A1F 003F;	
    // (‚Äé‚Äéê®ü‚Äé‚Äé) KHAROSHTHI LETTER TA	[2DCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1F, 0x003F };
    uint32_t const ces[9] = { 0x2DCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_113)
{
    // 10A1F 0061;	
    // (‚Äé‚Äéê®ü‚Äé‚Äé) KHAROSHTHI LETTER TA	[2DCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1F, 0x0061 };
    uint32_t const ces[9] = { 0x2DCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_114)
{
    // 10A1F 0041;	
    // (‚Äé‚Äéê®ü‚Äé‚Äé) KHAROSHTHI LETTER TA	[2DCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A1F, 0x0041 };
    uint32_t const ces[9] = { 0x2DCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_115)
{
    // 10A1F 0062;	
    // (‚Äé‚Äéê®ü‚Äé‚Äé) KHAROSHTHI LETTER TA	[2DCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A1F, 0x0062 };
    uint32_t const ces[9] = { 0x2DCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_116)
{
    // 10A20 0021;	
    // (‚Äé‚Äéê®†‚Äé‚Äé) KHAROSHTHI LETTER THA	[2DCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A20, 0x0021 };
    uint32_t const ces[9] = { 0x2DCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_117)
{
    // 10A20 003F;	
    // (‚Äé‚Äéê®†‚Äé‚Äé) KHAROSHTHI LETTER THA	[2DCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A20, 0x003F };
    uint32_t const ces[9] = { 0x2DCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_118)
{
    // 10A20 0061;	
    // (‚Äé‚Äéê®†‚Äé‚Äé) KHAROSHTHI LETTER THA	[2DCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A20, 0x0061 };
    uint32_t const ces[9] = { 0x2DCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_119)
{
    // 10A20 0041;	
    // (‚Äé‚Äéê®†‚Äé‚Äé) KHAROSHTHI LETTER THA	[2DCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A20, 0x0041 };
    uint32_t const ces[9] = { 0x2DCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_120)
{
    // 10A20 0062;	
    // (‚Äé‚Äéê®†‚Äé‚Äé) KHAROSHTHI LETTER THA	[2DCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A20, 0x0062 };
    uint32_t const ces[9] = { 0x2DCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_121)
{
    // 10A21 0021;	
    // (‚Äé‚Äéê®°‚Äé‚Äé) KHAROSHTHI LETTER DA	[2DD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A21, 0x0021 };
    uint32_t const ces[9] = { 0x2DD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_122)
{
    // 10A21 003F;	
    // (‚Äé‚Äéê®°‚Äé‚Äé) KHAROSHTHI LETTER DA	[2DD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A21, 0x003F };
    uint32_t const ces[9] = { 0x2DD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_123)
{
    // 10A21 0061;	
    // (‚Äé‚Äéê®°‚Äé‚Äé) KHAROSHTHI LETTER DA	[2DD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A21, 0x0061 };
    uint32_t const ces[9] = { 0x2DD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_124)
{
    // 10A21 0041;	
    // (‚Äé‚Äéê®°‚Äé‚Äé) KHAROSHTHI LETTER DA	[2DD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A21, 0x0041 };
    uint32_t const ces[9] = { 0x2DD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_125)
{
    // 10A21 0062;	
    // (‚Äé‚Äéê®°‚Äé‚Äé) KHAROSHTHI LETTER DA	[2DD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A21, 0x0062 };
    uint32_t const ces[9] = { 0x2DD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_126)
{
    // 10A22 0021;	
    // (‚Äé‚Äéê®¢‚Äé‚Äé) KHAROSHTHI LETTER DHA	[2DD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A22, 0x0021 };
    uint32_t const ces[9] = { 0x2DD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_127)
{
    // 10A22 003F;	
    // (‚Äé‚Äéê®¢‚Äé‚Äé) KHAROSHTHI LETTER DHA	[2DD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A22, 0x003F };
    uint32_t const ces[9] = { 0x2DD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_128)
{
    // 10A22 0061;	
    // (‚Äé‚Äéê®¢‚Äé‚Äé) KHAROSHTHI LETTER DHA	[2DD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A22, 0x0061 };
    uint32_t const ces[9] = { 0x2DD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_129)
{
    // 10A22 0041;	
    // (‚Äé‚Äéê®¢‚Äé‚Äé) KHAROSHTHI LETTER DHA	[2DD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A22, 0x0041 };
    uint32_t const ces[9] = { 0x2DD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_130)
{
    // 10A22 0062;	
    // (‚Äé‚Äéê®¢‚Äé‚Äé) KHAROSHTHI LETTER DHA	[2DD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A22, 0x0062 };
    uint32_t const ces[9] = { 0x2DD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_131)
{
    // 10A23 0021;	
    // (‚Äé‚Äéê®£‚Äé‚Äé) KHAROSHTHI LETTER NA	[2DD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A23, 0x0021 };
    uint32_t const ces[9] = { 0x2DD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_132)
{
    // 10A23 003F;	
    // (‚Äé‚Äéê®£‚Äé‚Äé) KHAROSHTHI LETTER NA	[2DD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A23, 0x003F };
    uint32_t const ces[9] = { 0x2DD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_133)
{
    // 10A23 0061;	
    // (‚Äé‚Äéê®£‚Äé‚Äé) KHAROSHTHI LETTER NA	[2DD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A23, 0x0061 };
    uint32_t const ces[9] = { 0x2DD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_134)
{
    // 10A23 0041;	
    // (‚Äé‚Äéê®£‚Äé‚Äé) KHAROSHTHI LETTER NA	[2DD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A23, 0x0041 };
    uint32_t const ces[9] = { 0x2DD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_135)
{
    // 10A23 0062;	
    // (‚Äé‚Äéê®£‚Äé‚Äé) KHAROSHTHI LETTER NA	[2DD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A23, 0x0062 };
    uint32_t const ces[9] = { 0x2DD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_136)
{
    // 10A24 0021;	
    // (‚Äé‚Äéê®§‚Äé‚Äé) KHAROSHTHI LETTER PA	[2DD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A24, 0x0021 };
    uint32_t const ces[9] = { 0x2DD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_137)
{
    // 10A24 003F;	
    // (‚Äé‚Äéê®§‚Äé‚Äé) KHAROSHTHI LETTER PA	[2DD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A24, 0x003F };
    uint32_t const ces[9] = { 0x2DD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_138)
{
    // 10A24 0061;	
    // (‚Äé‚Äéê®§‚Äé‚Äé) KHAROSHTHI LETTER PA	[2DD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A24, 0x0061 };
    uint32_t const ces[9] = { 0x2DD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_139)
{
    // 10A24 0041;	
    // (‚Äé‚Äéê®§‚Äé‚Äé) KHAROSHTHI LETTER PA	[2DD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A24, 0x0041 };
    uint32_t const ces[9] = { 0x2DD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_140)
{
    // 10A24 0062;	
    // (‚Äé‚Äéê®§‚Äé‚Äé) KHAROSHTHI LETTER PA	[2DD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A24, 0x0062 };
    uint32_t const ces[9] = { 0x2DD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_141)
{
    // 10A25 0021;	
    // (‚Äé‚Äéê®•‚Äé‚Äé) KHAROSHTHI LETTER PHA	[2DD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A25, 0x0021 };
    uint32_t const ces[9] = { 0x2DD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_142)
{
    // 10A25 003F;	
    // (‚Äé‚Äéê®•‚Äé‚Äé) KHAROSHTHI LETTER PHA	[2DD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A25, 0x003F };
    uint32_t const ces[9] = { 0x2DD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_143)
{
    // 10A25 0061;	
    // (‚Äé‚Äéê®•‚Äé‚Äé) KHAROSHTHI LETTER PHA	[2DD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A25, 0x0061 };
    uint32_t const ces[9] = { 0x2DD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_144)
{
    // 10A25 0041;	
    // (‚Äé‚Äéê®•‚Äé‚Äé) KHAROSHTHI LETTER PHA	[2DD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A25, 0x0041 };
    uint32_t const ces[9] = { 0x2DD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_145)
{
    // 10A25 0062;	
    // (‚Äé‚Äéê®•‚Äé‚Äé) KHAROSHTHI LETTER PHA	[2DD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A25, 0x0062 };
    uint32_t const ces[9] = { 0x2DD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_146)
{
    // 10A26 0021;	
    // (‚Äé‚Äéê®¶‚Äé‚Äé) KHAROSHTHI LETTER BA	[2DD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A26, 0x0021 };
    uint32_t const ces[9] = { 0x2DD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_147)
{
    // 10A26 003F;	
    // (‚Äé‚Äéê®¶‚Äé‚Äé) KHAROSHTHI LETTER BA	[2DD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A26, 0x003F };
    uint32_t const ces[9] = { 0x2DD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_148)
{
    // 10A26 0061;	
    // (‚Äé‚Äéê®¶‚Äé‚Äé) KHAROSHTHI LETTER BA	[2DD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A26, 0x0061 };
    uint32_t const ces[9] = { 0x2DD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_149)
{
    // 10A26 0041;	
    // (‚Äé‚Äéê®¶‚Äé‚Äé) KHAROSHTHI LETTER BA	[2DD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A26, 0x0041 };
    uint32_t const ces[9] = { 0x2DD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_150)
{
    // 10A26 0062;	
    // (‚Äé‚Äéê®¶‚Äé‚Äé) KHAROSHTHI LETTER BA	[2DD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A26, 0x0062 };
    uint32_t const ces[9] = { 0x2DD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_151)
{
    // 10A27 0021;	
    // (‚Äé‚Äéê®ß‚Äé‚Äé) KHAROSHTHI LETTER BHA	[2DD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A27, 0x0021 };
    uint32_t const ces[9] = { 0x2DD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_152)
{
    // 10A27 003F;	
    // (‚Äé‚Äéê®ß‚Äé‚Äé) KHAROSHTHI LETTER BHA	[2DD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A27, 0x003F };
    uint32_t const ces[9] = { 0x2DD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_153)
{
    // 10A27 0061;	
    // (‚Äé‚Äéê®ß‚Äé‚Äé) KHAROSHTHI LETTER BHA	[2DD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A27, 0x0061 };
    uint32_t const ces[9] = { 0x2DD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_154)
{
    // 10A27 0041;	
    // (‚Äé‚Äéê®ß‚Äé‚Äé) KHAROSHTHI LETTER BHA	[2DD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A27, 0x0041 };
    uint32_t const ces[9] = { 0x2DD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_155)
{
    // 10A27 0062;	
    // (‚Äé‚Äéê®ß‚Äé‚Äé) KHAROSHTHI LETTER BHA	[2DD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A27, 0x0062 };
    uint32_t const ces[9] = { 0x2DD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_156)
{
    // 10A28 0021;	
    // (‚Äé‚Äéê®®‚Äé‚Äé) KHAROSHTHI LETTER MA	[2DD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A28, 0x0021 };
    uint32_t const ces[9] = { 0x2DD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_157)
{
    // 10A28 003F;	
    // (‚Äé‚Äéê®®‚Äé‚Äé) KHAROSHTHI LETTER MA	[2DD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A28, 0x003F };
    uint32_t const ces[9] = { 0x2DD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_158)
{
    // 10A28 0061;	
    // (‚Äé‚Äéê®®‚Äé‚Äé) KHAROSHTHI LETTER MA	[2DD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A28, 0x0061 };
    uint32_t const ces[9] = { 0x2DD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_159)
{
    // 10A28 0041;	
    // (‚Äé‚Äéê®®‚Äé‚Äé) KHAROSHTHI LETTER MA	[2DD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A28, 0x0041 };
    uint32_t const ces[9] = { 0x2DD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_160)
{
    // 10A28 0062;	
    // (‚Äé‚Äéê®®‚Äé‚Äé) KHAROSHTHI LETTER MA	[2DD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A28, 0x0062 };
    uint32_t const ces[9] = { 0x2DD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_161)
{
    // 10A29 0021;	
    // (‚Äé‚Äéê®©‚Äé‚Äé) KHAROSHTHI LETTER YA	[2DD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A29, 0x0021 };
    uint32_t const ces[9] = { 0x2DD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_162)
{
    // 10A29 003F;	
    // (‚Äé‚Äéê®©‚Äé‚Äé) KHAROSHTHI LETTER YA	[2DD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A29, 0x003F };
    uint32_t const ces[9] = { 0x2DD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_163)
{
    // 10A29 0061;	
    // (‚Äé‚Äéê®©‚Äé‚Äé) KHAROSHTHI LETTER YA	[2DD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A29, 0x0061 };
    uint32_t const ces[9] = { 0x2DD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_164)
{
    // 10A29 0041;	
    // (‚Äé‚Äéê®©‚Äé‚Äé) KHAROSHTHI LETTER YA	[2DD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A29, 0x0041 };
    uint32_t const ces[9] = { 0x2DD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_165)
{
    // 10A29 0062;	
    // (‚Äé‚Äéê®©‚Äé‚Äé) KHAROSHTHI LETTER YA	[2DD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A29, 0x0062 };
    uint32_t const ces[9] = { 0x2DD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_166)
{
    // 10A2A 0021;	
    // (‚Äé‚Äéê®™‚Äé‚Äé) KHAROSHTHI LETTER RA	[2DD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2A, 0x0021 };
    uint32_t const ces[9] = { 0x2DD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_167)
{
    // 10A2A 003F;	
    // (‚Äé‚Äéê®™‚Äé‚Äé) KHAROSHTHI LETTER RA	[2DD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2A, 0x003F };
    uint32_t const ces[9] = { 0x2DD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_168)
{
    // 10A2A 0061;	
    // (‚Äé‚Äéê®™‚Äé‚Äé) KHAROSHTHI LETTER RA	[2DD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2A, 0x0061 };
    uint32_t const ces[9] = { 0x2DD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_169)
{
    // 10A2A 0041;	
    // (‚Äé‚Äéê®™‚Äé‚Äé) KHAROSHTHI LETTER RA	[2DD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A2A, 0x0041 };
    uint32_t const ces[9] = { 0x2DD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_170)
{
    // 10A2A 0062;	
    // (‚Äé‚Äéê®™‚Äé‚Äé) KHAROSHTHI LETTER RA	[2DD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2A, 0x0062 };
    uint32_t const ces[9] = { 0x2DD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_171)
{
    // 10A2B 0021;	
    // (‚Äé‚Äéê®´‚Äé‚Äé) KHAROSHTHI LETTER LA	[2DDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2B, 0x0021 };
    uint32_t const ces[9] = { 0x2DDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_172)
{
    // 10A2B 003F;	
    // (‚Äé‚Äéê®´‚Äé‚Äé) KHAROSHTHI LETTER LA	[2DDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2B, 0x003F };
    uint32_t const ces[9] = { 0x2DDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_173)
{
    // 10A2B 0061;	
    // (‚Äé‚Äéê®´‚Äé‚Äé) KHAROSHTHI LETTER LA	[2DDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2B, 0x0061 };
    uint32_t const ces[9] = { 0x2DDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_174)
{
    // 10A2B 0041;	
    // (‚Äé‚Äéê®´‚Äé‚Äé) KHAROSHTHI LETTER LA	[2DDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A2B, 0x0041 };
    uint32_t const ces[9] = { 0x2DDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_175)
{
    // 10A2B 0062;	
    // (‚Äé‚Äéê®´‚Äé‚Äé) KHAROSHTHI LETTER LA	[2DDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2B, 0x0062 };
    uint32_t const ces[9] = { 0x2DDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_176)
{
    // 10A2C 0021;	
    // (‚Äé‚Äéê®¨‚Äé‚Äé) KHAROSHTHI LETTER VA	[2DDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2C, 0x0021 };
    uint32_t const ces[9] = { 0x2DDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_177)
{
    // 10A2C 003F;	
    // (‚Äé‚Äéê®¨‚Äé‚Äé) KHAROSHTHI LETTER VA	[2DDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2C, 0x003F };
    uint32_t const ces[9] = { 0x2DDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_178)
{
    // 10A2C 0061;	
    // (‚Äé‚Äéê®¨‚Äé‚Äé) KHAROSHTHI LETTER VA	[2DDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2C, 0x0061 };
    uint32_t const ces[9] = { 0x2DDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_179)
{
    // 10A2C 0041;	
    // (‚Äé‚Äéê®¨‚Äé‚Äé) KHAROSHTHI LETTER VA	[2DDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A2C, 0x0041 };
    uint32_t const ces[9] = { 0x2DDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_180)
{
    // 10A2C 0062;	
    // (‚Äé‚Äéê®¨‚Äé‚Äé) KHAROSHTHI LETTER VA	[2DDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2C, 0x0062 };
    uint32_t const ces[9] = { 0x2DDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_181)
{
    // 10A2D 0021;	
    // (‚Äé‚Äéê®≠‚Äé‚Äé) KHAROSHTHI LETTER SHA	[2DDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2D, 0x0021 };
    uint32_t const ces[9] = { 0x2DDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_182)
{
    // 10A2D 003F;	
    // (‚Äé‚Äéê®≠‚Äé‚Äé) KHAROSHTHI LETTER SHA	[2DDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2D, 0x003F };
    uint32_t const ces[9] = { 0x2DDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_183)
{
    // 10A2D 0061;	
    // (‚Äé‚Äéê®≠‚Äé‚Äé) KHAROSHTHI LETTER SHA	[2DDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2D, 0x0061 };
    uint32_t const ces[9] = { 0x2DDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_184)
{
    // 10A2D 0041;	
    // (‚Äé‚Äéê®≠‚Äé‚Äé) KHAROSHTHI LETTER SHA	[2DDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A2D, 0x0041 };
    uint32_t const ces[9] = { 0x2DDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_185)
{
    // 10A2D 0062;	
    // (‚Äé‚Äéê®≠‚Äé‚Äé) KHAROSHTHI LETTER SHA	[2DDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2D, 0x0062 };
    uint32_t const ces[9] = { 0x2DDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_186)
{
    // 10A2E 0021;	
    // (‚Äé‚Äéê®Æ‚Äé‚Äé) KHAROSHTHI LETTER SSA	[2DDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2E, 0x0021 };
    uint32_t const ces[9] = { 0x2DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_187)
{
    // 10A2E 003F;	
    // (‚Äé‚Äéê®Æ‚Äé‚Äé) KHAROSHTHI LETTER SSA	[2DDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2E, 0x003F };
    uint32_t const ces[9] = { 0x2DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_188)
{
    // 10A2E 0061;	
    // (‚Äé‚Äéê®Æ‚Äé‚Äé) KHAROSHTHI LETTER SSA	[2DDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2E, 0x0061 };
    uint32_t const ces[9] = { 0x2DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_189)
{
    // 10A2E 0041;	
    // (‚Äé‚Äéê®Æ‚Äé‚Äé) KHAROSHTHI LETTER SSA	[2DDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A2E, 0x0041 };
    uint32_t const ces[9] = { 0x2DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_190)
{
    // 10A2E 0062;	
    // (‚Äé‚Äéê®Æ‚Äé‚Äé) KHAROSHTHI LETTER SSA	[2DDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2E, 0x0062 };
    uint32_t const ces[9] = { 0x2DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_191)
{
    // 10A2F 0021;	
    // (‚Äé‚Äéê®Ø‚Äé‚Äé) KHAROSHTHI LETTER SA	[2DDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2F, 0x0021 };
    uint32_t const ces[9] = { 0x2DDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_192)
{
    // 10A2F 003F;	
    // (‚Äé‚Äéê®Ø‚Äé‚Äé) KHAROSHTHI LETTER SA	[2DDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2F, 0x003F };
    uint32_t const ces[9] = { 0x2DDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_193)
{
    // 10A2F 0061;	
    // (‚Äé‚Äéê®Ø‚Äé‚Äé) KHAROSHTHI LETTER SA	[2DDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2F, 0x0061 };
    uint32_t const ces[9] = { 0x2DDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_194)
{
    // 10A2F 0041;	
    // (‚Äé‚Äéê®Ø‚Äé‚Äé) KHAROSHTHI LETTER SA	[2DDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A2F, 0x0041 };
    uint32_t const ces[9] = { 0x2DDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_195)
{
    // 10A2F 0062;	
    // (‚Äé‚Äéê®Ø‚Äé‚Äé) KHAROSHTHI LETTER SA	[2DDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A2F, 0x0062 };
    uint32_t const ces[9] = { 0x2DDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_196)
{
    // 10A30 0021;	
    // (‚Äé‚Äéê®∞‚Äé‚Äé) KHAROSHTHI LETTER ZA	[2DDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A30, 0x0021 };
    uint32_t const ces[9] = { 0x2DDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_197)
{
    // 10A30 003F;	
    // (‚Äé‚Äéê®∞‚Äé‚Äé) KHAROSHTHI LETTER ZA	[2DDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A30, 0x003F };
    uint32_t const ces[9] = { 0x2DDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_198)
{
    // 10A30 0061;	
    // (‚Äé‚Äéê®∞‚Äé‚Äé) KHAROSHTHI LETTER ZA	[2DDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A30, 0x0061 };
    uint32_t const ces[9] = { 0x2DDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_199)
{
    // 10A30 0041;	
    // (‚Äé‚Äéê®∞‚Äé‚Äé) KHAROSHTHI LETTER ZA	[2DDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A30, 0x0041 };
    uint32_t const ces[9] = { 0x2DDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_200)
{
    // 10A30 0062;	
    // (‚Äé‚Äéê®∞‚Äé‚Äé) KHAROSHTHI LETTER ZA	[2DDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A30, 0x0062 };
    uint32_t const ces[9] = { 0x2DDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_201)
{
    // 10A31 0021;	
    // (‚Äé‚Äéê®±‚Äé‚Äé) KHAROSHTHI LETTER HA	[2DE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A31, 0x0021 };
    uint32_t const ces[9] = { 0x2DE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_202)
{
    // 10A31 003F;	
    // (‚Äé‚Äéê®±‚Äé‚Äé) KHAROSHTHI LETTER HA	[2DE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A31, 0x003F };
    uint32_t const ces[9] = { 0x2DE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_203)
{
    // 10A31 0061;	
    // (‚Äé‚Äéê®±‚Äé‚Äé) KHAROSHTHI LETTER HA	[2DE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A31, 0x0061 };
    uint32_t const ces[9] = { 0x2DE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_204)
{
    // 10A31 0041;	
    // (‚Äé‚Äéê®±‚Äé‚Äé) KHAROSHTHI LETTER HA	[2DE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A31, 0x0041 };
    uint32_t const ces[9] = { 0x2DE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_205)
{
    // 10A31 0062;	
    // (‚Äé‚Äéê®±‚Äé‚Äé) KHAROSHTHI LETTER HA	[2DE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A31, 0x0062 };
    uint32_t const ces[9] = { 0x2DE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_206)
{
    // 10A32 0021;	
    // (‚Äé‚Äéê®≤‚Äé‚Äé) KHAROSHTHI LETTER KKA	[2DE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A32, 0x0021 };
    uint32_t const ces[9] = { 0x2DE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_207)
{
    // 10A32 003F;	
    // (‚Äé‚Äéê®≤‚Äé‚Äé) KHAROSHTHI LETTER KKA	[2DE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A32, 0x003F };
    uint32_t const ces[9] = { 0x2DE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_208)
{
    // 10A32 0061;	
    // (‚Äé‚Äéê®≤‚Äé‚Äé) KHAROSHTHI LETTER KKA	[2DE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A32, 0x0061 };
    uint32_t const ces[9] = { 0x2DE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_209)
{
    // 10A32 0041;	
    // (‚Äé‚Äéê®≤‚Äé‚Äé) KHAROSHTHI LETTER KKA	[2DE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A32, 0x0041 };
    uint32_t const ces[9] = { 0x2DE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_210)
{
    // 10A32 0062;	
    // (‚Äé‚Äéê®≤‚Äé‚Äé) KHAROSHTHI LETTER KKA	[2DE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A32, 0x0062 };
    uint32_t const ces[9] = { 0x2DE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_211)
{
    // 10A33 0021;	
    // (‚Äé‚Äéê®≥‚Äé‚Äé) KHAROSHTHI LETTER TTTHA	[2DE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A33, 0x0021 };
    uint32_t const ces[9] = { 0x2DE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_212)
{
    // 10A33 003F;	
    // (‚Äé‚Äéê®≥‚Äé‚Äé) KHAROSHTHI LETTER TTTHA	[2DE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A33, 0x003F };
    uint32_t const ces[9] = { 0x2DE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_213)
{
    // 10A33 0061;	
    // (‚Äé‚Äéê®≥‚Äé‚Äé) KHAROSHTHI LETTER TTTHA	[2DE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A33, 0x0061 };
    uint32_t const ces[9] = { 0x2DE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_214)
{
    // 10A33 0041;	
    // (‚Äé‚Äéê®≥‚Äé‚Äé) KHAROSHTHI LETTER TTTHA	[2DE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A33, 0x0041 };
    uint32_t const ces[9] = { 0x2DE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_215)
{
    // 10A33 0062;	
    // (‚Äé‚Äéê®≥‚Äé‚Äé) KHAROSHTHI LETTER TTTHA	[2DE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A33, 0x0062 };
    uint32_t const ces[9] = { 0x2DE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_216)
{
    // 0334 10A3F;	
    // (ê®ø) KHAROSHTHI VIRAMA	[2DE3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x10A3F };
    uint32_t const ces[8] = { 0x2DE3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_217)
{
    // 10A3F 0334;	
    // (ê®ø) KHAROSHTHI VIRAMA	[2DE3 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A3F, 0x0334 };
    uint32_t const ces[8] = { 0x2DE3, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_218)
{
    // 10A3F 0021;	
    // (ê®ø) KHAROSHTHI VIRAMA	[2DE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A3F, 0x0021 };
    uint32_t const ces[9] = { 0x2DE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_219)
{
    // 10A3F 003F;	
    // (ê®ø) KHAROSHTHI VIRAMA	[2DE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A3F, 0x003F };
    uint32_t const ces[9] = { 0x2DE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_220)
{
    // 10A3F 0061;	
    // (ê®ø) KHAROSHTHI VIRAMA	[2DE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A3F, 0x0061 };
    uint32_t const ces[9] = { 0x2DE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_221)
{
    // 10A3F 0041;	
    // (ê®ø) KHAROSHTHI VIRAMA	[2DE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A3F, 0x0041 };
    uint32_t const ces[9] = { 0x2DE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_222)
{
    // 10A3F 0062;	
    // (ê®ø) KHAROSHTHI VIRAMA	[2DE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A3F, 0x0062 };
    uint32_t const ces[9] = { 0x2DE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_223)
{
    // 11C00 0021;	
    // (ë∞Ä) BHAIKSUKI LETTER A	[2DE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C00, 0x0021 };
    uint32_t const ces[9] = { 0x2DE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_224)
{
    // 11C00 003F;	
    // (ë∞Ä) BHAIKSUKI LETTER A	[2DE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C00, 0x003F };
    uint32_t const ces[9] = { 0x2DE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_225)
{
    // 11C00 0061;	
    // (ë∞Ä) BHAIKSUKI LETTER A	[2DE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C00, 0x0061 };
    uint32_t const ces[9] = { 0x2DE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_226)
{
    // 11C00 0041;	
    // (ë∞Ä) BHAIKSUKI LETTER A	[2DE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C00, 0x0041 };
    uint32_t const ces[9] = { 0x2DE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_227)
{
    // 11C00 0062;	
    // (ë∞Ä) BHAIKSUKI LETTER A	[2DE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C00, 0x0062 };
    uint32_t const ces[9] = { 0x2DE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_228)
{
    // 11C01 0021;	
    // (ë∞Å) BHAIKSUKI LETTER AA	[2DE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C01, 0x0021 };
    uint32_t const ces[9] = { 0x2DE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_229)
{
    // 11C01 003F;	
    // (ë∞Å) BHAIKSUKI LETTER AA	[2DE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C01, 0x003F };
    uint32_t const ces[9] = { 0x2DE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_230)
{
    // 11C01 0061;	
    // (ë∞Å) BHAIKSUKI LETTER AA	[2DE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C01, 0x0061 };
    uint32_t const ces[9] = { 0x2DE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_231)
{
    // 11C01 0041;	
    // (ë∞Å) BHAIKSUKI LETTER AA	[2DE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C01, 0x0041 };
    uint32_t const ces[9] = { 0x2DE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_232)
{
    // 11C01 0062;	
    // (ë∞Å) BHAIKSUKI LETTER AA	[2DE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C01, 0x0062 };
    uint32_t const ces[9] = { 0x2DE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_233)
{
    // 11C02 0021;	
    // (ë∞Ç) BHAIKSUKI LETTER I	[2DE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C02, 0x0021 };
    uint32_t const ces[9] = { 0x2DE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_234)
{
    // 11C02 003F;	
    // (ë∞Ç) BHAIKSUKI LETTER I	[2DE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C02, 0x003F };
    uint32_t const ces[9] = { 0x2DE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_235)
{
    // 11C02 0061;	
    // (ë∞Ç) BHAIKSUKI LETTER I	[2DE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C02, 0x0061 };
    uint32_t const ces[9] = { 0x2DE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_236)
{
    // 11C02 0041;	
    // (ë∞Ç) BHAIKSUKI LETTER I	[2DE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C02, 0x0041 };
    uint32_t const ces[9] = { 0x2DE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_237)
{
    // 11C02 0062;	
    // (ë∞Ç) BHAIKSUKI LETTER I	[2DE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C02, 0x0062 };
    uint32_t const ces[9] = { 0x2DE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_238)
{
    // 11C03 0021;	
    // (ë∞É) BHAIKSUKI LETTER II	[2DE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C03, 0x0021 };
    uint32_t const ces[9] = { 0x2DE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_239)
{
    // 11C03 003F;	
    // (ë∞É) BHAIKSUKI LETTER II	[2DE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C03, 0x003F };
    uint32_t const ces[9] = { 0x2DE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_240)
{
    // 11C03 0061;	
    // (ë∞É) BHAIKSUKI LETTER II	[2DE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C03, 0x0061 };
    uint32_t const ces[9] = { 0x2DE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_241)
{
    // 11C03 0041;	
    // (ë∞É) BHAIKSUKI LETTER II	[2DE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C03, 0x0041 };
    uint32_t const ces[9] = { 0x2DE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_242)
{
    // 11C03 0062;	
    // (ë∞É) BHAIKSUKI LETTER II	[2DE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C03, 0x0062 };
    uint32_t const ces[9] = { 0x2DE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_243)
{
    // 11C04 0021;	
    // (ë∞Ñ) BHAIKSUKI LETTER U	[2DE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C04, 0x0021 };
    uint32_t const ces[9] = { 0x2DE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_244)
{
    // 11C04 003F;	
    // (ë∞Ñ) BHAIKSUKI LETTER U	[2DE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C04, 0x003F };
    uint32_t const ces[9] = { 0x2DE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_245)
{
    // 11C04 0061;	
    // (ë∞Ñ) BHAIKSUKI LETTER U	[2DE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C04, 0x0061 };
    uint32_t const ces[9] = { 0x2DE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_246)
{
    // 11C04 0041;	
    // (ë∞Ñ) BHAIKSUKI LETTER U	[2DE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C04, 0x0041 };
    uint32_t const ces[9] = { 0x2DE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_247)
{
    // 11C04 0062;	
    // (ë∞Ñ) BHAIKSUKI LETTER U	[2DE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C04, 0x0062 };
    uint32_t const ces[9] = { 0x2DE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_248)
{
    // 11C05 0021;	
    // (ë∞Ö) BHAIKSUKI LETTER UU	[2DE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C05, 0x0021 };
    uint32_t const ces[9] = { 0x2DE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_249)
{
    // 11C05 003F;	
    // (ë∞Ö) BHAIKSUKI LETTER UU	[2DE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C05, 0x003F };
    uint32_t const ces[9] = { 0x2DE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_250)
{
    // 11C05 0061;	
    // (ë∞Ö) BHAIKSUKI LETTER UU	[2DE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C05, 0x0061 };
    uint32_t const ces[9] = { 0x2DE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_251)
{
    // 11C05 0041;	
    // (ë∞Ö) BHAIKSUKI LETTER UU	[2DE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C05, 0x0041 };
    uint32_t const ces[9] = { 0x2DE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_252)
{
    // 11C05 0062;	
    // (ë∞Ö) BHAIKSUKI LETTER UU	[2DE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C05, 0x0062 };
    uint32_t const ces[9] = { 0x2DE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_253)
{
    // 11C06 0021;	
    // (ë∞Ü) BHAIKSUKI LETTER VOCALIC R	[2DEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C06, 0x0021 };
    uint32_t const ces[9] = { 0x2DEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_254)
{
    // 11C06 003F;	
    // (ë∞Ü) BHAIKSUKI LETTER VOCALIC R	[2DEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C06, 0x003F };
    uint32_t const ces[9] = { 0x2DEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_255)
{
    // 11C06 0061;	
    // (ë∞Ü) BHAIKSUKI LETTER VOCALIC R	[2DEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C06, 0x0061 };
    uint32_t const ces[9] = { 0x2DEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_256)
{
    // 11C06 0041;	
    // (ë∞Ü) BHAIKSUKI LETTER VOCALIC R	[2DEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C06, 0x0041 };
    uint32_t const ces[9] = { 0x2DEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_257)
{
    // 11C06 0062;	
    // (ë∞Ü) BHAIKSUKI LETTER VOCALIC R	[2DEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C06, 0x0062 };
    uint32_t const ces[9] = { 0x2DEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_258)
{
    // 11C07 0021;	
    // (ë∞á) BHAIKSUKI LETTER VOCALIC RR	[2DEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C07, 0x0021 };
    uint32_t const ces[9] = { 0x2DEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_259)
{
    // 11C07 003F;	
    // (ë∞á) BHAIKSUKI LETTER VOCALIC RR	[2DEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C07, 0x003F };
    uint32_t const ces[9] = { 0x2DEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_260)
{
    // 11C07 0061;	
    // (ë∞á) BHAIKSUKI LETTER VOCALIC RR	[2DEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C07, 0x0061 };
    uint32_t const ces[9] = { 0x2DEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_261)
{
    // 11C07 0041;	
    // (ë∞á) BHAIKSUKI LETTER VOCALIC RR	[2DEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C07, 0x0041 };
    uint32_t const ces[9] = { 0x2DEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_262)
{
    // 11C07 0062;	
    // (ë∞á) BHAIKSUKI LETTER VOCALIC RR	[2DEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C07, 0x0062 };
    uint32_t const ces[9] = { 0x2DEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_263)
{
    // 11C08 0021;	
    // (ë∞à) BHAIKSUKI LETTER VOCALIC L	[2DEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C08, 0x0021 };
    uint32_t const ces[9] = { 0x2DEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_264)
{
    // 11C08 003F;	
    // (ë∞à) BHAIKSUKI LETTER VOCALIC L	[2DEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C08, 0x003F };
    uint32_t const ces[9] = { 0x2DEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_265)
{
    // 11C08 0061;	
    // (ë∞à) BHAIKSUKI LETTER VOCALIC L	[2DEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C08, 0x0061 };
    uint32_t const ces[9] = { 0x2DEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_266)
{
    // 11C08 0041;	
    // (ë∞à) BHAIKSUKI LETTER VOCALIC L	[2DEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C08, 0x0041 };
    uint32_t const ces[9] = { 0x2DEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_267)
{
    // 11C08 0062;	
    // (ë∞à) BHAIKSUKI LETTER VOCALIC L	[2DEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C08, 0x0062 };
    uint32_t const ces[9] = { 0x2DEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_268)
{
    // 11C0A 0021;	
    // (ë∞ä) BHAIKSUKI LETTER E	[2DED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0A, 0x0021 };
    uint32_t const ces[9] = { 0x2DED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_269)
{
    // 11C0A 003F;	
    // (ë∞ä) BHAIKSUKI LETTER E	[2DED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0A, 0x003F };
    uint32_t const ces[9] = { 0x2DED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_270)
{
    // 11C0A 0061;	
    // (ë∞ä) BHAIKSUKI LETTER E	[2DED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0A, 0x0061 };
    uint32_t const ces[9] = { 0x2DED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_271)
{
    // 11C0A 0041;	
    // (ë∞ä) BHAIKSUKI LETTER E	[2DED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C0A, 0x0041 };
    uint32_t const ces[9] = { 0x2DED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_272)
{
    // 11C0A 0062;	
    // (ë∞ä) BHAIKSUKI LETTER E	[2DED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0A, 0x0062 };
    uint32_t const ces[9] = { 0x2DED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_273)
{
    // 11C0B 0021;	
    // (ë∞ã) BHAIKSUKI LETTER AI	[2DEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0B, 0x0021 };
    uint32_t const ces[9] = { 0x2DEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_274)
{
    // 11C0B 003F;	
    // (ë∞ã) BHAIKSUKI LETTER AI	[2DEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0B, 0x003F };
    uint32_t const ces[9] = { 0x2DEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_275)
{
    // 11C0B 0061;	
    // (ë∞ã) BHAIKSUKI LETTER AI	[2DEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0B, 0x0061 };
    uint32_t const ces[9] = { 0x2DEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_276)
{
    // 11C0B 0041;	
    // (ë∞ã) BHAIKSUKI LETTER AI	[2DEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C0B, 0x0041 };
    uint32_t const ces[9] = { 0x2DEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_277)
{
    // 11C0B 0062;	
    // (ë∞ã) BHAIKSUKI LETTER AI	[2DEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0B, 0x0062 };
    uint32_t const ces[9] = { 0x2DEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_278)
{
    // 11C0C 0021;	
    // (ë∞å) BHAIKSUKI LETTER O	[2DEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0C, 0x0021 };
    uint32_t const ces[9] = { 0x2DEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_279)
{
    // 11C0C 003F;	
    // (ë∞å) BHAIKSUKI LETTER O	[2DEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0C, 0x003F };
    uint32_t const ces[9] = { 0x2DEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_280)
{
    // 11C0C 0061;	
    // (ë∞å) BHAIKSUKI LETTER O	[2DEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0C, 0x0061 };
    uint32_t const ces[9] = { 0x2DEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_281)
{
    // 11C0C 0041;	
    // (ë∞å) BHAIKSUKI LETTER O	[2DEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C0C, 0x0041 };
    uint32_t const ces[9] = { 0x2DEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_282)
{
    // 11C0C 0062;	
    // (ë∞å) BHAIKSUKI LETTER O	[2DEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0C, 0x0062 };
    uint32_t const ces[9] = { 0x2DEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_283)
{
    // 11C0D 0021;	
    // (ë∞ç) BHAIKSUKI LETTER AU	[2DF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0D, 0x0021 };
    uint32_t const ces[9] = { 0x2DF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_284)
{
    // 11C0D 003F;	
    // (ë∞ç) BHAIKSUKI LETTER AU	[2DF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0D, 0x003F };
    uint32_t const ces[9] = { 0x2DF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_285)
{
    // 11C0D 0061;	
    // (ë∞ç) BHAIKSUKI LETTER AU	[2DF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0D, 0x0061 };
    uint32_t const ces[9] = { 0x2DF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_286)
{
    // 11C0D 0041;	
    // (ë∞ç) BHAIKSUKI LETTER AU	[2DF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C0D, 0x0041 };
    uint32_t const ces[9] = { 0x2DF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_287)
{
    // 11C0D 0062;	
    // (ë∞ç) BHAIKSUKI LETTER AU	[2DF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0D, 0x0062 };
    uint32_t const ces[9] = { 0x2DF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_288)
{
    // 11C0E 0021;	
    // (ë∞é) BHAIKSUKI LETTER KA	[2DF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0E, 0x0021 };
    uint32_t const ces[9] = { 0x2DF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_289)
{
    // 11C0E 003F;	
    // (ë∞é) BHAIKSUKI LETTER KA	[2DF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0E, 0x003F };
    uint32_t const ces[9] = { 0x2DF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_290)
{
    // 11C0E 0061;	
    // (ë∞é) BHAIKSUKI LETTER KA	[2DF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0E, 0x0061 };
    uint32_t const ces[9] = { 0x2DF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_291)
{
    // 11C0E 0041;	
    // (ë∞é) BHAIKSUKI LETTER KA	[2DF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C0E, 0x0041 };
    uint32_t const ces[9] = { 0x2DF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_292)
{
    // 11C0E 0062;	
    // (ë∞é) BHAIKSUKI LETTER KA	[2DF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0E, 0x0062 };
    uint32_t const ces[9] = { 0x2DF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_293)
{
    // 11C0F 0021;	
    // (ë∞è) BHAIKSUKI LETTER KHA	[2DF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0F, 0x0021 };
    uint32_t const ces[9] = { 0x2DF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_294)
{
    // 11C0F 003F;	
    // (ë∞è) BHAIKSUKI LETTER KHA	[2DF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0F, 0x003F };
    uint32_t const ces[9] = { 0x2DF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_295)
{
    // 11C0F 0061;	
    // (ë∞è) BHAIKSUKI LETTER KHA	[2DF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0F, 0x0061 };
    uint32_t const ces[9] = { 0x2DF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_296)
{
    // 11C0F 0041;	
    // (ë∞è) BHAIKSUKI LETTER KHA	[2DF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C0F, 0x0041 };
    uint32_t const ces[9] = { 0x2DF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_297)
{
    // 11C0F 0062;	
    // (ë∞è) BHAIKSUKI LETTER KHA	[2DF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C0F, 0x0062 };
    uint32_t const ces[9] = { 0x2DF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_298)
{
    // 11C10 0021;	
    // (ë∞ê) BHAIKSUKI LETTER GA	[2DF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C10, 0x0021 };
    uint32_t const ces[9] = { 0x2DF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_299)
{
    // 11C10 003F;	
    // (ë∞ê) BHAIKSUKI LETTER GA	[2DF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C10, 0x003F };
    uint32_t const ces[9] = { 0x2DF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_300)
{
    // 11C10 0061;	
    // (ë∞ê) BHAIKSUKI LETTER GA	[2DF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C10, 0x0061 };
    uint32_t const ces[9] = { 0x2DF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_301)
{
    // 11C10 0041;	
    // (ë∞ê) BHAIKSUKI LETTER GA	[2DF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C10, 0x0041 };
    uint32_t const ces[9] = { 0x2DF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_302)
{
    // 11C10 0062;	
    // (ë∞ê) BHAIKSUKI LETTER GA	[2DF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C10, 0x0062 };
    uint32_t const ces[9] = { 0x2DF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_303)
{
    // 11C11 0021;	
    // (ë∞ë) BHAIKSUKI LETTER GHA	[2DF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C11, 0x0021 };
    uint32_t const ces[9] = { 0x2DF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_304)
{
    // 11C11 003F;	
    // (ë∞ë) BHAIKSUKI LETTER GHA	[2DF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C11, 0x003F };
    uint32_t const ces[9] = { 0x2DF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_305)
{
    // 11C11 0061;	
    // (ë∞ë) BHAIKSUKI LETTER GHA	[2DF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C11, 0x0061 };
    uint32_t const ces[9] = { 0x2DF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_306)
{
    // 11C11 0041;	
    // (ë∞ë) BHAIKSUKI LETTER GHA	[2DF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C11, 0x0041 };
    uint32_t const ces[9] = { 0x2DF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_307)
{
    // 11C11 0062;	
    // (ë∞ë) BHAIKSUKI LETTER GHA	[2DF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C11, 0x0062 };
    uint32_t const ces[9] = { 0x2DF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_308)
{
    // 11C12 0021;	
    // (ë∞í) BHAIKSUKI LETTER NGA	[2DF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C12, 0x0021 };
    uint32_t const ces[9] = { 0x2DF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_309)
{
    // 11C12 003F;	
    // (ë∞í) BHAIKSUKI LETTER NGA	[2DF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C12, 0x003F };
    uint32_t const ces[9] = { 0x2DF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_310)
{
    // 11C12 0061;	
    // (ë∞í) BHAIKSUKI LETTER NGA	[2DF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C12, 0x0061 };
    uint32_t const ces[9] = { 0x2DF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_311)
{
    // 11C12 0041;	
    // (ë∞í) BHAIKSUKI LETTER NGA	[2DF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C12, 0x0041 };
    uint32_t const ces[9] = { 0x2DF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_312)
{
    // 11C12 0062;	
    // (ë∞í) BHAIKSUKI LETTER NGA	[2DF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C12, 0x0062 };
    uint32_t const ces[9] = { 0x2DF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_313)
{
    // 11C13 0021;	
    // (ë∞ì) BHAIKSUKI LETTER CA	[2DF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C13, 0x0021 };
    uint32_t const ces[9] = { 0x2DF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_314)
{
    // 11C13 003F;	
    // (ë∞ì) BHAIKSUKI LETTER CA	[2DF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C13, 0x003F };
    uint32_t const ces[9] = { 0x2DF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_315)
{
    // 11C13 0061;	
    // (ë∞ì) BHAIKSUKI LETTER CA	[2DF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C13, 0x0061 };
    uint32_t const ces[9] = { 0x2DF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_316)
{
    // 11C13 0041;	
    // (ë∞ì) BHAIKSUKI LETTER CA	[2DF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C13, 0x0041 };
    uint32_t const ces[9] = { 0x2DF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_317)
{
    // 11C13 0062;	
    // (ë∞ì) BHAIKSUKI LETTER CA	[2DF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C13, 0x0062 };
    uint32_t const ces[9] = { 0x2DF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_318)
{
    // 11C14 0021;	
    // (ë∞î) BHAIKSUKI LETTER CHA	[2DF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C14, 0x0021 };
    uint32_t const ces[9] = { 0x2DF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_319)
{
    // 11C14 003F;	
    // (ë∞î) BHAIKSUKI LETTER CHA	[2DF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C14, 0x003F };
    uint32_t const ces[9] = { 0x2DF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_320)
{
    // 11C14 0061;	
    // (ë∞î) BHAIKSUKI LETTER CHA	[2DF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C14, 0x0061 };
    uint32_t const ces[9] = { 0x2DF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_321)
{
    // 11C14 0041;	
    // (ë∞î) BHAIKSUKI LETTER CHA	[2DF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C14, 0x0041 };
    uint32_t const ces[9] = { 0x2DF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_322)
{
    // 11C14 0062;	
    // (ë∞î) BHAIKSUKI LETTER CHA	[2DF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C14, 0x0062 };
    uint32_t const ces[9] = { 0x2DF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_323)
{
    // 11C15 0021;	
    // (ë∞ï) BHAIKSUKI LETTER JA	[2DF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C15, 0x0021 };
    uint32_t const ces[9] = { 0x2DF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_324)
{
    // 11C15 003F;	
    // (ë∞ï) BHAIKSUKI LETTER JA	[2DF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C15, 0x003F };
    uint32_t const ces[9] = { 0x2DF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_325)
{
    // 11C15 0061;	
    // (ë∞ï) BHAIKSUKI LETTER JA	[2DF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C15, 0x0061 };
    uint32_t const ces[9] = { 0x2DF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_326)
{
    // 11C15 0041;	
    // (ë∞ï) BHAIKSUKI LETTER JA	[2DF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C15, 0x0041 };
    uint32_t const ces[9] = { 0x2DF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_327)
{
    // 11C15 0062;	
    // (ë∞ï) BHAIKSUKI LETTER JA	[2DF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C15, 0x0062 };
    uint32_t const ces[9] = { 0x2DF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_328)
{
    // 11C16 0021;	
    // (ë∞ñ) BHAIKSUKI LETTER JHA	[2DF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C16, 0x0021 };
    uint32_t const ces[9] = { 0x2DF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_329)
{
    // 11C16 003F;	
    // (ë∞ñ) BHAIKSUKI LETTER JHA	[2DF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C16, 0x003F };
    uint32_t const ces[9] = { 0x2DF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_330)
{
    // 11C16 0061;	
    // (ë∞ñ) BHAIKSUKI LETTER JHA	[2DF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C16, 0x0061 };
    uint32_t const ces[9] = { 0x2DF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_331)
{
    // 11C16 0041;	
    // (ë∞ñ) BHAIKSUKI LETTER JHA	[2DF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C16, 0x0041 };
    uint32_t const ces[9] = { 0x2DF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_332)
{
    // 11C16 0062;	
    // (ë∞ñ) BHAIKSUKI LETTER JHA	[2DF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C16, 0x0062 };
    uint32_t const ces[9] = { 0x2DF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_333)
{
    // 11C17 0021;	
    // (ë∞ó) BHAIKSUKI LETTER NYA	[2DFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C17, 0x0021 };
    uint32_t const ces[9] = { 0x2DFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_334)
{
    // 11C17 003F;	
    // (ë∞ó) BHAIKSUKI LETTER NYA	[2DFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C17, 0x003F };
    uint32_t const ces[9] = { 0x2DFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_335)
{
    // 11C17 0061;	
    // (ë∞ó) BHAIKSUKI LETTER NYA	[2DFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C17, 0x0061 };
    uint32_t const ces[9] = { 0x2DFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_336)
{
    // 11C17 0041;	
    // (ë∞ó) BHAIKSUKI LETTER NYA	[2DFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C17, 0x0041 };
    uint32_t const ces[9] = { 0x2DFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_337)
{
    // 11C17 0062;	
    // (ë∞ó) BHAIKSUKI LETTER NYA	[2DFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C17, 0x0062 };
    uint32_t const ces[9] = { 0x2DFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_338)
{
    // 11C18 0021;	
    // (ë∞ò) BHAIKSUKI LETTER TTA	[2DFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C18, 0x0021 };
    uint32_t const ces[9] = { 0x2DFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_339)
{
    // 11C18 003F;	
    // (ë∞ò) BHAIKSUKI LETTER TTA	[2DFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C18, 0x003F };
    uint32_t const ces[9] = { 0x2DFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_340)
{
    // 11C18 0061;	
    // (ë∞ò) BHAIKSUKI LETTER TTA	[2DFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C18, 0x0061 };
    uint32_t const ces[9] = { 0x2DFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_341)
{
    // 11C18 0041;	
    // (ë∞ò) BHAIKSUKI LETTER TTA	[2DFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C18, 0x0041 };
    uint32_t const ces[9] = { 0x2DFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_342)
{
    // 11C18 0062;	
    // (ë∞ò) BHAIKSUKI LETTER TTA	[2DFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C18, 0x0062 };
    uint32_t const ces[9] = { 0x2DFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_343)
{
    // 11C19 0021;	
    // (ë∞ô) BHAIKSUKI LETTER TTHA	[2DFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C19, 0x0021 };
    uint32_t const ces[9] = { 0x2DFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_344)
{
    // 11C19 003F;	
    // (ë∞ô) BHAIKSUKI LETTER TTHA	[2DFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C19, 0x003F };
    uint32_t const ces[9] = { 0x2DFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_345)
{
    // 11C19 0061;	
    // (ë∞ô) BHAIKSUKI LETTER TTHA	[2DFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C19, 0x0061 };
    uint32_t const ces[9] = { 0x2DFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_346)
{
    // 11C19 0041;	
    // (ë∞ô) BHAIKSUKI LETTER TTHA	[2DFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C19, 0x0041 };
    uint32_t const ces[9] = { 0x2DFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_347)
{
    // 11C19 0062;	
    // (ë∞ô) BHAIKSUKI LETTER TTHA	[2DFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C19, 0x0062 };
    uint32_t const ces[9] = { 0x2DFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_348)
{
    // 11C1A 0021;	
    // (ë∞ö) BHAIKSUKI LETTER DDA	[2DFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1A, 0x0021 };
    uint32_t const ces[9] = { 0x2DFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_349)
{
    // 11C1A 003F;	
    // (ë∞ö) BHAIKSUKI LETTER DDA	[2DFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1A, 0x003F };
    uint32_t const ces[9] = { 0x2DFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_350)
{
    // 11C1A 0061;	
    // (ë∞ö) BHAIKSUKI LETTER DDA	[2DFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1A, 0x0061 };
    uint32_t const ces[9] = { 0x2DFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_351)
{
    // 11C1A 0041;	
    // (ë∞ö) BHAIKSUKI LETTER DDA	[2DFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C1A, 0x0041 };
    uint32_t const ces[9] = { 0x2DFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_352)
{
    // 11C1A 0062;	
    // (ë∞ö) BHAIKSUKI LETTER DDA	[2DFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1A, 0x0062 };
    uint32_t const ces[9] = { 0x2DFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_353)
{
    // 11C1B 0021;	
    // (ë∞õ) BHAIKSUKI LETTER DDHA	[2DFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1B, 0x0021 };
    uint32_t const ces[9] = { 0x2DFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_354)
{
    // 11C1B 003F;	
    // (ë∞õ) BHAIKSUKI LETTER DDHA	[2DFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1B, 0x003F };
    uint32_t const ces[9] = { 0x2DFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_355)
{
    // 11C1B 0061;	
    // (ë∞õ) BHAIKSUKI LETTER DDHA	[2DFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1B, 0x0061 };
    uint32_t const ces[9] = { 0x2DFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_356)
{
    // 11C1B 0041;	
    // (ë∞õ) BHAIKSUKI LETTER DDHA	[2DFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C1B, 0x0041 };
    uint32_t const ces[9] = { 0x2DFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_357)
{
    // 11C1B 0062;	
    // (ë∞õ) BHAIKSUKI LETTER DDHA	[2DFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1B, 0x0062 };
    uint32_t const ces[9] = { 0x2DFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_358)
{
    // 11C1C 0021;	
    // (ë∞ú) BHAIKSUKI LETTER NNA	[2DFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1C, 0x0021 };
    uint32_t const ces[9] = { 0x2DFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_359)
{
    // 11C1C 003F;	
    // (ë∞ú) BHAIKSUKI LETTER NNA	[2DFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1C, 0x003F };
    uint32_t const ces[9] = { 0x2DFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_360)
{
    // 11C1C 0061;	
    // (ë∞ú) BHAIKSUKI LETTER NNA	[2DFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1C, 0x0061 };
    uint32_t const ces[9] = { 0x2DFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_361)
{
    // 11C1C 0041;	
    // (ë∞ú) BHAIKSUKI LETTER NNA	[2DFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C1C, 0x0041 };
    uint32_t const ces[9] = { 0x2DFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_362)
{
    // 11C1C 0062;	
    // (ë∞ú) BHAIKSUKI LETTER NNA	[2DFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1C, 0x0062 };
    uint32_t const ces[9] = { 0x2DFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_363)
{
    // 11C1D 0021;	
    // (ë∞ù) BHAIKSUKI LETTER TA	[2E00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1D, 0x0021 };
    uint32_t const ces[9] = { 0x2E00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_364)
{
    // 11C1D 003F;	
    // (ë∞ù) BHAIKSUKI LETTER TA	[2E00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1D, 0x003F };
    uint32_t const ces[9] = { 0x2E00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_365)
{
    // 11C1D 0061;	
    // (ë∞ù) BHAIKSUKI LETTER TA	[2E00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1D, 0x0061 };
    uint32_t const ces[9] = { 0x2E00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_366)
{
    // 11C1D 0041;	
    // (ë∞ù) BHAIKSUKI LETTER TA	[2E00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C1D, 0x0041 };
    uint32_t const ces[9] = { 0x2E00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_367)
{
    // 11C1D 0062;	
    // (ë∞ù) BHAIKSUKI LETTER TA	[2E00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1D, 0x0062 };
    uint32_t const ces[9] = { 0x2E00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_368)
{
    // 11C1E 0021;	
    // (ë∞û) BHAIKSUKI LETTER THA	[2E01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1E, 0x0021 };
    uint32_t const ces[9] = { 0x2E01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_369)
{
    // 11C1E 003F;	
    // (ë∞û) BHAIKSUKI LETTER THA	[2E01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1E, 0x003F };
    uint32_t const ces[9] = { 0x2E01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_370)
{
    // 11C1E 0061;	
    // (ë∞û) BHAIKSUKI LETTER THA	[2E01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1E, 0x0061 };
    uint32_t const ces[9] = { 0x2E01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_371)
{
    // 11C1E 0041;	
    // (ë∞û) BHAIKSUKI LETTER THA	[2E01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C1E, 0x0041 };
    uint32_t const ces[9] = { 0x2E01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_372)
{
    // 11C1E 0062;	
    // (ë∞û) BHAIKSUKI LETTER THA	[2E01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1E, 0x0062 };
    uint32_t const ces[9] = { 0x2E01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_373)
{
    // 11C1F 0021;	
    // (ë∞ü) BHAIKSUKI LETTER DA	[2E02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1F, 0x0021 };
    uint32_t const ces[9] = { 0x2E02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_374)
{
    // 11C1F 003F;	
    // (ë∞ü) BHAIKSUKI LETTER DA	[2E02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1F, 0x003F };
    uint32_t const ces[9] = { 0x2E02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_375)
{
    // 11C1F 0061;	
    // (ë∞ü) BHAIKSUKI LETTER DA	[2E02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1F, 0x0061 };
    uint32_t const ces[9] = { 0x2E02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_376)
{
    // 11C1F 0041;	
    // (ë∞ü) BHAIKSUKI LETTER DA	[2E02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C1F, 0x0041 };
    uint32_t const ces[9] = { 0x2E02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_377)
{
    // 11C1F 0062;	
    // (ë∞ü) BHAIKSUKI LETTER DA	[2E02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C1F, 0x0062 };
    uint32_t const ces[9] = { 0x2E02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_378)
{
    // 11C20 0021;	
    // (ë∞†) BHAIKSUKI LETTER DHA	[2E03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C20, 0x0021 };
    uint32_t const ces[9] = { 0x2E03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_379)
{
    // 11C20 003F;	
    // (ë∞†) BHAIKSUKI LETTER DHA	[2E03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C20, 0x003F };
    uint32_t const ces[9] = { 0x2E03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_380)
{
    // 11C20 0061;	
    // (ë∞†) BHAIKSUKI LETTER DHA	[2E03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C20, 0x0061 };
    uint32_t const ces[9] = { 0x2E03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_381)
{
    // 11C20 0041;	
    // (ë∞†) BHAIKSUKI LETTER DHA	[2E03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C20, 0x0041 };
    uint32_t const ces[9] = { 0x2E03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_382)
{
    // 11C20 0062;	
    // (ë∞†) BHAIKSUKI LETTER DHA	[2E03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C20, 0x0062 };
    uint32_t const ces[9] = { 0x2E03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_383)
{
    // 11C21 0021;	
    // (ë∞°) BHAIKSUKI LETTER NA	[2E04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C21, 0x0021 };
    uint32_t const ces[9] = { 0x2E04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_384)
{
    // 11C21 003F;	
    // (ë∞°) BHAIKSUKI LETTER NA	[2E04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C21, 0x003F };
    uint32_t const ces[9] = { 0x2E04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_385)
{
    // 11C21 0061;	
    // (ë∞°) BHAIKSUKI LETTER NA	[2E04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C21, 0x0061 };
    uint32_t const ces[9] = { 0x2E04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_386)
{
    // 11C21 0041;	
    // (ë∞°) BHAIKSUKI LETTER NA	[2E04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C21, 0x0041 };
    uint32_t const ces[9] = { 0x2E04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_387)
{
    // 11C21 0062;	
    // (ë∞°) BHAIKSUKI LETTER NA	[2E04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C21, 0x0062 };
    uint32_t const ces[9] = { 0x2E04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_388)
{
    // 11C22 0021;	
    // (ë∞¢) BHAIKSUKI LETTER PA	[2E05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C22, 0x0021 };
    uint32_t const ces[9] = { 0x2E05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_389)
{
    // 11C22 003F;	
    // (ë∞¢) BHAIKSUKI LETTER PA	[2E05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C22, 0x003F };
    uint32_t const ces[9] = { 0x2E05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_390)
{
    // 11C22 0061;	
    // (ë∞¢) BHAIKSUKI LETTER PA	[2E05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C22, 0x0061 };
    uint32_t const ces[9] = { 0x2E05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_391)
{
    // 11C22 0041;	
    // (ë∞¢) BHAIKSUKI LETTER PA	[2E05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C22, 0x0041 };
    uint32_t const ces[9] = { 0x2E05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_392)
{
    // 11C22 0062;	
    // (ë∞¢) BHAIKSUKI LETTER PA	[2E05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C22, 0x0062 };
    uint32_t const ces[9] = { 0x2E05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_393)
{
    // 11C23 0021;	
    // (ë∞£) BHAIKSUKI LETTER PHA	[2E06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C23, 0x0021 };
    uint32_t const ces[9] = { 0x2E06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_394)
{
    // 11C23 003F;	
    // (ë∞£) BHAIKSUKI LETTER PHA	[2E06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C23, 0x003F };
    uint32_t const ces[9] = { 0x2E06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_395)
{
    // 11C23 0061;	
    // (ë∞£) BHAIKSUKI LETTER PHA	[2E06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C23, 0x0061 };
    uint32_t const ces[9] = { 0x2E06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_396)
{
    // 11C23 0041;	
    // (ë∞£) BHAIKSUKI LETTER PHA	[2E06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C23, 0x0041 };
    uint32_t const ces[9] = { 0x2E06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_397)
{
    // 11C23 0062;	
    // (ë∞£) BHAIKSUKI LETTER PHA	[2E06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C23, 0x0062 };
    uint32_t const ces[9] = { 0x2E06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_398)
{
    // 11C24 0021;	
    // (ë∞§) BHAIKSUKI LETTER BA	[2E07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C24, 0x0021 };
    uint32_t const ces[9] = { 0x2E07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_399)
{
    // 11C24 003F;	
    // (ë∞§) BHAIKSUKI LETTER BA	[2E07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C24, 0x003F };
    uint32_t const ces[9] = { 0x2E07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_400)
{
    // 11C24 0061;	
    // (ë∞§) BHAIKSUKI LETTER BA	[2E07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C24, 0x0061 };
    uint32_t const ces[9] = { 0x2E07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_401)
{
    // 11C24 0041;	
    // (ë∞§) BHAIKSUKI LETTER BA	[2E07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C24, 0x0041 };
    uint32_t const ces[9] = { 0x2E07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_402)
{
    // 11C24 0062;	
    // (ë∞§) BHAIKSUKI LETTER BA	[2E07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C24, 0x0062 };
    uint32_t const ces[9] = { 0x2E07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_403)
{
    // 11C25 0021;	
    // (ë∞•) BHAIKSUKI LETTER BHA	[2E08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C25, 0x0021 };
    uint32_t const ces[9] = { 0x2E08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_404)
{
    // 11C25 003F;	
    // (ë∞•) BHAIKSUKI LETTER BHA	[2E08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C25, 0x003F };
    uint32_t const ces[9] = { 0x2E08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_405)
{
    // 11C25 0061;	
    // (ë∞•) BHAIKSUKI LETTER BHA	[2E08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C25, 0x0061 };
    uint32_t const ces[9] = { 0x2E08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_406)
{
    // 11C25 0041;	
    // (ë∞•) BHAIKSUKI LETTER BHA	[2E08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C25, 0x0041 };
    uint32_t const ces[9] = { 0x2E08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_407)
{
    // 11C25 0062;	
    // (ë∞•) BHAIKSUKI LETTER BHA	[2E08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C25, 0x0062 };
    uint32_t const ces[9] = { 0x2E08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_408)
{
    // 11C26 0021;	
    // (ë∞¶) BHAIKSUKI LETTER MA	[2E09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C26, 0x0021 };
    uint32_t const ces[9] = { 0x2E09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_409)
{
    // 11C26 003F;	
    // (ë∞¶) BHAIKSUKI LETTER MA	[2E09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C26, 0x003F };
    uint32_t const ces[9] = { 0x2E09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_410)
{
    // 11C26 0061;	
    // (ë∞¶) BHAIKSUKI LETTER MA	[2E09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C26, 0x0061 };
    uint32_t const ces[9] = { 0x2E09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_411)
{
    // 11C26 0041;	
    // (ë∞¶) BHAIKSUKI LETTER MA	[2E09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C26, 0x0041 };
    uint32_t const ces[9] = { 0x2E09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_412)
{
    // 11C26 0062;	
    // (ë∞¶) BHAIKSUKI LETTER MA	[2E09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C26, 0x0062 };
    uint32_t const ces[9] = { 0x2E09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_413)
{
    // 11C27 0021;	
    // (ë∞ß) BHAIKSUKI LETTER YA	[2E0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C27, 0x0021 };
    uint32_t const ces[9] = { 0x2E0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_414)
{
    // 11C27 003F;	
    // (ë∞ß) BHAIKSUKI LETTER YA	[2E0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C27, 0x003F };
    uint32_t const ces[9] = { 0x2E0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_415)
{
    // 11C27 0061;	
    // (ë∞ß) BHAIKSUKI LETTER YA	[2E0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C27, 0x0061 };
    uint32_t const ces[9] = { 0x2E0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_416)
{
    // 11C27 0041;	
    // (ë∞ß) BHAIKSUKI LETTER YA	[2E0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C27, 0x0041 };
    uint32_t const ces[9] = { 0x2E0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_417)
{
    // 11C27 0062;	
    // (ë∞ß) BHAIKSUKI LETTER YA	[2E0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C27, 0x0062 };
    uint32_t const ces[9] = { 0x2E0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_418)
{
    // 11C28 0021;	
    // (ë∞®) BHAIKSUKI LETTER RA	[2E0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C28, 0x0021 };
    uint32_t const ces[9] = { 0x2E0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_419)
{
    // 11C28 003F;	
    // (ë∞®) BHAIKSUKI LETTER RA	[2E0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C28, 0x003F };
    uint32_t const ces[9] = { 0x2E0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_420)
{
    // 11C28 0061;	
    // (ë∞®) BHAIKSUKI LETTER RA	[2E0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C28, 0x0061 };
    uint32_t const ces[9] = { 0x2E0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_421)
{
    // 11C28 0041;	
    // (ë∞®) BHAIKSUKI LETTER RA	[2E0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C28, 0x0041 };
    uint32_t const ces[9] = { 0x2E0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_422)
{
    // 11C28 0062;	
    // (ë∞®) BHAIKSUKI LETTER RA	[2E0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C28, 0x0062 };
    uint32_t const ces[9] = { 0x2E0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_423)
{
    // 11C29 0021;	
    // (ë∞©) BHAIKSUKI LETTER LA	[2E0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C29, 0x0021 };
    uint32_t const ces[9] = { 0x2E0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_424)
{
    // 11C29 003F;	
    // (ë∞©) BHAIKSUKI LETTER LA	[2E0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C29, 0x003F };
    uint32_t const ces[9] = { 0x2E0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_425)
{
    // 11C29 0061;	
    // (ë∞©) BHAIKSUKI LETTER LA	[2E0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C29, 0x0061 };
    uint32_t const ces[9] = { 0x2E0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_426)
{
    // 11C29 0041;	
    // (ë∞©) BHAIKSUKI LETTER LA	[2E0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C29, 0x0041 };
    uint32_t const ces[9] = { 0x2E0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_427)
{
    // 11C29 0062;	
    // (ë∞©) BHAIKSUKI LETTER LA	[2E0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C29, 0x0062 };
    uint32_t const ces[9] = { 0x2E0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_428)
{
    // 11C2A 0021;	
    // (ë∞™) BHAIKSUKI LETTER VA	[2E0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2A, 0x0021 };
    uint32_t const ces[9] = { 0x2E0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_429)
{
    // 11C2A 003F;	
    // (ë∞™) BHAIKSUKI LETTER VA	[2E0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2A, 0x003F };
    uint32_t const ces[9] = { 0x2E0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_430)
{
    // 11C2A 0061;	
    // (ë∞™) BHAIKSUKI LETTER VA	[2E0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2A, 0x0061 };
    uint32_t const ces[9] = { 0x2E0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_431)
{
    // 11C2A 0041;	
    // (ë∞™) BHAIKSUKI LETTER VA	[2E0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C2A, 0x0041 };
    uint32_t const ces[9] = { 0x2E0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_432)
{
    // 11C2A 0062;	
    // (ë∞™) BHAIKSUKI LETTER VA	[2E0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2A, 0x0062 };
    uint32_t const ces[9] = { 0x2E0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_433)
{
    // 11C2B 0021;	
    // (ë∞´) BHAIKSUKI LETTER SHA	[2E0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2B, 0x0021 };
    uint32_t const ces[9] = { 0x2E0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_434)
{
    // 11C2B 003F;	
    // (ë∞´) BHAIKSUKI LETTER SHA	[2E0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2B, 0x003F };
    uint32_t const ces[9] = { 0x2E0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_435)
{
    // 11C2B 0061;	
    // (ë∞´) BHAIKSUKI LETTER SHA	[2E0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2B, 0x0061 };
    uint32_t const ces[9] = { 0x2E0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_436)
{
    // 11C2B 0041;	
    // (ë∞´) BHAIKSUKI LETTER SHA	[2E0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C2B, 0x0041 };
    uint32_t const ces[9] = { 0x2E0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_437)
{
    // 11C2B 0062;	
    // (ë∞´) BHAIKSUKI LETTER SHA	[2E0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2B, 0x0062 };
    uint32_t const ces[9] = { 0x2E0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_438)
{
    // 11C2C 0021;	
    // (ë∞¨) BHAIKSUKI LETTER SSA	[2E0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2C, 0x0021 };
    uint32_t const ces[9] = { 0x2E0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_439)
{
    // 11C2C 003F;	
    // (ë∞¨) BHAIKSUKI LETTER SSA	[2E0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2C, 0x003F };
    uint32_t const ces[9] = { 0x2E0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_440)
{
    // 11C2C 0061;	
    // (ë∞¨) BHAIKSUKI LETTER SSA	[2E0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2C, 0x0061 };
    uint32_t const ces[9] = { 0x2E0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_441)
{
    // 11C2C 0041;	
    // (ë∞¨) BHAIKSUKI LETTER SSA	[2E0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C2C, 0x0041 };
    uint32_t const ces[9] = { 0x2E0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_442)
{
    // 11C2C 0062;	
    // (ë∞¨) BHAIKSUKI LETTER SSA	[2E0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2C, 0x0062 };
    uint32_t const ces[9] = { 0x2E0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_443)
{
    // 11C2D 0021;	
    // (ë∞≠) BHAIKSUKI LETTER SA	[2E10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2D, 0x0021 };
    uint32_t const ces[9] = { 0x2E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_444)
{
    // 11C2D 003F;	
    // (ë∞≠) BHAIKSUKI LETTER SA	[2E10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2D, 0x003F };
    uint32_t const ces[9] = { 0x2E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_445)
{
    // 11C2D 0061;	
    // (ë∞≠) BHAIKSUKI LETTER SA	[2E10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2D, 0x0061 };
    uint32_t const ces[9] = { 0x2E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_446)
{
    // 11C2D 0041;	
    // (ë∞≠) BHAIKSUKI LETTER SA	[2E10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C2D, 0x0041 };
    uint32_t const ces[9] = { 0x2E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_447)
{
    // 11C2D 0062;	
    // (ë∞≠) BHAIKSUKI LETTER SA	[2E10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2D, 0x0062 };
    uint32_t const ces[9] = { 0x2E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_448)
{
    // 11C2E 0021;	
    // (ë∞Æ) BHAIKSUKI LETTER HA	[2E11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2E, 0x0021 };
    uint32_t const ces[9] = { 0x2E11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_449)
{
    // 11C2E 003F;	
    // (ë∞Æ) BHAIKSUKI LETTER HA	[2E11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2E, 0x003F };
    uint32_t const ces[9] = { 0x2E11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_450)
{
    // 11C2E 0061;	
    // (ë∞Æ) BHAIKSUKI LETTER HA	[2E11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2E, 0x0061 };
    uint32_t const ces[9] = { 0x2E11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_451)
{
    // 11C2E 0041;	
    // (ë∞Æ) BHAIKSUKI LETTER HA	[2E11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C2E, 0x0041 };
    uint32_t const ces[9] = { 0x2E11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_452)
{
    // 11C2E 0062;	
    // (ë∞Æ) BHAIKSUKI LETTER HA	[2E11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2E, 0x0062 };
    uint32_t const ces[9] = { 0x2E11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_453)
{
    // 11C40 0021;	
    // (ë±Ä) BHAIKSUKI SIGN AVAGRAHA	[2E12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C40, 0x0021 };
    uint32_t const ces[9] = { 0x2E12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_454)
{
    // 11C40 003F;	
    // (ë±Ä) BHAIKSUKI SIGN AVAGRAHA	[2E12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C40, 0x003F };
    uint32_t const ces[9] = { 0x2E12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_455)
{
    // 11C40 0061;	
    // (ë±Ä) BHAIKSUKI SIGN AVAGRAHA	[2E12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C40, 0x0061 };
    uint32_t const ces[9] = { 0x2E12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_456)
{
    // 11C40 0041;	
    // (ë±Ä) BHAIKSUKI SIGN AVAGRAHA	[2E12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C40, 0x0041 };
    uint32_t const ces[9] = { 0x2E12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_457)
{
    // 11C40 0062;	
    // (ë±Ä) BHAIKSUKI SIGN AVAGRAHA	[2E12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C40, 0x0062 };
    uint32_t const ces[9] = { 0x2E12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_458)
{
    // 11C2F 0021;	
    // (ë∞Ø) BHAIKSUKI VOWEL SIGN AA	[2E13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2F, 0x0021 };
    uint32_t const ces[9] = { 0x2E13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_459)
{
    // 11C2F 003F;	
    // (ë∞Ø) BHAIKSUKI VOWEL SIGN AA	[2E13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2F, 0x003F };
    uint32_t const ces[9] = { 0x2E13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_460)
{
    // 11C2F 0061;	
    // (ë∞Ø) BHAIKSUKI VOWEL SIGN AA	[2E13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2F, 0x0061 };
    uint32_t const ces[9] = { 0x2E13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_461)
{
    // 11C2F 0041;	
    // (ë∞Ø) BHAIKSUKI VOWEL SIGN AA	[2E13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C2F, 0x0041 };
    uint32_t const ces[9] = { 0x2E13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_462)
{
    // 11C2F 0062;	
    // (ë∞Ø) BHAIKSUKI VOWEL SIGN AA	[2E13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C2F, 0x0062 };
    uint32_t const ces[9] = { 0x2E13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_463)
{
    // 11C30 0021;	
    // (ë∞∞) BHAIKSUKI VOWEL SIGN I	[2E14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C30, 0x0021 };
    uint32_t const ces[9] = { 0x2E14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_464)
{
    // 11C30 003F;	
    // (ë∞∞) BHAIKSUKI VOWEL SIGN I	[2E14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C30, 0x003F };
    uint32_t const ces[9] = { 0x2E14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_465)
{
    // 11C30 0061;	
    // (ë∞∞) BHAIKSUKI VOWEL SIGN I	[2E14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C30, 0x0061 };
    uint32_t const ces[9] = { 0x2E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_466)
{
    // 11C30 0041;	
    // (ë∞∞) BHAIKSUKI VOWEL SIGN I	[2E14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C30, 0x0041 };
    uint32_t const ces[9] = { 0x2E14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_467)
{
    // 11C30 0062;	
    // (ë∞∞) BHAIKSUKI VOWEL SIGN I	[2E14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C30, 0x0062 };
    uint32_t const ces[9] = { 0x2E14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_468)
{
    // 11C31 0021;	
    // (ë∞±) BHAIKSUKI VOWEL SIGN II	[2E15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C31, 0x0021 };
    uint32_t const ces[9] = { 0x2E15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_469)
{
    // 11C31 003F;	
    // (ë∞±) BHAIKSUKI VOWEL SIGN II	[2E15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C31, 0x003F };
    uint32_t const ces[9] = { 0x2E15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_470)
{
    // 11C31 0061;	
    // (ë∞±) BHAIKSUKI VOWEL SIGN II	[2E15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C31, 0x0061 };
    uint32_t const ces[9] = { 0x2E15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_471)
{
    // 11C31 0041;	
    // (ë∞±) BHAIKSUKI VOWEL SIGN II	[2E15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C31, 0x0041 };
    uint32_t const ces[9] = { 0x2E15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_472)
{
    // 11C31 0062;	
    // (ë∞±) BHAIKSUKI VOWEL SIGN II	[2E15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C31, 0x0062 };
    uint32_t const ces[9] = { 0x2E15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_473)
{
    // 11C32 0021;	
    // (ë∞≤) BHAIKSUKI VOWEL SIGN U	[2E16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C32, 0x0021 };
    uint32_t const ces[9] = { 0x2E16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_474)
{
    // 11C32 003F;	
    // (ë∞≤) BHAIKSUKI VOWEL SIGN U	[2E16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C32, 0x003F };
    uint32_t const ces[9] = { 0x2E16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_475)
{
    // 11C32 0061;	
    // (ë∞≤) BHAIKSUKI VOWEL SIGN U	[2E16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C32, 0x0061 };
    uint32_t const ces[9] = { 0x2E16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_476)
{
    // 11C32 0041;	
    // (ë∞≤) BHAIKSUKI VOWEL SIGN U	[2E16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C32, 0x0041 };
    uint32_t const ces[9] = { 0x2E16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_477)
{
    // 11C32 0062;	
    // (ë∞≤) BHAIKSUKI VOWEL SIGN U	[2E16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C32, 0x0062 };
    uint32_t const ces[9] = { 0x2E16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_478)
{
    // 11C33 0021;	
    // (ë∞≥) BHAIKSUKI VOWEL SIGN UU	[2E17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C33, 0x0021 };
    uint32_t const ces[9] = { 0x2E17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_479)
{
    // 11C33 003F;	
    // (ë∞≥) BHAIKSUKI VOWEL SIGN UU	[2E17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C33, 0x003F };
    uint32_t const ces[9] = { 0x2E17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_480)
{
    // 11C33 0061;	
    // (ë∞≥) BHAIKSUKI VOWEL SIGN UU	[2E17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C33, 0x0061 };
    uint32_t const ces[9] = { 0x2E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_481)
{
    // 11C33 0041;	
    // (ë∞≥) BHAIKSUKI VOWEL SIGN UU	[2E17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C33, 0x0041 };
    uint32_t const ces[9] = { 0x2E17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_482)
{
    // 11C33 0062;	
    // (ë∞≥) BHAIKSUKI VOWEL SIGN UU	[2E17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C33, 0x0062 };
    uint32_t const ces[9] = { 0x2E17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_483)
{
    // 11C34 0021;	
    // (ë∞¥) BHAIKSUKI VOWEL SIGN VOCALIC R	[2E18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C34, 0x0021 };
    uint32_t const ces[9] = { 0x2E18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_484)
{
    // 11C34 003F;	
    // (ë∞¥) BHAIKSUKI VOWEL SIGN VOCALIC R	[2E18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C34, 0x003F };
    uint32_t const ces[9] = { 0x2E18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_485)
{
    // 11C34 0061;	
    // (ë∞¥) BHAIKSUKI VOWEL SIGN VOCALIC R	[2E18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C34, 0x0061 };
    uint32_t const ces[9] = { 0x2E18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_486)
{
    // 11C34 0041;	
    // (ë∞¥) BHAIKSUKI VOWEL SIGN VOCALIC R	[2E18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C34, 0x0041 };
    uint32_t const ces[9] = { 0x2E18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_487)
{
    // 11C34 0062;	
    // (ë∞¥) BHAIKSUKI VOWEL SIGN VOCALIC R	[2E18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C34, 0x0062 };
    uint32_t const ces[9] = { 0x2E18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_488)
{
    // 11C35 0021;	
    // (ë∞µ) BHAIKSUKI VOWEL SIGN VOCALIC RR	[2E19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C35, 0x0021 };
    uint32_t const ces[9] = { 0x2E19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_489)
{
    // 11C35 003F;	
    // (ë∞µ) BHAIKSUKI VOWEL SIGN VOCALIC RR	[2E19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C35, 0x003F };
    uint32_t const ces[9] = { 0x2E19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_490)
{
    // 11C35 0061;	
    // (ë∞µ) BHAIKSUKI VOWEL SIGN VOCALIC RR	[2E19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C35, 0x0061 };
    uint32_t const ces[9] = { 0x2E19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_491)
{
    // 11C35 0041;	
    // (ë∞µ) BHAIKSUKI VOWEL SIGN VOCALIC RR	[2E19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C35, 0x0041 };
    uint32_t const ces[9] = { 0x2E19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_492)
{
    // 11C35 0062;	
    // (ë∞µ) BHAIKSUKI VOWEL SIGN VOCALIC RR	[2E19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C35, 0x0062 };
    uint32_t const ces[9] = { 0x2E19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_493)
{
    // 11C36 0021;	
    // (ë∞∂) BHAIKSUKI VOWEL SIGN VOCALIC L	[2E1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C36, 0x0021 };
    uint32_t const ces[9] = { 0x2E1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_494)
{
    // 11C36 003F;	
    // (ë∞∂) BHAIKSUKI VOWEL SIGN VOCALIC L	[2E1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C36, 0x003F };
    uint32_t const ces[9] = { 0x2E1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_495)
{
    // 11C36 0061;	
    // (ë∞∂) BHAIKSUKI VOWEL SIGN VOCALIC L	[2E1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C36, 0x0061 };
    uint32_t const ces[9] = { 0x2E1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_496)
{
    // 11C36 0041;	
    // (ë∞∂) BHAIKSUKI VOWEL SIGN VOCALIC L	[2E1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11C36, 0x0041 };
    uint32_t const ces[9] = { 0x2E1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_497)
{
    // 11C36 0062;	
    // (ë∞∂) BHAIKSUKI VOWEL SIGN VOCALIC L	[2E1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C36, 0x0062 };
    uint32_t const ces[9] = { 0x2E1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_498)
{
    // 11C38 0021;	
    // (ë∞∏) BHAIKSUKI VOWEL SIGN E	[2E1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C38, 0x0021 };
    uint32_t const ces[9] = { 0x2E1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_184_499)
{
    // 11C38 003F;	
    // (ë∞∏) BHAIKSUKI VOWEL SIGN E	[2E1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11C38, 0x003F };
    uint32_t const ces[9] = { 0x2E1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

