// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_008_000)
{
    // E0132 003F;	
    // (󠄲) VARIATION SELECTOR-67	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0132, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_001)
{
    // E0133 003F;	
    // (󠄳) VARIATION SELECTOR-68	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0133, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_002)
{
    // E0134 003F;	
    // (󠄴) VARIATION SELECTOR-69	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0134, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_003)
{
    // E0135 003F;	
    // (󠄵) VARIATION SELECTOR-70	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0135, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_004)
{
    // E0136 003F;	
    // (󠄶) VARIATION SELECTOR-71	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0136, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_005)
{
    // E0137 003F;	
    // (󠄷) VARIATION SELECTOR-72	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0137, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_006)
{
    // E0138 003F;	
    // (󠄸) VARIATION SELECTOR-73	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0138, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_007)
{
    // E0139 003F;	
    // (󠄹) VARIATION SELECTOR-74	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0139, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_008)
{
    // E013A 003F;	
    // (󠄺) VARIATION SELECTOR-75	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_009)
{
    // E013B 003F;	
    // (󠄻) VARIATION SELECTOR-76	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_010)
{
    // E013C 003F;	
    // (󠄼) VARIATION SELECTOR-77	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_011)
{
    // E013D 003F;	
    // (󠄽) VARIATION SELECTOR-78	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_012)
{
    // E013E 003F;	
    // (󠄾) VARIATION SELECTOR-79	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_013)
{
    // E013F 003F;	
    // (󠄿) VARIATION SELECTOR-80	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE013F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_014)
{
    // E0140 003F;	
    // (󠅀) VARIATION SELECTOR-81	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0140, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_015)
{
    // E0141 003F;	
    // (󠅁) VARIATION SELECTOR-82	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0141, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_016)
{
    // E0142 003F;	
    // (󠅂) VARIATION SELECTOR-83	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0142, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_017)
{
    // E0143 003F;	
    // (󠅃) VARIATION SELECTOR-84	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0143, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_018)
{
    // E0144 003F;	
    // (󠅄) VARIATION SELECTOR-85	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0144, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_019)
{
    // E0145 003F;	
    // (󠅅) VARIATION SELECTOR-86	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0145, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_020)
{
    // E0146 003F;	
    // (󠅆) VARIATION SELECTOR-87	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0146, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_021)
{
    // E0147 003F;	
    // (󠅇) VARIATION SELECTOR-88	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0147, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_022)
{
    // E0148 003F;	
    // (󠅈) VARIATION SELECTOR-89	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0148, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_023)
{
    // E0149 003F;	
    // (󠅉) VARIATION SELECTOR-90	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0149, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_024)
{
    // E014A 003F;	
    // (󠅊) VARIATION SELECTOR-91	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_025)
{
    // E014B 003F;	
    // (󠅋) VARIATION SELECTOR-92	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_026)
{
    // E014C 003F;	
    // (󠅌) VARIATION SELECTOR-93	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_027)
{
    // E014D 003F;	
    // (󠅍) VARIATION SELECTOR-94	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_028)
{
    // E014E 003F;	
    // (󠅎) VARIATION SELECTOR-95	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_029)
{
    // E014F 003F;	
    // (󠅏) VARIATION SELECTOR-96	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE014F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_030)
{
    // E0150 003F;	
    // (󠅐) VARIATION SELECTOR-97	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0150, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_031)
{
    // E0151 003F;	
    // (󠅑) VARIATION SELECTOR-98	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0151, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_032)
{
    // E0152 003F;	
    // (󠅒) VARIATION SELECTOR-99	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0152, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_033)
{
    // E0153 003F;	
    // (󠅓) VARIATION SELECTOR-100	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0153, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_034)
{
    // E0154 003F;	
    // (󠅔) VARIATION SELECTOR-101	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0154, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_035)
{
    // E0155 003F;	
    // (󠅕) VARIATION SELECTOR-102	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0155, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_036)
{
    // E0156 003F;	
    // (󠅖) VARIATION SELECTOR-103	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0156, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_037)
{
    // E0157 003F;	
    // (󠅗) VARIATION SELECTOR-104	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0157, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_038)
{
    // E0158 003F;	
    // (󠅘) VARIATION SELECTOR-105	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0158, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_039)
{
    // E0159 003F;	
    // (󠅙) VARIATION SELECTOR-106	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0159, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_040)
{
    // E015A 003F;	
    // (󠅚) VARIATION SELECTOR-107	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_041)
{
    // E015B 003F;	
    // (󠅛) VARIATION SELECTOR-108	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_042)
{
    // E015C 003F;	
    // (󠅜) VARIATION SELECTOR-109	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_043)
{
    // E015D 003F;	
    // (󠅝) VARIATION SELECTOR-110	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_044)
{
    // E015E 003F;	
    // (󠅞) VARIATION SELECTOR-111	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_045)
{
    // E015F 003F;	
    // (󠅟) VARIATION SELECTOR-112	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE015F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_046)
{
    // E0160 003F;	
    // (󠅠) VARIATION SELECTOR-113	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0160, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_047)
{
    // E0161 003F;	
    // (󠅡) VARIATION SELECTOR-114	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0161, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_048)
{
    // E0162 003F;	
    // (󠅢) VARIATION SELECTOR-115	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0162, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_049)
{
    // E0163 003F;	
    // (󠅣) VARIATION SELECTOR-116	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0163, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_050)
{
    // E0164 003F;	
    // (󠅤) VARIATION SELECTOR-117	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0164, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_051)
{
    // E0165 003F;	
    // (󠅥) VARIATION SELECTOR-118	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0165, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_052)
{
    // E0166 003F;	
    // (󠅦) VARIATION SELECTOR-119	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0166, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_053)
{
    // E0167 003F;	
    // (󠅧) VARIATION SELECTOR-120	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0167, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_054)
{
    // E0168 003F;	
    // (󠅨) VARIATION SELECTOR-121	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0168, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_055)
{
    // E0169 003F;	
    // (󠅩) VARIATION SELECTOR-122	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0169, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_056)
{
    // E016A 003F;	
    // (󠅪) VARIATION SELECTOR-123	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_057)
{
    // E016B 003F;	
    // (󠅫) VARIATION SELECTOR-124	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_058)
{
    // E016C 003F;	
    // (󠅬) VARIATION SELECTOR-125	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_059)
{
    // E016D 003F;	
    // (󠅭) VARIATION SELECTOR-126	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_060)
{
    // E016E 003F;	
    // (󠅮) VARIATION SELECTOR-127	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_061)
{
    // E016F 003F;	
    // (󠅯) VARIATION SELECTOR-128	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE016F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_062)
{
    // E0170 003F;	
    // (󠅰) VARIATION SELECTOR-129	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0170, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_063)
{
    // E0171 003F;	
    // (󠅱) VARIATION SELECTOR-130	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0171, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_064)
{
    // E0172 003F;	
    // (󠅲) VARIATION SELECTOR-131	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0172, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_065)
{
    // E0173 003F;	
    // (󠅳) VARIATION SELECTOR-132	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0173, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_066)
{
    // E0174 003F;	
    // (󠅴) VARIATION SELECTOR-133	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0174, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_067)
{
    // E0175 003F;	
    // (󠅵) VARIATION SELECTOR-134	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0175, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_068)
{
    // E0176 003F;	
    // (󠅶) VARIATION SELECTOR-135	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0176, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_069)
{
    // E0177 003F;	
    // (󠅷) VARIATION SELECTOR-136	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0177, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_070)
{
    // E0178 003F;	
    // (󠅸) VARIATION SELECTOR-137	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0178, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_071)
{
    // E0179 003F;	
    // (󠅹) VARIATION SELECTOR-138	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0179, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_072)
{
    // E017A 003F;	
    // (󠅺) VARIATION SELECTOR-139	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_073)
{
    // E017B 003F;	
    // (󠅻) VARIATION SELECTOR-140	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_074)
{
    // E017C 003F;	
    // (󠅼) VARIATION SELECTOR-141	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_075)
{
    // E017D 003F;	
    // (󠅽) VARIATION SELECTOR-142	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_076)
{
    // E017E 003F;	
    // (󠅾) VARIATION SELECTOR-143	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_077)
{
    // E017F 003F;	
    // (󠅿) VARIATION SELECTOR-144	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE017F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_078)
{
    // E0180 003F;	
    // (󠆀) VARIATION SELECTOR-145	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0180, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_079)
{
    // E0181 003F;	
    // (󠆁) VARIATION SELECTOR-146	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0181, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_080)
{
    // E0182 003F;	
    // (󠆂) VARIATION SELECTOR-147	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0182, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_081)
{
    // E0183 003F;	
    // (󠆃) VARIATION SELECTOR-148	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0183, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_082)
{
    // E0184 003F;	
    // (󠆄) VARIATION SELECTOR-149	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0184, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_083)
{
    // E0185 003F;	
    // (󠆅) VARIATION SELECTOR-150	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0185, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_084)
{
    // E0186 003F;	
    // (󠆆) VARIATION SELECTOR-151	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0186, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_085)
{
    // E0187 003F;	
    // (󠆇) VARIATION SELECTOR-152	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0187, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_086)
{
    // E0188 003F;	
    // (󠆈) VARIATION SELECTOR-153	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0188, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_087)
{
    // E0189 003F;	
    // (󠆉) VARIATION SELECTOR-154	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0189, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_088)
{
    // E018A 003F;	
    // (󠆊) VARIATION SELECTOR-155	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_089)
{
    // E018B 003F;	
    // (󠆋) VARIATION SELECTOR-156	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_090)
{
    // E018C 003F;	
    // (󠆌) VARIATION SELECTOR-157	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_091)
{
    // E018D 003F;	
    // (󠆍) VARIATION SELECTOR-158	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_092)
{
    // E018E 003F;	
    // (󠆎) VARIATION SELECTOR-159	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_093)
{
    // E018F 003F;	
    // (󠆏) VARIATION SELECTOR-160	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE018F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_094)
{
    // E0190 003F;	
    // (󠆐) VARIATION SELECTOR-161	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0190, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_095)
{
    // E0191 003F;	
    // (󠆑) VARIATION SELECTOR-162	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0191, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_096)
{
    // E0192 003F;	
    // (󠆒) VARIATION SELECTOR-163	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0192, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_097)
{
    // E0193 003F;	
    // (󠆓) VARIATION SELECTOR-164	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0193, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_098)
{
    // E0194 003F;	
    // (󠆔) VARIATION SELECTOR-165	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0194, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_099)
{
    // E0195 003F;	
    // (󠆕) VARIATION SELECTOR-166	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0195, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_100)
{
    // E0196 003F;	
    // (󠆖) VARIATION SELECTOR-167	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0196, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_101)
{
    // E0197 003F;	
    // (󠆗) VARIATION SELECTOR-168	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0197, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_102)
{
    // E0198 003F;	
    // (󠆘) VARIATION SELECTOR-169	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0198, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_103)
{
    // E0199 003F;	
    // (󠆙) VARIATION SELECTOR-170	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE0199, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_104)
{
    // E019A 003F;	
    // (󠆚) VARIATION SELECTOR-171	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019A, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_105)
{
    // E019B 003F;	
    // (󠆛) VARIATION SELECTOR-172	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019B, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_106)
{
    // E019C 003F;	
    // (󠆜) VARIATION SELECTOR-173	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019C, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_107)
{
    // E019D 003F;	
    // (󠆝) VARIATION SELECTOR-174	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019D, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_108)
{
    // E019E 003F;	
    // (󠆞) VARIATION SELECTOR-175	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019E, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_109)
{
    // E019F 003F;	
    // (󠆟) VARIATION SELECTOR-176	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE019F, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_110)
{
    // E01A0 003F;	
    // (󠆠) VARIATION SELECTOR-177	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_111)
{
    // E01A1 003F;	
    // (󠆡) VARIATION SELECTOR-178	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_112)
{
    // E01A2 003F;	
    // (󠆢) VARIATION SELECTOR-179	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_113)
{
    // E01A3 003F;	
    // (󠆣) VARIATION SELECTOR-180	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_114)
{
    // E01A4 003F;	
    // (󠆤) VARIATION SELECTOR-181	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_115)
{
    // E01A5 003F;	
    // (󠆥) VARIATION SELECTOR-182	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_116)
{
    // E01A6 003F;	
    // (󠆦) VARIATION SELECTOR-183	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_117)
{
    // E01A7 003F;	
    // (󠆧) VARIATION SELECTOR-184	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_118)
{
    // E01A8 003F;	
    // (󠆨) VARIATION SELECTOR-185	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_119)
{
    // E01A9 003F;	
    // (󠆩) VARIATION SELECTOR-186	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01A9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_120)
{
    // E01AA 003F;	
    // (󠆪) VARIATION SELECTOR-187	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_121)
{
    // E01AB 003F;	
    // (󠆫) VARIATION SELECTOR-188	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_122)
{
    // E01AC 003F;	
    // (󠆬) VARIATION SELECTOR-189	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_123)
{
    // E01AD 003F;	
    // (󠆭) VARIATION SELECTOR-190	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_124)
{
    // E01AE 003F;	
    // (󠆮) VARIATION SELECTOR-191	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_125)
{
    // E01AF 003F;	
    // (󠆯) VARIATION SELECTOR-192	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01AF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_126)
{
    // E01B0 003F;	
    // (󠆰) VARIATION SELECTOR-193	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_127)
{
    // E01B1 003F;	
    // (󠆱) VARIATION SELECTOR-194	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_128)
{
    // E01B2 003F;	
    // (󠆲) VARIATION SELECTOR-195	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_129)
{
    // E01B3 003F;	
    // (󠆳) VARIATION SELECTOR-196	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_130)
{
    // E01B4 003F;	
    // (󠆴) VARIATION SELECTOR-197	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_131)
{
    // E01B5 003F;	
    // (󠆵) VARIATION SELECTOR-198	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_132)
{
    // E01B6 003F;	
    // (󠆶) VARIATION SELECTOR-199	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_133)
{
    // E01B7 003F;	
    // (󠆷) VARIATION SELECTOR-200	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_134)
{
    // E01B8 003F;	
    // (󠆸) VARIATION SELECTOR-201	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_135)
{
    // E01B9 003F;	
    // (󠆹) VARIATION SELECTOR-202	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01B9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_136)
{
    // E01BA 003F;	
    // (󠆺) VARIATION SELECTOR-203	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_137)
{
    // E01BB 003F;	
    // (󠆻) VARIATION SELECTOR-204	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_138)
{
    // E01BC 003F;	
    // (󠆼) VARIATION SELECTOR-205	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_139)
{
    // E01BD 003F;	
    // (󠆽) VARIATION SELECTOR-206	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_140)
{
    // E01BE 003F;	
    // (󠆾) VARIATION SELECTOR-207	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_141)
{
    // E01BF 003F;	
    // (󠆿) VARIATION SELECTOR-208	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01BF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_142)
{
    // E01C0 003F;	
    // (󠇀) VARIATION SELECTOR-209	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_143)
{
    // E01C1 003F;	
    // (󠇁) VARIATION SELECTOR-210	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_144)
{
    // E01C2 003F;	
    // (󠇂) VARIATION SELECTOR-211	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_145)
{
    // E01C3 003F;	
    // (󠇃) VARIATION SELECTOR-212	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_146)
{
    // E01C4 003F;	
    // (󠇄) VARIATION SELECTOR-213	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_147)
{
    // E01C5 003F;	
    // (󠇅) VARIATION SELECTOR-214	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_148)
{
    // E01C6 003F;	
    // (󠇆) VARIATION SELECTOR-215	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_149)
{
    // E01C7 003F;	
    // (󠇇) VARIATION SELECTOR-216	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_150)
{
    // E01C8 003F;	
    // (󠇈) VARIATION SELECTOR-217	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_151)
{
    // E01C9 003F;	
    // (󠇉) VARIATION SELECTOR-218	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01C9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_152)
{
    // E01CA 003F;	
    // (󠇊) VARIATION SELECTOR-219	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_153)
{
    // E01CB 003F;	
    // (󠇋) VARIATION SELECTOR-220	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_154)
{
    // E01CC 003F;	
    // (󠇌) VARIATION SELECTOR-221	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_155)
{
    // E01CD 003F;	
    // (󠇍) VARIATION SELECTOR-222	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_156)
{
    // E01CE 003F;	
    // (󠇎) VARIATION SELECTOR-223	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_157)
{
    // E01CF 003F;	
    // (󠇏) VARIATION SELECTOR-224	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01CF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_158)
{
    // E01D0 003F;	
    // (󠇐) VARIATION SELECTOR-225	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_159)
{
    // E01D1 003F;	
    // (󠇑) VARIATION SELECTOR-226	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_160)
{
    // E01D2 003F;	
    // (󠇒) VARIATION SELECTOR-227	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_161)
{
    // E01D3 003F;	
    // (󠇓) VARIATION SELECTOR-228	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_162)
{
    // E01D4 003F;	
    // (󠇔) VARIATION SELECTOR-229	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_163)
{
    // E01D5 003F;	
    // (󠇕) VARIATION SELECTOR-230	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_164)
{
    // E01D6 003F;	
    // (󠇖) VARIATION SELECTOR-231	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_165)
{
    // E01D7 003F;	
    // (󠇗) VARIATION SELECTOR-232	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_166)
{
    // E01D8 003F;	
    // (󠇘) VARIATION SELECTOR-233	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_167)
{
    // E01D9 003F;	
    // (󠇙) VARIATION SELECTOR-234	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01D9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_168)
{
    // E01DA 003F;	
    // (󠇚) VARIATION SELECTOR-235	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_169)
{
    // E01DB 003F;	
    // (󠇛) VARIATION SELECTOR-236	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_170)
{
    // E01DC 003F;	
    // (󠇜) VARIATION SELECTOR-237	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_171)
{
    // E01DD 003F;	
    // (󠇝) VARIATION SELECTOR-238	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DD, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_172)
{
    // E01DE 003F;	
    // (󠇞) VARIATION SELECTOR-239	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_173)
{
    // E01DF 003F;	
    // (󠇟) VARIATION SELECTOR-240	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01DF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_174)
{
    // E01E0 003F;	
    // (󠇠) VARIATION SELECTOR-241	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E0, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_175)
{
    // E01E1 003F;	
    // (󠇡) VARIATION SELECTOR-242	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E1, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_176)
{
    // E01E2 003F;	
    // (󠇢) VARIATION SELECTOR-243	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E2, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_177)
{
    // E01E3 003F;	
    // (󠇣) VARIATION SELECTOR-244	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E3, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_178)
{
    // E01E4 003F;	
    // (󠇤) VARIATION SELECTOR-245	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E4, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_179)
{
    // E01E5 003F;	
    // (󠇥) VARIATION SELECTOR-246	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E5, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_180)
{
    // E01E6 003F;	
    // (󠇦) VARIATION SELECTOR-247	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E6, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_181)
{
    // E01E7 003F;	
    // (󠇧) VARIATION SELECTOR-248	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E7, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_182)
{
    // E01E8 003F;	
    // (󠇨) VARIATION SELECTOR-249	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E8, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_183)
{
    // E01E9 003F;	
    // (󠇩) VARIATION SELECTOR-250	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01E9, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_184)
{
    // E01EA 003F;	
    // (󠇪) VARIATION SELECTOR-251	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EA, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_185)
{
    // E01EB 003F;	
    // (󠇫) VARIATION SELECTOR-252	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EB, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_186)
{
    // E01EC 003F;	
    // (󠇬) VARIATION SELECTOR-253	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EC, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_187)
{
    // E01ED 003F;	
    // (󠇭) VARIATION SELECTOR-254	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01ED, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_188)
{
    // E01EE 003F;	
    // (󠇮) VARIATION SELECTOR-255	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EE, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_189)
{
    // E01EF 003F;	
    // (󠇯) VARIATION SELECTOR-256	[0267 | 0020 | 0002 |]

    uint32_t cps[2] = { 0xE01EF, 0x003F };
    uint32_t const ces[6] = { 0x0267, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 6);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 6))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_190)
{
    // 0332 003F;	
    // (̲) COMBINING LOW LINE	[0267 | 0021 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0332, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0021, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_191)
{
    // 0313 003F;	
    // (̓) COMBINING COMMA ABOVE	[0267 | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0313, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_192)
{
    // 0343 003F;	
    // (̓) COMBINING GREEK KORONIS	[0267 | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0343, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_193)
{
    // 0486 003F;	
    // (҆) COMBINING CYRILLIC PSILI PNEUMATA	[0267 | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0486, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_194)
{
    // 2CF1 003F;	
    // (⳱) COPTIC COMBINING SPIRITUS LENIS	[0267 | 0022 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_195)
{
    // 0314 003F;	
    // (̔) COMBINING REVERSED COMMA ABOVE	[0267 | 0023 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0314, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_196)
{
    // 0485 003F;	
    // (҅) COMBINING CYRILLIC DASIA PNEUMATA	[0267 | 0023 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0485, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_197)
{
    // 2CF0 003F;	
    // (⳰) COPTIC COMBINING SPIRITUS ASPER	[0267 | 0023 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CF0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_198)
{
    // 0301 003F;	
    // (́) COMBINING ACUTE ACCENT	[0267 | 0024 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0301, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_199)
{
    // 0341 003F;	
    // (́) COMBINING ACUTE TONE MARK	[0267 | 0024 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0341, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_200)
{
    // 0954 003F;	
    // (॔) DEVANAGARI ACUTE ACCENT	[0267 | 0024 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0954, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_201)
{
    // 0300 003F;	
    // (̀) COMBINING GRAVE ACCENT	[0267 | 0025 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0300, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_202)
{
    // 0340 003F;	
    // (̀) COMBINING GRAVE TONE MARK	[0267 | 0025 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0340, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_203)
{
    // 0953 003F;	
    // (॓) DEVANAGARI GRAVE ACCENT	[0267 | 0025 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0953, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_204)
{
    // 0306 003F;	
    // (̆) COMBINING BREVE	[0267 | 0026 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0306, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_205)
{
    // 0302 003F;	
    // (̂) COMBINING CIRCUMFLEX ACCENT	[0267 | 0027 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0302, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_206)
{
    // 030C 003F;	
    // (̌) COMBINING CARON	[0267 | 0028 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_207)
{
    // 030A 003F;	
    // (̊) COMBINING RING ABOVE	[0267 | 0029 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_208)
{
    // 0342 003F;	
    // (͂) COMBINING GREEK PERISPOMENI	[0267 | 002A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0342, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_209)
{
    // 0308 003F;	
    // (̈) COMBINING DIAERESIS	[0267 | 002B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0308, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_210)
{
    // 0344 003F;	
    // (̈́) COMBINING GREEK DIALYTIKA TONOS	[0267 | 002B 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0344, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_211)
{
    // 030B 003F;	
    // (̋) COMBINING DOUBLE ACUTE ACCENT	[0267 | 002C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x002C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_212)
{
    // 0303 003F;	
    // (̃) COMBINING TILDE	[0267 | 002D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0303, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_213)
{
    // 0307 003F;	
    // (̇) COMBINING DOT ABOVE	[0267 | 002E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0307, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_214)
{
    // 0338 003F;	
    // (̸) COMBINING LONG SOLIDUS OVERLAY	[0267 | 002F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0338, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x002F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_215)
{
    // 0327 003F;	
    // (̧) COMBINING CEDILLA	[0267 | 0030 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0327, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_216)
{
    // 0328 003F;	
    // (̨) COMBINING OGONEK	[0267 | 0031 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0328, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0031, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_217)
{
    // 0304 003F;	
    // (̄) COMBINING MACRON	[0267 | 0032 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0304, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_218)
{
    // 030D 003F;	
    // (̍) COMBINING VERTICAL LINE ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_219)
{
    // 030E 003F;	
    // (̎) COMBINING DOUBLE VERTICAL LINE ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_220)
{
    // 0312 003F;	
    // (̒) COMBINING TURNED COMMA ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0312, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_221)
{
    // 0315 003F;	
    // (̕) COMBINING COMMA ABOVE RIGHT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0315, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_222)
{
    // 031A 003F;	
    // (̚) COMBINING LEFT ANGLE ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_223)
{
    // 033D 003F;	
    // (̽) COMBINING X ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_224)
{
    // 033E 003F;	
    // (̾) COMBINING VERTICAL TILDE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_225)
{
    // 033F 003F;	
    // (̿) COMBINING DOUBLE OVERLINE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_226)
{
    // 0346 003F;	
    // (͆) COMBINING BRIDGE ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0346, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_227)
{
    // 034A 003F;	
    // (͊) COMBINING NOT TILDE ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_228)
{
    // 034B 003F;	
    // (͋) COMBINING HOMOTHETIC ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_229)
{
    // 034C 003F;	
    // (͌) COMBINING ALMOST EQUAL TO ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_230)
{
    // 0350 003F;	
    // (͐) COMBINING RIGHT ARROWHEAD ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0350, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_231)
{
    // 0351 003F;	
    // (͑) COMBINING LEFT HALF RING ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0351, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_232)
{
    // 0352 003F;	
    // (͒) COMBINING FERMATA	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0352, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_233)
{
    // 0357 003F;	
    // (͗) COMBINING RIGHT HALF RING ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0357, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_234)
{
    // 035B 003F;	
    // (͛) COMBINING ZIGZAG ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_235)
{
    // 035D 003F;	
    // (͝) COMBINING DOUBLE BREVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_236)
{
    // 035E 003F;	
    // (͞) COMBINING DOUBLE MACRON	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_237)
{
    // 0484 003F;	
    // (҄) COMBINING CYRILLIC PALATALIZATION	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0484, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_238)
{
    // 0487 003F;	
    // (҇) COMBINING CYRILLIC POKRYTIE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0487, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_239)
{
    // 0741 003F;	
    // (݁) SYRIAC QUSHSHAYA	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0741, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_240)
{
    // 0745 003F;	
    // (݅) SYRIAC THREE DOTS ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0745, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_241)
{
    // 17CB 003F;	
    // (់) KHMER SIGN BANTOC	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_242)
{
    // 17CC 003F;	
    // (៌) KHMER SIGN ROBAT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_243)
{
    // 17CD 003F;	
    // (៍) KHMER SIGN TOANDAKHIAT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_244)
{
    // 17CE 003F;	
    // (៎) KHMER SIGN KAKABAT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_245)
{
    // 17CF 003F;	
    // (៏) KHMER SIGN AHSDA	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17CF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_246)
{
    // 17D0 003F;	
    // (័) KHMER SIGN SAMYOK SANNYA	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_247)
{
    // 17D1 003F;	
    // (៑) KHMER SIGN VIRIAM	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17D1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_248)
{
    // 17DD 003F;	
    // (៝) KHMER SIGN ATTHACAN	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x17DD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_249)
{
    // 1AB0 003F;	
    // (᪰) COMBINING DOUBLED CIRCUMFLEX ACCENT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_250)
{
    // 1AB1 003F;	
    // (᪱) COMBINING DIAERESIS-RING	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_251)
{
    // 1AB2 003F;	
    // (᪲) COMBINING INFINITY	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_252)
{
    // 1AB3 003F;	
    // (᪳) COMBINING DOWNWARDS ARROW	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_253)
{
    // 1AB4 003F;	
    // (᪴) COMBINING TRIPLE DOT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB4, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_254)
{
    // 1ABB 003F;	
    // (᪻) COMBINING PARENTHESES ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_255)
{
    // 1ABC 003F;	
    // (᪼) COMBINING DOUBLE PARENTHESES ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_256)
{
    // 1DC0 003F;	
    // (᷀) COMBINING DOTTED GRAVE ACCENT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_257)
{
    // 1DC1 003F;	
    // (᷁) COMBINING DOTTED ACUTE ACCENT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_258)
{
    // 1DC3 003F;	
    // (᷃) COMBINING SUSPENSION MARK	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_259)
{
    // 1DC4 003F;	
    // (᷄) COMBINING MACRON-ACUTE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC4, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_260)
{
    // 1DC5 003F;	
    // (᷅) COMBINING GRAVE-MACRON	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_261)
{
    // 1DC6 003F;	
    // (᷆) COMBINING MACRON-GRAVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_262)
{
    // 1DC7 003F;	
    // (᷇) COMBINING ACUTE-MACRON	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_263)
{
    // 1DC8 003F;	
    // (᷈) COMBINING GRAVE-ACUTE-GRAVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_264)
{
    // 1DC9 003F;	
    // (᷉) COMBINING ACUTE-GRAVE-ACUTE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_265)
{
    // 1DCB 003F;	
    // (᷋) COMBINING BREVE-MACRON	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_266)
{
    // 1DCC 003F;	
    // (᷌) COMBINING MACRON-BREVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_267)
{
    // 1DCD 003F;	
    // (᷍) COMBINING DOUBLE CIRCUMFLEX ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_268)
{
    // 1DCE 003F;	
    // (᷎) COMBINING OGONEK ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_269)
{
    // 1DD1 003F;	
    // (᷑) COMBINING UR ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DD1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_270)
{
    // 1DF5 003F;	
    // (᷵) COMBINING UP TACK ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_271)
{
    // 1DF6 003F;	
    // (᷶) COMBINING KAVYKA ABOVE RIGHT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_272)
{
    // 1DF7 003F;	
    // (᷷) COMBINING KAVYKA ABOVE LEFT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_273)
{
    // 1DF8 003F;	
    // (᷸) COMBINING DOT ABOVE LEFT	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_274)
{
    // 1DFB 003F;	
    // (᷻) COMBINING DELETION MARK	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_275)
{
    // 1DFE 003F;	
    // (᷾) COMBINING LEFT ARROWHEAD ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_276)
{
    // 20F0 003F;	
    // (⃰) COMBINING ASTERISK ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20F0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_277)
{
    // 2CEF 003F;	
    // (⳯) COPTIC COMBINING NI ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_278)
{
    // A67C 003F;	
    // (꙼) COMBINING CYRILLIC KAVYKA	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_279)
{
    // A67D 003F;	
    // (꙽) COMBINING CYRILLIC PAYEROK	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA67D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_280)
{
    // 10AE5 003F;	
    // (𐫥) MANICHAEAN ABBREVIATION MARK ABOVE	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_281)
{
    // 1BC9D 003F;	
    // (𛲝) DUPLOYAN THICK LETTER SELECTOR	[0267 | 0033 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0033, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_282)
{
    // 0316 003F;	
    // (̖) COMBINING GRAVE ACCENT BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0316, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_283)
{
    // 0317 003F;	
    // (̗) COMBINING ACUTE ACCENT BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0317, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_284)
{
    // 0318 003F;	
    // (̘) COMBINING LEFT TACK BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0318, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_285)
{
    // 0319 003F;	
    // (̙) COMBINING RIGHT TACK BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0319, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_286)
{
    // 031C 003F;	
    // (̜) COMBINING LEFT HALF RING BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_287)
{
    // 031D 003F;	
    // (̝) COMBINING UP TACK BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_288)
{
    // 031E 003F;	
    // (̞) COMBINING DOWN TACK BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_289)
{
    // 031F 003F;	
    // (̟) COMBINING PLUS SIGN BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_290)
{
    // 0320 003F;	
    // (̠) COMBINING MINUS SIGN BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0320, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_291)
{
    // 0329 003F;	
    // (̩) COMBINING VERTICAL LINE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0329, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_292)
{
    // 032A 003F;	
    // (̪) COMBINING BRIDGE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_293)
{
    // 032B 003F;	
    // (̫) COMBINING INVERTED DOUBLE ARCH BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_294)
{
    // 032C 003F;	
    // (̬) COMBINING CARON BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_295)
{
    // 032F 003F;	
    // (̯) COMBINING INVERTED BREVE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_296)
{
    // 0333 003F;	
    // (̳) COMBINING DOUBLE LOW LINE	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0333, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_297)
{
    // 033A 003F;	
    // (̺) COMBINING INVERTED BRIDGE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_298)
{
    // 033B 003F;	
    // (̻) COMBINING SQUARE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_299)
{
    // 033C 003F;	
    // (̼) COMBINING SEAGULL BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x033C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_300)
{
    // 0347 003F;	
    // (͇) COMBINING EQUALS SIGN BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0347, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_301)
{
    // 0348 003F;	
    // (͈) COMBINING DOUBLE VERTICAL LINE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0348, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_302)
{
    // 0349 003F;	
    // (͉) COMBINING LEFT ANGLE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0349, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_303)
{
    // 034D 003F;	
    // (͍) COMBINING LEFT RIGHT ARROW BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_304)
{
    // 034E 003F;	
    // (͎) COMBINING UPWARDS ARROW BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x034E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_305)
{
    // 0353 003F;	
    // (͓) COMBINING X BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0353, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_306)
{
    // 0354 003F;	
    // (͔) COMBINING LEFT ARROWHEAD BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0354, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_307)
{
    // 0355 003F;	
    // (͕) COMBINING RIGHT ARROWHEAD BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0355, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_308)
{
    // 0356 003F;	
    // (͖) COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0356, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_309)
{
    // 0359 003F;	
    // (͙) COMBINING ASTERISK BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0359, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_310)
{
    // 035A 003F;	
    // (͚) COMBINING DOUBLE RING BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_311)
{
    // 035C 003F;	
    // (͜) COMBINING DOUBLE BREVE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_312)
{
    // 035F 003F;	
    // (͟) COMBINING DOUBLE MACRON BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x035F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_313)
{
    // 0362 003F;	
    // (͢) COMBINING DOUBLE RIGHTWARDS ARROW BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0362, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_314)
{
    // 0742 003F;	
    // (݂) SYRIAC RUKKAKHA	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0742, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_315)
{
    // 0746 003F;	
    // (݆) SYRIAC THREE DOTS BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0746, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_316)
{
    // 0859 003F;	
    // (࡙) MANDAIC AFFRICATION MARK	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0859, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_317)
{
    // 085A 003F;	
    // (࡚) MANDAIC VOCALIZATION MARK	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_318)
{
    // 085B 003F;	
    // (࡛) MANDAIC GEMINATION MARK	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x085B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_319)
{
    // 1AB5 003F;	
    // (᪵) COMBINING X-X BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_320)
{
    // 1AB6 003F;	
    // (᪶) COMBINING WIGGLY LINE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_321)
{
    // 1AB7 003F;	
    // (᪷) COMBINING OPEN MARK BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_322)
{
    // 1AB8 003F;	
    // (᪸) COMBINING DOUBLE OPEN MARK BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_323)
{
    // 1AB9 003F;	
    // (᪹) COMBINING LIGHT CENTRALIZATION STROKE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1AB9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_324)
{
    // 1ABA 003F;	
    // (᪺) COMBINING STRONG CENTRALIZATION STROKE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_325)
{
    // 1ABD 003F;	
    // (᪽) COMBINING PARENTHESES BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_326)
{
    // 1DC2 003F;	
    // (᷂) COMBINING SNAKE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DC2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_327)
{
    // 1DCF 003F;	
    // (᷏) COMBINING ZIGZAG BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DCF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_328)
{
    // 1DD0 003F;	
    // (᷐) COMBINING IS BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DD0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_329)
{
    // 1DF9 003F;	
    // (᷹) COMBINING WIDE INVERTED BRIDGE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DF9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_330)
{
    // 1DFC 003F;	
    // (᷼) COMBINING DOUBLE INVERTED BREVE BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_331)
{
    // 1DFD 003F;	
    // (᷽) COMBINING ALMOST EQUAL TO BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_332)
{
    // 1DFF 003F;	
    // (᷿) COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DFF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_333)
{
    // 20EC 003F;	
    // (⃬) COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_334)
{
    // 20ED 003F;	
    // (⃭) COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20ED, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_335)
{
    // 20EE 003F;	
    // (⃮) COMBINING LEFT ARROW BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_336)
{
    // 20EF 003F;	
    // (⃯) COMBINING RIGHT ARROW BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_337)
{
    // FE27 003F;	
    // (︧) COMBINING LIGATURE LEFT HALF BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE27, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_338)
{
    // 10A0D 003F;	
    // (𐨍) KHAROSHTHI SIGN DOUBLE RING BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A0D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_339)
{
    // 10AE6 003F;	
    // (𐫦) MANICHAEAN ABBREVIATION MARK BELOW	[0267 | 0034 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10AE6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0034, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_340)
{
    // 0336 003F;	
    // (̶) COMBINING LONG STROKE OVERLAY	[0267 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0336, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_341)
{
    // 0337 003F;	
    // (̷) COMBINING SHORT SOLIDUS OVERLAY	[0267 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0337, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_342)
{
    // 20D8 003F;	
    // (⃘) COMBINING RING OVERLAY	[0267 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_343)
{
    // 20D9 003F;	
    // (⃙) COMBINING CLOCKWISE RING OVERLAY	[0267 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20D9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_344)
{
    // 20DA 003F;	
    // (⃚) COMBINING ANTICLOCKWISE RING OVERLAY	[0267 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_345)
{
    // 20E5 003F;	
    // (⃥) COMBINING REVERSE SOLIDUS OVERLAY	[0267 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_346)
{
    // 20EA 003F;	
    // (⃪) COMBINING LEFTWARDS ARROW OVERLAY	[0267 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_347)
{
    // 20EB 003F;	
    // (⃫) COMBINING LONG DOUBLE SOLIDUS OVERLAY	[0267 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20EB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_348)
{
    // 1BC9E 003F;	
    // (𛲞) DUPLOYAN DOUBLE MARK	[0267 | 0035 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1BC9E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0035, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_349)
{
    // 1ABE 003F;	
    // (᪾) COMBINING PARENTHESES OVERLAY	[0267 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1ABE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_350)
{
    // 20DD 003F;	
    // (⃝) COMBINING ENCLOSING CIRCLE	[0267 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_351)
{
    // 20DE 003F;	
    // (⃞) COMBINING ENCLOSING SQUARE	[0267 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_352)
{
    // 20DF 003F;	
    // (⃟) COMBINING ENCLOSING DIAMOND	[0267 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20DF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_353)
{
    // 20E0 003F;	
    // (⃠) COMBINING ENCLOSING CIRCLE BACKSLASH	[0267 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_354)
{
    // 20E2 003F;	
    // (⃢) COMBINING ENCLOSING SCREEN	[0267 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_355)
{
    // 20E3 003F;	
    // (⃣) COMBINING ENCLOSING KEYCAP	[0267 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_356)
{
    // 20E4 003F;	
    // (⃤) COMBINING ENCLOSING UPWARD POINTING TRIANGLE	[0267 | 0036 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20E4, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0036, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_357)
{
    // 3099 003F;	
    // (゙) COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[0267 | 0037 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3099, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0037, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_358)
{
    // FF9E 003F;	
    // (ﾞ) HALFWIDTH KATAKANA VOICED SOUND MARK	[0267 | 0037 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0037, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_359)
{
    // 309A 003F;	
    // (゚) COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[0267 | 0038 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0038, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_360)
{
    // FF9F 003F;	
    // (ﾟ) HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK	[0267 | 0038 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0038, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_361)
{
    // 0335 003F;	
    // (̵) COMBINING SHORT STROKE OVERLAY	[0267 | 0039 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0335, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_362)
{
    // 0305 003F;	
    // (̅) COMBINING OVERLINE	[0267 | 003A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0305, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x003A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_363)
{
    // 0309 003F;	
    // (̉) COMBINING HOOK ABOVE	[0267 | 003B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0309, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_364)
{
    // 030F 003F;	
    // (̏) COMBINING DOUBLE GRAVE ACCENT	[0267 | 003C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x030F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x003C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_365)
{
    // 0310 003F;	
    // (̐) COMBINING CANDRABINDU	[0267 | 003D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0310, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x003D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_366)
{
    // 0311 003F;	
    // (̑) COMBINING INVERTED BREVE	[0267 | 003E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0311, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x003E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_367)
{
    // 031B 003F;	
    // (̛) COMBINING HORN	[0267 | 003F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x031B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x003F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_368)
{
    // 0321 003F;	
    // (̡) COMBINING PALATALIZED HOOK BELOW	[0267 | 0040 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0321, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0040, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_369)
{
    // 0322 003F;	
    // (̢) COMBINING RETROFLEX HOOK BELOW	[0267 | 0041 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0322, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0041, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_370)
{
    // 0323 003F;	
    // (̣) COMBINING DOT BELOW	[0267 | 0042 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0323, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_371)
{
    // 0324 003F;	
    // (̤) COMBINING DIAERESIS BELOW	[0267 | 0043 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0324, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0043, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_372)
{
    // 0325 003F;	
    // (̥) COMBINING RING BELOW	[0267 | 0044 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0325, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0044, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_373)
{
    // 0326 003F;	
    // (̦) COMBINING COMMA BELOW	[0267 | 0045 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0326, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0045, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_374)
{
    // 032D 003F;	
    // (̭) COMBINING CIRCUMFLEX ACCENT BELOW	[0267 | 0046 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_375)
{
    // 032E 003F;	
    // (̮) COMBINING BREVE BELOW	[0267 | 0047 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x032E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0047, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_376)
{
    // 0330 003F;	
    // (̰) COMBINING TILDE BELOW	[0267 | 0048 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0330, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0048, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_377)
{
    // 0331 003F;	
    // (̱) COMBINING MACRON BELOW	[0267 | 0049 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0331, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_378)
{
    // 0334 003F;	
    // ('?') QUESTION MARK	[0267 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_379)
{
    // 0339 003F;	
    // (̹) COMBINING RIGHT HALF RING BELOW	[0267 | 004B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0339, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x004B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_380)
{
    // 0345 003F;	
    // (ͅ) COMBINING GREEK YPOGEGRAMMENI	[0267 | 004C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0345, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_381)
{
    // 0358 003F;	
    // (͘) COMBINING DOT ABOVE RIGHT	[0267 | 004D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0358, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x004D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_382)
{
    // 0360 003F;	
    // (͠) COMBINING DOUBLE TILDE	[0267 | 004E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0360, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_383)
{
    // FE22 003F;	
    // (︢) COMBINING DOUBLE TILDE LEFT HALF	[0267 | 004E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE22, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_384)
{
    // FE29 003F;	
    // (︩) COMBINING TILDE LEFT HALF BELOW	[0267 | 004E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE29, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x004E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_385)
{
    // 0361 003F;	
    // (͡) COMBINING DOUBLE INVERTED BREVE	[0267 | 004F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0361, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x004F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_386)
{
    // FE20 003F;	
    // (︠) COMBINING LIGATURE LEFT HALF	[0267 | 004F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE20, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x004F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_387)
{
    // 0483 003F;	
    // (҃) COMBINING CYRILLIC TITLO	[0267 | 0050 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0483, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0050, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_388)
{
    // FE2E 003F;	
    // (︮) COMBINING CYRILLIC TITLO LEFT HALF	[0267 | 0050 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFE2E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0050, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_389)
{
    // A66F 003F;	
    // (꙯) COMBINING CYRILLIC VZMET	[0267 | 0051 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA66F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0051, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_390)
{
    // 05B0 003F;	
    // (ְ) HEBREW POINT SHEVA	[0267 | 0052 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0052, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_391)
{
    // 05B1 003F;	
    // (ֱ) HEBREW POINT HATAF SEGOL	[0267 | 0053 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0053, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_392)
{
    // 05B2 003F;	
    // (ֲ) HEBREW POINT HATAF PATAH	[0267 | 0054 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0054, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_393)
{
    // 05B3 003F;	
    // (ֳ) HEBREW POINT HATAF QAMATS	[0267 | 0055 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0055, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_394)
{
    // 05B4 003F;	
    // (ִ) HEBREW POINT HIRIQ	[0267 | 0056 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B4, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0056, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_395)
{
    // 05B5 003F;	
    // (ֵ) HEBREW POINT TSERE	[0267 | 0057 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0057, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_396)
{
    // 05B6 003F;	
    // (ֶ) HEBREW POINT SEGOL	[0267 | 0058 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0058, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_397)
{
    // 05B7 003F;	
    // (ַ) HEBREW POINT PATAH	[0267 | 0059 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0059, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_398)
{
    // 05B8 003F;	
    // (ָ) HEBREW POINT QAMATS	[0267 | 005A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x005A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_399)
{
    // 05C7 003F;	
    // (ׇ) HEBREW POINT QAMATS QATAN	[0267 | 005A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x005A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_400)
{
    // 05B9 003F;	
    // (ֹ) HEBREW POINT HOLAM	[0267 | 005B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05B9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_401)
{
    // 05BA 003F;	
    // (ֺ) HEBREW POINT HOLAM HASER FOR VAV	[0267 | 005B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x005B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_402)
{
    // 05BB 003F;	
    // (ֻ) HEBREW POINT QUBUTS	[0267 | 005C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x005C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_403)
{
    // 05C2 003F;	
    // (ׂ) HEBREW POINT SIN DOT	[0267 | 005D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x005D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_404)
{
    // 05C1 003F;	
    // (ׁ) HEBREW POINT SHIN DOT	[0267 | 005E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05C1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x005E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_405)
{
    // 05BC 003F;	
    // (ּ) HEBREW POINT DAGESH OR MAPIQ	[0267 | 005F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x005F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_406)
{
    // 05BF 003F;	
    // (ֿ) HEBREW POINT RAFE	[0267 | 0060 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x05BF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0060, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_407)
{
    // FB1E 003F;	
    // (ﬞ) HEBREW POINT JUDEO-SPANISH VARIKA	[0267 | 0061 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFB1E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0061, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_408)
{
    // 081C 003F;	
    // (ࠜ) SAMARITAN VOWEL SIGN LONG E	[0267 | 0062 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0062, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_409)
{
    // 081D 003F;	
    // (ࠝ) SAMARITAN VOWEL SIGN E	[0267 | 0062 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0062, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_410)
{
    // 081E 003F;	
    // (ࠞ) SAMARITAN VOWEL SIGN OVERLONG AA	[0267 | 0063 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_411)
{
    // 081F 003F;	
    // (ࠟ) SAMARITAN VOWEL SIGN LONG AA	[0267 | 0063 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x081F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_412)
{
    // 0820 003F;	
    // (ࠠ) SAMARITAN VOWEL SIGN AA	[0267 | 0063 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0820, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0063, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_413)
{
    // 0821 003F;	
    // (ࠡ) SAMARITAN VOWEL SIGN OVERLONG A	[0267 | 0064 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0821, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_414)
{
    // 0822 003F;	
    // (ࠢ) SAMARITAN VOWEL SIGN LONG A	[0267 | 0064 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0822, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_415)
{
    // 0823 003F;	
    // (ࠣ) SAMARITAN VOWEL SIGN A	[0267 | 0064 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0823, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0064, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_416)
{
    // 0824 003F;	
    // (‎‎ࠤ‎‎) SAMARITAN MODIFIER LETTER SHORT A	[0267 | 0065 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0824, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0065, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_417)
{
    // 0825 003F;	
    // (ࠥ) SAMARITAN VOWEL SIGN SHORT A	[0267 | 0065 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0825, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0065, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_418)
{
    // 0826 003F;	
    // (ࠦ) SAMARITAN VOWEL SIGN LONG U	[0267 | 0066 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0826, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0066, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_419)
{
    // 0827 003F;	
    // (ࠧ) SAMARITAN VOWEL SIGN U	[0267 | 0066 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0827, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0066, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_420)
{
    // 0828 003F;	
    // (‎‎ࠨ‎‎) SAMARITAN MODIFIER LETTER I	[0267 | 0067 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0828, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_421)
{
    // 0829 003F;	
    // (ࠩ) SAMARITAN VOWEL SIGN LONG I	[0267 | 0067 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0829, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_422)
{
    // 082A 003F;	
    // (ࠪ) SAMARITAN VOWEL SIGN I	[0267 | 0067 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0067, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_423)
{
    // 082B 003F;	
    // (ࠫ) SAMARITAN VOWEL SIGN O	[0267 | 0068 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0068, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_424)
{
    // 082C 003F;	
    // (ࠬ) SAMARITAN VOWEL SIGN SUKUN	[0267 | 0069 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0069, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_425)
{
    // 0818 003F;	
    // (࠘) SAMARITAN MARK OCCLUSION	[0267 | 006A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0818, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x006A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_426)
{
    // 0819 003F;	
    // (࠙) SAMARITAN MARK DAGESH	[0267 | 006B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0819, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x006B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_427)
{
    // 082D 003F;	
    // (࠭) SAMARITAN MARK NEQUDAA	[0267 | 006C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x082D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x006C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_428)
{
    // 064B 003F;	
    // (ً) ARABIC FATHATAN	[0267 | 006D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x006D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_429)
{
    // FE71 003F;	
    // (‎‎ﹱ‎‎) ARABIC TATWEEL WITH FATHATAN ABOVE	[0267 | 006D 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE71, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x006D, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_430)
{
    // FE70 003F;	
    // (‎‎ﹰ‎‎) ARABIC FATHATAN ISOLATED FORM	[0267 | 006D 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE70, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x006D, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_431)
{
    // 08F0 003F;	
    // (ࣰ) ARABIC OPEN FATHATAN	[0267 | 006E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F0, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x006E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_432)
{
    // 08E7 003F;	
    // (ࣧ) ARABIC CURLY FATHATAN	[0267 | 006F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x006F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_433)
{
    // 064C 003F;	
    // (ٌ) ARABIC DAMMATAN	[0267 | 0070 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0070, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_434)
{
    // FE72 003F;	
    // (‎‎ﹲ‎‎) ARABIC DAMMATAN ISOLATED FORM	[0267 | 0070 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE72, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0070, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_435)
{
    // FC5E 003F;	
    // (‎‎ﱞ‎‎) ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM	[0267 | 0070 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5E, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x0070, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_436)
{
    // 08F1 003F;	
    // (ࣱ) ARABIC OPEN DAMMATAN	[0267 | 0071 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F1, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0071, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_437)
{
    // 08E8 003F;	
    // (ࣨ) ARABIC CURLY DAMMATAN	[0267 | 0072 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0072, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_438)
{
    // 064D 003F;	
    // (ٍ) ARABIC KASRATAN	[0267 | 0073 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0073, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_439)
{
    // FE74 003F;	
    // (‎‎ﹴ‎‎) ARABIC KASRATAN ISOLATED FORM	[0267 | 0073 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE74, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0073, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_440)
{
    // FC5F 003F;	
    // (‎‎ﱟ‎‎) ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM	[0267 | 0073 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC5F, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x0073, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_441)
{
    // 08F2 003F;	
    // (ࣲ) ARABIC OPEN KASRATAN	[0267 | 0074 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F2, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0074, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_442)
{
    // 08E9 003F;	
    // (ࣩ) ARABIC CURLY KASRATAN	[0267 | 0075 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0075, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_443)
{
    // 064E 003F;	
    // (َ) ARABIC FATHA	[0267 | 0076 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0076, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_444)
{
    // FE77 003F;	
    // (‎‎ﹷ‎‎) ARABIC FATHA MEDIAL FORM	[0267 | 0076 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE77, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0076, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_445)
{
    // FE76 003F;	
    // (‎‎ﹶ‎‎) ARABIC FATHA ISOLATED FORM	[0267 | 0076 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE76, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0076, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_446)
{
    // FCF2 003F;	
    // (‎‎ﳲ‎‎) ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM	[0267 | 0076 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF2, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x0076, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_447)
{
    // FC60 003F;	
    // (‎‎ﱠ‎‎) ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM	[0267 | 0076 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC60, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x0076, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_448)
{
    // 08E4 003F;	
    // (ࣤ) ARABIC CURLY FATHA	[0267 | 0077 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E4, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0077, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_449)
{
    // 08F4 003F;	
    // (ࣴ) ARABIC FATHA WITH RING	[0267 | 0078 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F4, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0078, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_450)
{
    // 08F5 003F;	
    // (ࣵ) ARABIC FATHA WITH DOT ABOVE	[0267 | 0079 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0079, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_451)
{
    // 064F 003F;	
    // (ُ) ARABIC DAMMA	[0267 | 007A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x064F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_452)
{
    // FE79 003F;	
    // (‎‎ﹹ‎‎) ARABIC DAMMA MEDIAL FORM	[0267 | 007A 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE79, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007A, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_453)
{
    // FE78 003F;	
    // (‎‎ﹸ‎‎) ARABIC DAMMA ISOLATED FORM	[0267 | 007A 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE78, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007A, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_454)
{
    // FCF3 003F;	
    // (‎‎ﳳ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM	[0267 | 007A 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF3, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_455)
{
    // FC61 003F;	
    // (‎‎ﱡ‎‎) ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM	[0267 | 007A 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC61, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x007A, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_456)
{
    // 08E5 003F;	
    // (ࣥ) ARABIC CURLY DAMMA	[0267 | 007B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E5, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_457)
{
    // 08FE 003F;	
    // (ࣾ) ARABIC DAMMA WITH DOT	[0267 | 007C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FE, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_458)
{
    // 0650 003F;	
    // (ِ) ARABIC KASRA	[0267 | 007D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0650, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_459)
{
    // FE7B 003F;	
    // (‎‎ﹻ‎‎) ARABIC KASRA MEDIAL FORM	[0267 | 007D 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007D, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_460)
{
    // FE7A 003F;	
    // (‎‎ﹺ‎‎) ARABIC KASRA ISOLATED FORM	[0267 | 007D 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007D, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_461)
{
    // FCF4 003F;	
    // (‎‎ﳴ‎‎) ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM	[0267 | 007D 0080 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCF4, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_462)
{
    // FC62 003F;	
    // (‎‎ﱢ‎‎) ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM	[0267 | 007D 0080 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC62, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x007D, 0x0080, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_463)
{
    // 08E6 003F;	
    // (ࣦ) ARABIC CURLY KASRA	[0267 | 007E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_464)
{
    // 08F6 003F;	
    // (ࣶ) ARABIC KASRA WITH DOT BELOW	[0267 | 007F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F6, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x007F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_465)
{
    // 0651 003F;	
    // (ّ) ARABIC SHADDA	[0267 | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0651, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_466)
{
    // 0AFB 003F;	
    // (ૻ) GUJARATI SIGN SHADDA	[0267 | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_467)
{
    // 11237 003F;	
    // (𑈷) KHOJKI SIGN SHADDA	[0267 | 0080 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11237, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0080, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_468)
{
    // FE7D 003F;	
    // (‎‎ﹽ‎‎) ARABIC SHADDA MEDIAL FORM	[0267 | 0080 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0080, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_469)
{
    // FE7C 003F;	
    // (‎‎ﹼ‎‎) ARABIC SHADDA ISOLATED FORM	[0267 | 0080 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0080, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_470)
{
    // FC63 003F;	
    // (‎‎ﱣ‎‎) ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM	[0267 | 0080 0098 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC63, 0x003F };
    uint32_t const ces[10] = { 0x0267, 0x0000, 0x0080, 0x0098, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_471)
{
    // 0652 003F;	
    // (ْ) ARABIC SUKUN	[0267 | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0652, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_472)
{
    // 0AFA 003F;	
    // (ૺ) GUJARATI SIGN SUKUN	[0267 | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_473)
{
    // 1123E 003F;	
    // (𑈾) KHOJKI SIGN SUKUN	[0267 | 0081 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1123E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0081, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_474)
{
    // FE7F 003F;	
    // (‎‎ﹿ‎‎) ARABIC SUKUN MEDIAL FORM	[0267 | 0081 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFE7F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0081, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_475)
{
    // FE7E 003F;	
    // (‎‎ﹾ‎‎) ARABIC SUKUN ISOLATED FORM	[0267 | 0081 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFE7E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0081, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_476)
{
    // 0653 003F;	
    // (ٓ) ARABIC MADDAH ABOVE	[0267 | 0082 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0653, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_477)
{
    // 0AFC 003F;	
    // (ૼ) GUJARATI SIGN MADDAH	[0267 | 0082 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0AFC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0082, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_478)
{
    // 0654 003F;	
    // (ٔ) ARABIC HAMZA ABOVE	[0267 | 0083 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0654, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0083, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_479)
{
    // 0655 003F;	
    // (ٕ) ARABIC HAMZA BELOW	[0267 | 0084 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0655, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0084, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_480)
{
    // 065F 003F;	
    // (ٟ) ARABIC WAVY HAMZA BELOW	[0267 | 0085 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065F, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0085, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_481)
{
    // 0656 003F;	
    // (ٖ) ARABIC SUBSCRIPT ALEF	[0267 | 0086 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0656, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0086, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_482)
{
    // 0657 003F;	
    // (ٗ) ARABIC INVERTED DAMMA	[0267 | 0087 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0657, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0087, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_483)
{
    // 0658 003F;	
    // (٘) ARABIC MARK NOON GHUNNA	[0267 | 0088 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0658, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0088, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_484)
{
    // 08FF 003F;	
    // (ࣿ) ARABIC MARK SIDEWAYS NOON GHUNNA	[0267 | 0089 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FF, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0089, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_485)
{
    // 0659 003F;	
    // (ٙ) ARABIC ZWARAKAY	[0267 | 008A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0659, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x008A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_486)
{
    // 065A 003F;	
    // (ٚ) ARABIC VOWEL SIGN SMALL V ABOVE	[0267 | 008B 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065A, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x008B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_487)
{
    // 065B 003F;	
    // (ٛ) ARABIC VOWEL SIGN INVERTED SMALL V ABOVE	[0267 | 008C 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065B, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x008C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_488)
{
    // 065C 003F;	
    // (ٜ) ARABIC VOWEL SIGN DOT BELOW	[0267 | 008D 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065C, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x008D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_489)
{
    // 065D 003F;	
    // (ٝ) ARABIC REVERSED DAMMA	[0267 | 008E 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065D, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x008E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_490)
{
    // 065E 003F;	
    // (ٞ) ARABIC FATHA WITH TWO DOTS	[0267 | 008F 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x065E, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x008F, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_491)
{
    // 08E3 003F;	
    // (ࣣ) ARABIC TURNED DAMMA BELOW	[0267 | 0090 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08E3, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0090, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_492)
{
    // 08F7 003F;	
    // (ࣷ) ARABIC LEFT ARROWHEAD ABOVE	[0267 | 0091 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F7, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0091, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_493)
{
    // 08F8 003F;	
    // (ࣸ) ARABIC RIGHT ARROWHEAD ABOVE	[0267 | 0092 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F8, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0092, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_494)
{
    // 08FD 003F;	
    // (ࣽ) ARABIC RIGHT ARROWHEAD ABOVE WITH DOT	[0267 | 0093 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FD, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0093, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_495)
{
    // 08FB 003F;	
    // (ࣻ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE	[0267 | 0094 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FB, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0094, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_496)
{
    // 08FC 003F;	
    // (ࣼ) ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT	[0267 | 0095 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FC, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0095, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_497)
{
    // 08F9 003F;	
    // (ࣹ) ARABIC LEFT ARROWHEAD BELOW	[0267 | 0096 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08F9, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0096, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_498)
{
    // 08FA 003F;	
    // (ࣺ) ARABIC RIGHT ARROWHEAD BELOW	[0267 | 0097 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08FA, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0097, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_008_499)
{
    // 0670 003F;	
    // (ٰ) ARABIC LETTER SUPERSCRIPT ALEF	[0267 | 0098 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0670, 0x003F };
    uint32_t const ces[8] = { 0x0267, 0x0000, 0x0098, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

